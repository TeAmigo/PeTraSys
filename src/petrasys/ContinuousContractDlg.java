
/*
 * ContinuousContractDlg.java
 *
 * Created on Jan 20, 2010, 5:34:54 PM
 */
package petrasys;

import petrasys.connections.HistoricalPriceDataDownloader;
//import com.jsystemtrader.platform.model.Dispatcher;
//import com.jsystemtrader.platform.model.JSystemTraderException;
//import com.jsystemtrader.platform.quote.BarSize;
//import com.jsystemtrader.platform.util.ContractFactory;
//import com.jsystemtrader.platform.util.MessageDialog;
import java.awt.Cursor;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import petrasys.entities.FuturesContractDetails;
import petrasys.utils.DBops;
import petrasys.utils.DateRenderer;
import petrasys.utils.MsgBox;

/**
 * Created on Jan 20, 2010, 5:34:54 PM
 * For generating a continuous contract based on the expiry of various contracts
 * with same underlying.
 * @author rickcharon
 */
public class ContinuousContractDlg extends javax.swing.JDialog {

  Connection conn;
  //DBops dbops;

  /** Creates new form ContinuousContractDlg
   * @param parent
   * @param modal
   */
  public ContinuousContractDlg(java.awt.Frame parent, boolean modal) {
    super(parent, modal);
    conn = DBops.setuptradesConnection();
    initComponents();
    guard = false;
  }

  public ContinuousContractDlg(JFrame parent) {

    super(parent, true);
    initComponents();
    guard = false;
  }

  private DateRenderer getDateRenderer() {
    return new DateRenderer(new SimpleDateFormat("MM/dd/yy hh:mm"));
  }

  private Vector<String> getDistinctULs() {
    Vector<String> vecOut = new Vector();
    try {
      PreparedStatement stmtForResults =
              conn.prepareStatement("SELECT distinct symbol FROM futuresContractDetails");
      ResultSet res = stmtForResults.executeQuery();
      while (res.next()) {
        vecOut.add(res.getString(1));
      }
      stmtForResults.close();
    } catch (SQLException ex) {
      Logger.getLogger(ContinuousContractDlg.class.getName()).log(Level.SEVERE, null, ex);
    } finally {
      return vecOut;
    }
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

    TradingPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("TradingPU").createEntityManager();
    futuresContractDetailsQuery = java.beans.Beans.isDesignTime() ? null : TradingPUEntityManager.createQuery("SELECT f FROM FuturesContractDetails f");
    futuresContractDetailsList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(futuresContractDetailsQuery.getResultList());
    list1 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : futuresContractDetailsQuery.getResultList();
    jScrollPane1 = new javax.swing.JScrollPane();
    ContractInfoTable = new javax.swing.JTable();
    onlyActiveButton = new javax.swing.JButton();
    GetNewULbutton = new javax.swing.JButton();
    redisplayAllButton = new javax.swing.JButton();
    downloadActiveButton = new javax.swing.JButton();
    noConnectCheckBox = new javax.swing.JCheckBox();
    ULComboBox = new javax.swing.JComboBox(getDistinctULs());
    jLabel1 = new javax.swing.JLabel();
    onlyThisULButton = new javax.swing.JButton();
    setDatesButton = new javax.swing.JButton();
    testButton = new javax.swing.JButton();
    downloadWaitLabel = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle("Continuous Contract Setup");
    addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowClosing(java.awt.event.WindowEvent evt) {
        formWindowClosing(evt);
      }
      public void windowOpened(java.awt.event.WindowEvent evt) {
        formWindowOpened(evt);
      }
    });

    jScrollPane1.setFont(new java.awt.Font("DejaVu Sans", 0, 14));

    ContractInfoTable.getTableHeader().setFont(new java.awt.Font("DejaVu Sans", 0, 18));
    ContractInfoTable.setAutoCreateRowSorter(true);
    ContractInfoTable.setFont(new java.awt.Font("DejaVu Sans", 0, 18));
    ContractInfoTable.setColumnSelectionAllowed(true);
    ContractInfoTable.setName("ContinuousContractSetup"); // NOI18N
    ContractInfoTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

    org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, futuresContractDetailsList, ContractInfoTable);
    org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${active}"));
    columnBinding.setColumnName("Active");
    columnBinding.setColumnClass(Boolean.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${futuresContractDetailsPK.symbol}"));
    columnBinding.setColumnName("Symbol");
    columnBinding.setColumnClass(String.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${futuresContractDetailsPK.expiry}"));
    columnBinding.setColumnName("Expiry");
    columnBinding.setColumnClass(Integer.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${beginDate}"));
    columnBinding.setColumnName("Begin Date");
    columnBinding.setColumnClass(java.util.Date.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${endDate}"));
    columnBinding.setColumnName("End Date");
    columnBinding.setColumnClass(java.util.Date.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${multiplier}"));
    columnBinding.setColumnName("Multiplier");
    columnBinding.setColumnClass(Integer.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${exchange}"));
    columnBinding.setColumnName("Exchange");
    columnBinding.setColumnClass(String.class);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${minTick}"));
    columnBinding.setColumnName("Min Tick");
    columnBinding.setColumnClass(Double.class);
    bindingGroup.addBinding(jTableBinding);
    jTableBinding.bind();
    jScrollPane1.setViewportView(ContractInfoTable);
    ContractInfoTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    ContractInfoTable.getColumnModel().getColumn(1).setMinWidth(5);
    ContractInfoTable.getColumnModel().getColumn(1).setPreferredWidth(40);
    ContractInfoTable.getColumnModel().getColumn(3).setCellRenderer(getDateRenderer());
    ContractInfoTable.getColumnModel().getColumn(4).setCellRenderer(getDateRenderer());

    onlyActiveButton.setText("Display Only Active");
    onlyActiveButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        onlyActiveButtonActionPerformed(evt);
      }
    });

    GetNewULbutton.setText("GetNewUL");
    GetNewULbutton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        GetNewULbuttonActionPerformed(evt);
      }
    });

    redisplayAllButton.setText("ReDisplay All");
    redisplayAllButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        redisplayAllButtonActionPerformed(evt);
      }
    });

    downloadActiveButton.setText("Download All Displayed");
    downloadActiveButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        downloadActiveButtonActionPerformed(evt);
      }
    });

    noConnectCheckBox.setText("No Connect");

    ULComboBox.setBackground(new java.awt.Color(255, 250, 246));

    jLabel1.setText("ULs Present:");

    onlyThisULButton.setText("Only This UL");
    onlyThisULButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        onlyThisULButtonActionPerformed(evt);
      }
    });

    setDatesButton.setText("setDatesForThisUL");
    setDatesButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        setDatesButtonActionPerformed(evt);
      }
    });

    testButton.setText("TEST");
    testButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        testButtonActionPerformed(evt);
      }
    });

    downloadWaitLabel.setFont(new java.awt.Font("DejaVu Sans", 1, 18));
    downloadWaitLabel.setForeground(new java.awt.Color(249, 6, 6));
    downloadWaitLabel.setText("                                                  ");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1291, Short.MAX_VALUE)
      .addGroup(layout.createSequentialGroup()
        .addGap(23, 23, 23)
        .addComponent(onlyActiveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addComponent(redisplayAllButton)
        .addGap(18, 18, 18)
        .addComponent(downloadActiveButton)
        .addGap(18, 18, 18)
        .addComponent(GetNewULbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(440, 440, 440)
        .addComponent(testButton)
        .addGap(34, 34, 34))
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(noConnectCheckBox)
        .addGap(27, 27, 27)
        .addComponent(jLabel1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(ULComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addComponent(onlyThisULButton)
        .addGap(18, 18, 18)
        .addComponent(setDatesButton)
        .addGap(28, 28, 28)
        .addComponent(downloadWaitLabel)
        .addContainerGap(239, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(5, 5, 5)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(ULComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel1)
          .addComponent(noConnectCheckBox)
          .addComponent(onlyThisULButton)
          .addComponent(setDatesButton)
          .addComponent(downloadWaitLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(26, 26, 26)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
              .addComponent(onlyActiveButton)
              .addComponent(redisplayAllButton)
              .addComponent(downloadActiveButton)
              .addComponent(GetNewULbutton)))
          .addGroup(layout.createSequentialGroup()
            .addGap(31, 31, 31)
            .addComponent(testButton)))
        .addContainerGap(54, Short.MAX_VALUE))
    );

    bindingGroup.bind();

    pack();
  }// </editor-fold>//GEN-END:initComponents

//   private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
//      int[] selected = masterTable.getSelectedRows();
//      List<petrasys.FuturesContractDetails> toRemove = new ArrayList<petrasys.FuturesContractDetails>(selected.length);
//      for (int idx = 0; idx < selected.length; idx++) {
//        petrasys.FuturesContractDetails f = list.get(masterTable.convertRowIndexToModel(selected[idx]));
//        toRemove.add(f);
//        entityManager.remove(f);
//      }
//      list.removeAll(toRemove);
//    }
    private void onlyActiveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onlyActiveButtonActionPerformed
      List<petrasys.entities.FuturesContractDetails> toRemove = new ArrayList<petrasys.entities.FuturesContractDetails>(ContractInfoTable.getRowCount());

      for (int rownum = 0; rownum < ContractInfoTable.getRowCount(); rownum++) {
        if (((Boolean) ContractInfoTable.getValueAt(rownum, 0)) == false) {
          //((JTableBinding) ContractInfoTable.getModel()).removeRow(rownum);
          FuturesContractDetails c = futuresContractDetailsList.get(ContractInfoTable.convertRowIndexToModel(rownum));
          toRemove.add(c);
          //TradingPUEntityManager.remove(c);
//          Object obj = ContractInfoTable.getModel().getClass();
//          int i = 1;
//          org.jdesktop.swingbinding.JTableBinding$BindingTableModel
        }
      }
      futuresContractDetailsList.removeAll(toRemove);
      int l = futuresContractDetailsList.size();
      this.repaint();
    }//GEN-LAST:event_onlyActiveButtonActionPerformed

    private void GetNewULbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GetNewULbuttonActionPerformed
      new ContractInfoDialog(null).setVisible(true);
    }//GEN-LAST:event_GetNewULbuttonActionPerformed

  private void testButtonActionPerformedOrig(java.awt.event.ActionEvent evt) {
    List<petrasys.entities.FuturesContractDetails> testList =
            TradingPUEntityManager.createNamedQuery("FuturesContractDetails.findAll").getResultList();
    int l = testList.size();
    testList = TradingPUEntityManager.createNamedQuery("FuturesContractDetails.findBySymbol").setParameter("symbol", "ZW").getResultList();
    l = testList.size();
    testList = TradingPUEntityManager.createNamedQuery("FuturesContractDetails.findByActive").setParameter("active", true).getResultList();
    l = testList.size();
    futuresContractDetailsList.clear();
    futuresContractDetailsList.addAll(testList);
    l = futuresContractDetailsList.size();
    l += 1;
  }

    private void redisplayAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redisplayAllButtonActionPerformed
      futuresContractDetailsList.clear();
      int l = futuresContractDetailsList.size();

      List<petrasys.entities.FuturesContractDetails> testList =
              TradingPUEntityManager.createNamedQuery("FuturesContractDetails.findAll").getResultList();
      futuresContractDetailsList.addAll(testList);
      l = futuresContractDetailsList.size();
      try {
        Connection con = DBops.setuptradesConnection();
        PreparedStatement pstmt = DBops.getActiveContracts(con);
        ResultSet res = pstmt.executeQuery();
        int j = 3;
      } catch (SQLException ex) {
        MsgBox.err2(ex);
      }
      this.repaint();
    }//GEN-LAST:event_redisplayAllButtonActionPerformed
  private boolean guard;

  private synchronized void blockOnGuard() {
    //This guard only loops once for each special event, which may not
    //be the event we're waiting for.
    while (guard) {
      try {
        wait();
      } catch (InterruptedException e) {
      }
    }
  }

  public synchronized void releaseGuard() {
    guard = false;
    notifyAll();
  }

  public void DownloadWaitLabelSetText(String text) {
    downloadWaitLabel.setText(text);
    downloadWaitLabel.validate();
  }

    private void downloadActiveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadActiveButtonActionPerformed
      try {
        HistoricalPriceDataDownloader histDownloader =
                new HistoricalPriceDataDownloader(this, futuresContractDetailsList, ContractInfoTable);
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        Thread thread = new Thread(histDownloader);
        thread.setName("ContContHist");
        thread.start();
        thread.join();
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
      } catch (Exception ex) {
        MsgBox.err2(ex);
      }
    }//GEN-LAST:event_downloadActiveButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
      try {
        conn.close();
        dispose();


      } catch (SQLException ex) {
        MsgBox.err2(ex);


      }
    }//GEN-LAST:event_formWindowClosing

    private void onlyThisULButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onlyThisULButtonActionPerformed
      List<petrasys.entities.FuturesContractDetails> toRemove = new ArrayList<petrasys.entities.FuturesContractDetails>(ContractInfoTable.getRowCount());
      String curl = (String) ULComboBox.getSelectedItem();



      for (int rownum = 0; rownum
              < ContractInfoTable.getRowCount(); rownum++) {
        int comp = curl.compareTo((String) ContractInfoTable.getValueAt(rownum, 1));


        if (comp != 0) {
          //((JTableBinding) ContractInfoTable.getModel()).removeRow(rownum);
          FuturesContractDetails c = futuresContractDetailsList.get(ContractInfoTable.convertRowIndexToModel(rownum));
          toRemove.add(c);


        }
      }
      futuresContractDetailsList.removeAll(toRemove);


      int l = futuresContractDetailsList.size();


      this.repaint();
    }//GEN-LAST:event_onlyThisULButtonActionPerformed

    private void setDatesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setDatesButtonActionPerformed
      /*
       * rpc - 2/20/10 11:16 AM Going to attempt to set the begin and end date for a years worth of contracts
       */
      String curl = (String) ULComboBox.getSelectedItem();
      ExpiryDownloadSetup eds = new ExpiryDownloadSetup(curl);
      eds.setVisible(true);
//      Calendar cal = Calendar.getInstance();
//
//      SimpleDateFormat expiryDate = new SimpleDateFormat("yyyyMMdd");
//      Date today = new Date();
//      String strToday = expiryDate.format(today);
//      cal.setTime(today);
//      cal.add(Calendar.DATE, 8);
//      Date expiration = cal.getTime();
//      String str8out = expiryDate.format(expiration);
//      cal.setTime(today);
//      cal.add(Calendar.DATE, -365);
//      Date yearAgo = cal.getTime();
//      String strYearAgo = expiryDate.format(yearAgo);
//      PreparedStatement stmtForResults;
//
//
//      try {
//        stmtForResults = conn.prepareStatement(
//                "select * from `futuresContractDetails` where `symbol`='" + curl
//                + "' and `expiry` > " + strYearAgo
//                + " and `expiry` <= (SELECT min(`expiry`) FROM `futuresContractDetails` "
//                + "WHERE `symbol`='GBP' and `expiry` > " + str8out + ") order by `expiry`");
//
//        ResultSet res = stmtForResults.executeQuery();
//
//
//        int curExpiry;
//
//
//        while (res.next()) {
//          curExpiry = res.getInt(2);
//
//
//          int i = 1;
//          // rpc - TODO:2/20/10 12:44 PM Left off here, have the correct rows, now need to set dates,
//
//
//
//        }
//
//      } catch (SQLException ex) {
//        Logger.getLogger(ContinuousContractDlg.class.getName()).log(Level.SEVERE, null, ex);
//      }

    }//GEN-LAST:event_setDatesButtonActionPerformed

    private void testButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testButtonActionPerformed
//      DownloadingWaitDlg dwd = new DownloadingWaitDlg(this, false);
//      dwd.setVisible(true);
      try {
        HistoricalPriceDataDownloader histDownloader =
                new HistoricalPriceDataDownloader(this, futuresContractDetailsList, ContractInfoTable);
        Thread thread = new Thread(histDownloader);
        thread.setName("ContContHist");
        thread.start();
        //blockOnGuard();
        thread.join();


        int i = 2;


      } catch (Exception ex) {
        MsgBox.err2(ex);


      }
    }//GEN-LAST:event_testButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
      setLocationRelativeTo(null);
    }//GEN-LAST:event_formWindowOpened
  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {

      @Override
      public void run() {
        ContinuousContractDlg dialog = new ContinuousContractDlg(new javax.swing.JFrame(), false);
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {

          @Override
          public void windowClosing(java.awt.event.WindowEvent e) {
            System.exit(0);




          }
        });
        dialog.setVisible(true);




      }
    });




  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JTable ContractInfoTable;
  private javax.swing.JButton GetNewULbutton;
  private javax.persistence.EntityManager TradingPUEntityManager;
  private javax.swing.JComboBox ULComboBox;
  private javax.swing.JButton downloadActiveButton;
  private javax.swing.JLabel downloadWaitLabel;
  private java.util.List<petrasys.entities.FuturesContractDetails> futuresContractDetailsList;
  private javax.persistence.Query futuresContractDetailsQuery;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JScrollPane jScrollPane1;
  private java.util.List list1;
  private javax.swing.JCheckBox noConnectCheckBox;
  private javax.swing.JButton onlyActiveButton;
  private javax.swing.JButton onlyThisULButton;
  private javax.swing.JButton redisplayAllButton;
  private javax.swing.JButton setDatesButton;
  private javax.swing.JButton testButton;
  private org.jdesktop.beansbinding.BindingGroup bindingGroup;
  // End of variables declaration//GEN-END:variables

  public void persist(Object object) {
    TradingPUEntityManager.getTransaction().begin();




    try {
      TradingPUEntityManager.persist(object);
      TradingPUEntityManager.getTransaction().commit();




    } catch (Exception e) {
      e.printStackTrace();
      TradingPUEntityManager.getTransaction().rollback();




    } finally {
      TradingPUEntityManager.close();


    }
  }
}
