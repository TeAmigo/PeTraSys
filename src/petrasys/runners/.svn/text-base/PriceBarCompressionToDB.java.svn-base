/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PriceBarCompressionToDB.java
 *
 * Created on Apr 18, 2010, 1:11:21 PM
 */
package petrasys.runners;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import org.apache.commons.math.stat.descriptive.SummaryStatistics;
import org.apache.commons.math.stat.regression.SimpleRegression;
import petrasys.PeTraSys;
import petrasys.instruments.PriceBar;
import petrasys.instruments.PriceBars;
import petrasys.utils.DBops;
import petrasys.utils.MsgBox;

/**
 *
 * @author rickcharon
 */
public class PriceBarCompressionToDB extends javax.swing.JFrame {

  Date beginDate = null, endDate = null;
  String symbol = null;
  List<PriceBar> pds = null;
  SummaryStatistics ss = null;
  SimpleRegression sr = null;
  PriceBars priceDatas = null; //, compressedPriceDatas = null;
  String tableName;
  int compressionFactor;
  int multiplier, magnifier;

  /** Creates new form PriceBarCompressionToDB */
  public PriceBarCompressionToDB() {
    initComponents();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    compressionFactorText = new javax.swing.JTextField();
    jLabel1 = new javax.swing.JLabel();
    ulTextField = new javax.swing.JTextField();
    jLabel2 = new javax.swing.JLabel();
    goButton = new javax.swing.JButton();
    jLabel3 = new javax.swing.JLabel();
    compressAllRadioButton = new javax.swing.JRadioButton();
    processingTextField = new javax.swing.JTextField();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Compress PriceBars and Put in DB");
    addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowOpened(java.awt.event.WindowEvent evt) {
        formWindowOpened(evt);
      }
    });

    compressionFactorText.setFont(new java.awt.Font("DejaVu Sans", 1, 18));
    compressionFactorText.setText("240");

    jLabel1.setFont(new java.awt.Font("DejaVu Sans", 1, 18));
    jLabel1.setText("UL data to Compress:");

    ulTextField.setFont(new java.awt.Font("DejaVu Sans", 1, 18));
    ulTextField.setText("ZS");

    jLabel2.setFont(new java.awt.Font("DejaVu Sans", 1, 18));
    jLabel2.setText("Compression Factor:");

    goButton.setFont(new java.awt.Font("DejaVu Sans", 1, 18));
    goButton.setText("GO");
    goButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        goButtonActionPerformed(evt);
      }
    });

    jLabel3.setFont(new java.awt.Font("DejaVu Sans", 1, 18));
    jLabel3.setText("OR");

    compressAllRadioButton.setFont(new java.awt.Font("DejaVu Sans", 1, 18));
    compressAllRadioButton.setText("compressAll");

    processingTextField.setText("jTextField1");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addGap(82, 82, 82)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createSequentialGroup()
                .addGap(109, 109, 109)
                .addComponent(goButton))
              .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addComponent(ulTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
              .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(26, 26, 26)
                .addComponent(compressionFactorText, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE))))
          .addGroup(layout.createSequentialGroup()
            .addGap(92, 92, 92)
            .addComponent(jLabel3)
            .addGap(37, 37, 37)
            .addComponent(compressAllRadioButton))
          .addGroup(layout.createSequentialGroup()
            .addGap(43, 43, 43)
            .addComponent(processingTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(34, 34, 34)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1)
          .addComponent(ulTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(16, 16, 16)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel3)
          .addComponent(compressAllRadioButton))
        .addGap(18, 18, 18)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel2)
          .addComponent(compressionFactorText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addComponent(goButton)
        .addGap(18, 18, 18)
        .addComponent(processingTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(39, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void doASymbol() {
    processingTextField.setText("Processing " + symbol + " ....");
    processingTextField.validate();
    try {
      ResultSet mmres = DBops.MultiplierAndMagnifier(symbol).executeQuery();
      if (mmres.next()) {
        multiplier = mmres.getInt(1);
        magnifier = mmres.getInt(2);
      }
      ResultSet res = DBops.minMaxDatesBySym(symbol).executeQuery();
      if (res.next()) {
        beginDate = res.getTimestamp(1);
        endDate = res.getTimestamp(2);
      }

      pds = DBops.getPriceDatas(symbol, beginDate, endDate, magnifier, multiplier);
      priceDatas = new PriceBars(pds, symbol, beginDate, endDate);
      priceDatas = priceDatas.compressMinuteBars(compressionFactor);
      resultsToDB();
      int j = 3;
    } catch (Exception ex) {
      MsgBox.err2(ex);
    }finally {
      processingTextField.setText("Done with " + symbol + ".");
      processingTextField.validate();
    }
  }

  private void doAllSymbols() {
    try {
      ResultSet res = DBops.distinctSymsProc().executeQuery();
      while (res.next()) {
        symbol = res.getString("symbol");
        doASymbol();
      }
      res.close();
    } catch (SQLException sqlex) {
      System.err.println("SQLException: " + sqlex.getMessage());
    }
  }

    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
      compressionFactor = Integer.parseInt(compressionFactorText.getText());
      if (compressAllRadioButton.isSelected()) {
        doAllSymbols();
      } else {
        symbol = ulTextField.getText();
        doASymbol();
      }
}//GEN-LAST:event_goButtonActionPerformed

  private void resultsToDB() {
    tableName = DBops.createCompressionTable(compressionFactor);
    PreparedStatement stmtForResults = DBops.insertIntoCompressionTable(tableName);
    int size = priceDatas.size();
    PriceBar priceBar;
    try {
      for (int idx = 0; idx < size; idx++) {
        priceBar = priceDatas.getDataAt(idx);
        java.sql.Timestamp dateIn = new java.sql.Timestamp(priceBar.getDate());
        stmtForResults.setString(1, priceDatas.getSymbol());
        stmtForResults.setTimestamp(2, dateIn);
        stmtForResults.setDouble(3, priceBar.getOpen());
        stmtForResults.setDouble(4, priceBar.getHigh());
        stmtForResults.setDouble(5, priceBar.getLow());
        stmtForResults.setDouble(6, priceBar.getClose());
        stmtForResults.setLong(7, priceBar.getVolume());
        stmtForResults.addBatch();
      }
      int[] updateCounts = stmtForResults.executeBatch();
      stmtForResults.close();
    } catch (SQLException ex) {
      JOptionPane.showMessageDialog(null, ex.getMessage(), "SQLException", JOptionPane.ERROR_MESSAGE);
    }

  }

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
      setLocationRelativeTo(null);
    }//GEN-LAST:event_formWindowOpened

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {

      public void run() {
        new PriceBarCompressionToDB().setVisible(true);
      }
    });
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JRadioButton compressAllRadioButton;
  private javax.swing.JTextField compressionFactorText;
  private javax.swing.JButton goButton;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JTextField processingTextField;
  private javax.swing.JTextField ulTextField;
  // End of variables declaration//GEN-END:variables
}
