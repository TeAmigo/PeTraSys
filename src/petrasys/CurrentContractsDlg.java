/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ContinuousContractDlg.java
 *
 * Created on Jan 20, 2010, 5:34:54 PM
 */
package petrasys;

//import com.jsystemtrader.platform.model.JSystemTraderException;
//import java.sql.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import petrasys.instruments.Instrument;
import petrasys.utils.DBops;
import petrasys.utils.DateOps;
import petrasys.utils.DateRenderer;
import petrasys.utils.ResultSetTableModelFactory;

/**
 *
 * @author rickcharon
 */
public class CurrentContractsDlg extends javax.swing.JDialog {

  Connection conn;
  //DBops dbops;
  ResultSetTableModelFactory tmFactory;
  String currentSymbol;
  Instrument newInstrument = null;

  public Instrument getNewInstrument() {
    return newInstrument;
  }

  /**
   * rpc - 2/24/10 2:12 PM
   * @return the TableModel for jTable
   * @see TableModel
   */
  public TableModel getCurConTabModel() {
    TableModel tm = null;
    int expTarget = DateOps.expiryFormatInt(DateOps.addOrSubractDaysFromDate(new Date(), 8));
    try {
      String curCons = "SELECT `symbol`,`expiry`,`multiplier`,`priceMagnifier`,`exchange`,`fullName`"
              + " FROM `futuresContractDetails` WHERE `expiry`> "
              + expTarget + " and `symbol`='" + currentSymbol + "'";
      tm = tmFactory.getResultSetTableModel(curCons);
    } catch (SQLException ex) {
      JOptionPane.showMessageDialog(this, "SQL Exception", "getCurConTabModel()", JOptionPane.ERROR_MESSAGE);
    } finally {
      return tm;
    }
  }

  /** Creates new form ContinuousContractDlg */
  public CurrentContractsDlg(java.awt.Frame parent, boolean modal, String smyIn) {
    super(parent, modal);
    //dbops = new DBops();
    currentSymbol = smyIn;
    conn = DBops.setuptradesConnection();
    tmFactory = new ResultSetTableModelFactory();
    initComponents();
    guard = false;
  }

  public CurrentContractsDlg(JFrame parent) {
    super(parent, true);
    initComponents();
    guard = false;
  }

  private DateRenderer getDateRenderer() {
    return new DateRenderer(new SimpleDateFormat("MM/dd/yy hh:mm"));
  }

  private Vector<String> getDistinctULs() {
    Vector<String> vecOut = new Vector();
    try {
      PreparedStatement stmtForResults =
              conn.prepareStatement("SELECT distinct `symbol` FROM `futuresContractDetails`");
      ResultSet res = stmtForResults.executeQuery();
      while (res.next()) {
        vecOut.add(res.getString(1));
      }
      stmtForResults.close();
    } catch (SQLException ex) {
      Logger.getLogger(CurrentContractsDlg.class.getName()).log(Level.SEVERE, null, ex);
    } finally {
      return vecOut;
    }
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jScrollPane1 = new javax.swing.JScrollPane();
    ContractInfoTable = new javax.swing.JTable();
    ULComboBox = new javax.swing.JComboBox(getDistinctULs());
    jLabel1 = new javax.swing.JLabel();
    onlyThisULButton = new javax.swing.JButton();
    jLabel2 = new javax.swing.JLabel();
    goButton = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle(" Setup Contract to Run");
    addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowClosing(java.awt.event.WindowEvent evt) {
        formWindowClosing(evt);
      }
    });

    jScrollPane1.setFont(new java.awt.Font("DejaVu Sans", 0, 14));

    ContractInfoTable.getTableHeader().setFont(new java.awt.Font("DejaVu Sans", 0, 18));
    ContractInfoTable.setAutoCreateRowSorter(true);
    ContractInfoTable.setFont(new java.awt.Font("DejaVu Sans", 0, 18));
    ContractInfoTable.setModel(getCurConTabModel());
    ContractInfoTable.setName("ContinuousContractSetup"); // NOI18N
    ContractInfoTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    jScrollPane1.setViewportView(ContractInfoTable);

    ULComboBox.setBackground(new java.awt.Color(255, 250, 246));

    jLabel1.setText("ULs Present:");

    onlyThisULButton.setText("Only This UL");
    onlyThisULButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        onlyThisULButtonActionPerformed(evt);
      }
    });

    jLabel2.setText("Choose the Contract to Run:");

    goButton.setText("GO");
    goButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        goButtonActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(jLabel1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(ULComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addComponent(onlyThisULButton)
        .addGap(37, 37, 37)
        .addComponent(jLabel2)
        .addGap(90, 90, 90)
        .addComponent(goButton)
        .addContainerGap(454, Short.MAX_VALUE))
      .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1291, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(ULComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jLabel1)
            .addComponent(onlyThisULButton)
            .addComponent(jLabel2))
          .addComponent(goButton))
        .addGap(4, 4, 4)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents
//   private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
//      int[] selected = masterTable.getSelectedRows();
//      List<petrasys.FuturesContractDetails> toRemove = new ArrayList<petrasys.FuturesContractDetails>(selected.length);
//      for (int idx = 0; idx < selected.length; idx++) {
//        petrasys.FuturesContractDetails f = list.get(masterTable.convertRowIndexToModel(selected[idx]));
//        toRemove.add(f);
//        entityManager.remove(f);
//      }
//      list.removeAll(toRemove);
//    }
  private boolean guard;

  private synchronized void blockOnGuard() {
    //This guard only loops once for each special event, which may not
    //be the event we're waiting for.
    while (guard) {
      try {
        wait();
      } catch (InterruptedException e) {
      }
    }
  }

  public synchronized void releaseGuard() {
    guard = false;
    notifyAll();
  }

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
      try {
        conn.close();
      } catch (SQLException ex) {
        Logger.getLogger(CurrentContractsDlg.class.getName()).log(Level.SEVERE, null, ex);
      }
    }//GEN-LAST:event_formWindowClosing

    private void onlyThisULButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onlyThisULButtonActionPerformed
      TableModel tm = null;
      String currentSym = (String) ULComboBox.getSelectedItem();
      int expTarget = DateOps.expiryFormatInt(DateOps.addOrSubractDaysFromDate(new Date(), 8));
      try {
        String curCons = "SELECT `symbol`,`expiry`,`multiplier`,`priceMagnifier`,`exchange`,`fullName`"
                + " FROM `futuresContractDetails` WHERE `expiry`> "
                + expTarget + " and `symbol`='" + currentSym + "'";
        tm = tmFactory.getResultSetTableModel(curCons);
      } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "SQL Exception", "getCurConTabModel()", JOptionPane.ERROR_MESSAGE);
      }
      ContractInfoTable.setModel(tm);
      ContractInfoTable.repaint();
    }//GEN-LAST:event_onlyThisULButtonActionPerformed

  public Instrument startAndReturnInstrument() {
    setVisible(true);
    return newInstrument;
  }
    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
      int rownum = ContractInfoTable.getSelectedRow();
      currentSymbol = (String) ContractInfoTable.getValueAt(rownum, 0);
      int expiry = (Integer) ContractInfoTable.getValueAt(rownum, 1);
      Double multiplier = Double.parseDouble(ContractInfoTable.getValueAt(rownum, 2).toString());
      Double priceMagnifier = Double.parseDouble(ContractInfoTable.getValueAt(rownum, 3).toString());
      String exchange = ContractInfoTable.getValueAt(rownum, 4).toString();
      //Double minTick = Double.parseDouble(ContractInfoTable.getValueAt(rownum, 5).toString());
      String fullName = ContractInfoTable.getValueAt(rownum, 5).toString();
      newInstrument = new Instrument(currentSymbol, expiry, multiplier, priceMagnifier, exchange, fullName);
      //formWindowClosing(null);
      setVisible(false);
      dispose();
    }//GEN-LAST:event_goButtonActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {

      @Override
      public void run() {
        CurrentContractsDlg dialog = new CurrentContractsDlg(new javax.swing.JFrame(), true, "GBP");
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {

          @Override
          public void windowClosing(java.awt.event.WindowEvent e) {
            System.exit(0);
          }
        });
        dialog.setVisible(true);

        int j = 3;
      }
    });


  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JTable ContractInfoTable;
  private javax.swing.JComboBox ULComboBox;
  private javax.swing.JButton goButton;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JButton onlyThisULButton;
  // End of variables declaration//GEN-END:variables
}
