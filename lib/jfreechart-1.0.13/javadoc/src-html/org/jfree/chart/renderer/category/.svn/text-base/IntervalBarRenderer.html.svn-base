<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ===========================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JFreeChart : a free chart library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ===========================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2009, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     *<a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jfreechart/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it<a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by<a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or<a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but<a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY<a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public<a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,<a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.<a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc.<a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     *<a name="line.26"></a>
<FONT color="green">027</FONT>     * ------------------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * IntervalBarRenderer.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * ------------------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C) Copyright 2002-2009, by Jeremy Bowman.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  Jeremy Bowman;<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   David Gilbert (for Object Refinery Limited);<a name="line.33"></a>
<FONT color="green">034</FONT>     *                   Christian W. Zuckschwerdt;<a name="line.34"></a>
<FONT color="green">035</FONT>     *                   Peter Kolb (patch 2497611);<a name="line.35"></a>
<FONT color="green">036</FONT>     *<a name="line.36"></a>
<FONT color="green">037</FONT>     * Changes<a name="line.37"></a>
<FONT color="green">038</FONT>     * -------<a name="line.38"></a>
<FONT color="green">039</FONT>     * 29-Apr-2002 : Version 1, contributed by Jeremy Bowman (DG);<a name="line.39"></a>
<FONT color="green">040</FONT>     * 11-May-2002 : Use CategoryPlot.getLabelsVisible() (JB);<a name="line.40"></a>
<FONT color="green">041</FONT>     * 29-May-2002 : Added constructors (DG);<a name="line.41"></a>
<FONT color="green">042</FONT>     * 26-Jun-2002 : Added axis to initialise method (DG);<a name="line.42"></a>
<FONT color="green">043</FONT>     * 20-Sep-2002 : Added basic support for chart entities (DG);<a name="line.43"></a>
<FONT color="green">044</FONT>     * 24-Oct-2002 : Amendments for changes in CategoryDataset interface and<a name="line.44"></a>
<FONT color="green">045</FONT>     *               CategoryToolTipGenerator interface (DG);<a name="line.45"></a>
<FONT color="green">046</FONT>     * 05-Nov-2002 : Base dataset is now TableDataset not CategoryDataset (DG);<a name="line.46"></a>
<FONT color="green">047</FONT>     * 25-Mar-2003 : Implemented Serializable (DG);<a name="line.47"></a>
<FONT color="green">048</FONT>     * 30-Jul-2003 : Modified entity constructor (CZ);<a name="line.48"></a>
<FONT color="green">049</FONT>     * 19-Aug-2003 : Implemented Cloneable and PublicCloneable (DG);<a name="line.49"></a>
<FONT color="green">050</FONT>     * 08-Sep-2003 : Added checks for null values (DG);<a name="line.50"></a>
<FONT color="green">051</FONT>     * 07-Oct-2003 : Added renderer state (DG);<a name="line.51"></a>
<FONT color="green">052</FONT>     * 21-Oct-2003 : Bar width moved into renderer state (DG);<a name="line.52"></a>
<FONT color="green">053</FONT>     * 23-Dec-2003 : Removed the deprecated MultiIntervalCategoryDataset<a name="line.53"></a>
<FONT color="green">054</FONT>     *               interface (DG);<a name="line.54"></a>
<FONT color="green">055</FONT>     * 05-Nov-2004 : Modified drawItem() signature (DG);<a name="line.55"></a>
<FONT color="green">056</FONT>     * 20-Apr-2005 : Renamed CategoryLabelGenerator<a name="line.56"></a>
<FONT color="green">057</FONT>     *               --&gt; CategoryItemLabelGenerator (DG);<a name="line.57"></a>
<FONT color="green">058</FONT>     * 02-Feb-2007 : Removed author tags all over JFreeChart sources (DG);<a name="line.58"></a>
<FONT color="green">059</FONT>     * 24-Jun-2008 : Added new barPainter mechanism (DG);<a name="line.59"></a>
<FONT color="green">060</FONT>     * 07-Oct-2008 : Override equals() method to fix minor bug (DG);<a name="line.60"></a>
<FONT color="green">061</FONT>     * 14-Jan-2009 : Added support for seriesVisible flags (PK);<a name="line.61"></a>
<FONT color="green">062</FONT>     *<a name="line.62"></a>
<FONT color="green">063</FONT>     */<a name="line.63"></a>
<FONT color="green">064</FONT>    <a name="line.64"></a>
<FONT color="green">065</FONT>    package org.jfree.chart.renderer.category;<a name="line.65"></a>
<FONT color="green">066</FONT>    <a name="line.66"></a>
<FONT color="green">067</FONT>    import java.awt.Graphics2D;<a name="line.67"></a>
<FONT color="green">068</FONT>    import java.awt.geom.Rectangle2D;<a name="line.68"></a>
<FONT color="green">069</FONT>    <a name="line.69"></a>
<FONT color="green">070</FONT>    import org.jfree.chart.axis.CategoryAxis;<a name="line.70"></a>
<FONT color="green">071</FONT>    import org.jfree.chart.axis.ValueAxis;<a name="line.71"></a>
<FONT color="green">072</FONT>    import org.jfree.chart.entity.EntityCollection;<a name="line.72"></a>
<FONT color="green">073</FONT>    import org.jfree.chart.labels.CategoryItemLabelGenerator;<a name="line.73"></a>
<FONT color="green">074</FONT>    import org.jfree.chart.plot.CategoryPlot;<a name="line.74"></a>
<FONT color="green">075</FONT>    import org.jfree.chart.plot.PlotOrientation;<a name="line.75"></a>
<FONT color="green">076</FONT>    import org.jfree.data.category.CategoryDataset;<a name="line.76"></a>
<FONT color="green">077</FONT>    import org.jfree.data.category.IntervalCategoryDataset;<a name="line.77"></a>
<FONT color="green">078</FONT>    import org.jfree.ui.RectangleEdge;<a name="line.78"></a>
<FONT color="green">079</FONT>    <a name="line.79"></a>
<FONT color="green">080</FONT>    /**<a name="line.80"></a>
<FONT color="green">081</FONT>     * A renderer that handles the drawing of bars for a bar plot where<a name="line.81"></a>
<FONT color="green">082</FONT>     * each bar has a high and low value.  This renderer is for use with the<a name="line.82"></a>
<FONT color="green">083</FONT>     * {@link CategoryPlot} class.  The example shown here is generated by the<a name="line.83"></a>
<FONT color="green">084</FONT>     * &lt;code&gt;IntervalBarChartDemo1.java&lt;/code&gt; program included in the JFreeChart<a name="line.84"></a>
<FONT color="green">085</FONT>     * Demo Collection:<a name="line.85"></a>
<FONT color="green">086</FONT>     * &lt;br&gt;&lt;br&gt;<a name="line.86"></a>
<FONT color="green">087</FONT>     * &lt;img src="../../../../../images/IntervalBarRendererSample.png"<a name="line.87"></a>
<FONT color="green">088</FONT>     * alt="IntervalBarRendererSample.png" /&gt;<a name="line.88"></a>
<FONT color="green">089</FONT>     */<a name="line.89"></a>
<FONT color="green">090</FONT>    public class IntervalBarRenderer extends BarRenderer {<a name="line.90"></a>
<FONT color="green">091</FONT>    <a name="line.91"></a>
<FONT color="green">092</FONT>        /** For serialization. */<a name="line.92"></a>
<FONT color="green">093</FONT>        private static final long serialVersionUID = -5068857361615528725L;<a name="line.93"></a>
<FONT color="green">094</FONT>    <a name="line.94"></a>
<FONT color="green">095</FONT>        /**<a name="line.95"></a>
<FONT color="green">096</FONT>         * Constructs a new renderer.<a name="line.96"></a>
<FONT color="green">097</FONT>         */<a name="line.97"></a>
<FONT color="green">098</FONT>        public IntervalBarRenderer() {<a name="line.98"></a>
<FONT color="green">099</FONT>            super();<a name="line.99"></a>
<FONT color="green">100</FONT>        }<a name="line.100"></a>
<FONT color="green">101</FONT>    <a name="line.101"></a>
<FONT color="green">102</FONT>        /**<a name="line.102"></a>
<FONT color="green">103</FONT>         * Draws the bar for a single (series, category) data item.<a name="line.103"></a>
<FONT color="green">104</FONT>         *<a name="line.104"></a>
<FONT color="green">105</FONT>         * @param g2  the graphics device.<a name="line.105"></a>
<FONT color="green">106</FONT>         * @param state  the renderer state.<a name="line.106"></a>
<FONT color="green">107</FONT>         * @param dataArea  the data area.<a name="line.107"></a>
<FONT color="green">108</FONT>         * @param plot  the plot.<a name="line.108"></a>
<FONT color="green">109</FONT>         * @param domainAxis  the domain axis.<a name="line.109"></a>
<FONT color="green">110</FONT>         * @param rangeAxis  the range axis.<a name="line.110"></a>
<FONT color="green">111</FONT>         * @param dataset  the dataset.<a name="line.111"></a>
<FONT color="green">112</FONT>         * @param row  the row index (zero-based).<a name="line.112"></a>
<FONT color="green">113</FONT>         * @param column  the column index (zero-based).<a name="line.113"></a>
<FONT color="green">114</FONT>         * @param pass  the pass index.<a name="line.114"></a>
<FONT color="green">115</FONT>         */<a name="line.115"></a>
<FONT color="green">116</FONT>        public void drawItem(Graphics2D g2,<a name="line.116"></a>
<FONT color="green">117</FONT>                             CategoryItemRendererState state,<a name="line.117"></a>
<FONT color="green">118</FONT>                             Rectangle2D dataArea,<a name="line.118"></a>
<FONT color="green">119</FONT>                             CategoryPlot plot,<a name="line.119"></a>
<FONT color="green">120</FONT>                             CategoryAxis domainAxis,<a name="line.120"></a>
<FONT color="green">121</FONT>                             ValueAxis rangeAxis,<a name="line.121"></a>
<FONT color="green">122</FONT>                             CategoryDataset dataset,<a name="line.122"></a>
<FONT color="green">123</FONT>                             int row,<a name="line.123"></a>
<FONT color="green">124</FONT>                             int column,<a name="line.124"></a>
<FONT color="green">125</FONT>                             int pass) {<a name="line.125"></a>
<FONT color="green">126</FONT>    <a name="line.126"></a>
<FONT color="green">127</FONT>             if (dataset instanceof IntervalCategoryDataset) {<a name="line.127"></a>
<FONT color="green">128</FONT>                 IntervalCategoryDataset d = (IntervalCategoryDataset) dataset;<a name="line.128"></a>
<FONT color="green">129</FONT>                 drawInterval(g2, state, dataArea, plot, domainAxis, rangeAxis,<a name="line.129"></a>
<FONT color="green">130</FONT>                         d, row, column);<a name="line.130"></a>
<FONT color="green">131</FONT>             }<a name="line.131"></a>
<FONT color="green">132</FONT>             else {<a name="line.132"></a>
<FONT color="green">133</FONT>                 super.drawItem(g2, state, dataArea, plot, domainAxis, rangeAxis,<a name="line.133"></a>
<FONT color="green">134</FONT>                         dataset, row, column, pass);<a name="line.134"></a>
<FONT color="green">135</FONT>             }<a name="line.135"></a>
<FONT color="green">136</FONT>    <a name="line.136"></a>
<FONT color="green">137</FONT>         }<a name="line.137"></a>
<FONT color="green">138</FONT>    <a name="line.138"></a>
<FONT color="green">139</FONT>         /**<a name="line.139"></a>
<FONT color="green">140</FONT>          * Draws a single interval.<a name="line.140"></a>
<FONT color="green">141</FONT>          *<a name="line.141"></a>
<FONT color="green">142</FONT>          * @param g2  the graphics device.<a name="line.142"></a>
<FONT color="green">143</FONT>          * @param state  the renderer state.<a name="line.143"></a>
<FONT color="green">144</FONT>          * @param dataArea  the data plot area.<a name="line.144"></a>
<FONT color="green">145</FONT>          * @param plot  the plot.<a name="line.145"></a>
<FONT color="green">146</FONT>          * @param domainAxis  the domain axis.<a name="line.146"></a>
<FONT color="green">147</FONT>          * @param rangeAxis  the range axis.<a name="line.147"></a>
<FONT color="green">148</FONT>          * @param dataset  the data.<a name="line.148"></a>
<FONT color="green">149</FONT>          * @param row  the row index (zero-based).<a name="line.149"></a>
<FONT color="green">150</FONT>          * @param column  the column index (zero-based).<a name="line.150"></a>
<FONT color="green">151</FONT>          */<a name="line.151"></a>
<FONT color="green">152</FONT>         protected void drawInterval(Graphics2D g2,<a name="line.152"></a>
<FONT color="green">153</FONT>                                     CategoryItemRendererState state,<a name="line.153"></a>
<FONT color="green">154</FONT>                                     Rectangle2D dataArea,<a name="line.154"></a>
<FONT color="green">155</FONT>                                     CategoryPlot plot,<a name="line.155"></a>
<FONT color="green">156</FONT>                                     CategoryAxis domainAxis,<a name="line.156"></a>
<FONT color="green">157</FONT>                                     ValueAxis rangeAxis,<a name="line.157"></a>
<FONT color="green">158</FONT>                                     IntervalCategoryDataset dataset,<a name="line.158"></a>
<FONT color="green">159</FONT>                                     int row,<a name="line.159"></a>
<FONT color="green">160</FONT>                                     int column) {<a name="line.160"></a>
<FONT color="green">161</FONT>    <a name="line.161"></a>
<FONT color="green">162</FONT>            int visibleRow = state.getVisibleSeriesIndex(row);<a name="line.162"></a>
<FONT color="green">163</FONT>            if (visibleRow &lt; 0) {<a name="line.163"></a>
<FONT color="green">164</FONT>                return;<a name="line.164"></a>
<FONT color="green">165</FONT>            }<a name="line.165"></a>
<FONT color="green">166</FONT>            int seriesCount = state.getVisibleSeriesCount() &gt;= 0<a name="line.166"></a>
<FONT color="green">167</FONT>                    ? state.getVisibleSeriesCount() : getRowCount();<a name="line.167"></a>
<FONT color="green">168</FONT>    <a name="line.168"></a>
<FONT color="green">169</FONT>            int categoryCount = getColumnCount();<a name="line.169"></a>
<FONT color="green">170</FONT>    <a name="line.170"></a>
<FONT color="green">171</FONT>            PlotOrientation orientation = plot.getOrientation();<a name="line.171"></a>
<FONT color="green">172</FONT>    <a name="line.172"></a>
<FONT color="green">173</FONT>            double rectX = 0.0;<a name="line.173"></a>
<FONT color="green">174</FONT>            double rectY = 0.0;<a name="line.174"></a>
<FONT color="green">175</FONT>    <a name="line.175"></a>
<FONT color="green">176</FONT>            RectangleEdge domainAxisLocation = plot.getDomainAxisEdge();<a name="line.176"></a>
<FONT color="green">177</FONT>            RectangleEdge rangeAxisLocation = plot.getRangeAxisEdge();<a name="line.177"></a>
<FONT color="green">178</FONT>    <a name="line.178"></a>
<FONT color="green">179</FONT>            // Y0<a name="line.179"></a>
<FONT color="green">180</FONT>            Number value0 = dataset.getEndValue(row, column);<a name="line.180"></a>
<FONT color="green">181</FONT>            if (value0 == null) {<a name="line.181"></a>
<FONT color="green">182</FONT>                return;<a name="line.182"></a>
<FONT color="green">183</FONT>            }<a name="line.183"></a>
<FONT color="green">184</FONT>            double java2dValue0 = rangeAxis.valueToJava2D(value0.doubleValue(),<a name="line.184"></a>
<FONT color="green">185</FONT>                    dataArea, rangeAxisLocation);<a name="line.185"></a>
<FONT color="green">186</FONT>    <a name="line.186"></a>
<FONT color="green">187</FONT>            // Y1<a name="line.187"></a>
<FONT color="green">188</FONT>            Number value1 = dataset.getStartValue(row, column);<a name="line.188"></a>
<FONT color="green">189</FONT>            if (value1 == null) {<a name="line.189"></a>
<FONT color="green">190</FONT>                return;<a name="line.190"></a>
<FONT color="green">191</FONT>            }<a name="line.191"></a>
<FONT color="green">192</FONT>            double java2dValue1 = rangeAxis.valueToJava2D(<a name="line.192"></a>
<FONT color="green">193</FONT>                    value1.doubleValue(), dataArea, rangeAxisLocation);<a name="line.193"></a>
<FONT color="green">194</FONT>    <a name="line.194"></a>
<FONT color="green">195</FONT>            if (java2dValue1 &lt; java2dValue0) {<a name="line.195"></a>
<FONT color="green">196</FONT>                double temp = java2dValue1;<a name="line.196"></a>
<FONT color="green">197</FONT>                java2dValue1 = java2dValue0;<a name="line.197"></a>
<FONT color="green">198</FONT>                java2dValue0 = temp;<a name="line.198"></a>
<FONT color="green">199</FONT>                Number tempNum = value1;<a name="line.199"></a>
<FONT color="green">200</FONT>                value1 = value0;<a name="line.200"></a>
<FONT color="green">201</FONT>                value0 = tempNum;<a name="line.201"></a>
<FONT color="green">202</FONT>            }<a name="line.202"></a>
<FONT color="green">203</FONT>    <a name="line.203"></a>
<FONT color="green">204</FONT>            // BAR WIDTH<a name="line.204"></a>
<FONT color="green">205</FONT>            double rectWidth = state.getBarWidth();<a name="line.205"></a>
<FONT color="green">206</FONT>    <a name="line.206"></a>
<FONT color="green">207</FONT>            // BAR HEIGHT<a name="line.207"></a>
<FONT color="green">208</FONT>            double rectHeight = Math.abs(java2dValue1 - java2dValue0);<a name="line.208"></a>
<FONT color="green">209</FONT>    <a name="line.209"></a>
<FONT color="green">210</FONT>            RectangleEdge barBase = RectangleEdge.LEFT;<a name="line.210"></a>
<FONT color="green">211</FONT>            if (orientation == PlotOrientation.HORIZONTAL) {<a name="line.211"></a>
<FONT color="green">212</FONT>                // BAR Y<a name="line.212"></a>
<FONT color="green">213</FONT>                rectY = domainAxis.getCategoryStart(column, getColumnCount(),<a name="line.213"></a>
<FONT color="green">214</FONT>                        dataArea, domainAxisLocation);<a name="line.214"></a>
<FONT color="green">215</FONT>                if (seriesCount &gt; 1) {<a name="line.215"></a>
<FONT color="green">216</FONT>                    double seriesGap = dataArea.getHeight() * getItemMargin()<a name="line.216"></a>
<FONT color="green">217</FONT>                                       / (categoryCount * (seriesCount - 1));<a name="line.217"></a>
<FONT color="green">218</FONT>                    rectY = rectY + visibleRow * (state.getBarWidth() + seriesGap);<a name="line.218"></a>
<FONT color="green">219</FONT>                }<a name="line.219"></a>
<FONT color="green">220</FONT>                else {<a name="line.220"></a>
<FONT color="green">221</FONT>                    rectY = rectY + visibleRow * state.getBarWidth();<a name="line.221"></a>
<FONT color="green">222</FONT>                }<a name="line.222"></a>
<FONT color="green">223</FONT>    <a name="line.223"></a>
<FONT color="green">224</FONT>                rectX = java2dValue0;<a name="line.224"></a>
<FONT color="green">225</FONT>    <a name="line.225"></a>
<FONT color="green">226</FONT>                rectHeight = state.getBarWidth();<a name="line.226"></a>
<FONT color="green">227</FONT>                rectWidth = Math.abs(java2dValue1 - java2dValue0);<a name="line.227"></a>
<FONT color="green">228</FONT>                barBase = RectangleEdge.LEFT;<a name="line.228"></a>
<FONT color="green">229</FONT>            }<a name="line.229"></a>
<FONT color="green">230</FONT>            else if (orientation == PlotOrientation.VERTICAL) {<a name="line.230"></a>
<FONT color="green">231</FONT>                // BAR X<a name="line.231"></a>
<FONT color="green">232</FONT>                rectX = domainAxis.getCategoryStart(column, getColumnCount(),<a name="line.232"></a>
<FONT color="green">233</FONT>                        dataArea, domainAxisLocation);<a name="line.233"></a>
<FONT color="green">234</FONT>    <a name="line.234"></a>
<FONT color="green">235</FONT>                if (seriesCount &gt; 1) {<a name="line.235"></a>
<FONT color="green">236</FONT>                    double seriesGap = dataArea.getWidth() * getItemMargin()<a name="line.236"></a>
<FONT color="green">237</FONT>                                       / (categoryCount * (seriesCount - 1));<a name="line.237"></a>
<FONT color="green">238</FONT>                    rectX = rectX + visibleRow * (state.getBarWidth() + seriesGap);<a name="line.238"></a>
<FONT color="green">239</FONT>                }<a name="line.239"></a>
<FONT color="green">240</FONT>                else {<a name="line.240"></a>
<FONT color="green">241</FONT>                    rectX = rectX + visibleRow * state.getBarWidth();<a name="line.241"></a>
<FONT color="green">242</FONT>                }<a name="line.242"></a>
<FONT color="green">243</FONT>    <a name="line.243"></a>
<FONT color="green">244</FONT>                rectY = java2dValue0;<a name="line.244"></a>
<FONT color="green">245</FONT>                barBase = RectangleEdge.BOTTOM;<a name="line.245"></a>
<FONT color="green">246</FONT>            }<a name="line.246"></a>
<FONT color="green">247</FONT>            Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth,<a name="line.247"></a>
<FONT color="green">248</FONT>                    rectHeight);<a name="line.248"></a>
<FONT color="green">249</FONT>            BarPainter painter = getBarPainter();<a name="line.249"></a>
<FONT color="green">250</FONT>            if (getShadowsVisible()) {<a name="line.250"></a>
<FONT color="green">251</FONT>                painter.paintBarShadow(g2, this, row, column, bar, barBase, false);<a name="line.251"></a>
<FONT color="green">252</FONT>            }<a name="line.252"></a>
<FONT color="green">253</FONT>            getBarPainter().paintBar(g2, this, row, column, bar, barBase);<a name="line.253"></a>
<FONT color="green">254</FONT>    <a name="line.254"></a>
<FONT color="green">255</FONT>            CategoryItemLabelGenerator generator = getItemLabelGenerator(row,<a name="line.255"></a>
<FONT color="green">256</FONT>                    column);<a name="line.256"></a>
<FONT color="green">257</FONT>            if (generator != null &amp;&amp; isItemLabelVisible(row, column)) {<a name="line.257"></a>
<FONT color="green">258</FONT>                drawItemLabel(g2, dataset, row, column, plot, generator, bar,<a name="line.258"></a>
<FONT color="green">259</FONT>                        false);<a name="line.259"></a>
<FONT color="green">260</FONT>            }<a name="line.260"></a>
<FONT color="green">261</FONT>    <a name="line.261"></a>
<FONT color="green">262</FONT>            // add an item entity, if this information is being collected<a name="line.262"></a>
<FONT color="green">263</FONT>            EntityCollection entities = state.getEntityCollection();<a name="line.263"></a>
<FONT color="green">264</FONT>            if (entities != null) {<a name="line.264"></a>
<FONT color="green">265</FONT>                addItemEntity(entities, dataset, row, column, bar);<a name="line.265"></a>
<FONT color="green">266</FONT>            }<a name="line.266"></a>
<FONT color="green">267</FONT>    <a name="line.267"></a>
<FONT color="green">268</FONT>        }<a name="line.268"></a>
<FONT color="green">269</FONT>    <a name="line.269"></a>
<FONT color="green">270</FONT>        /**<a name="line.270"></a>
<FONT color="green">271</FONT>         * Tests this renderer for equality with an arbitrary object.<a name="line.271"></a>
<FONT color="green">272</FONT>         *<a name="line.272"></a>
<FONT color="green">273</FONT>         * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.273"></a>
<FONT color="green">274</FONT>         *<a name="line.274"></a>
<FONT color="green">275</FONT>         * @return A boolean.<a name="line.275"></a>
<FONT color="green">276</FONT>         */<a name="line.276"></a>
<FONT color="green">277</FONT>        public boolean equals(Object obj) {<a name="line.277"></a>
<FONT color="green">278</FONT>            if (obj == this) {<a name="line.278"></a>
<FONT color="green">279</FONT>                return true;<a name="line.279"></a>
<FONT color="green">280</FONT>            }<a name="line.280"></a>
<FONT color="green">281</FONT>            if (!(obj instanceof IntervalBarRenderer)) {<a name="line.281"></a>
<FONT color="green">282</FONT>                return false;<a name="line.282"></a>
<FONT color="green">283</FONT>            }<a name="line.283"></a>
<FONT color="green">284</FONT>            // there are no fields to check<a name="line.284"></a>
<FONT color="green">285</FONT>            return super.equals(obj);<a name="line.285"></a>
<FONT color="green">286</FONT>        }<a name="line.286"></a>
<FONT color="green">287</FONT>    <a name="line.287"></a>
<FONT color="green">288</FONT>    }<a name="line.288"></a>




























































</PRE>
</BODY>
</HTML>
