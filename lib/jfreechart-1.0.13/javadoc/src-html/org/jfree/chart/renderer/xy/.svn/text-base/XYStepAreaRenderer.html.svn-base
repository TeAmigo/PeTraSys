<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ===========================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JFreeChart : a free chart library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ===========================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     *<a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jfreechart/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it<a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by<a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or<a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but<a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY<a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public<a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,<a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.<a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc.<a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     *<a name="line.26"></a>
<FONT color="green">027</FONT>     * -----------------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * XYStepAreaRenderer.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * -----------------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C) Copyright 2003-2008, by Matthias Rose and Contributors.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  Matthias Rose (based on XYAreaRenderer.java);<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   David Gilbert (for Object Refinery Limited);<a name="line.33"></a>
<FONT color="green">034</FONT>     *<a name="line.34"></a>
<FONT color="green">035</FONT>     * Changes:<a name="line.35"></a>
<FONT color="green">036</FONT>     * --------<a name="line.36"></a>
<FONT color="green">037</FONT>     * 07-Oct-2003 : Version 1, contributed by Matthias Rose (DG);<a name="line.37"></a>
<FONT color="green">038</FONT>     * 10-Feb-2004 : Added some getter and setter methods (DG);<a name="line.38"></a>
<FONT color="green">039</FONT>     * 25-Feb-2004 : Replaced CrosshairInfo with CrosshairState.  Renamed<a name="line.39"></a>
<FONT color="green">040</FONT>     *               XYToolTipGenerator --&gt; XYItemLabelGenerator (DG);<a name="line.40"></a>
<FONT color="green">041</FONT>     * 15-Jul-2004 : Switched getX() with getXValue() and getY() with<a name="line.41"></a>
<FONT color="green">042</FONT>     *               getYValue() (DG);<a name="line.42"></a>
<FONT color="green">043</FONT>     * 11-Nov-2004 : Now uses ShapeUtilities to translate shapes (DG);<a name="line.43"></a>
<FONT color="green">044</FONT>     * 06-Jul-2005 : Renamed get/setPlotShapes() --&gt; get/setShapesVisible() (DG);<a name="line.44"></a>
<FONT color="green">045</FONT>     * ------------- JFREECHART 1.0.x ---------------------------------------------<a name="line.45"></a>
<FONT color="green">046</FONT>     * 06-Jul-2006 : Modified to call dataset methods that return double<a name="line.46"></a>
<FONT color="green">047</FONT>     *               primitives only (DG);<a name="line.47"></a>
<FONT color="green">048</FONT>     * 06-Feb-2007 : Fixed bug 1086307, crosshairs with multiple axes (DG);<a name="line.48"></a>
<FONT color="green">049</FONT>     * 14-Feb-2007 : Added equals() method override (DG);<a name="line.49"></a>
<FONT color="green">050</FONT>     * 04-May-2007 : Set processVisibleItemsOnly flag to false (DG);<a name="line.50"></a>
<FONT color="green">051</FONT>     * 14-May-2008 : Call addEntity() from within drawItem() (DG);<a name="line.51"></a>
<FONT color="green">052</FONT>     *<a name="line.52"></a>
<FONT color="green">053</FONT>     */<a name="line.53"></a>
<FONT color="green">054</FONT>    <a name="line.54"></a>
<FONT color="green">055</FONT>    package org.jfree.chart.renderer.xy;<a name="line.55"></a>
<FONT color="green">056</FONT>    <a name="line.56"></a>
<FONT color="green">057</FONT>    import java.awt.Graphics2D;<a name="line.57"></a>
<FONT color="green">058</FONT>    import java.awt.Paint;<a name="line.58"></a>
<FONT color="green">059</FONT>    import java.awt.Polygon;<a name="line.59"></a>
<FONT color="green">060</FONT>    import java.awt.Shape;<a name="line.60"></a>
<FONT color="green">061</FONT>    import java.awt.Stroke;<a name="line.61"></a>
<FONT color="green">062</FONT>    import java.awt.geom.Rectangle2D;<a name="line.62"></a>
<FONT color="green">063</FONT>    import java.io.Serializable;<a name="line.63"></a>
<FONT color="green">064</FONT>    <a name="line.64"></a>
<FONT color="green">065</FONT>    import org.jfree.chart.axis.ValueAxis;<a name="line.65"></a>
<FONT color="green">066</FONT>    import org.jfree.chart.entity.EntityCollection;<a name="line.66"></a>
<FONT color="green">067</FONT>    import org.jfree.chart.event.RendererChangeEvent;<a name="line.67"></a>
<FONT color="green">068</FONT>    import org.jfree.chart.labels.XYToolTipGenerator;<a name="line.68"></a>
<FONT color="green">069</FONT>    import org.jfree.chart.plot.CrosshairState;<a name="line.69"></a>
<FONT color="green">070</FONT>    import org.jfree.chart.plot.PlotOrientation;<a name="line.70"></a>
<FONT color="green">071</FONT>    import org.jfree.chart.plot.PlotRenderingInfo;<a name="line.71"></a>
<FONT color="green">072</FONT>    import org.jfree.chart.plot.XYPlot;<a name="line.72"></a>
<FONT color="green">073</FONT>    import org.jfree.chart.urls.XYURLGenerator;<a name="line.73"></a>
<FONT color="green">074</FONT>    import org.jfree.data.xy.XYDataset;<a name="line.74"></a>
<FONT color="green">075</FONT>    import org.jfree.util.PublicCloneable;<a name="line.75"></a>
<FONT color="green">076</FONT>    import org.jfree.util.ShapeUtilities;<a name="line.76"></a>
<FONT color="green">077</FONT>    <a name="line.77"></a>
<FONT color="green">078</FONT>    /**<a name="line.78"></a>
<FONT color="green">079</FONT>     * A step chart renderer that fills the area between the step and the x-axis.<a name="line.79"></a>
<FONT color="green">080</FONT>     * The example shown here is generated by the<a name="line.80"></a>
<FONT color="green">081</FONT>     * &lt;code&gt;XYStepAreaRendererDemo1.java&lt;/code&gt; program included in the JFreeChart<a name="line.81"></a>
<FONT color="green">082</FONT>     * demo collection:<a name="line.82"></a>
<FONT color="green">083</FONT>     * &lt;br&gt;&lt;br&gt;<a name="line.83"></a>
<FONT color="green">084</FONT>     * &lt;img src="../../../../../images/XYStepAreaRendererSample.png"<a name="line.84"></a>
<FONT color="green">085</FONT>     * alt="XYStepAreaRendererSample.png" /&gt;<a name="line.85"></a>
<FONT color="green">086</FONT>     */<a name="line.86"></a>
<FONT color="green">087</FONT>    public class XYStepAreaRenderer extends AbstractXYItemRenderer<a name="line.87"></a>
<FONT color="green">088</FONT>            implements XYItemRenderer, Cloneable, PublicCloneable, Serializable {<a name="line.88"></a>
<FONT color="green">089</FONT>    <a name="line.89"></a>
<FONT color="green">090</FONT>        /** For serialization. */<a name="line.90"></a>
<FONT color="green">091</FONT>        private static final long serialVersionUID = -7311560779702649635L;<a name="line.91"></a>
<FONT color="green">092</FONT>    <a name="line.92"></a>
<FONT color="green">093</FONT>        /** Useful constant for specifying the type of rendering (shapes only). */<a name="line.93"></a>
<FONT color="green">094</FONT>        public static final int SHAPES = 1;<a name="line.94"></a>
<FONT color="green">095</FONT>    <a name="line.95"></a>
<FONT color="green">096</FONT>        /** Useful constant for specifying the type of rendering (area only). */<a name="line.96"></a>
<FONT color="green">097</FONT>        public static final int AREA = 2;<a name="line.97"></a>
<FONT color="green">098</FONT>    <a name="line.98"></a>
<FONT color="green">099</FONT>        /**<a name="line.99"></a>
<FONT color="green">100</FONT>         * Useful constant for specifying the type of rendering (area and shapes).<a name="line.100"></a>
<FONT color="green">101</FONT>         */<a name="line.101"></a>
<FONT color="green">102</FONT>        public static final int AREA_AND_SHAPES = 3;<a name="line.102"></a>
<FONT color="green">103</FONT>    <a name="line.103"></a>
<FONT color="green">104</FONT>        /** A flag indicating whether or not shapes are drawn at each XY point. */<a name="line.104"></a>
<FONT color="green">105</FONT>        private boolean shapesVisible;<a name="line.105"></a>
<FONT color="green">106</FONT>    <a name="line.106"></a>
<FONT color="green">107</FONT>        /** A flag that controls whether or not shapes are filled for ALL series. */<a name="line.107"></a>
<FONT color="green">108</FONT>        private boolean shapesFilled;<a name="line.108"></a>
<FONT color="green">109</FONT>    <a name="line.109"></a>
<FONT color="green">110</FONT>        /** A flag indicating whether or not Area are drawn at each XY point. */<a name="line.110"></a>
<FONT color="green">111</FONT>        private boolean plotArea;<a name="line.111"></a>
<FONT color="green">112</FONT>    <a name="line.112"></a>
<FONT color="green">113</FONT>        /** A flag that controls whether or not the outline is shown. */<a name="line.113"></a>
<FONT color="green">114</FONT>        private boolean showOutline;<a name="line.114"></a>
<FONT color="green">115</FONT>    <a name="line.115"></a>
<FONT color="green">116</FONT>        /** Area of the complete series */<a name="line.116"></a>
<FONT color="green">117</FONT>        protected transient Polygon pArea = null;<a name="line.117"></a>
<FONT color="green">118</FONT>    <a name="line.118"></a>
<FONT color="green">119</FONT>        /**<a name="line.119"></a>
<FONT color="green">120</FONT>         * The value on the range axis which defines the 'lower' border of the<a name="line.120"></a>
<FONT color="green">121</FONT>         * area.<a name="line.121"></a>
<FONT color="green">122</FONT>         */<a name="line.122"></a>
<FONT color="green">123</FONT>        private double rangeBase;<a name="line.123"></a>
<FONT color="green">124</FONT>    <a name="line.124"></a>
<FONT color="green">125</FONT>        /**<a name="line.125"></a>
<FONT color="green">126</FONT>         * Constructs a new renderer.<a name="line.126"></a>
<FONT color="green">127</FONT>         */<a name="line.127"></a>
<FONT color="green">128</FONT>        public XYStepAreaRenderer() {<a name="line.128"></a>
<FONT color="green">129</FONT>            this(AREA);<a name="line.129"></a>
<FONT color="green">130</FONT>        }<a name="line.130"></a>
<FONT color="green">131</FONT>    <a name="line.131"></a>
<FONT color="green">132</FONT>        /**<a name="line.132"></a>
<FONT color="green">133</FONT>         * Constructs a new renderer.<a name="line.133"></a>
<FONT color="green">134</FONT>         *<a name="line.134"></a>
<FONT color="green">135</FONT>         * @param type  the type of the renderer.<a name="line.135"></a>
<FONT color="green">136</FONT>         */<a name="line.136"></a>
<FONT color="green">137</FONT>        public XYStepAreaRenderer(int type) {<a name="line.137"></a>
<FONT color="green">138</FONT>            this(type, null, null);<a name="line.138"></a>
<FONT color="green">139</FONT>        }<a name="line.139"></a>
<FONT color="green">140</FONT>    <a name="line.140"></a>
<FONT color="green">141</FONT>        /**<a name="line.141"></a>
<FONT color="green">142</FONT>         * Constructs a new renderer.<a name="line.142"></a>
<FONT color="green">143</FONT>         * &lt;p&gt;<a name="line.143"></a>
<FONT color="green">144</FONT>         * To specify the type of renderer, use one of the constants:<a name="line.144"></a>
<FONT color="green">145</FONT>         * AREA, SHAPES or AREA_AND_SHAPES.<a name="line.145"></a>
<FONT color="green">146</FONT>         *<a name="line.146"></a>
<FONT color="green">147</FONT>         * @param type  the type of renderer.<a name="line.147"></a>
<FONT color="green">148</FONT>         * @param toolTipGenerator  the tool tip generator to use<a name="line.148"></a>
<FONT color="green">149</FONT>         *                          (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.149"></a>
<FONT color="green">150</FONT>         * @param urlGenerator  the URL generator (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.150"></a>
<FONT color="green">151</FONT>         */<a name="line.151"></a>
<FONT color="green">152</FONT>        public XYStepAreaRenderer(int type,<a name="line.152"></a>
<FONT color="green">153</FONT>                                  XYToolTipGenerator toolTipGenerator,<a name="line.153"></a>
<FONT color="green">154</FONT>                                  XYURLGenerator urlGenerator) {<a name="line.154"></a>
<FONT color="green">155</FONT>    <a name="line.155"></a>
<FONT color="green">156</FONT>            super();<a name="line.156"></a>
<FONT color="green">157</FONT>            setBaseToolTipGenerator(toolTipGenerator);<a name="line.157"></a>
<FONT color="green">158</FONT>            setURLGenerator(urlGenerator);<a name="line.158"></a>
<FONT color="green">159</FONT>    <a name="line.159"></a>
<FONT color="green">160</FONT>            if (type == AREA) {<a name="line.160"></a>
<FONT color="green">161</FONT>                this.plotArea = true;<a name="line.161"></a>
<FONT color="green">162</FONT>            }<a name="line.162"></a>
<FONT color="green">163</FONT>            else if (type == SHAPES) {<a name="line.163"></a>
<FONT color="green">164</FONT>                this.shapesVisible = true;<a name="line.164"></a>
<FONT color="green">165</FONT>            }<a name="line.165"></a>
<FONT color="green">166</FONT>            else if (type == AREA_AND_SHAPES) {<a name="line.166"></a>
<FONT color="green">167</FONT>                this.plotArea = true;<a name="line.167"></a>
<FONT color="green">168</FONT>                this.shapesVisible = true;<a name="line.168"></a>
<FONT color="green">169</FONT>            }<a name="line.169"></a>
<FONT color="green">170</FONT>            this.showOutline = false;<a name="line.170"></a>
<FONT color="green">171</FONT>        }<a name="line.171"></a>
<FONT color="green">172</FONT>    <a name="line.172"></a>
<FONT color="green">173</FONT>        /**<a name="line.173"></a>
<FONT color="green">174</FONT>         * Returns a flag that controls whether or not outlines of the areas are<a name="line.174"></a>
<FONT color="green">175</FONT>         * drawn.<a name="line.175"></a>
<FONT color="green">176</FONT>         *<a name="line.176"></a>
<FONT color="green">177</FONT>         * @return The flag.<a name="line.177"></a>
<FONT color="green">178</FONT>         *<a name="line.178"></a>
<FONT color="green">179</FONT>         * @see #setOutline(boolean)<a name="line.179"></a>
<FONT color="green">180</FONT>         */<a name="line.180"></a>
<FONT color="green">181</FONT>        public boolean isOutline() {<a name="line.181"></a>
<FONT color="green">182</FONT>            return this.showOutline;<a name="line.182"></a>
<FONT color="green">183</FONT>        }<a name="line.183"></a>
<FONT color="green">184</FONT>    <a name="line.184"></a>
<FONT color="green">185</FONT>        /**<a name="line.185"></a>
<FONT color="green">186</FONT>         * Sets a flag that controls whether or not outlines of the areas are<a name="line.186"></a>
<FONT color="green">187</FONT>         * drawn, and sends a {@link RendererChangeEvent} to all registered<a name="line.187"></a>
<FONT color="green">188</FONT>         * listeners.<a name="line.188"></a>
<FONT color="green">189</FONT>         *<a name="line.189"></a>
<FONT color="green">190</FONT>         * @param show  the flag.<a name="line.190"></a>
<FONT color="green">191</FONT>         *<a name="line.191"></a>
<FONT color="green">192</FONT>         * @see #isOutline()<a name="line.192"></a>
<FONT color="green">193</FONT>         */<a name="line.193"></a>
<FONT color="green">194</FONT>        public void setOutline(boolean show) {<a name="line.194"></a>
<FONT color="green">195</FONT>            this.showOutline = show;<a name="line.195"></a>
<FONT color="green">196</FONT>            fireChangeEvent();<a name="line.196"></a>
<FONT color="green">197</FONT>        }<a name="line.197"></a>
<FONT color="green">198</FONT>    <a name="line.198"></a>
<FONT color="green">199</FONT>        /**<a name="line.199"></a>
<FONT color="green">200</FONT>         * Returns true if shapes are being plotted by the renderer.<a name="line.200"></a>
<FONT color="green">201</FONT>         *<a name="line.201"></a>
<FONT color="green">202</FONT>         * @return &lt;code&gt;true&lt;/code&gt; if shapes are being plotted by the renderer.<a name="line.202"></a>
<FONT color="green">203</FONT>         *<a name="line.203"></a>
<FONT color="green">204</FONT>         * @see #setShapesVisible(boolean)<a name="line.204"></a>
<FONT color="green">205</FONT>         */<a name="line.205"></a>
<FONT color="green">206</FONT>        public boolean getShapesVisible() {<a name="line.206"></a>
<FONT color="green">207</FONT>            return this.shapesVisible;<a name="line.207"></a>
<FONT color="green">208</FONT>        }<a name="line.208"></a>
<FONT color="green">209</FONT>    <a name="line.209"></a>
<FONT color="green">210</FONT>        /**<a name="line.210"></a>
<FONT color="green">211</FONT>         * Sets the flag that controls whether or not shapes are displayed for each<a name="line.211"></a>
<FONT color="green">212</FONT>         * data item, and sends a {@link RendererChangeEvent} to all registered<a name="line.212"></a>
<FONT color="green">213</FONT>         * listeners.<a name="line.213"></a>
<FONT color="green">214</FONT>         *<a name="line.214"></a>
<FONT color="green">215</FONT>         * @param flag  the flag.<a name="line.215"></a>
<FONT color="green">216</FONT>         *<a name="line.216"></a>
<FONT color="green">217</FONT>         * @see #getShapesVisible()<a name="line.217"></a>
<FONT color="green">218</FONT>         */<a name="line.218"></a>
<FONT color="green">219</FONT>        public void setShapesVisible(boolean flag) {<a name="line.219"></a>
<FONT color="green">220</FONT>            this.shapesVisible = flag;<a name="line.220"></a>
<FONT color="green">221</FONT>            fireChangeEvent();<a name="line.221"></a>
<FONT color="green">222</FONT>        }<a name="line.222"></a>
<FONT color="green">223</FONT>    <a name="line.223"></a>
<FONT color="green">224</FONT>        /**<a name="line.224"></a>
<FONT color="green">225</FONT>         * Returns the flag that controls whether or not the shapes are filled.<a name="line.225"></a>
<FONT color="green">226</FONT>         *<a name="line.226"></a>
<FONT color="green">227</FONT>         * @return A boolean.<a name="line.227"></a>
<FONT color="green">228</FONT>         *<a name="line.228"></a>
<FONT color="green">229</FONT>         * @see #setShapesFilled(boolean)<a name="line.229"></a>
<FONT color="green">230</FONT>         */<a name="line.230"></a>
<FONT color="green">231</FONT>        public boolean isShapesFilled() {<a name="line.231"></a>
<FONT color="green">232</FONT>            return this.shapesFilled;<a name="line.232"></a>
<FONT color="green">233</FONT>        }<a name="line.233"></a>
<FONT color="green">234</FONT>    <a name="line.234"></a>
<FONT color="green">235</FONT>        /**<a name="line.235"></a>
<FONT color="green">236</FONT>         * Sets the 'shapes filled' for ALL series and sends a<a name="line.236"></a>
<FONT color="green">237</FONT>         * {@link RendererChangeEvent} to all registered listeners.<a name="line.237"></a>
<FONT color="green">238</FONT>         *<a name="line.238"></a>
<FONT color="green">239</FONT>         * @param filled  the flag.<a name="line.239"></a>
<FONT color="green">240</FONT>         *<a name="line.240"></a>
<FONT color="green">241</FONT>         * @see #isShapesFilled()<a name="line.241"></a>
<FONT color="green">242</FONT>         */<a name="line.242"></a>
<FONT color="green">243</FONT>        public void setShapesFilled(boolean filled) {<a name="line.243"></a>
<FONT color="green">244</FONT>            this.shapesFilled = filled;<a name="line.244"></a>
<FONT color="green">245</FONT>            fireChangeEvent();<a name="line.245"></a>
<FONT color="green">246</FONT>        }<a name="line.246"></a>
<FONT color="green">247</FONT>    <a name="line.247"></a>
<FONT color="green">248</FONT>        /**<a name="line.248"></a>
<FONT color="green">249</FONT>         * Returns true if Area is being plotted by the renderer.<a name="line.249"></a>
<FONT color="green">250</FONT>         *<a name="line.250"></a>
<FONT color="green">251</FONT>         * @return &lt;code&gt;true&lt;/code&gt; if Area is being plotted by the renderer.<a name="line.251"></a>
<FONT color="green">252</FONT>         *<a name="line.252"></a>
<FONT color="green">253</FONT>         * @see #setPlotArea(boolean)<a name="line.253"></a>
<FONT color="green">254</FONT>         */<a name="line.254"></a>
<FONT color="green">255</FONT>        public boolean getPlotArea() {<a name="line.255"></a>
<FONT color="green">256</FONT>            return this.plotArea;<a name="line.256"></a>
<FONT color="green">257</FONT>        }<a name="line.257"></a>
<FONT color="green">258</FONT>    <a name="line.258"></a>
<FONT color="green">259</FONT>        /**<a name="line.259"></a>
<FONT color="green">260</FONT>         * Sets a flag that controls whether or not areas are drawn for each data<a name="line.260"></a>
<FONT color="green">261</FONT>         * item and sends a {@link RendererChangeEvent} to all registered<a name="line.261"></a>
<FONT color="green">262</FONT>         * listeners.<a name="line.262"></a>
<FONT color="green">263</FONT>         *<a name="line.263"></a>
<FONT color="green">264</FONT>         * @param flag  the flag.<a name="line.264"></a>
<FONT color="green">265</FONT>         *<a name="line.265"></a>
<FONT color="green">266</FONT>         * @see #getPlotArea()<a name="line.266"></a>
<FONT color="green">267</FONT>         */<a name="line.267"></a>
<FONT color="green">268</FONT>        public void setPlotArea(boolean flag) {<a name="line.268"></a>
<FONT color="green">269</FONT>            this.plotArea = flag;<a name="line.269"></a>
<FONT color="green">270</FONT>            fireChangeEvent();<a name="line.270"></a>
<FONT color="green">271</FONT>        }<a name="line.271"></a>
<FONT color="green">272</FONT>    <a name="line.272"></a>
<FONT color="green">273</FONT>        /**<a name="line.273"></a>
<FONT color="green">274</FONT>         * Returns the value on the range axis which defines the 'lower' border of<a name="line.274"></a>
<FONT color="green">275</FONT>         * the area.<a name="line.275"></a>
<FONT color="green">276</FONT>         *<a name="line.276"></a>
<FONT color="green">277</FONT>         * @return &lt;code&gt;double&lt;/code&gt; the value on the range axis which defines<a name="line.277"></a>
<FONT color="green">278</FONT>         *         the 'lower' border of the area.<a name="line.278"></a>
<FONT color="green">279</FONT>         *<a name="line.279"></a>
<FONT color="green">280</FONT>         * @see #setRangeBase(double)<a name="line.280"></a>
<FONT color="green">281</FONT>         */<a name="line.281"></a>
<FONT color="green">282</FONT>        public double getRangeBase() {<a name="line.282"></a>
<FONT color="green">283</FONT>            return this.rangeBase;<a name="line.283"></a>
<FONT color="green">284</FONT>        }<a name="line.284"></a>
<FONT color="green">285</FONT>    <a name="line.285"></a>
<FONT color="green">286</FONT>        /**<a name="line.286"></a>
<FONT color="green">287</FONT>         * Sets the value on the range axis which defines the default border of the<a name="line.287"></a>
<FONT color="green">288</FONT>         * area, and sends a {@link RendererChangeEvent} to all registered<a name="line.288"></a>
<FONT color="green">289</FONT>         * listeners.  E.g. setRangeBase(Double.NEGATIVE_INFINITY) lets areas always<a name="line.289"></a>
<FONT color="green">290</FONT>         * reach the lower border of the plotArea.<a name="line.290"></a>
<FONT color="green">291</FONT>         *<a name="line.291"></a>
<FONT color="green">292</FONT>         * @param val  the value on the range axis which defines the default border<a name="line.292"></a>
<FONT color="green">293</FONT>         *             of the area.<a name="line.293"></a>
<FONT color="green">294</FONT>         *<a name="line.294"></a>
<FONT color="green">295</FONT>         * @see #getRangeBase()<a name="line.295"></a>
<FONT color="green">296</FONT>         */<a name="line.296"></a>
<FONT color="green">297</FONT>        public void setRangeBase(double val) {<a name="line.297"></a>
<FONT color="green">298</FONT>            this.rangeBase = val;<a name="line.298"></a>
<FONT color="green">299</FONT>            fireChangeEvent();<a name="line.299"></a>
<FONT color="green">300</FONT>        }<a name="line.300"></a>
<FONT color="green">301</FONT>    <a name="line.301"></a>
<FONT color="green">302</FONT>        /**<a name="line.302"></a>
<FONT color="green">303</FONT>         * Initialises the renderer.  Here we calculate the Java2D y-coordinate for<a name="line.303"></a>
<FONT color="green">304</FONT>         * zero, since all the bars have their bases fixed at zero.<a name="line.304"></a>
<FONT color="green">305</FONT>         *<a name="line.305"></a>
<FONT color="green">306</FONT>         * @param g2  the graphics device.<a name="line.306"></a>
<FONT color="green">307</FONT>         * @param dataArea  the area inside the axes.<a name="line.307"></a>
<FONT color="green">308</FONT>         * @param plot  the plot.<a name="line.308"></a>
<FONT color="green">309</FONT>         * @param data  the data.<a name="line.309"></a>
<FONT color="green">310</FONT>         * @param info  an optional info collection object to return data back to<a name="line.310"></a>
<FONT color="green">311</FONT>         *              the caller.<a name="line.311"></a>
<FONT color="green">312</FONT>         *<a name="line.312"></a>
<FONT color="green">313</FONT>         * @return The number of passes required by the renderer.<a name="line.313"></a>
<FONT color="green">314</FONT>         */<a name="line.314"></a>
<FONT color="green">315</FONT>        public XYItemRendererState initialise(Graphics2D g2,<a name="line.315"></a>
<FONT color="green">316</FONT>                                              Rectangle2D dataArea,<a name="line.316"></a>
<FONT color="green">317</FONT>                                              XYPlot plot,<a name="line.317"></a>
<FONT color="green">318</FONT>                                              XYDataset data,<a name="line.318"></a>
<FONT color="green">319</FONT>                                              PlotRenderingInfo info) {<a name="line.319"></a>
<FONT color="green">320</FONT>    <a name="line.320"></a>
<FONT color="green">321</FONT>    <a name="line.321"></a>
<FONT color="green">322</FONT>            XYItemRendererState state = super.initialise(g2, dataArea, plot, data,<a name="line.322"></a>
<FONT color="green">323</FONT>                    info);<a name="line.323"></a>
<FONT color="green">324</FONT>            // disable visible items optimisation - it doesn't work for this<a name="line.324"></a>
<FONT color="green">325</FONT>            // renderer...<a name="line.325"></a>
<FONT color="green">326</FONT>            state.setProcessVisibleItemsOnly(false);<a name="line.326"></a>
<FONT color="green">327</FONT>            return state;<a name="line.327"></a>
<FONT color="green">328</FONT>    <a name="line.328"></a>
<FONT color="green">329</FONT>        }<a name="line.329"></a>
<FONT color="green">330</FONT>    <a name="line.330"></a>
<FONT color="green">331</FONT>    <a name="line.331"></a>
<FONT color="green">332</FONT>        /**<a name="line.332"></a>
<FONT color="green">333</FONT>         * Draws the visual representation of a single data item.<a name="line.333"></a>
<FONT color="green">334</FONT>         *<a name="line.334"></a>
<FONT color="green">335</FONT>         * @param g2  the graphics device.<a name="line.335"></a>
<FONT color="green">336</FONT>         * @param state  the renderer state.<a name="line.336"></a>
<FONT color="green">337</FONT>         * @param dataArea  the area within which the data is being drawn.<a name="line.337"></a>
<FONT color="green">338</FONT>         * @param info  collects information about the drawing.<a name="line.338"></a>
<FONT color="green">339</FONT>         * @param plot  the plot (can be used to obtain standard color information<a name="line.339"></a>
<FONT color="green">340</FONT>         *              etc).<a name="line.340"></a>
<FONT color="green">341</FONT>         * @param domainAxis  the domain axis.<a name="line.341"></a>
<FONT color="green">342</FONT>         * @param rangeAxis  the range axis.<a name="line.342"></a>
<FONT color="green">343</FONT>         * @param dataset  the dataset.<a name="line.343"></a>
<FONT color="green">344</FONT>         * @param series  the series index (zero-based).<a name="line.344"></a>
<FONT color="green">345</FONT>         * @param item  the item index (zero-based).<a name="line.345"></a>
<FONT color="green">346</FONT>         * @param crosshairState  crosshair information for the plot<a name="line.346"></a>
<FONT color="green">347</FONT>         *                        (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.347"></a>
<FONT color="green">348</FONT>         * @param pass  the pass index.<a name="line.348"></a>
<FONT color="green">349</FONT>         */<a name="line.349"></a>
<FONT color="green">350</FONT>        public void drawItem(Graphics2D g2,<a name="line.350"></a>
<FONT color="green">351</FONT>                             XYItemRendererState state,<a name="line.351"></a>
<FONT color="green">352</FONT>                             Rectangle2D dataArea,<a name="line.352"></a>
<FONT color="green">353</FONT>                             PlotRenderingInfo info,<a name="line.353"></a>
<FONT color="green">354</FONT>                             XYPlot plot,<a name="line.354"></a>
<FONT color="green">355</FONT>                             ValueAxis domainAxis,<a name="line.355"></a>
<FONT color="green">356</FONT>                             ValueAxis rangeAxis,<a name="line.356"></a>
<FONT color="green">357</FONT>                             XYDataset dataset,<a name="line.357"></a>
<FONT color="green">358</FONT>                             int series,<a name="line.358"></a>
<FONT color="green">359</FONT>                             int item,<a name="line.359"></a>
<FONT color="green">360</FONT>                             CrosshairState crosshairState,<a name="line.360"></a>
<FONT color="green">361</FONT>                             int pass) {<a name="line.361"></a>
<FONT color="green">362</FONT>    <a name="line.362"></a>
<FONT color="green">363</FONT>            PlotOrientation orientation = plot.getOrientation();<a name="line.363"></a>
<FONT color="green">364</FONT>    <a name="line.364"></a>
<FONT color="green">365</FONT>            // Get the item count for the series, so that we can know which is the<a name="line.365"></a>
<FONT color="green">366</FONT>            // end of the series.<a name="line.366"></a>
<FONT color="green">367</FONT>            int itemCount = dataset.getItemCount(series);<a name="line.367"></a>
<FONT color="green">368</FONT>    <a name="line.368"></a>
<FONT color="green">369</FONT>            Paint paint = getItemPaint(series, item);<a name="line.369"></a>
<FONT color="green">370</FONT>            Stroke seriesStroke = getItemStroke(series, item);<a name="line.370"></a>
<FONT color="green">371</FONT>            g2.setPaint(paint);<a name="line.371"></a>
<FONT color="green">372</FONT>            g2.setStroke(seriesStroke);<a name="line.372"></a>
<FONT color="green">373</FONT>    <a name="line.373"></a>
<FONT color="green">374</FONT>            // get the data point...<a name="line.374"></a>
<FONT color="green">375</FONT>            double x1 = dataset.getXValue(series, item);<a name="line.375"></a>
<FONT color="green">376</FONT>            double y1 = dataset.getYValue(series, item);<a name="line.376"></a>
<FONT color="green">377</FONT>            double x = x1;<a name="line.377"></a>
<FONT color="green">378</FONT>            double y = Double.isNaN(y1) ? getRangeBase() : y1;<a name="line.378"></a>
<FONT color="green">379</FONT>            double transX1 = domainAxis.valueToJava2D(x, dataArea,<a name="line.379"></a>
<FONT color="green">380</FONT>                    plot.getDomainAxisEdge());<a name="line.380"></a>
<FONT color="green">381</FONT>            double transY1 = rangeAxis.valueToJava2D(y, dataArea,<a name="line.381"></a>
<FONT color="green">382</FONT>                    plot.getRangeAxisEdge());<a name="line.382"></a>
<FONT color="green">383</FONT>    <a name="line.383"></a>
<FONT color="green">384</FONT>            // avoid possible sun.dc.pr.PRException: endPath: bad path<a name="line.384"></a>
<FONT color="green">385</FONT>            transY1 = restrictValueToDataArea(transY1, plot, dataArea);<a name="line.385"></a>
<FONT color="green">386</FONT>    <a name="line.386"></a>
<FONT color="green">387</FONT>            if (this.pArea == null &amp;&amp; !Double.isNaN(y1)) {<a name="line.387"></a>
<FONT color="green">388</FONT>    <a name="line.388"></a>
<FONT color="green">389</FONT>                // Create a new Area for the series<a name="line.389"></a>
<FONT color="green">390</FONT>                this.pArea = new Polygon();<a name="line.390"></a>
<FONT color="green">391</FONT>    <a name="line.391"></a>
<FONT color="green">392</FONT>                // start from Y = rangeBase<a name="line.392"></a>
<FONT color="green">393</FONT>                double transY2 = rangeAxis.valueToJava2D(getRangeBase(), dataArea,<a name="line.393"></a>
<FONT color="green">394</FONT>                        plot.getRangeAxisEdge());<a name="line.394"></a>
<FONT color="green">395</FONT>    <a name="line.395"></a>
<FONT color="green">396</FONT>                // avoid possible sun.dc.pr.PRException: endPath: bad path<a name="line.396"></a>
<FONT color="green">397</FONT>                transY2 = restrictValueToDataArea(transY2, plot, dataArea);<a name="line.397"></a>
<FONT color="green">398</FONT>    <a name="line.398"></a>
<FONT color="green">399</FONT>                // The first point is (x, this.baseYValue)<a name="line.399"></a>
<FONT color="green">400</FONT>                if (orientation == PlotOrientation.VERTICAL) {<a name="line.400"></a>
<FONT color="green">401</FONT>                    this.pArea.addPoint((int) transX1, (int) transY2);<a name="line.401"></a>
<FONT color="green">402</FONT>                }<a name="line.402"></a>
<FONT color="green">403</FONT>                else if (orientation == PlotOrientation.HORIZONTAL) {<a name="line.403"></a>
<FONT color="green">404</FONT>                    this.pArea.addPoint((int) transY2, (int) transX1);<a name="line.404"></a>
<FONT color="green">405</FONT>                }<a name="line.405"></a>
<FONT color="green">406</FONT>            }<a name="line.406"></a>
<FONT color="green">407</FONT>    <a name="line.407"></a>
<FONT color="green">408</FONT>            double transX0 = 0;<a name="line.408"></a>
<FONT color="green">409</FONT>            double transY0 = restrictValueToDataArea(getRangeBase(), plot,<a name="line.409"></a>
<FONT color="green">410</FONT>                    dataArea);<a name="line.410"></a>
<FONT color="green">411</FONT>    <a name="line.411"></a>
<FONT color="green">412</FONT>            double x0;<a name="line.412"></a>
<FONT color="green">413</FONT>            double y0;<a name="line.413"></a>
<FONT color="green">414</FONT>            if (item &gt; 0) {<a name="line.414"></a>
<FONT color="green">415</FONT>                // get the previous data point...<a name="line.415"></a>
<FONT color="green">416</FONT>                x0 = dataset.getXValue(series, item - 1);<a name="line.416"></a>
<FONT color="green">417</FONT>                y0 = Double.isNaN(y1) ? y1 : dataset.getYValue(series, item - 1);<a name="line.417"></a>
<FONT color="green">418</FONT>    <a name="line.418"></a>
<FONT color="green">419</FONT>                x = x0;<a name="line.419"></a>
<FONT color="green">420</FONT>                y = Double.isNaN(y0) ? getRangeBase() : y0;<a name="line.420"></a>
<FONT color="green">421</FONT>                transX0 = domainAxis.valueToJava2D(x, dataArea,<a name="line.421"></a>
<FONT color="green">422</FONT>                        plot.getDomainAxisEdge());<a name="line.422"></a>
<FONT color="green">423</FONT>                transY0 = rangeAxis.valueToJava2D(y, dataArea,<a name="line.423"></a>
<FONT color="green">424</FONT>                        plot.getRangeAxisEdge());<a name="line.424"></a>
<FONT color="green">425</FONT>    <a name="line.425"></a>
<FONT color="green">426</FONT>                // avoid possible sun.dc.pr.PRException: endPath: bad path<a name="line.426"></a>
<FONT color="green">427</FONT>                transY0 = restrictValueToDataArea(transY0, plot, dataArea);<a name="line.427"></a>
<FONT color="green">428</FONT>    <a name="line.428"></a>
<FONT color="green">429</FONT>                if (Double.isNaN(y1)) {<a name="line.429"></a>
<FONT color="green">430</FONT>                    // NULL value -&gt; insert point on base line<a name="line.430"></a>
<FONT color="green">431</FONT>                    // instead of 'step point'<a name="line.431"></a>
<FONT color="green">432</FONT>                    transX1 = transX0;<a name="line.432"></a>
<FONT color="green">433</FONT>                    transY0 = transY1;<a name="line.433"></a>
<FONT color="green">434</FONT>                }<a name="line.434"></a>
<FONT color="green">435</FONT>                if (transY0 != transY1) {<a name="line.435"></a>
<FONT color="green">436</FONT>                    // not just a horizontal bar but need to perform a 'step'.<a name="line.436"></a>
<FONT color="green">437</FONT>                    if (orientation == PlotOrientation.VERTICAL) {<a name="line.437"></a>
<FONT color="green">438</FONT>                        this.pArea.addPoint((int) transX1, (int) transY0);<a name="line.438"></a>
<FONT color="green">439</FONT>                    }<a name="line.439"></a>
<FONT color="green">440</FONT>                    else if (orientation == PlotOrientation.HORIZONTAL) {<a name="line.440"></a>
<FONT color="green">441</FONT>                        this.pArea.addPoint((int) transY0, (int) transX1);<a name="line.441"></a>
<FONT color="green">442</FONT>                    }<a name="line.442"></a>
<FONT color="green">443</FONT>                }<a name="line.443"></a>
<FONT color="green">444</FONT>            }<a name="line.444"></a>
<FONT color="green">445</FONT>    <a name="line.445"></a>
<FONT color="green">446</FONT>            Shape shape = null;<a name="line.446"></a>
<FONT color="green">447</FONT>            if (!Double.isNaN(y1)) {<a name="line.447"></a>
<FONT color="green">448</FONT>                // Add each point to Area (x, y)<a name="line.448"></a>
<FONT color="green">449</FONT>                if (orientation == PlotOrientation.VERTICAL) {<a name="line.449"></a>
<FONT color="green">450</FONT>                    this.pArea.addPoint((int) transX1, (int) transY1);<a name="line.450"></a>
<FONT color="green">451</FONT>                }<a name="line.451"></a>
<FONT color="green">452</FONT>                else if (orientation == PlotOrientation.HORIZONTAL) {<a name="line.452"></a>
<FONT color="green">453</FONT>                    this.pArea.addPoint((int) transY1, (int) transX1);<a name="line.453"></a>
<FONT color="green">454</FONT>                }<a name="line.454"></a>
<FONT color="green">455</FONT>    <a name="line.455"></a>
<FONT color="green">456</FONT>                if (getShapesVisible()) {<a name="line.456"></a>
<FONT color="green">457</FONT>                    shape = getItemShape(series, item);<a name="line.457"></a>
<FONT color="green">458</FONT>                    if (orientation == PlotOrientation.VERTICAL) {<a name="line.458"></a>
<FONT color="green">459</FONT>                        shape = ShapeUtilities.createTranslatedShape(shape,<a name="line.459"></a>
<FONT color="green">460</FONT>                                transX1, transY1);<a name="line.460"></a>
<FONT color="green">461</FONT>                    }<a name="line.461"></a>
<FONT color="green">462</FONT>                    else if (orientation == PlotOrientation.HORIZONTAL) {<a name="line.462"></a>
<FONT color="green">463</FONT>                        shape = ShapeUtilities.createTranslatedShape(shape,<a name="line.463"></a>
<FONT color="green">464</FONT>                                transY1, transX1);<a name="line.464"></a>
<FONT color="green">465</FONT>                    }<a name="line.465"></a>
<FONT color="green">466</FONT>                    if (isShapesFilled()) {<a name="line.466"></a>
<FONT color="green">467</FONT>                        g2.fill(shape);<a name="line.467"></a>
<FONT color="green">468</FONT>                    }<a name="line.468"></a>
<FONT color="green">469</FONT>                    else {<a name="line.469"></a>
<FONT color="green">470</FONT>                        g2.draw(shape);<a name="line.470"></a>
<FONT color="green">471</FONT>                    }<a name="line.471"></a>
<FONT color="green">472</FONT>                }<a name="line.472"></a>
<FONT color="green">473</FONT>                else {<a name="line.473"></a>
<FONT color="green">474</FONT>                    if (orientation == PlotOrientation.VERTICAL) {<a name="line.474"></a>
<FONT color="green">475</FONT>                        shape = new Rectangle2D.Double(transX1 - 2, transY1 - 2,<a name="line.475"></a>
<FONT color="green">476</FONT>                                4.0, 4.0);<a name="line.476"></a>
<FONT color="green">477</FONT>                    }<a name="line.477"></a>
<FONT color="green">478</FONT>                    else if (orientation == PlotOrientation.HORIZONTAL) {<a name="line.478"></a>
<FONT color="green">479</FONT>                        shape = new Rectangle2D.Double(transY1 - 2, transX1 - 2,<a name="line.479"></a>
<FONT color="green">480</FONT>                                4.0, 4.0);<a name="line.480"></a>
<FONT color="green">481</FONT>                    }<a name="line.481"></a>
<FONT color="green">482</FONT>                }<a name="line.482"></a>
<FONT color="green">483</FONT>            }<a name="line.483"></a>
<FONT color="green">484</FONT>    <a name="line.484"></a>
<FONT color="green">485</FONT>            // Check if the item is the last item for the series or if it<a name="line.485"></a>
<FONT color="green">486</FONT>            // is a NULL value and number of items &gt; 0.  We can't draw an area for<a name="line.486"></a>
<FONT color="green">487</FONT>            // a single point.<a name="line.487"></a>
<FONT color="green">488</FONT>            if (getPlotArea() &amp;&amp; item &gt; 0 &amp;&amp; this.pArea != null<a name="line.488"></a>
<FONT color="green">489</FONT>                              &amp;&amp; (item == (itemCount - 1) || Double.isNaN(y1))) {<a name="line.489"></a>
<FONT color="green">490</FONT>    <a name="line.490"></a>
<FONT color="green">491</FONT>                double transY2 = rangeAxis.valueToJava2D(getRangeBase(), dataArea,<a name="line.491"></a>
<FONT color="green">492</FONT>                        plot.getRangeAxisEdge());<a name="line.492"></a>
<FONT color="green">493</FONT>    <a name="line.493"></a>
<FONT color="green">494</FONT>                // avoid possible sun.dc.pr.PRException: endPath: bad path<a name="line.494"></a>
<FONT color="green">495</FONT>                transY2 = restrictValueToDataArea(transY2, plot, dataArea);<a name="line.495"></a>
<FONT color="green">496</FONT>    <a name="line.496"></a>
<FONT color="green">497</FONT>                if (orientation == PlotOrientation.VERTICAL) {<a name="line.497"></a>
<FONT color="green">498</FONT>                    // Add the last point (x,0)<a name="line.498"></a>
<FONT color="green">499</FONT>                    this.pArea.addPoint((int) transX1, (int) transY2);<a name="line.499"></a>
<FONT color="green">500</FONT>                }<a name="line.500"></a>
<FONT color="green">501</FONT>                else if (orientation == PlotOrientation.HORIZONTAL) {<a name="line.501"></a>
<FONT color="green">502</FONT>                    // Add the last point (x,0)<a name="line.502"></a>
<FONT color="green">503</FONT>                    this.pArea.addPoint((int) transY2, (int) transX1);<a name="line.503"></a>
<FONT color="green">504</FONT>                }<a name="line.504"></a>
<FONT color="green">505</FONT>    <a name="line.505"></a>
<FONT color="green">506</FONT>                // fill the polygon<a name="line.506"></a>
<FONT color="green">507</FONT>                g2.fill(this.pArea);<a name="line.507"></a>
<FONT color="green">508</FONT>    <a name="line.508"></a>
<FONT color="green">509</FONT>                // draw an outline around the Area.<a name="line.509"></a>
<FONT color="green">510</FONT>                if (isOutline()) {<a name="line.510"></a>
<FONT color="green">511</FONT>                    g2.setStroke(plot.getOutlineStroke());<a name="line.511"></a>
<FONT color="green">512</FONT>                    g2.setPaint(plot.getOutlinePaint());<a name="line.512"></a>
<FONT color="green">513</FONT>                    g2.draw(this.pArea);<a name="line.513"></a>
<FONT color="green">514</FONT>                }<a name="line.514"></a>
<FONT color="green">515</FONT>    <a name="line.515"></a>
<FONT color="green">516</FONT>                // start new area when needed (see above)<a name="line.516"></a>
<FONT color="green">517</FONT>                this.pArea = null;<a name="line.517"></a>
<FONT color="green">518</FONT>            }<a name="line.518"></a>
<FONT color="green">519</FONT>    <a name="line.519"></a>
<FONT color="green">520</FONT>            // do we need to update the crosshair values?<a name="line.520"></a>
<FONT color="green">521</FONT>            if (!Double.isNaN(y1)) {<a name="line.521"></a>
<FONT color="green">522</FONT>                int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);<a name="line.522"></a>
<FONT color="green">523</FONT>                int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);<a name="line.523"></a>
<FONT color="green">524</FONT>                updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,<a name="line.524"></a>
<FONT color="green">525</FONT>                        rangeAxisIndex, transX1, transY1, orientation);<a name="line.525"></a>
<FONT color="green">526</FONT>            }<a name="line.526"></a>
<FONT color="green">527</FONT>    <a name="line.527"></a>
<FONT color="green">528</FONT>            // collect entity and tool tip information...<a name="line.528"></a>
<FONT color="green">529</FONT>            EntityCollection entities = state.getEntityCollection();<a name="line.529"></a>
<FONT color="green">530</FONT>            if (entities != null) {<a name="line.530"></a>
<FONT color="green">531</FONT>                addEntity(entities, shape, dataset, series, item, transX1, transY1);<a name="line.531"></a>
<FONT color="green">532</FONT>            }<a name="line.532"></a>
<FONT color="green">533</FONT>        }<a name="line.533"></a>
<FONT color="green">534</FONT>    <a name="line.534"></a>
<FONT color="green">535</FONT>        /**<a name="line.535"></a>
<FONT color="green">536</FONT>         * Tests this renderer for equality with an arbitrary object.<a name="line.536"></a>
<FONT color="green">537</FONT>         *<a name="line.537"></a>
<FONT color="green">538</FONT>         * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.538"></a>
<FONT color="green">539</FONT>         *<a name="line.539"></a>
<FONT color="green">540</FONT>         * @return A boolean.<a name="line.540"></a>
<FONT color="green">541</FONT>         */<a name="line.541"></a>
<FONT color="green">542</FONT>        public boolean equals(Object obj) {<a name="line.542"></a>
<FONT color="green">543</FONT>            if (obj == this) {<a name="line.543"></a>
<FONT color="green">544</FONT>                return true;<a name="line.544"></a>
<FONT color="green">545</FONT>            }<a name="line.545"></a>
<FONT color="green">546</FONT>            if (!(obj instanceof XYStepAreaRenderer)) {<a name="line.546"></a>
<FONT color="green">547</FONT>                return false;<a name="line.547"></a>
<FONT color="green">548</FONT>            }<a name="line.548"></a>
<FONT color="green">549</FONT>            XYStepAreaRenderer that = (XYStepAreaRenderer) obj;<a name="line.549"></a>
<FONT color="green">550</FONT>            if (this.showOutline != that.showOutline) {<a name="line.550"></a>
<FONT color="green">551</FONT>                return false;<a name="line.551"></a>
<FONT color="green">552</FONT>            }<a name="line.552"></a>
<FONT color="green">553</FONT>            if (this.shapesVisible != that.shapesVisible) {<a name="line.553"></a>
<FONT color="green">554</FONT>                return false;<a name="line.554"></a>
<FONT color="green">555</FONT>            }<a name="line.555"></a>
<FONT color="green">556</FONT>            if (this.shapesFilled != that.shapesFilled) {<a name="line.556"></a>
<FONT color="green">557</FONT>                return false;<a name="line.557"></a>
<FONT color="green">558</FONT>            }<a name="line.558"></a>
<FONT color="green">559</FONT>            if (this.plotArea != that.plotArea) {<a name="line.559"></a>
<FONT color="green">560</FONT>                return false;<a name="line.560"></a>
<FONT color="green">561</FONT>            }<a name="line.561"></a>
<FONT color="green">562</FONT>            if (this.rangeBase != that.rangeBase) {<a name="line.562"></a>
<FONT color="green">563</FONT>                return false;<a name="line.563"></a>
<FONT color="green">564</FONT>            }<a name="line.564"></a>
<FONT color="green">565</FONT>            return super.equals(obj);<a name="line.565"></a>
<FONT color="green">566</FONT>        }<a name="line.566"></a>
<FONT color="green">567</FONT>    <a name="line.567"></a>
<FONT color="green">568</FONT>        /**<a name="line.568"></a>
<FONT color="green">569</FONT>         * Returns a clone of the renderer.<a name="line.569"></a>
<FONT color="green">570</FONT>         *<a name="line.570"></a>
<FONT color="green">571</FONT>         * @return A clone.<a name="line.571"></a>
<FONT color="green">572</FONT>         *<a name="line.572"></a>
<FONT color="green">573</FONT>         * @throws CloneNotSupportedException  if the renderer cannot be cloned.<a name="line.573"></a>
<FONT color="green">574</FONT>         */<a name="line.574"></a>
<FONT color="green">575</FONT>        public Object clone() throws CloneNotSupportedException {<a name="line.575"></a>
<FONT color="green">576</FONT>            return super.clone();<a name="line.576"></a>
<FONT color="green">577</FONT>        }<a name="line.577"></a>
<FONT color="green">578</FONT>    <a name="line.578"></a>
<FONT color="green">579</FONT>        /**<a name="line.579"></a>
<FONT color="green">580</FONT>         * Helper method which returns a value if it lies<a name="line.580"></a>
<FONT color="green">581</FONT>         * inside the visible dataArea and otherwise the corresponding<a name="line.581"></a>
<FONT color="green">582</FONT>         * coordinate on the border of the dataArea. The PlotOrientation<a name="line.582"></a>
<FONT color="green">583</FONT>         * is taken into account.<a name="line.583"></a>
<FONT color="green">584</FONT>         * Useful to avoid possible sun.dc.pr.PRException: endPath: bad path<a name="line.584"></a>
<FONT color="green">585</FONT>         * which occurs when trying to draw lines/shapes which in large part<a name="line.585"></a>
<FONT color="green">586</FONT>         * lie outside of the visible dataArea.<a name="line.586"></a>
<FONT color="green">587</FONT>         *<a name="line.587"></a>
<FONT color="green">588</FONT>         * @param value the value which shall be<a name="line.588"></a>
<FONT color="green">589</FONT>         * @param dataArea  the area within which the data is being drawn.<a name="line.589"></a>
<FONT color="green">590</FONT>         * @param plot  the plot (can be used to obtain standard color<a name="line.590"></a>
<FONT color="green">591</FONT>         *              information etc).<a name="line.591"></a>
<FONT color="green">592</FONT>         * @return &lt;code&gt;double&lt;/code&gt; value inside the data area.<a name="line.592"></a>
<FONT color="green">593</FONT>         */<a name="line.593"></a>
<FONT color="green">594</FONT>        protected static double restrictValueToDataArea(double value,<a name="line.594"></a>
<FONT color="green">595</FONT>                                                        XYPlot plot,<a name="line.595"></a>
<FONT color="green">596</FONT>                                                        Rectangle2D dataArea) {<a name="line.596"></a>
<FONT color="green">597</FONT>            double min = 0;<a name="line.597"></a>
<FONT color="green">598</FONT>            double max = 0;<a name="line.598"></a>
<FONT color="green">599</FONT>            if (plot.getOrientation() == PlotOrientation.VERTICAL) {<a name="line.599"></a>
<FONT color="green">600</FONT>                min = dataArea.getMinY();<a name="line.600"></a>
<FONT color="green">601</FONT>                max = dataArea.getMaxY();<a name="line.601"></a>
<FONT color="green">602</FONT>            }<a name="line.602"></a>
<FONT color="green">603</FONT>            else if (plot.getOrientation() ==  PlotOrientation.HORIZONTAL) {<a name="line.603"></a>
<FONT color="green">604</FONT>                min = dataArea.getMinX();<a name="line.604"></a>
<FONT color="green">605</FONT>                max = dataArea.getMaxX();<a name="line.605"></a>
<FONT color="green">606</FONT>            }<a name="line.606"></a>
<FONT color="green">607</FONT>            if (value &lt; min) {<a name="line.607"></a>
<FONT color="green">608</FONT>                value = min;<a name="line.608"></a>
<FONT color="green">609</FONT>            }<a name="line.609"></a>
<FONT color="green">610</FONT>            else if (value &gt; max) {<a name="line.610"></a>
<FONT color="green">611</FONT>                value = max;<a name="line.611"></a>
<FONT color="green">612</FONT>            }<a name="line.612"></a>
<FONT color="green">613</FONT>            return value;<a name="line.613"></a>
<FONT color="green">614</FONT>        }<a name="line.614"></a>
<FONT color="green">615</FONT>    <a name="line.615"></a>
<FONT color="green">616</FONT>    }<a name="line.616"></a>




























































</PRE>
</BODY>
</HTML>
