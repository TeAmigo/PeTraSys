<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ===========================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JFreeChart : a free chart library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ===========================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     *<a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jfreechart/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it<a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by<a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or<a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but<a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY<a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public<a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,<a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.<a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc.<a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     *<a name="line.26"></a>
<FONT color="green">027</FONT>     * -------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * ClipPath.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * -------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C) Copyright 2003-2008, by David M. O'Donnell and Contributors.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  David M. O'Donnell;<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   David Gilbert (for Object Refinery Limited);<a name="line.33"></a>
<FONT color="green">034</FONT>     *                   Nicolas Brodu;<a name="line.34"></a>
<FONT color="green">035</FONT>     *<a name="line.35"></a>
<FONT color="green">036</FONT>     * Changes<a name="line.36"></a>
<FONT color="green">037</FONT>     * -------<a name="line.37"></a>
<FONT color="green">038</FONT>     * 22-Apr-2003 : Added standard header (DG);<a name="line.38"></a>
<FONT color="green">039</FONT>     * 09-May-2003 : Added AxisLocation (DG);<a name="line.39"></a>
<FONT color="green">040</FONT>     * 11-Sep-2003 : Implemented Cloneable (NB);<a name="line.40"></a>
<FONT color="green">041</FONT>     * 21-Jan-2004 : Update for renamed method in ValueAxis (DG);<a name="line.41"></a>
<FONT color="green">042</FONT>     * ------------- JFREECHART 1.0.x ---------------------------------------------<a name="line.42"></a>
<FONT color="green">043</FONT>     * 31-Jan-2007 : Deprecated (DG);<a name="line.43"></a>
<FONT color="green">044</FONT>     *<a name="line.44"></a>
<FONT color="green">045</FONT>     */<a name="line.45"></a>
<FONT color="green">046</FONT>    <a name="line.46"></a>
<FONT color="green">047</FONT>    package org.jfree.chart;<a name="line.47"></a>
<FONT color="green">048</FONT>    <a name="line.48"></a>
<FONT color="green">049</FONT>    import java.awt.BasicStroke;<a name="line.49"></a>
<FONT color="green">050</FONT>    import java.awt.Composite;<a name="line.50"></a>
<FONT color="green">051</FONT>    import java.awt.Graphics2D;<a name="line.51"></a>
<FONT color="green">052</FONT>    import java.awt.Paint;<a name="line.52"></a>
<FONT color="green">053</FONT>    import java.awt.Stroke;<a name="line.53"></a>
<FONT color="green">054</FONT>    import java.awt.geom.GeneralPath;<a name="line.54"></a>
<FONT color="green">055</FONT>    import java.awt.geom.Rectangle2D;<a name="line.55"></a>
<FONT color="green">056</FONT>    <a name="line.56"></a>
<FONT color="green">057</FONT>    import org.jfree.chart.axis.ValueAxis;<a name="line.57"></a>
<FONT color="green">058</FONT>    import org.jfree.chart.plot.XYPlot;<a name="line.58"></a>
<FONT color="green">059</FONT>    import org.jfree.chart.renderer.xy.XYBlockRenderer;<a name="line.59"></a>
<FONT color="green">060</FONT>    import org.jfree.ui.RectangleEdge;<a name="line.60"></a>
<FONT color="green">061</FONT>    <a name="line.61"></a>
<FONT color="green">062</FONT>    /**<a name="line.62"></a>
<FONT color="green">063</FONT>     * This class would typically be used with a<a name="line.63"></a>
<FONT color="green">064</FONT>     * {@link org.jfree.chart.plot.ContourPlot}.  It allows the user to define a<a name="line.64"></a>
<FONT color="green">065</FONT>     * &lt;code&gt;GeneralPath&lt;/code&gt; curve in plot coordinates.  This curve can then be<a name="line.65"></a>
<FONT color="green">066</FONT>     * used mask off or define regions within the contour plot.  The data must be<a name="line.66"></a>
<FONT color="green">067</FONT>     * sorted.<a name="line.67"></a>
<FONT color="green">068</FONT>     *<a name="line.68"></a>
<FONT color="green">069</FONT>     * @deprecated This class is no longer supported (as of version 1.0.4).  If<a name="line.69"></a>
<FONT color="green">070</FONT>     *     you are creating contour plots, please try to use {@link XYPlot} and<a name="line.70"></a>
<FONT color="green">071</FONT>     *     {@link XYBlockRenderer}.<a name="line.71"></a>
<FONT color="green">072</FONT>     */<a name="line.72"></a>
<FONT color="green">073</FONT>    public class ClipPath implements Cloneable {<a name="line.73"></a>
<FONT color="green">074</FONT>    <a name="line.74"></a>
<FONT color="green">075</FONT>        /** The x values. */<a name="line.75"></a>
<FONT color="green">076</FONT>        private double[] xValue = null;<a name="line.76"></a>
<FONT color="green">077</FONT>    <a name="line.77"></a>
<FONT color="green">078</FONT>        /** The y values. */<a name="line.78"></a>
<FONT color="green">079</FONT>        private double[] yValue = null;<a name="line.79"></a>
<FONT color="green">080</FONT>    <a name="line.80"></a>
<FONT color="green">081</FONT>        /** Controls whether drawing will be clipped (<a name="line.81"></a>
<FONT color="green">082</FONT>         * false would still allow the drawing or filling of path */<a name="line.82"></a>
<FONT color="green">083</FONT>        private boolean clip = true;<a name="line.83"></a>
<FONT color="green">084</FONT>    <a name="line.84"></a>
<FONT color="green">085</FONT>        /** Controls whether the path is drawn as an outline. */<a name="line.85"></a>
<FONT color="green">086</FONT>        private boolean drawPath = false;<a name="line.86"></a>
<FONT color="green">087</FONT>    <a name="line.87"></a>
<FONT color="green">088</FONT>        /** Controls whether the path is filled. */<a name="line.88"></a>
<FONT color="green">089</FONT>        private boolean fillPath = false;<a name="line.89"></a>
<FONT color="green">090</FONT>    <a name="line.90"></a>
<FONT color="green">091</FONT>        /** The fill paint. */<a name="line.91"></a>
<FONT color="green">092</FONT>        private Paint fillPaint = null;<a name="line.92"></a>
<FONT color="green">093</FONT>    <a name="line.93"></a>
<FONT color="green">094</FONT>        /** The draw paint. */<a name="line.94"></a>
<FONT color="green">095</FONT>        private Paint drawPaint = null;<a name="line.95"></a>
<FONT color="green">096</FONT>    <a name="line.96"></a>
<FONT color="green">097</FONT>        /** The draw stroke. */<a name="line.97"></a>
<FONT color="green">098</FONT>        private Stroke drawStroke = null;<a name="line.98"></a>
<FONT color="green">099</FONT>    <a name="line.99"></a>
<FONT color="green">100</FONT>        /** The composite. */<a name="line.100"></a>
<FONT color="green">101</FONT>        private Composite composite = null;<a name="line.101"></a>
<FONT color="green">102</FONT>    <a name="line.102"></a>
<FONT color="green">103</FONT>        /**<a name="line.103"></a>
<FONT color="green">104</FONT>         * Constructor for ClipPath.<a name="line.104"></a>
<FONT color="green">105</FONT>         */<a name="line.105"></a>
<FONT color="green">106</FONT>        public ClipPath() {<a name="line.106"></a>
<FONT color="green">107</FONT>            super();<a name="line.107"></a>
<FONT color="green">108</FONT>        }<a name="line.108"></a>
<FONT color="green">109</FONT>    <a name="line.109"></a>
<FONT color="green">110</FONT>        /**<a name="line.110"></a>
<FONT color="green">111</FONT>         * Constructor for ClipPath.<a name="line.111"></a>
<FONT color="green">112</FONT>         * Default values are assumed for the fillPath and drawPath options as<a name="line.112"></a>
<FONT color="green">113</FONT>         * false and true respectively.  The fillPaint is set to Color.GRAY, the<a name="line.113"></a>
<FONT color="green">114</FONT>         * drawColor is Color.BLUE, the stroke is BasicStroke(1)<a name="line.114"></a>
<FONT color="green">115</FONT>         * and the composite is AlphaComposite.Src.<a name="line.115"></a>
<FONT color="green">116</FONT>         *<a name="line.116"></a>
<FONT color="green">117</FONT>         * @param xValue  x coordinates of curved to be created<a name="line.117"></a>
<FONT color="green">118</FONT>         * @param yValue  y coordinates of curved to be created<a name="line.118"></a>
<FONT color="green">119</FONT>         */<a name="line.119"></a>
<FONT color="green">120</FONT>        public ClipPath(double[] xValue, double[] yValue) {<a name="line.120"></a>
<FONT color="green">121</FONT>            this(xValue, yValue, true, false, true);<a name="line.121"></a>
<FONT color="green">122</FONT>        }<a name="line.122"></a>
<FONT color="green">123</FONT>    <a name="line.123"></a>
<FONT color="green">124</FONT>    <a name="line.124"></a>
<FONT color="green">125</FONT>        /**<a name="line.125"></a>
<FONT color="green">126</FONT>         * Constructor for ClipPath.<a name="line.126"></a>
<FONT color="green">127</FONT>         * The fillPaint is set to Color.GRAY, the drawColor is Color.BLUE, the<a name="line.127"></a>
<FONT color="green">128</FONT>         * stroke is BasicStroke(1) and the composite is AlphaComposite.Src.<a name="line.128"></a>
<FONT color="green">129</FONT>         *<a name="line.129"></a>
<FONT color="green">130</FONT>         * @param xValue  x coordinates of curved to be created<a name="line.130"></a>
<FONT color="green">131</FONT>         * @param yValue  y coordinates of curved to be created<a name="line.131"></a>
<FONT color="green">132</FONT>         * @param clip  clip?<a name="line.132"></a>
<FONT color="green">133</FONT>         * @param fillPath  whether the path is to filled<a name="line.133"></a>
<FONT color="green">134</FONT>         * @param drawPath  whether the path is to drawn as an outline<a name="line.134"></a>
<FONT color="green">135</FONT>         */<a name="line.135"></a>
<FONT color="green">136</FONT>        public ClipPath(double[] xValue, double[] yValue,<a name="line.136"></a>
<FONT color="green">137</FONT>                        boolean clip, boolean fillPath, boolean drawPath) {<a name="line.137"></a>
<FONT color="green">138</FONT>            this.xValue = xValue;<a name="line.138"></a>
<FONT color="green">139</FONT>            this.yValue = yValue;<a name="line.139"></a>
<FONT color="green">140</FONT>    <a name="line.140"></a>
<FONT color="green">141</FONT>            this.clip = clip;<a name="line.141"></a>
<FONT color="green">142</FONT>            this.fillPath = fillPath;<a name="line.142"></a>
<FONT color="green">143</FONT>            this.drawPath = drawPath;<a name="line.143"></a>
<FONT color="green">144</FONT>    <a name="line.144"></a>
<FONT color="green">145</FONT>            this.fillPaint = java.awt.Color.gray;<a name="line.145"></a>
<FONT color="green">146</FONT>            this.drawPaint = java.awt.Color.blue;<a name="line.146"></a>
<FONT color="green">147</FONT>            this.drawStroke = new BasicStroke(1);<a name="line.147"></a>
<FONT color="green">148</FONT>            this.composite = java.awt.AlphaComposite.Src;<a name="line.148"></a>
<FONT color="green">149</FONT>        }<a name="line.149"></a>
<FONT color="green">150</FONT>    <a name="line.150"></a>
<FONT color="green">151</FONT>        /**<a name="line.151"></a>
<FONT color="green">152</FONT>         * Constructor for ClipPath.<a name="line.152"></a>
<FONT color="green">153</FONT>         *<a name="line.153"></a>
<FONT color="green">154</FONT>         * @param xValue  x coordinates of curved to be created<a name="line.154"></a>
<FONT color="green">155</FONT>         * @param yValue  y coordinates of curved to be created<a name="line.155"></a>
<FONT color="green">156</FONT>         * @param fillPath  whether the path is to filled<a name="line.156"></a>
<FONT color="green">157</FONT>         * @param drawPath  whether the path is to drawn as an outline<a name="line.157"></a>
<FONT color="green">158</FONT>         * @param fillPaint  the fill paint<a name="line.158"></a>
<FONT color="green">159</FONT>         * @param drawPaint  the outline stroke color<a name="line.159"></a>
<FONT color="green">160</FONT>         * @param drawStroke  the stroke style<a name="line.160"></a>
<FONT color="green">161</FONT>         * @param composite  the composite rule<a name="line.161"></a>
<FONT color="green">162</FONT>         */<a name="line.162"></a>
<FONT color="green">163</FONT>        public ClipPath(double[] xValue, double[] yValue, boolean fillPath,<a name="line.163"></a>
<FONT color="green">164</FONT>                        boolean drawPath, Paint fillPaint, Paint drawPaint,<a name="line.164"></a>
<FONT color="green">165</FONT>                        Stroke drawStroke, Composite composite) {<a name="line.165"></a>
<FONT color="green">166</FONT>    <a name="line.166"></a>
<FONT color="green">167</FONT>            this.xValue = xValue;<a name="line.167"></a>
<FONT color="green">168</FONT>            this.yValue = yValue;<a name="line.168"></a>
<FONT color="green">169</FONT>    <a name="line.169"></a>
<FONT color="green">170</FONT>            this.fillPath = fillPath;<a name="line.170"></a>
<FONT color="green">171</FONT>            this.drawPath = drawPath;<a name="line.171"></a>
<FONT color="green">172</FONT>    <a name="line.172"></a>
<FONT color="green">173</FONT>            this.fillPaint = fillPaint;<a name="line.173"></a>
<FONT color="green">174</FONT>            this.drawPaint = drawPaint;<a name="line.174"></a>
<FONT color="green">175</FONT>            this.drawStroke = drawStroke;<a name="line.175"></a>
<FONT color="green">176</FONT>            this.composite = composite;<a name="line.176"></a>
<FONT color="green">177</FONT>    <a name="line.177"></a>
<FONT color="green">178</FONT>        }<a name="line.178"></a>
<FONT color="green">179</FONT>    <a name="line.179"></a>
<FONT color="green">180</FONT>        /**<a name="line.180"></a>
<FONT color="green">181</FONT>         * Draws the clip path.<a name="line.181"></a>
<FONT color="green">182</FONT>         *<a name="line.182"></a>
<FONT color="green">183</FONT>         * @param g2  current graphics2D.<a name="line.183"></a>
<FONT color="green">184</FONT>         * @param dataArea  the dataArea that the plot is being draw in.<a name="line.184"></a>
<FONT color="green">185</FONT>         * @param horizontalAxis  the horizontal axis.<a name="line.185"></a>
<FONT color="green">186</FONT>         * @param verticalAxis  the vertical axis.<a name="line.186"></a>
<FONT color="green">187</FONT>         *<a name="line.187"></a>
<FONT color="green">188</FONT>         * @return The GeneralPath defining the outline<a name="line.188"></a>
<FONT color="green">189</FONT>         */<a name="line.189"></a>
<FONT color="green">190</FONT>        public GeneralPath draw(Graphics2D g2,<a name="line.190"></a>
<FONT color="green">191</FONT>                                Rectangle2D dataArea,<a name="line.191"></a>
<FONT color="green">192</FONT>                                ValueAxis horizontalAxis, ValueAxis verticalAxis) {<a name="line.192"></a>
<FONT color="green">193</FONT>    <a name="line.193"></a>
<FONT color="green">194</FONT>            GeneralPath generalPath = generateClipPath(<a name="line.194"></a>
<FONT color="green">195</FONT>                dataArea, horizontalAxis, verticalAxis<a name="line.195"></a>
<FONT color="green">196</FONT>            );<a name="line.196"></a>
<FONT color="green">197</FONT>            if (this.fillPath || this.drawPath) {<a name="line.197"></a>
<FONT color="green">198</FONT>                Composite saveComposite = g2.getComposite();<a name="line.198"></a>
<FONT color="green">199</FONT>                Paint savePaint = g2.getPaint();<a name="line.199"></a>
<FONT color="green">200</FONT>                Stroke saveStroke = g2.getStroke();<a name="line.200"></a>
<FONT color="green">201</FONT>    <a name="line.201"></a>
<FONT color="green">202</FONT>                if (this.fillPaint != null) {<a name="line.202"></a>
<FONT color="green">203</FONT>                    g2.setPaint(this.fillPaint);<a name="line.203"></a>
<FONT color="green">204</FONT>                }<a name="line.204"></a>
<FONT color="green">205</FONT>                if (this.composite != null) {<a name="line.205"></a>
<FONT color="green">206</FONT>                    g2.setComposite(this.composite);<a name="line.206"></a>
<FONT color="green">207</FONT>                }<a name="line.207"></a>
<FONT color="green">208</FONT>                if (this.fillPath) {<a name="line.208"></a>
<FONT color="green">209</FONT>                    g2.fill(generalPath);<a name="line.209"></a>
<FONT color="green">210</FONT>                }<a name="line.210"></a>
<FONT color="green">211</FONT>    <a name="line.211"></a>
<FONT color="green">212</FONT>                if (this.drawStroke != null) {<a name="line.212"></a>
<FONT color="green">213</FONT>                    g2.setStroke(this.drawStroke);<a name="line.213"></a>
<FONT color="green">214</FONT>                }<a name="line.214"></a>
<FONT color="green">215</FONT>                if (this.drawPath) {<a name="line.215"></a>
<FONT color="green">216</FONT>                    g2.draw(generalPath);<a name="line.216"></a>
<FONT color="green">217</FONT>                }<a name="line.217"></a>
<FONT color="green">218</FONT>                g2.setPaint(savePaint);<a name="line.218"></a>
<FONT color="green">219</FONT>                g2.setComposite(saveComposite);<a name="line.219"></a>
<FONT color="green">220</FONT>                g2.setStroke(saveStroke);<a name="line.220"></a>
<FONT color="green">221</FONT>            }<a name="line.221"></a>
<FONT color="green">222</FONT>            return generalPath;<a name="line.222"></a>
<FONT color="green">223</FONT>    <a name="line.223"></a>
<FONT color="green">224</FONT>        }<a name="line.224"></a>
<FONT color="green">225</FONT>    <a name="line.225"></a>
<FONT color="green">226</FONT>        /**<a name="line.226"></a>
<FONT color="green">227</FONT>         * Generates the clip path.<a name="line.227"></a>
<FONT color="green">228</FONT>         *<a name="line.228"></a>
<FONT color="green">229</FONT>         * @param dataArea  the dataArea that the plot is being draw in.<a name="line.229"></a>
<FONT color="green">230</FONT>         * @param horizontalAxis  the horizontal axis.<a name="line.230"></a>
<FONT color="green">231</FONT>         * @param verticalAxis  the vertical axis.<a name="line.231"></a>
<FONT color="green">232</FONT>         *<a name="line.232"></a>
<FONT color="green">233</FONT>         * @return The GeneralPath defining the outline<a name="line.233"></a>
<FONT color="green">234</FONT>         */<a name="line.234"></a>
<FONT color="green">235</FONT>        public GeneralPath generateClipPath(Rectangle2D dataArea,<a name="line.235"></a>
<FONT color="green">236</FONT>                                            ValueAxis horizontalAxis,<a name="line.236"></a>
<FONT color="green">237</FONT>                                            ValueAxis verticalAxis) {<a name="line.237"></a>
<FONT color="green">238</FONT>    <a name="line.238"></a>
<FONT color="green">239</FONT>            GeneralPath generalPath = new GeneralPath();<a name="line.239"></a>
<FONT color="green">240</FONT>            double transX = horizontalAxis.valueToJava2D(<a name="line.240"></a>
<FONT color="green">241</FONT>                this.xValue[0], dataArea, RectangleEdge.BOTTOM<a name="line.241"></a>
<FONT color="green">242</FONT>            );<a name="line.242"></a>
<FONT color="green">243</FONT>            double transY = verticalAxis.valueToJava2D(<a name="line.243"></a>
<FONT color="green">244</FONT>                this.yValue[0], dataArea, RectangleEdge.LEFT<a name="line.244"></a>
<FONT color="green">245</FONT>            );<a name="line.245"></a>
<FONT color="green">246</FONT>            generalPath.moveTo((float) transX, (float) transY);<a name="line.246"></a>
<FONT color="green">247</FONT>            for (int k = 0; k &lt; this.yValue.length; k++) {<a name="line.247"></a>
<FONT color="green">248</FONT>                transX = horizontalAxis.valueToJava2D(<a name="line.248"></a>
<FONT color="green">249</FONT>                    this.xValue[k], dataArea, RectangleEdge.BOTTOM<a name="line.249"></a>
<FONT color="green">250</FONT>                );<a name="line.250"></a>
<FONT color="green">251</FONT>                transY = verticalAxis.valueToJava2D(<a name="line.251"></a>
<FONT color="green">252</FONT>                    this.yValue[k], dataArea, RectangleEdge.LEFT<a name="line.252"></a>
<FONT color="green">253</FONT>                );<a name="line.253"></a>
<FONT color="green">254</FONT>                generalPath.lineTo((float) transX, (float) transY);<a name="line.254"></a>
<FONT color="green">255</FONT>            }<a name="line.255"></a>
<FONT color="green">256</FONT>            generalPath.closePath();<a name="line.256"></a>
<FONT color="green">257</FONT>    <a name="line.257"></a>
<FONT color="green">258</FONT>            return generalPath;<a name="line.258"></a>
<FONT color="green">259</FONT>    <a name="line.259"></a>
<FONT color="green">260</FONT>        }<a name="line.260"></a>
<FONT color="green">261</FONT>    <a name="line.261"></a>
<FONT color="green">262</FONT>        /**<a name="line.262"></a>
<FONT color="green">263</FONT>         * Returns the composite.<a name="line.263"></a>
<FONT color="green">264</FONT>         *<a name="line.264"></a>
<FONT color="green">265</FONT>         * @return Composite<a name="line.265"></a>
<FONT color="green">266</FONT>         */<a name="line.266"></a>
<FONT color="green">267</FONT>        public Composite getComposite() {<a name="line.267"></a>
<FONT color="green">268</FONT>            return this.composite;<a name="line.268"></a>
<FONT color="green">269</FONT>        }<a name="line.269"></a>
<FONT color="green">270</FONT>    <a name="line.270"></a>
<FONT color="green">271</FONT>        /**<a name="line.271"></a>
<FONT color="green">272</FONT>         * Returns the drawPaint.<a name="line.272"></a>
<FONT color="green">273</FONT>         *<a name="line.273"></a>
<FONT color="green">274</FONT>         * @return Paint<a name="line.274"></a>
<FONT color="green">275</FONT>         */<a name="line.275"></a>
<FONT color="green">276</FONT>        public Paint getDrawPaint() {<a name="line.276"></a>
<FONT color="green">277</FONT>            return this.drawPaint;<a name="line.277"></a>
<FONT color="green">278</FONT>        }<a name="line.278"></a>
<FONT color="green">279</FONT>    <a name="line.279"></a>
<FONT color="green">280</FONT>        /**<a name="line.280"></a>
<FONT color="green">281</FONT>         * Returns the drawPath.<a name="line.281"></a>
<FONT color="green">282</FONT>         *<a name="line.282"></a>
<FONT color="green">283</FONT>         * @return boolean<a name="line.283"></a>
<FONT color="green">284</FONT>         */<a name="line.284"></a>
<FONT color="green">285</FONT>        public boolean isDrawPath() {<a name="line.285"></a>
<FONT color="green">286</FONT>            return this.drawPath;<a name="line.286"></a>
<FONT color="green">287</FONT>        }<a name="line.287"></a>
<FONT color="green">288</FONT>    <a name="line.288"></a>
<FONT color="green">289</FONT>        /**<a name="line.289"></a>
<FONT color="green">290</FONT>         * Returns the drawStroke.<a name="line.290"></a>
<FONT color="green">291</FONT>         *<a name="line.291"></a>
<FONT color="green">292</FONT>         * @return Stroke<a name="line.292"></a>
<FONT color="green">293</FONT>         */<a name="line.293"></a>
<FONT color="green">294</FONT>        public Stroke getDrawStroke() {<a name="line.294"></a>
<FONT color="green">295</FONT>            return this.drawStroke;<a name="line.295"></a>
<FONT color="green">296</FONT>        }<a name="line.296"></a>
<FONT color="green">297</FONT>    <a name="line.297"></a>
<FONT color="green">298</FONT>        /**<a name="line.298"></a>
<FONT color="green">299</FONT>         * Returns the fillPaint.<a name="line.299"></a>
<FONT color="green">300</FONT>         *<a name="line.300"></a>
<FONT color="green">301</FONT>         * @return Paint<a name="line.301"></a>
<FONT color="green">302</FONT>         */<a name="line.302"></a>
<FONT color="green">303</FONT>        public Paint getFillPaint() {<a name="line.303"></a>
<FONT color="green">304</FONT>            return this.fillPaint;<a name="line.304"></a>
<FONT color="green">305</FONT>        }<a name="line.305"></a>
<FONT color="green">306</FONT>    <a name="line.306"></a>
<FONT color="green">307</FONT>        /**<a name="line.307"></a>
<FONT color="green">308</FONT>         * Returns the fillPath.<a name="line.308"></a>
<FONT color="green">309</FONT>         *<a name="line.309"></a>
<FONT color="green">310</FONT>         * @return boolean<a name="line.310"></a>
<FONT color="green">311</FONT>         */<a name="line.311"></a>
<FONT color="green">312</FONT>        public boolean isFillPath() {<a name="line.312"></a>
<FONT color="green">313</FONT>            return this.fillPath;<a name="line.313"></a>
<FONT color="green">314</FONT>        }<a name="line.314"></a>
<FONT color="green">315</FONT>    <a name="line.315"></a>
<FONT color="green">316</FONT>        /**<a name="line.316"></a>
<FONT color="green">317</FONT>         * Returns the xValue.<a name="line.317"></a>
<FONT color="green">318</FONT>         *<a name="line.318"></a>
<FONT color="green">319</FONT>         * @return double[]<a name="line.319"></a>
<FONT color="green">320</FONT>         */<a name="line.320"></a>
<FONT color="green">321</FONT>        public double[] getXValue() {<a name="line.321"></a>
<FONT color="green">322</FONT>            return this.xValue;<a name="line.322"></a>
<FONT color="green">323</FONT>        }<a name="line.323"></a>
<FONT color="green">324</FONT>    <a name="line.324"></a>
<FONT color="green">325</FONT>        /**<a name="line.325"></a>
<FONT color="green">326</FONT>         * Returns the yValue.<a name="line.326"></a>
<FONT color="green">327</FONT>         *<a name="line.327"></a>
<FONT color="green">328</FONT>         * @return double[]<a name="line.328"></a>
<FONT color="green">329</FONT>         */<a name="line.329"></a>
<FONT color="green">330</FONT>        public double[] getYValue() {<a name="line.330"></a>
<FONT color="green">331</FONT>            return this.yValue;<a name="line.331"></a>
<FONT color="green">332</FONT>        }<a name="line.332"></a>
<FONT color="green">333</FONT>    <a name="line.333"></a>
<FONT color="green">334</FONT>        /**<a name="line.334"></a>
<FONT color="green">335</FONT>         * Sets the composite.<a name="line.335"></a>
<FONT color="green">336</FONT>         *<a name="line.336"></a>
<FONT color="green">337</FONT>         * @param composite The composite to set<a name="line.337"></a>
<FONT color="green">338</FONT>         */<a name="line.338"></a>
<FONT color="green">339</FONT>        public void setComposite(Composite composite) {<a name="line.339"></a>
<FONT color="green">340</FONT>            this.composite = composite;<a name="line.340"></a>
<FONT color="green">341</FONT>        }<a name="line.341"></a>
<FONT color="green">342</FONT>    <a name="line.342"></a>
<FONT color="green">343</FONT>        /**<a name="line.343"></a>
<FONT color="green">344</FONT>         * Sets the drawPaint.<a name="line.344"></a>
<FONT color="green">345</FONT>         *<a name="line.345"></a>
<FONT color="green">346</FONT>         * @param drawPaint The drawPaint to set<a name="line.346"></a>
<FONT color="green">347</FONT>         */<a name="line.347"></a>
<FONT color="green">348</FONT>        public void setDrawPaint(Paint drawPaint) {<a name="line.348"></a>
<FONT color="green">349</FONT>            this.drawPaint = drawPaint;<a name="line.349"></a>
<FONT color="green">350</FONT>        }<a name="line.350"></a>
<FONT color="green">351</FONT>    <a name="line.351"></a>
<FONT color="green">352</FONT>        /**<a name="line.352"></a>
<FONT color="green">353</FONT>         * Sets the drawPath.<a name="line.353"></a>
<FONT color="green">354</FONT>         *<a name="line.354"></a>
<FONT color="green">355</FONT>         * @param drawPath The drawPath to set<a name="line.355"></a>
<FONT color="green">356</FONT>         */<a name="line.356"></a>
<FONT color="green">357</FONT>        public void setDrawPath(boolean drawPath) {<a name="line.357"></a>
<FONT color="green">358</FONT>            this.drawPath = drawPath;<a name="line.358"></a>
<FONT color="green">359</FONT>        }<a name="line.359"></a>
<FONT color="green">360</FONT>    <a name="line.360"></a>
<FONT color="green">361</FONT>        /**<a name="line.361"></a>
<FONT color="green">362</FONT>         * Sets the drawStroke.<a name="line.362"></a>
<FONT color="green">363</FONT>         *<a name="line.363"></a>
<FONT color="green">364</FONT>         * @param drawStroke The drawStroke to set<a name="line.364"></a>
<FONT color="green">365</FONT>         */<a name="line.365"></a>
<FONT color="green">366</FONT>        public void setDrawStroke(Stroke drawStroke) {<a name="line.366"></a>
<FONT color="green">367</FONT>            this.drawStroke = drawStroke;<a name="line.367"></a>
<FONT color="green">368</FONT>        }<a name="line.368"></a>
<FONT color="green">369</FONT>    <a name="line.369"></a>
<FONT color="green">370</FONT>        /**<a name="line.370"></a>
<FONT color="green">371</FONT>         * Sets the fillPaint.<a name="line.371"></a>
<FONT color="green">372</FONT>         *<a name="line.372"></a>
<FONT color="green">373</FONT>         * @param fillPaint The fillPaint to set<a name="line.373"></a>
<FONT color="green">374</FONT>         */<a name="line.374"></a>
<FONT color="green">375</FONT>        public void setFillPaint(Paint fillPaint) {<a name="line.375"></a>
<FONT color="green">376</FONT>            this.fillPaint = fillPaint;<a name="line.376"></a>
<FONT color="green">377</FONT>        }<a name="line.377"></a>
<FONT color="green">378</FONT>    <a name="line.378"></a>
<FONT color="green">379</FONT>        /**<a name="line.379"></a>
<FONT color="green">380</FONT>         * Sets the fillPath.<a name="line.380"></a>
<FONT color="green">381</FONT>         *<a name="line.381"></a>
<FONT color="green">382</FONT>         * @param fillPath The fillPath to set<a name="line.382"></a>
<FONT color="green">383</FONT>         */<a name="line.383"></a>
<FONT color="green">384</FONT>        public void setFillPath(boolean fillPath) {<a name="line.384"></a>
<FONT color="green">385</FONT>            this.fillPath = fillPath;<a name="line.385"></a>
<FONT color="green">386</FONT>        }<a name="line.386"></a>
<FONT color="green">387</FONT>    <a name="line.387"></a>
<FONT color="green">388</FONT>        /**<a name="line.388"></a>
<FONT color="green">389</FONT>         * Sets the xValue.<a name="line.389"></a>
<FONT color="green">390</FONT>         *<a name="line.390"></a>
<FONT color="green">391</FONT>         * @param xValue The xValue to set<a name="line.391"></a>
<FONT color="green">392</FONT>         */<a name="line.392"></a>
<FONT color="green">393</FONT>        public void setXValue(double[] xValue) {<a name="line.393"></a>
<FONT color="green">394</FONT>            this.xValue = xValue;<a name="line.394"></a>
<FONT color="green">395</FONT>        }<a name="line.395"></a>
<FONT color="green">396</FONT>    <a name="line.396"></a>
<FONT color="green">397</FONT>        /**<a name="line.397"></a>
<FONT color="green">398</FONT>         * Sets the yValue.<a name="line.398"></a>
<FONT color="green">399</FONT>         *<a name="line.399"></a>
<FONT color="green">400</FONT>         * @param yValue The yValue to set<a name="line.400"></a>
<FONT color="green">401</FONT>         */<a name="line.401"></a>
<FONT color="green">402</FONT>        public void setYValue(double[] yValue) {<a name="line.402"></a>
<FONT color="green">403</FONT>            this.yValue = yValue;<a name="line.403"></a>
<FONT color="green">404</FONT>        }<a name="line.404"></a>
<FONT color="green">405</FONT>    <a name="line.405"></a>
<FONT color="green">406</FONT>        /**<a name="line.406"></a>
<FONT color="green">407</FONT>         * Returns the clip.<a name="line.407"></a>
<FONT color="green">408</FONT>         *<a name="line.408"></a>
<FONT color="green">409</FONT>         * @return boolean<a name="line.409"></a>
<FONT color="green">410</FONT>         */<a name="line.410"></a>
<FONT color="green">411</FONT>        public boolean isClip() {<a name="line.411"></a>
<FONT color="green">412</FONT>            return this.clip;<a name="line.412"></a>
<FONT color="green">413</FONT>        }<a name="line.413"></a>
<FONT color="green">414</FONT>    <a name="line.414"></a>
<FONT color="green">415</FONT>        /**<a name="line.415"></a>
<FONT color="green">416</FONT>         * Sets the clip.<a name="line.416"></a>
<FONT color="green">417</FONT>         *<a name="line.417"></a>
<FONT color="green">418</FONT>         * @param clip The clip to set<a name="line.418"></a>
<FONT color="green">419</FONT>         */<a name="line.419"></a>
<FONT color="green">420</FONT>        public void setClip(boolean clip) {<a name="line.420"></a>
<FONT color="green">421</FONT>            this.clip = clip;<a name="line.421"></a>
<FONT color="green">422</FONT>        }<a name="line.422"></a>
<FONT color="green">423</FONT>    <a name="line.423"></a>
<FONT color="green">424</FONT>        /**<a name="line.424"></a>
<FONT color="green">425</FONT>         * Returns a clone of the object (a deeper clone than default to avoid bugs<a name="line.425"></a>
<FONT color="green">426</FONT>         * when setting values in cloned object).<a name="line.426"></a>
<FONT color="green">427</FONT>         *<a name="line.427"></a>
<FONT color="green">428</FONT>         * @return The clone.<a name="line.428"></a>
<FONT color="green">429</FONT>         *<a name="line.429"></a>
<FONT color="green">430</FONT>         * @throws CloneNotSupportedException if cloning is not supported.<a name="line.430"></a>
<FONT color="green">431</FONT>         */<a name="line.431"></a>
<FONT color="green">432</FONT>        public Object clone() throws CloneNotSupportedException {<a name="line.432"></a>
<FONT color="green">433</FONT>            ClipPath clone = (ClipPath) super.clone();<a name="line.433"></a>
<FONT color="green">434</FONT>            clone.xValue = (double[]) this.xValue.clone();<a name="line.434"></a>
<FONT color="green">435</FONT>            clone.yValue = (double[]) this.yValue.clone();<a name="line.435"></a>
<FONT color="green">436</FONT>            return clone;<a name="line.436"></a>
<FONT color="green">437</FONT>        }<a name="line.437"></a>
<FONT color="green">438</FONT>    <a name="line.438"></a>
<FONT color="green">439</FONT>    }<a name="line.439"></a>




























































</PRE>
</BODY>
</HTML>
