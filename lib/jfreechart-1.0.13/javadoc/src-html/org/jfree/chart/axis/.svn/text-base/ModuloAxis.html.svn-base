<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ===========================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JFreeChart : a free chart library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ===========================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     *<a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jfreechart/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it<a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by<a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or<a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but<a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY<a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public<a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,<a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.<a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc.<a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     *<a name="line.26"></a>
<FONT color="green">027</FONT>     * ---------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * ModuloAxis.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * ---------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C) Copyright 2004-2008, by Object Refinery Limited.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  David Gilbert (for Object Refinery Limited);<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   -;<a name="line.33"></a>
<FONT color="green">034</FONT>     *<a name="line.34"></a>
<FONT color="green">035</FONT>     * Changes<a name="line.35"></a>
<FONT color="green">036</FONT>     * -------<a name="line.36"></a>
<FONT color="green">037</FONT>     * 13-Aug-2004 : Version 1 (DG);<a name="line.37"></a>
<FONT color="green">038</FONT>     * 13-Nov-2007 : Implemented equals() (DG);<a name="line.38"></a>
<FONT color="green">039</FONT>     *<a name="line.39"></a>
<FONT color="green">040</FONT>     */<a name="line.40"></a>
<FONT color="green">041</FONT>    <a name="line.41"></a>
<FONT color="green">042</FONT>    package org.jfree.chart.axis;<a name="line.42"></a>
<FONT color="green">043</FONT>    <a name="line.43"></a>
<FONT color="green">044</FONT>    import java.awt.geom.Rectangle2D;<a name="line.44"></a>
<FONT color="green">045</FONT>    <a name="line.45"></a>
<FONT color="green">046</FONT>    import org.jfree.chart.event.AxisChangeEvent;<a name="line.46"></a>
<FONT color="green">047</FONT>    import org.jfree.data.Range;<a name="line.47"></a>
<FONT color="green">048</FONT>    import org.jfree.ui.RectangleEdge;<a name="line.48"></a>
<FONT color="green">049</FONT>    <a name="line.49"></a>
<FONT color="green">050</FONT>    /**<a name="line.50"></a>
<FONT color="green">051</FONT>     * An axis that displays numerical values within a fixed range using a modulo<a name="line.51"></a>
<FONT color="green">052</FONT>     * calculation.<a name="line.52"></a>
<FONT color="green">053</FONT>     */<a name="line.53"></a>
<FONT color="green">054</FONT>    public class ModuloAxis extends NumberAxis {<a name="line.54"></a>
<FONT color="green">055</FONT>    <a name="line.55"></a>
<FONT color="green">056</FONT>        /**<a name="line.56"></a>
<FONT color="green">057</FONT>         * The fixed range for the axis - all data values will be mapped to this<a name="line.57"></a>
<FONT color="green">058</FONT>         * range using a modulo calculation.<a name="line.58"></a>
<FONT color="green">059</FONT>         */<a name="line.59"></a>
<FONT color="green">060</FONT>        private Range fixedRange;<a name="line.60"></a>
<FONT color="green">061</FONT>    <a name="line.61"></a>
<FONT color="green">062</FONT>        /**<a name="line.62"></a>
<FONT color="green">063</FONT>         * The display start value (this will sometimes be &gt; displayEnd, in which<a name="line.63"></a>
<FONT color="green">064</FONT>         * case the axis wraps around at some point in the middle of the axis).<a name="line.64"></a>
<FONT color="green">065</FONT>         */<a name="line.65"></a>
<FONT color="green">066</FONT>        private double displayStart;<a name="line.66"></a>
<FONT color="green">067</FONT>    <a name="line.67"></a>
<FONT color="green">068</FONT>        /**<a name="line.68"></a>
<FONT color="green">069</FONT>         * The display end value.<a name="line.69"></a>
<FONT color="green">070</FONT>         */<a name="line.70"></a>
<FONT color="green">071</FONT>        private double displayEnd;<a name="line.71"></a>
<FONT color="green">072</FONT>    <a name="line.72"></a>
<FONT color="green">073</FONT>        /**<a name="line.73"></a>
<FONT color="green">074</FONT>         * Creates a new axis.<a name="line.74"></a>
<FONT color="green">075</FONT>         *<a name="line.75"></a>
<FONT color="green">076</FONT>         * @param label  the axis label (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.76"></a>
<FONT color="green">077</FONT>         * @param fixedRange  the fixed range (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.77"></a>
<FONT color="green">078</FONT>         */<a name="line.78"></a>
<FONT color="green">079</FONT>        public ModuloAxis(String label, Range fixedRange) {<a name="line.79"></a>
<FONT color="green">080</FONT>            super(label);<a name="line.80"></a>
<FONT color="green">081</FONT>            this.fixedRange = fixedRange;<a name="line.81"></a>
<FONT color="green">082</FONT>            this.displayStart = 270.0;<a name="line.82"></a>
<FONT color="green">083</FONT>            this.displayEnd = 90.0;<a name="line.83"></a>
<FONT color="green">084</FONT>        }<a name="line.84"></a>
<FONT color="green">085</FONT>    <a name="line.85"></a>
<FONT color="green">086</FONT>        /**<a name="line.86"></a>
<FONT color="green">087</FONT>         * Returns the display start value.<a name="line.87"></a>
<FONT color="green">088</FONT>         *<a name="line.88"></a>
<FONT color="green">089</FONT>         * @return The display start value.<a name="line.89"></a>
<FONT color="green">090</FONT>         */<a name="line.90"></a>
<FONT color="green">091</FONT>        public double getDisplayStart() {<a name="line.91"></a>
<FONT color="green">092</FONT>            return this.displayStart;<a name="line.92"></a>
<FONT color="green">093</FONT>        }<a name="line.93"></a>
<FONT color="green">094</FONT>    <a name="line.94"></a>
<FONT color="green">095</FONT>        /**<a name="line.95"></a>
<FONT color="green">096</FONT>         * Returns the display end value.<a name="line.96"></a>
<FONT color="green">097</FONT>         *<a name="line.97"></a>
<FONT color="green">098</FONT>         * @return The display end value.<a name="line.98"></a>
<FONT color="green">099</FONT>         */<a name="line.99"></a>
<FONT color="green">100</FONT>        public double getDisplayEnd() {<a name="line.100"></a>
<FONT color="green">101</FONT>            return this.displayEnd;<a name="line.101"></a>
<FONT color="green">102</FONT>        }<a name="line.102"></a>
<FONT color="green">103</FONT>    <a name="line.103"></a>
<FONT color="green">104</FONT>        /**<a name="line.104"></a>
<FONT color="green">105</FONT>         * Sets the display range.  The values will be mapped to the fixed range if<a name="line.105"></a>
<FONT color="green">106</FONT>         * necessary.<a name="line.106"></a>
<FONT color="green">107</FONT>         *<a name="line.107"></a>
<FONT color="green">108</FONT>         * @param start  the start value.<a name="line.108"></a>
<FONT color="green">109</FONT>         * @param end  the end value.<a name="line.109"></a>
<FONT color="green">110</FONT>         */<a name="line.110"></a>
<FONT color="green">111</FONT>        public void setDisplayRange(double start, double end) {<a name="line.111"></a>
<FONT color="green">112</FONT>            this.displayStart = mapValueToFixedRange(start);<a name="line.112"></a>
<FONT color="green">113</FONT>            this.displayEnd = mapValueToFixedRange(end);<a name="line.113"></a>
<FONT color="green">114</FONT>            if (this.displayStart &lt; this.displayEnd) {<a name="line.114"></a>
<FONT color="green">115</FONT>                setRange(this.displayStart, this.displayEnd);<a name="line.115"></a>
<FONT color="green">116</FONT>            }<a name="line.116"></a>
<FONT color="green">117</FONT>            else {<a name="line.117"></a>
<FONT color="green">118</FONT>                setRange(this.displayStart, this.fixedRange.getUpperBound()<a name="line.118"></a>
<FONT color="green">119</FONT>                      + (this.displayEnd - this.fixedRange.getLowerBound()));<a name="line.119"></a>
<FONT color="green">120</FONT>            }<a name="line.120"></a>
<FONT color="green">121</FONT>            notifyListeners(new AxisChangeEvent(this));<a name="line.121"></a>
<FONT color="green">122</FONT>        }<a name="line.122"></a>
<FONT color="green">123</FONT>    <a name="line.123"></a>
<FONT color="green">124</FONT>        /**<a name="line.124"></a>
<FONT color="green">125</FONT>         * This method should calculate a range that will show all the data values.<a name="line.125"></a>
<FONT color="green">126</FONT>         * For now, it just sets the axis range to the fixedRange.<a name="line.126"></a>
<FONT color="green">127</FONT>         */<a name="line.127"></a>
<FONT color="green">128</FONT>        protected void autoAdjustRange() {<a name="line.128"></a>
<FONT color="green">129</FONT>            setRange(this.fixedRange, false, false);<a name="line.129"></a>
<FONT color="green">130</FONT>        }<a name="line.130"></a>
<FONT color="green">131</FONT>    <a name="line.131"></a>
<FONT color="green">132</FONT>        /**<a name="line.132"></a>
<FONT color="green">133</FONT>         * Translates a data value to a Java2D coordinate.<a name="line.133"></a>
<FONT color="green">134</FONT>         *<a name="line.134"></a>
<FONT color="green">135</FONT>         * @param value  the value.<a name="line.135"></a>
<FONT color="green">136</FONT>         * @param area  the area.<a name="line.136"></a>
<FONT color="green">137</FONT>         * @param edge  the edge.<a name="line.137"></a>
<FONT color="green">138</FONT>         *<a name="line.138"></a>
<FONT color="green">139</FONT>         * @return A Java2D coordinate.<a name="line.139"></a>
<FONT color="green">140</FONT>         */<a name="line.140"></a>
<FONT color="green">141</FONT>        public double valueToJava2D(double value, Rectangle2D area,<a name="line.141"></a>
<FONT color="green">142</FONT>                                    RectangleEdge edge) {<a name="line.142"></a>
<FONT color="green">143</FONT>            double result = 0.0;<a name="line.143"></a>
<FONT color="green">144</FONT>            double v = mapValueToFixedRange(value);<a name="line.144"></a>
<FONT color="green">145</FONT>            if (this.displayStart &lt; this.displayEnd) {  // regular number axis<a name="line.145"></a>
<FONT color="green">146</FONT>                result = trans(v, area, edge);<a name="line.146"></a>
<FONT color="green">147</FONT>            }<a name="line.147"></a>
<FONT color="green">148</FONT>            else {  // displayStart &gt; displayEnd, need to handle split<a name="line.148"></a>
<FONT color="green">149</FONT>                double cutoff = (this.displayStart + this.displayEnd) / 2.0;<a name="line.149"></a>
<FONT color="green">150</FONT>                double length1 = this.fixedRange.getUpperBound()<a name="line.150"></a>
<FONT color="green">151</FONT>                                 - this.displayStart;<a name="line.151"></a>
<FONT color="green">152</FONT>                double length2 = this.displayEnd - this.fixedRange.getLowerBound();<a name="line.152"></a>
<FONT color="green">153</FONT>                if (v &gt; cutoff) {<a name="line.153"></a>
<FONT color="green">154</FONT>                    result = transStart(v, area, edge, length1, length2);<a name="line.154"></a>
<FONT color="green">155</FONT>                }<a name="line.155"></a>
<FONT color="green">156</FONT>                else {<a name="line.156"></a>
<FONT color="green">157</FONT>                    result = transEnd(v, area, edge, length1, length2);<a name="line.157"></a>
<FONT color="green">158</FONT>                }<a name="line.158"></a>
<FONT color="green">159</FONT>            }<a name="line.159"></a>
<FONT color="green">160</FONT>            return result;<a name="line.160"></a>
<FONT color="green">161</FONT>        }<a name="line.161"></a>
<FONT color="green">162</FONT>    <a name="line.162"></a>
<FONT color="green">163</FONT>        /**<a name="line.163"></a>
<FONT color="green">164</FONT>         * A regular translation from a data value to a Java2D value.<a name="line.164"></a>
<FONT color="green">165</FONT>         *<a name="line.165"></a>
<FONT color="green">166</FONT>         * @param value  the value.<a name="line.166"></a>
<FONT color="green">167</FONT>         * @param area  the data area.<a name="line.167"></a>
<FONT color="green">168</FONT>         * @param edge  the edge along which the axis lies.<a name="line.168"></a>
<FONT color="green">169</FONT>         *<a name="line.169"></a>
<FONT color="green">170</FONT>         * @return The Java2D coordinate.<a name="line.170"></a>
<FONT color="green">171</FONT>         */<a name="line.171"></a>
<FONT color="green">172</FONT>        private double trans(double value, Rectangle2D area, RectangleEdge edge) {<a name="line.172"></a>
<FONT color="green">173</FONT>            double min = 0.0;<a name="line.173"></a>
<FONT color="green">174</FONT>            double max = 0.0;<a name="line.174"></a>
<FONT color="green">175</FONT>            if (RectangleEdge.isTopOrBottom(edge)) {<a name="line.175"></a>
<FONT color="green">176</FONT>                min = area.getX();<a name="line.176"></a>
<FONT color="green">177</FONT>                max = area.getX() + area.getWidth();<a name="line.177"></a>
<FONT color="green">178</FONT>            }<a name="line.178"></a>
<FONT color="green">179</FONT>            else if (RectangleEdge.isLeftOrRight(edge)) {<a name="line.179"></a>
<FONT color="green">180</FONT>                min = area.getMaxY();<a name="line.180"></a>
<FONT color="green">181</FONT>                max = area.getMaxY() - area.getHeight();<a name="line.181"></a>
<FONT color="green">182</FONT>            }<a name="line.182"></a>
<FONT color="green">183</FONT>            if (isInverted()) {<a name="line.183"></a>
<FONT color="green">184</FONT>                return max - ((value - this.displayStart)<a name="line.184"></a>
<FONT color="green">185</FONT>                       / (this.displayEnd - this.displayStart)) * (max - min);<a name="line.185"></a>
<FONT color="green">186</FONT>            }<a name="line.186"></a>
<FONT color="green">187</FONT>            else {<a name="line.187"></a>
<FONT color="green">188</FONT>                return min + ((value - this.displayStart)<a name="line.188"></a>
<FONT color="green">189</FONT>                       / (this.displayEnd - this.displayStart)) * (max - min);<a name="line.189"></a>
<FONT color="green">190</FONT>            }<a name="line.190"></a>
<FONT color="green">191</FONT>    <a name="line.191"></a>
<FONT color="green">192</FONT>        }<a name="line.192"></a>
<FONT color="green">193</FONT>    <a name="line.193"></a>
<FONT color="green">194</FONT>        /**<a name="line.194"></a>
<FONT color="green">195</FONT>         * Translates a data value to a Java2D value for the first section of the<a name="line.195"></a>
<FONT color="green">196</FONT>         * axis.<a name="line.196"></a>
<FONT color="green">197</FONT>         *<a name="line.197"></a>
<FONT color="green">198</FONT>         * @param value  the value.<a name="line.198"></a>
<FONT color="green">199</FONT>         * @param area  the data area.<a name="line.199"></a>
<FONT color="green">200</FONT>         * @param edge  the edge along which the axis lies.<a name="line.200"></a>
<FONT color="green">201</FONT>         * @param length1  the length of the first section.<a name="line.201"></a>
<FONT color="green">202</FONT>         * @param length2  the length of the second section.<a name="line.202"></a>
<FONT color="green">203</FONT>         *<a name="line.203"></a>
<FONT color="green">204</FONT>         * @return The Java2D coordinate.<a name="line.204"></a>
<FONT color="green">205</FONT>         */<a name="line.205"></a>
<FONT color="green">206</FONT>        private double transStart(double value, Rectangle2D area,<a name="line.206"></a>
<FONT color="green">207</FONT>                                  RectangleEdge edge,<a name="line.207"></a>
<FONT color="green">208</FONT>                                  double length1, double length2) {<a name="line.208"></a>
<FONT color="green">209</FONT>            double min = 0.0;<a name="line.209"></a>
<FONT color="green">210</FONT>            double max = 0.0;<a name="line.210"></a>
<FONT color="green">211</FONT>            if (RectangleEdge.isTopOrBottom(edge)) {<a name="line.211"></a>
<FONT color="green">212</FONT>                min = area.getX();<a name="line.212"></a>
<FONT color="green">213</FONT>                max = area.getX() + area.getWidth() * length1 / (length1 + length2);<a name="line.213"></a>
<FONT color="green">214</FONT>            }<a name="line.214"></a>
<FONT color="green">215</FONT>            else if (RectangleEdge.isLeftOrRight(edge)) {<a name="line.215"></a>
<FONT color="green">216</FONT>                min = area.getMaxY();<a name="line.216"></a>
<FONT color="green">217</FONT>                max = area.getMaxY() - area.getHeight() * length1<a name="line.217"></a>
<FONT color="green">218</FONT>                      / (length1 + length2);<a name="line.218"></a>
<FONT color="green">219</FONT>            }<a name="line.219"></a>
<FONT color="green">220</FONT>            if (isInverted()) {<a name="line.220"></a>
<FONT color="green">221</FONT>                return max - ((value - this.displayStart)<a name="line.221"></a>
<FONT color="green">222</FONT>                    / (this.fixedRange.getUpperBound() - this.displayStart))<a name="line.222"></a>
<FONT color="green">223</FONT>                    * (max - min);<a name="line.223"></a>
<FONT color="green">224</FONT>            }<a name="line.224"></a>
<FONT color="green">225</FONT>            else {<a name="line.225"></a>
<FONT color="green">226</FONT>                return min + ((value - this.displayStart)<a name="line.226"></a>
<FONT color="green">227</FONT>                    / (this.fixedRange.getUpperBound() - this.displayStart))<a name="line.227"></a>
<FONT color="green">228</FONT>                    * (max - min);<a name="line.228"></a>
<FONT color="green">229</FONT>            }<a name="line.229"></a>
<FONT color="green">230</FONT>    <a name="line.230"></a>
<FONT color="green">231</FONT>        }<a name="line.231"></a>
<FONT color="green">232</FONT>    <a name="line.232"></a>
<FONT color="green">233</FONT>        /**<a name="line.233"></a>
<FONT color="green">234</FONT>         * Translates a data value to a Java2D value for the second section of the<a name="line.234"></a>
<FONT color="green">235</FONT>         * axis.<a name="line.235"></a>
<FONT color="green">236</FONT>         *<a name="line.236"></a>
<FONT color="green">237</FONT>         * @param value  the value.<a name="line.237"></a>
<FONT color="green">238</FONT>         * @param area  the data area.<a name="line.238"></a>
<FONT color="green">239</FONT>         * @param edge  the edge along which the axis lies.<a name="line.239"></a>
<FONT color="green">240</FONT>         * @param length1  the length of the first section.<a name="line.240"></a>
<FONT color="green">241</FONT>         * @param length2  the length of the second section.<a name="line.241"></a>
<FONT color="green">242</FONT>         *<a name="line.242"></a>
<FONT color="green">243</FONT>         * @return The Java2D coordinate.<a name="line.243"></a>
<FONT color="green">244</FONT>         */<a name="line.244"></a>
<FONT color="green">245</FONT>        private double transEnd(double value, Rectangle2D area, RectangleEdge edge,<a name="line.245"></a>
<FONT color="green">246</FONT>                                double length1, double length2) {<a name="line.246"></a>
<FONT color="green">247</FONT>            double min = 0.0;<a name="line.247"></a>
<FONT color="green">248</FONT>            double max = 0.0;<a name="line.248"></a>
<FONT color="green">249</FONT>            if (RectangleEdge.isTopOrBottom(edge)) {<a name="line.249"></a>
<FONT color="green">250</FONT>                max = area.getMaxX();<a name="line.250"></a>
<FONT color="green">251</FONT>                min = area.getMaxX() - area.getWidth() * length2<a name="line.251"></a>
<FONT color="green">252</FONT>                      / (length1 + length2);<a name="line.252"></a>
<FONT color="green">253</FONT>            }<a name="line.253"></a>
<FONT color="green">254</FONT>            else if (RectangleEdge.isLeftOrRight(edge)) {<a name="line.254"></a>
<FONT color="green">255</FONT>                max = area.getMinY();<a name="line.255"></a>
<FONT color="green">256</FONT>                min = area.getMinY() + area.getHeight() * length2<a name="line.256"></a>
<FONT color="green">257</FONT>                      / (length1 + length2);<a name="line.257"></a>
<FONT color="green">258</FONT>            }<a name="line.258"></a>
<FONT color="green">259</FONT>            if (isInverted()) {<a name="line.259"></a>
<FONT color="green">260</FONT>                return max - ((value - this.fixedRange.getLowerBound())<a name="line.260"></a>
<FONT color="green">261</FONT>                        / (this.displayEnd - this.fixedRange.getLowerBound()))<a name="line.261"></a>
<FONT color="green">262</FONT>                        * (max - min);<a name="line.262"></a>
<FONT color="green">263</FONT>            }<a name="line.263"></a>
<FONT color="green">264</FONT>            else {<a name="line.264"></a>
<FONT color="green">265</FONT>                return min + ((value - this.fixedRange.getLowerBound())<a name="line.265"></a>
<FONT color="green">266</FONT>                        / (this.displayEnd - this.fixedRange.getLowerBound()))<a name="line.266"></a>
<FONT color="green">267</FONT>                        * (max - min);<a name="line.267"></a>
<FONT color="green">268</FONT>            }<a name="line.268"></a>
<FONT color="green">269</FONT>    <a name="line.269"></a>
<FONT color="green">270</FONT>        }<a name="line.270"></a>
<FONT color="green">271</FONT>    <a name="line.271"></a>
<FONT color="green">272</FONT>        /**<a name="line.272"></a>
<FONT color="green">273</FONT>         * Maps a data value into the fixed range.<a name="line.273"></a>
<FONT color="green">274</FONT>         *<a name="line.274"></a>
<FONT color="green">275</FONT>         * @param value  the value.<a name="line.275"></a>
<FONT color="green">276</FONT>         *<a name="line.276"></a>
<FONT color="green">277</FONT>         * @return The mapped value.<a name="line.277"></a>
<FONT color="green">278</FONT>         */<a name="line.278"></a>
<FONT color="green">279</FONT>        private double mapValueToFixedRange(double value) {<a name="line.279"></a>
<FONT color="green">280</FONT>            double lower = this.fixedRange.getLowerBound();<a name="line.280"></a>
<FONT color="green">281</FONT>            double length = this.fixedRange.getLength();<a name="line.281"></a>
<FONT color="green">282</FONT>            if (value &lt; lower) {<a name="line.282"></a>
<FONT color="green">283</FONT>                return lower + length + ((value - lower) % length);<a name="line.283"></a>
<FONT color="green">284</FONT>            }<a name="line.284"></a>
<FONT color="green">285</FONT>            else {<a name="line.285"></a>
<FONT color="green">286</FONT>                return lower + ((value - lower) % length);<a name="line.286"></a>
<FONT color="green">287</FONT>            }<a name="line.287"></a>
<FONT color="green">288</FONT>        }<a name="line.288"></a>
<FONT color="green">289</FONT>    <a name="line.289"></a>
<FONT color="green">290</FONT>        /**<a name="line.290"></a>
<FONT color="green">291</FONT>         * Translates a Java2D coordinate into a data value.<a name="line.291"></a>
<FONT color="green">292</FONT>         *<a name="line.292"></a>
<FONT color="green">293</FONT>         * @param java2DValue  the Java2D coordinate.<a name="line.293"></a>
<FONT color="green">294</FONT>         * @param area  the area.<a name="line.294"></a>
<FONT color="green">295</FONT>         * @param edge  the edge.<a name="line.295"></a>
<FONT color="green">296</FONT>         *<a name="line.296"></a>
<FONT color="green">297</FONT>         * @return The Java2D coordinate.<a name="line.297"></a>
<FONT color="green">298</FONT>         */<a name="line.298"></a>
<FONT color="green">299</FONT>        public double java2DToValue(double java2DValue, Rectangle2D area,<a name="line.299"></a>
<FONT color="green">300</FONT>                                    RectangleEdge edge) {<a name="line.300"></a>
<FONT color="green">301</FONT>            double result = 0.0;<a name="line.301"></a>
<FONT color="green">302</FONT>            if (this.displayStart &lt; this.displayEnd) {  // regular number axis<a name="line.302"></a>
<FONT color="green">303</FONT>                result = super.java2DToValue(java2DValue, area, edge);<a name="line.303"></a>
<FONT color="green">304</FONT>            }<a name="line.304"></a>
<FONT color="green">305</FONT>            else {  // displayStart &gt; displayEnd, need to handle split<a name="line.305"></a>
<FONT color="green">306</FONT>    <a name="line.306"></a>
<FONT color="green">307</FONT>            }<a name="line.307"></a>
<FONT color="green">308</FONT>            return result;<a name="line.308"></a>
<FONT color="green">309</FONT>        }<a name="line.309"></a>
<FONT color="green">310</FONT>    <a name="line.310"></a>
<FONT color="green">311</FONT>        /**<a name="line.311"></a>
<FONT color="green">312</FONT>         * Returns the display length for the axis.<a name="line.312"></a>
<FONT color="green">313</FONT>         *<a name="line.313"></a>
<FONT color="green">314</FONT>         * @return The display length.<a name="line.314"></a>
<FONT color="green">315</FONT>         */<a name="line.315"></a>
<FONT color="green">316</FONT>        private double getDisplayLength() {<a name="line.316"></a>
<FONT color="green">317</FONT>            if (this.displayStart &lt; this.displayEnd) {<a name="line.317"></a>
<FONT color="green">318</FONT>                return (this.displayEnd - this.displayStart);<a name="line.318"></a>
<FONT color="green">319</FONT>            }<a name="line.319"></a>
<FONT color="green">320</FONT>            else {<a name="line.320"></a>
<FONT color="green">321</FONT>                return (this.fixedRange.getUpperBound() - this.displayStart)<a name="line.321"></a>
<FONT color="green">322</FONT>                    + (this.displayEnd - this.fixedRange.getLowerBound());<a name="line.322"></a>
<FONT color="green">323</FONT>            }<a name="line.323"></a>
<FONT color="green">324</FONT>        }<a name="line.324"></a>
<FONT color="green">325</FONT>    <a name="line.325"></a>
<FONT color="green">326</FONT>        /**<a name="line.326"></a>
<FONT color="green">327</FONT>         * Returns the central value of the current display range.<a name="line.327"></a>
<FONT color="green">328</FONT>         *<a name="line.328"></a>
<FONT color="green">329</FONT>         * @return The central value.<a name="line.329"></a>
<FONT color="green">330</FONT>         */<a name="line.330"></a>
<FONT color="green">331</FONT>        private double getDisplayCentralValue() {<a name="line.331"></a>
<FONT color="green">332</FONT>            return mapValueToFixedRange(<a name="line.332"></a>
<FONT color="green">333</FONT>                this.displayStart + (getDisplayLength() / 2)<a name="line.333"></a>
<FONT color="green">334</FONT>            );<a name="line.334"></a>
<FONT color="green">335</FONT>        }<a name="line.335"></a>
<FONT color="green">336</FONT>    <a name="line.336"></a>
<FONT color="green">337</FONT>        /**<a name="line.337"></a>
<FONT color="green">338</FONT>         * Increases or decreases the axis range by the specified percentage about<a name="line.338"></a>
<FONT color="green">339</FONT>         * the central value and sends an {@link AxisChangeEvent} to all registered<a name="line.339"></a>
<FONT color="green">340</FONT>         * listeners.<a name="line.340"></a>
<FONT color="green">341</FONT>         * &lt;P&gt;<a name="line.341"></a>
<FONT color="green">342</FONT>         * To double the length of the axis range, use 200% (2.0).<a name="line.342"></a>
<FONT color="green">343</FONT>         * To halve the length of the axis range, use 50% (0.5).<a name="line.343"></a>
<FONT color="green">344</FONT>         *<a name="line.344"></a>
<FONT color="green">345</FONT>         * @param percent  the resize factor.<a name="line.345"></a>
<FONT color="green">346</FONT>         */<a name="line.346"></a>
<FONT color="green">347</FONT>        public void resizeRange(double percent) {<a name="line.347"></a>
<FONT color="green">348</FONT>            resizeRange(percent, getDisplayCentralValue());<a name="line.348"></a>
<FONT color="green">349</FONT>        }<a name="line.349"></a>
<FONT color="green">350</FONT>    <a name="line.350"></a>
<FONT color="green">351</FONT>        /**<a name="line.351"></a>
<FONT color="green">352</FONT>         * Increases or decreases the axis range by the specified percentage about<a name="line.352"></a>
<FONT color="green">353</FONT>         * the specified anchor value and sends an {@link AxisChangeEvent} to all<a name="line.353"></a>
<FONT color="green">354</FONT>         * registered listeners.<a name="line.354"></a>
<FONT color="green">355</FONT>         * &lt;P&gt;<a name="line.355"></a>
<FONT color="green">356</FONT>         * To double the length of the axis range, use 200% (2.0).<a name="line.356"></a>
<FONT color="green">357</FONT>         * To halve the length of the axis range, use 50% (0.5).<a name="line.357"></a>
<FONT color="green">358</FONT>         *<a name="line.358"></a>
<FONT color="green">359</FONT>         * @param percent  the resize factor.<a name="line.359"></a>
<FONT color="green">360</FONT>         * @param anchorValue  the new central value after the resize.<a name="line.360"></a>
<FONT color="green">361</FONT>         */<a name="line.361"></a>
<FONT color="green">362</FONT>        public void resizeRange(double percent, double anchorValue) {<a name="line.362"></a>
<FONT color="green">363</FONT>    <a name="line.363"></a>
<FONT color="green">364</FONT>            if (percent &gt; 0.0) {<a name="line.364"></a>
<FONT color="green">365</FONT>                double halfLength = getDisplayLength() * percent / 2;<a name="line.365"></a>
<FONT color="green">366</FONT>                setDisplayRange(anchorValue - halfLength, anchorValue + halfLength);<a name="line.366"></a>
<FONT color="green">367</FONT>            }<a name="line.367"></a>
<FONT color="green">368</FONT>            else {<a name="line.368"></a>
<FONT color="green">369</FONT>                setAutoRange(true);<a name="line.369"></a>
<FONT color="green">370</FONT>            }<a name="line.370"></a>
<FONT color="green">371</FONT>    <a name="line.371"></a>
<FONT color="green">372</FONT>        }<a name="line.372"></a>
<FONT color="green">373</FONT>    <a name="line.373"></a>
<FONT color="green">374</FONT>        /**<a name="line.374"></a>
<FONT color="green">375</FONT>         * Converts a length in data coordinates into the corresponding length in<a name="line.375"></a>
<FONT color="green">376</FONT>         * Java2D coordinates.<a name="line.376"></a>
<FONT color="green">377</FONT>         *<a name="line.377"></a>
<FONT color="green">378</FONT>         * @param length  the length.<a name="line.378"></a>
<FONT color="green">379</FONT>         * @param area  the plot area.<a name="line.379"></a>
<FONT color="green">380</FONT>         * @param edge  the edge along which the axis lies.<a name="line.380"></a>
<FONT color="green">381</FONT>         *<a name="line.381"></a>
<FONT color="green">382</FONT>         * @return The length in Java2D coordinates.<a name="line.382"></a>
<FONT color="green">383</FONT>         */<a name="line.383"></a>
<FONT color="green">384</FONT>        public double lengthToJava2D(double length, Rectangle2D area,<a name="line.384"></a>
<FONT color="green">385</FONT>                                     RectangleEdge edge) {<a name="line.385"></a>
<FONT color="green">386</FONT>            double axisLength = 0.0;<a name="line.386"></a>
<FONT color="green">387</FONT>            if (this.displayEnd &gt; this.displayStart) {<a name="line.387"></a>
<FONT color="green">388</FONT>                axisLength = this.displayEnd - this.displayStart;<a name="line.388"></a>
<FONT color="green">389</FONT>            }<a name="line.389"></a>
<FONT color="green">390</FONT>            else {<a name="line.390"></a>
<FONT color="green">391</FONT>                axisLength = (this.fixedRange.getUpperBound() - this.displayStart)<a name="line.391"></a>
<FONT color="green">392</FONT>                    + (this.displayEnd - this.fixedRange.getLowerBound());<a name="line.392"></a>
<FONT color="green">393</FONT>            }<a name="line.393"></a>
<FONT color="green">394</FONT>            double areaLength = 0.0;<a name="line.394"></a>
<FONT color="green">395</FONT>            if (RectangleEdge.isLeftOrRight(edge)) {<a name="line.395"></a>
<FONT color="green">396</FONT>                areaLength = area.getHeight();<a name="line.396"></a>
<FONT color="green">397</FONT>            }<a name="line.397"></a>
<FONT color="green">398</FONT>            else {<a name="line.398"></a>
<FONT color="green">399</FONT>                areaLength = area.getWidth();<a name="line.399"></a>
<FONT color="green">400</FONT>            }<a name="line.400"></a>
<FONT color="green">401</FONT>            return (length / axisLength) * areaLength;<a name="line.401"></a>
<FONT color="green">402</FONT>        }<a name="line.402"></a>
<FONT color="green">403</FONT>    <a name="line.403"></a>
<FONT color="green">404</FONT>        /**<a name="line.404"></a>
<FONT color="green">405</FONT>         * Tests this axis for equality with an arbitrary object.<a name="line.405"></a>
<FONT color="green">406</FONT>         *<a name="line.406"></a>
<FONT color="green">407</FONT>         * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.407"></a>
<FONT color="green">408</FONT>         *<a name="line.408"></a>
<FONT color="green">409</FONT>         * @return A boolean.<a name="line.409"></a>
<FONT color="green">410</FONT>         */<a name="line.410"></a>
<FONT color="green">411</FONT>        public boolean equals(Object obj) {<a name="line.411"></a>
<FONT color="green">412</FONT>            if (obj == this) {<a name="line.412"></a>
<FONT color="green">413</FONT>                return true;<a name="line.413"></a>
<FONT color="green">414</FONT>            }<a name="line.414"></a>
<FONT color="green">415</FONT>            if (!(obj instanceof ModuloAxis)) {<a name="line.415"></a>
<FONT color="green">416</FONT>                return false;<a name="line.416"></a>
<FONT color="green">417</FONT>            }<a name="line.417"></a>
<FONT color="green">418</FONT>            ModuloAxis that = (ModuloAxis) obj;<a name="line.418"></a>
<FONT color="green">419</FONT>            if (this.displayStart != that.displayStart) {<a name="line.419"></a>
<FONT color="green">420</FONT>                return false;<a name="line.420"></a>
<FONT color="green">421</FONT>            }<a name="line.421"></a>
<FONT color="green">422</FONT>            if (this.displayEnd != that.displayEnd) {<a name="line.422"></a>
<FONT color="green">423</FONT>                return false;<a name="line.423"></a>
<FONT color="green">424</FONT>            }<a name="line.424"></a>
<FONT color="green">425</FONT>            if (!this.fixedRange.equals(that.fixedRange)) {<a name="line.425"></a>
<FONT color="green">426</FONT>                return false;<a name="line.426"></a>
<FONT color="green">427</FONT>            }<a name="line.427"></a>
<FONT color="green">428</FONT>            return super.equals(obj);<a name="line.428"></a>
<FONT color="green">429</FONT>        }<a name="line.429"></a>
<FONT color="green">430</FONT>    <a name="line.430"></a>
<FONT color="green">431</FONT>    }<a name="line.431"></a>




























































</PRE>
</BODY>
</HTML>
