<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ===========================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JFreeChart : a free chart library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ===========================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     *<a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jfreechart/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it<a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by<a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or<a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but<a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY<a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public<a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,<a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.<a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc.<a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     *<a name="line.26"></a>
<FONT color="green">027</FONT>     * ---------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * Statistics.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * ---------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C) Copyright 2000-2008, by Matthew Wright and Contributors.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  Matthew Wright;<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   David Gilbert (for Object Refinery Limited);<a name="line.33"></a>
<FONT color="green">034</FONT>     *<a name="line.34"></a>
<FONT color="green">035</FONT>     * Changes (from 08-Nov-2001)<a name="line.35"></a>
<FONT color="green">036</FONT>     * --------------------------<a name="line.36"></a>
<FONT color="green">037</FONT>     * 08-Nov-2001 : Added standard header and tidied Javadoc comments (DG);<a name="line.37"></a>
<FONT color="green">038</FONT>     *               Moved from JFreeChart to package com.jrefinery.data.* in<a name="line.38"></a>
<FONT color="green">039</FONT>     *               JCommon class library (DG);<a name="line.39"></a>
<FONT color="green">040</FONT>     * 24-Jun-2002 : Removed unnecessary local variable (DG);<a name="line.40"></a>
<FONT color="green">041</FONT>     * 07-Oct-2002 : Fixed errors reported by Checkstyle (DG);<a name="line.41"></a>
<FONT color="green">042</FONT>     * 26-May-2004 : Moved calculateMean() method from BoxAndWhiskerCalculator (DG);<a name="line.42"></a>
<FONT color="green">043</FONT>     * 02-Jun-2004 : Fixed bug in calculateMedian() method (DG);<a name="line.43"></a>
<FONT color="green">044</FONT>     * 11-Jan-2005 : Removed deprecated code in preparation for the 1.0.0<a name="line.44"></a>
<FONT color="green">045</FONT>     *               release (DG);<a name="line.45"></a>
<FONT color="green">046</FONT>     *<a name="line.46"></a>
<FONT color="green">047</FONT>     */<a name="line.47"></a>
<FONT color="green">048</FONT>    <a name="line.48"></a>
<FONT color="green">049</FONT>    package org.jfree.data.statistics;<a name="line.49"></a>
<FONT color="green">050</FONT>    <a name="line.50"></a>
<FONT color="green">051</FONT>    import java.util.ArrayList;<a name="line.51"></a>
<FONT color="green">052</FONT>    import java.util.Collection;<a name="line.52"></a>
<FONT color="green">053</FONT>    import java.util.Collections;<a name="line.53"></a>
<FONT color="green">054</FONT>    import java.util.Iterator;<a name="line.54"></a>
<FONT color="green">055</FONT>    import java.util.List;<a name="line.55"></a>
<FONT color="green">056</FONT>    <a name="line.56"></a>
<FONT color="green">057</FONT>    /**<a name="line.57"></a>
<FONT color="green">058</FONT>     * A utility class that provides some common statistical functions.<a name="line.58"></a>
<FONT color="green">059</FONT>     */<a name="line.59"></a>
<FONT color="green">060</FONT>    public abstract class Statistics {<a name="line.60"></a>
<FONT color="green">061</FONT>    <a name="line.61"></a>
<FONT color="green">062</FONT>        /**<a name="line.62"></a>
<FONT color="green">063</FONT>         * Returns the mean of an array of numbers.  This is equivalent to calling<a name="line.63"></a>
<FONT color="green">064</FONT>         * &lt;code&gt;calculateMean(values, true)&lt;/code&gt;.<a name="line.64"></a>
<FONT color="green">065</FONT>         *<a name="line.65"></a>
<FONT color="green">066</FONT>         * @param values  the values (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.66"></a>
<FONT color="green">067</FONT>         *<a name="line.67"></a>
<FONT color="green">068</FONT>         * @return The mean.<a name="line.68"></a>
<FONT color="green">069</FONT>         */<a name="line.69"></a>
<FONT color="green">070</FONT>        public static double calculateMean(Number[] values) {<a name="line.70"></a>
<FONT color="green">071</FONT>            return calculateMean(values, true);<a name="line.71"></a>
<FONT color="green">072</FONT>        }<a name="line.72"></a>
<FONT color="green">073</FONT>    <a name="line.73"></a>
<FONT color="green">074</FONT>        /**<a name="line.74"></a>
<FONT color="green">075</FONT>         * Returns the mean of an array of numbers.<a name="line.75"></a>
<FONT color="green">076</FONT>         *<a name="line.76"></a>
<FONT color="green">077</FONT>         * @param values  the values (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.77"></a>
<FONT color="green">078</FONT>         * @param includeNullAndNaN  a flag that controls whether or not<a name="line.78"></a>
<FONT color="green">079</FONT>         *     &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;Double.NaN&lt;/code&gt; values are included<a name="line.79"></a>
<FONT color="green">080</FONT>         *     in the calculation (if either is present in the array, the result is<a name="line.80"></a>
<FONT color="green">081</FONT>         *     {@link Double#NaN}).<a name="line.81"></a>
<FONT color="green">082</FONT>         *<a name="line.82"></a>
<FONT color="green">083</FONT>         * @return The mean.<a name="line.83"></a>
<FONT color="green">084</FONT>         *<a name="line.84"></a>
<FONT color="green">085</FONT>         * @since 1.0.3<a name="line.85"></a>
<FONT color="green">086</FONT>         */<a name="line.86"></a>
<FONT color="green">087</FONT>        public static double calculateMean(Number[] values,<a name="line.87"></a>
<FONT color="green">088</FONT>                boolean includeNullAndNaN) {<a name="line.88"></a>
<FONT color="green">089</FONT>    <a name="line.89"></a>
<FONT color="green">090</FONT>            if (values == null) {<a name="line.90"></a>
<FONT color="green">091</FONT>                throw new IllegalArgumentException("Null 'values' argument.");<a name="line.91"></a>
<FONT color="green">092</FONT>            }<a name="line.92"></a>
<FONT color="green">093</FONT>            double sum = 0.0;<a name="line.93"></a>
<FONT color="green">094</FONT>            double current;<a name="line.94"></a>
<FONT color="green">095</FONT>            int counter = 0;<a name="line.95"></a>
<FONT color="green">096</FONT>            for (int i = 0; i &lt; values.length; i++) {<a name="line.96"></a>
<FONT color="green">097</FONT>                // treat nulls the same as NaNs<a name="line.97"></a>
<FONT color="green">098</FONT>                if (values[i] != null) {<a name="line.98"></a>
<FONT color="green">099</FONT>                    current = values[i].doubleValue();<a name="line.99"></a>
<FONT color="green">100</FONT>                }<a name="line.100"></a>
<FONT color="green">101</FONT>                else {<a name="line.101"></a>
<FONT color="green">102</FONT>                    current = Double.NaN;<a name="line.102"></a>
<FONT color="green">103</FONT>                }<a name="line.103"></a>
<FONT color="green">104</FONT>                // calculate the sum and count<a name="line.104"></a>
<FONT color="green">105</FONT>                if (includeNullAndNaN || !Double.isNaN(current)) {<a name="line.105"></a>
<FONT color="green">106</FONT>                    sum = sum + current;<a name="line.106"></a>
<FONT color="green">107</FONT>                    counter++;<a name="line.107"></a>
<FONT color="green">108</FONT>                }<a name="line.108"></a>
<FONT color="green">109</FONT>            }<a name="line.109"></a>
<FONT color="green">110</FONT>            double result = (sum / counter);<a name="line.110"></a>
<FONT color="green">111</FONT>            return result;<a name="line.111"></a>
<FONT color="green">112</FONT>        }<a name="line.112"></a>
<FONT color="green">113</FONT>    <a name="line.113"></a>
<FONT color="green">114</FONT>        /**<a name="line.114"></a>
<FONT color="green">115</FONT>         * Returns the mean of a collection of &lt;code&gt;Number&lt;/code&gt; objects.<a name="line.115"></a>
<FONT color="green">116</FONT>         *<a name="line.116"></a>
<FONT color="green">117</FONT>         * @param values  the values (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.117"></a>
<FONT color="green">118</FONT>         *<a name="line.118"></a>
<FONT color="green">119</FONT>         * @return The mean.<a name="line.119"></a>
<FONT color="green">120</FONT>         */<a name="line.120"></a>
<FONT color="green">121</FONT>        public static double calculateMean(Collection values) {<a name="line.121"></a>
<FONT color="green">122</FONT>            return calculateMean(values, true);<a name="line.122"></a>
<FONT color="green">123</FONT>        }<a name="line.123"></a>
<FONT color="green">124</FONT>    <a name="line.124"></a>
<FONT color="green">125</FONT>        /**<a name="line.125"></a>
<FONT color="green">126</FONT>         * Returns the mean of a collection of &lt;code&gt;Number&lt;/code&gt; objects.<a name="line.126"></a>
<FONT color="green">127</FONT>         *<a name="line.127"></a>
<FONT color="green">128</FONT>         * @param values  the values (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.128"></a>
<FONT color="green">129</FONT>         * @param includeNullAndNaN  a flag that controls whether or not<a name="line.129"></a>
<FONT color="green">130</FONT>         *     &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;Double.NaN&lt;/code&gt; values are included<a name="line.130"></a>
<FONT color="green">131</FONT>         *     in the calculation (if either is present in the array, the result is<a name="line.131"></a>
<FONT color="green">132</FONT>         *     {@link Double#NaN}).<a name="line.132"></a>
<FONT color="green">133</FONT>         *<a name="line.133"></a>
<FONT color="green">134</FONT>         * @return The mean.<a name="line.134"></a>
<FONT color="green">135</FONT>         *<a name="line.135"></a>
<FONT color="green">136</FONT>         * @since 1.0.3<a name="line.136"></a>
<FONT color="green">137</FONT>         */<a name="line.137"></a>
<FONT color="green">138</FONT>        public static double calculateMean(Collection values,<a name="line.138"></a>
<FONT color="green">139</FONT>                boolean includeNullAndNaN) {<a name="line.139"></a>
<FONT color="green">140</FONT>    <a name="line.140"></a>
<FONT color="green">141</FONT>            if (values == null) {<a name="line.141"></a>
<FONT color="green">142</FONT>                throw new IllegalArgumentException("Null 'values' argument.");<a name="line.142"></a>
<FONT color="green">143</FONT>            }<a name="line.143"></a>
<FONT color="green">144</FONT>            int count = 0;<a name="line.144"></a>
<FONT color="green">145</FONT>            double total = 0.0;<a name="line.145"></a>
<FONT color="green">146</FONT>            Iterator iterator = values.iterator();<a name="line.146"></a>
<FONT color="green">147</FONT>            while (iterator.hasNext()) {<a name="line.147"></a>
<FONT color="green">148</FONT>                Object object = iterator.next();<a name="line.148"></a>
<FONT color="green">149</FONT>                if (object == null) {<a name="line.149"></a>
<FONT color="green">150</FONT>                    if (includeNullAndNaN) {<a name="line.150"></a>
<FONT color="green">151</FONT>                        return Double.NaN;<a name="line.151"></a>
<FONT color="green">152</FONT>                    }<a name="line.152"></a>
<FONT color="green">153</FONT>                }<a name="line.153"></a>
<FONT color="green">154</FONT>                else {<a name="line.154"></a>
<FONT color="green">155</FONT>                    if (object instanceof Number) {<a name="line.155"></a>
<FONT color="green">156</FONT>                        Number number = (Number) object;<a name="line.156"></a>
<FONT color="green">157</FONT>                        double value = number.doubleValue();<a name="line.157"></a>
<FONT color="green">158</FONT>                        if (Double.isNaN(value)) {<a name="line.158"></a>
<FONT color="green">159</FONT>                            if (includeNullAndNaN) {<a name="line.159"></a>
<FONT color="green">160</FONT>                                return Double.NaN;<a name="line.160"></a>
<FONT color="green">161</FONT>                            }<a name="line.161"></a>
<FONT color="green">162</FONT>                        }<a name="line.162"></a>
<FONT color="green">163</FONT>                        else {<a name="line.163"></a>
<FONT color="green">164</FONT>                            total = total + number.doubleValue();<a name="line.164"></a>
<FONT color="green">165</FONT>                            count = count + 1;<a name="line.165"></a>
<FONT color="green">166</FONT>                        }<a name="line.166"></a>
<FONT color="green">167</FONT>                    }<a name="line.167"></a>
<FONT color="green">168</FONT>                }<a name="line.168"></a>
<FONT color="green">169</FONT>            }<a name="line.169"></a>
<FONT color="green">170</FONT>            return total / count;<a name="line.170"></a>
<FONT color="green">171</FONT>        }<a name="line.171"></a>
<FONT color="green">172</FONT>    <a name="line.172"></a>
<FONT color="green">173</FONT>        /**<a name="line.173"></a>
<FONT color="green">174</FONT>         * Calculates the median for a list of values (&lt;code&gt;Number&lt;/code&gt; objects).<a name="line.174"></a>
<FONT color="green">175</FONT>         * The list of values will be copied, and the copy sorted, before<a name="line.175"></a>
<FONT color="green">176</FONT>         * calculating the median.  To avoid this step (if your list of values<a name="line.176"></a>
<FONT color="green">177</FONT>         * is already sorted), use the {@link #calculateMedian(List, boolean)}<a name="line.177"></a>
<FONT color="green">178</FONT>         * method.<a name="line.178"></a>
<FONT color="green">179</FONT>         *<a name="line.179"></a>
<FONT color="green">180</FONT>         * @param values  the values (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.180"></a>
<FONT color="green">181</FONT>         *<a name="line.181"></a>
<FONT color="green">182</FONT>         * @return The median.<a name="line.182"></a>
<FONT color="green">183</FONT>         */<a name="line.183"></a>
<FONT color="green">184</FONT>        public static double calculateMedian(List values) {<a name="line.184"></a>
<FONT color="green">185</FONT>            return calculateMedian(values, true);<a name="line.185"></a>
<FONT color="green">186</FONT>        }<a name="line.186"></a>
<FONT color="green">187</FONT>    <a name="line.187"></a>
<FONT color="green">188</FONT>        /**<a name="line.188"></a>
<FONT color="green">189</FONT>         * Calculates the median for a list of values (&lt;code&gt;Number&lt;/code&gt; objects).<a name="line.189"></a>
<FONT color="green">190</FONT>         * If &lt;code&gt;copyAndSort&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, the list is assumed<a name="line.190"></a>
<FONT color="green">191</FONT>         * to be presorted in ascending order by value.<a name="line.191"></a>
<FONT color="green">192</FONT>         *<a name="line.192"></a>
<FONT color="green">193</FONT>         * @param values  the values (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.193"></a>
<FONT color="green">194</FONT>         * @param copyAndSort  a flag that controls whether the list of values is<a name="line.194"></a>
<FONT color="green">195</FONT>         *                     copied and sorted.<a name="line.195"></a>
<FONT color="green">196</FONT>         *<a name="line.196"></a>
<FONT color="green">197</FONT>         * @return The median.<a name="line.197"></a>
<FONT color="green">198</FONT>         */<a name="line.198"></a>
<FONT color="green">199</FONT>        public static double calculateMedian(List values, boolean copyAndSort) {<a name="line.199"></a>
<FONT color="green">200</FONT>    <a name="line.200"></a>
<FONT color="green">201</FONT>            double result = Double.NaN;<a name="line.201"></a>
<FONT color="green">202</FONT>            if (values != null) {<a name="line.202"></a>
<FONT color="green">203</FONT>                if (copyAndSort) {<a name="line.203"></a>
<FONT color="green">204</FONT>                    int itemCount = values.size();<a name="line.204"></a>
<FONT color="green">205</FONT>                    List copy = new ArrayList(itemCount);<a name="line.205"></a>
<FONT color="green">206</FONT>                    for (int i = 0; i &lt; itemCount; i++) {<a name="line.206"></a>
<FONT color="green">207</FONT>                        copy.add(i, values.get(i));<a name="line.207"></a>
<FONT color="green">208</FONT>                    }<a name="line.208"></a>
<FONT color="green">209</FONT>                    Collections.sort(copy);<a name="line.209"></a>
<FONT color="green">210</FONT>                    values = copy;<a name="line.210"></a>
<FONT color="green">211</FONT>                }<a name="line.211"></a>
<FONT color="green">212</FONT>                int count = values.size();<a name="line.212"></a>
<FONT color="green">213</FONT>                if (count &gt; 0) {<a name="line.213"></a>
<FONT color="green">214</FONT>                    if (count % 2 == 1) {<a name="line.214"></a>
<FONT color="green">215</FONT>                        if (count &gt; 1) {<a name="line.215"></a>
<FONT color="green">216</FONT>                            Number value = (Number) values.get((count - 1) / 2);<a name="line.216"></a>
<FONT color="green">217</FONT>                            result = value.doubleValue();<a name="line.217"></a>
<FONT color="green">218</FONT>                        }<a name="line.218"></a>
<FONT color="green">219</FONT>                        else {<a name="line.219"></a>
<FONT color="green">220</FONT>                            Number value = (Number) values.get(0);<a name="line.220"></a>
<FONT color="green">221</FONT>                            result = value.doubleValue();<a name="line.221"></a>
<FONT color="green">222</FONT>                        }<a name="line.222"></a>
<FONT color="green">223</FONT>                    }<a name="line.223"></a>
<FONT color="green">224</FONT>                    else {<a name="line.224"></a>
<FONT color="green">225</FONT>                        Number value1 = (Number) values.get(count / 2 - 1);<a name="line.225"></a>
<FONT color="green">226</FONT>                        Number value2 = (Number) values.get(count / 2);<a name="line.226"></a>
<FONT color="green">227</FONT>                        result = (value1.doubleValue() + value2.doubleValue())<a name="line.227"></a>
<FONT color="green">228</FONT>                                 / 2.0;<a name="line.228"></a>
<FONT color="green">229</FONT>                    }<a name="line.229"></a>
<FONT color="green">230</FONT>                }<a name="line.230"></a>
<FONT color="green">231</FONT>            }<a name="line.231"></a>
<FONT color="green">232</FONT>            return result;<a name="line.232"></a>
<FONT color="green">233</FONT>        }<a name="line.233"></a>
<FONT color="green">234</FONT>    <a name="line.234"></a>
<FONT color="green">235</FONT>        /**<a name="line.235"></a>
<FONT color="green">236</FONT>         * Calculates the median for a sublist within a list of values<a name="line.236"></a>
<FONT color="green">237</FONT>         * (&lt;code&gt;Number&lt;/code&gt; objects).<a name="line.237"></a>
<FONT color="green">238</FONT>         *<a name="line.238"></a>
<FONT color="green">239</FONT>         * @param values  the values, in any order (&lt;code&gt;null&lt;/code&gt; not<a name="line.239"></a>
<FONT color="green">240</FONT>         *                permitted).<a name="line.240"></a>
<FONT color="green">241</FONT>         * @param start  the start index.<a name="line.241"></a>
<FONT color="green">242</FONT>         * @param end  the end index.<a name="line.242"></a>
<FONT color="green">243</FONT>         *<a name="line.243"></a>
<FONT color="green">244</FONT>         * @return The median.<a name="line.244"></a>
<FONT color="green">245</FONT>         */<a name="line.245"></a>
<FONT color="green">246</FONT>        public static double calculateMedian(List values, int start, int end) {<a name="line.246"></a>
<FONT color="green">247</FONT>            return calculateMedian(values, start, end, true);<a name="line.247"></a>
<FONT color="green">248</FONT>        }<a name="line.248"></a>
<FONT color="green">249</FONT>    <a name="line.249"></a>
<FONT color="green">250</FONT>        /**<a name="line.250"></a>
<FONT color="green">251</FONT>         * Calculates the median for a sublist within a list of values<a name="line.251"></a>
<FONT color="green">252</FONT>         * (&lt;code&gt;Number&lt;/code&gt; objects).  The entire list will be sorted if the<a name="line.252"></a>
<FONT color="green">253</FONT>         * &lt;code&gt;ascending&lt;/code&lt; argument is &lt;code&gt;false&lt;/code&gt;.<a name="line.253"></a>
<FONT color="green">254</FONT>         *<a name="line.254"></a>
<FONT color="green">255</FONT>         * @param values  the values (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.255"></a>
<FONT color="green">256</FONT>         * @param start  the start index.<a name="line.256"></a>
<FONT color="green">257</FONT>         * @param end  the end index.<a name="line.257"></a>
<FONT color="green">258</FONT>         * @param copyAndSort  a flag that that controls whether the list of values<a name="line.258"></a>
<FONT color="green">259</FONT>         *                     is copied and sorted.<a name="line.259"></a>
<FONT color="green">260</FONT>         *<a name="line.260"></a>
<FONT color="green">261</FONT>         * @return The median.<a name="line.261"></a>
<FONT color="green">262</FONT>         */<a name="line.262"></a>
<FONT color="green">263</FONT>        public static double calculateMedian(List values, int start, int end,<a name="line.263"></a>
<FONT color="green">264</FONT>                                             boolean copyAndSort) {<a name="line.264"></a>
<FONT color="green">265</FONT>    <a name="line.265"></a>
<FONT color="green">266</FONT>            double result = Double.NaN;<a name="line.266"></a>
<FONT color="green">267</FONT>            if (copyAndSort) {<a name="line.267"></a>
<FONT color="green">268</FONT>                List working = new ArrayList(end - start + 1);<a name="line.268"></a>
<FONT color="green">269</FONT>                for (int i = start; i &lt;= end; i++) {<a name="line.269"></a>
<FONT color="green">270</FONT>                    working.add(values.get(i));<a name="line.270"></a>
<FONT color="green">271</FONT>                }<a name="line.271"></a>
<FONT color="green">272</FONT>                Collections.sort(working);<a name="line.272"></a>
<FONT color="green">273</FONT>                result = calculateMedian(working, false);<a name="line.273"></a>
<FONT color="green">274</FONT>            }<a name="line.274"></a>
<FONT color="green">275</FONT>            else {<a name="line.275"></a>
<FONT color="green">276</FONT>                int count = end - start + 1;<a name="line.276"></a>
<FONT color="green">277</FONT>                if (count &gt; 0) {<a name="line.277"></a>
<FONT color="green">278</FONT>                    if (count % 2 == 1) {<a name="line.278"></a>
<FONT color="green">279</FONT>                        if (count &gt; 1) {<a name="line.279"></a>
<FONT color="green">280</FONT>                            Number value<a name="line.280"></a>
<FONT color="green">281</FONT>                                = (Number) values.get(start + (count - 1) / 2);<a name="line.281"></a>
<FONT color="green">282</FONT>                            result = value.doubleValue();<a name="line.282"></a>
<FONT color="green">283</FONT>                        }<a name="line.283"></a>
<FONT color="green">284</FONT>                        else {<a name="line.284"></a>
<FONT color="green">285</FONT>                            Number value = (Number) values.get(start);<a name="line.285"></a>
<FONT color="green">286</FONT>                            result = value.doubleValue();<a name="line.286"></a>
<FONT color="green">287</FONT>                        }<a name="line.287"></a>
<FONT color="green">288</FONT>                    }<a name="line.288"></a>
<FONT color="green">289</FONT>                    else {<a name="line.289"></a>
<FONT color="green">290</FONT>                        Number value1 = (Number) values.get(start + count / 2 - 1);<a name="line.290"></a>
<FONT color="green">291</FONT>                        Number value2 = (Number) values.get(start + count / 2);<a name="line.291"></a>
<FONT color="green">292</FONT>                        result<a name="line.292"></a>
<FONT color="green">293</FONT>                            = (value1.doubleValue() + value2.doubleValue()) / 2.0;<a name="line.293"></a>
<FONT color="green">294</FONT>                    }<a name="line.294"></a>
<FONT color="green">295</FONT>                }<a name="line.295"></a>
<FONT color="green">296</FONT>            }<a name="line.296"></a>
<FONT color="green">297</FONT>            return result;<a name="line.297"></a>
<FONT color="green">298</FONT>    <a name="line.298"></a>
<FONT color="green">299</FONT>        }<a name="line.299"></a>
<FONT color="green">300</FONT>    <a name="line.300"></a>
<FONT color="green">301</FONT>        /**<a name="line.301"></a>
<FONT color="green">302</FONT>         * Returns the standard deviation of a set of numbers.<a name="line.302"></a>
<FONT color="green">303</FONT>         *<a name="line.303"></a>
<FONT color="green">304</FONT>         * @param data  the data (&lt;code&gt;null&lt;/code&gt; or zero length array not<a name="line.304"></a>
<FONT color="green">305</FONT>         *     permitted).<a name="line.305"></a>
<FONT color="green">306</FONT>         *<a name="line.306"></a>
<FONT color="green">307</FONT>         * @return The standard deviation of a set of numbers.<a name="line.307"></a>
<FONT color="green">308</FONT>         */<a name="line.308"></a>
<FONT color="green">309</FONT>        public static double getStdDev(Number[] data) {<a name="line.309"></a>
<FONT color="green">310</FONT>            if (data == null) {<a name="line.310"></a>
<FONT color="green">311</FONT>                throw new IllegalArgumentException("Null 'data' array.");<a name="line.311"></a>
<FONT color="green">312</FONT>            }<a name="line.312"></a>
<FONT color="green">313</FONT>            if (data.length == 0) {<a name="line.313"></a>
<FONT color="green">314</FONT>                throw new IllegalArgumentException("Zero length 'data' array.");<a name="line.314"></a>
<FONT color="green">315</FONT>            }<a name="line.315"></a>
<FONT color="green">316</FONT>            double avg = calculateMean(data);<a name="line.316"></a>
<FONT color="green">317</FONT>            double sum = 0.0;<a name="line.317"></a>
<FONT color="green">318</FONT>    <a name="line.318"></a>
<FONT color="green">319</FONT>            for (int counter = 0; counter &lt; data.length; counter++) {<a name="line.319"></a>
<FONT color="green">320</FONT>                double diff = data[counter].doubleValue() - avg;<a name="line.320"></a>
<FONT color="green">321</FONT>                sum = sum + diff * diff;<a name="line.321"></a>
<FONT color="green">322</FONT>            }<a name="line.322"></a>
<FONT color="green">323</FONT>            return Math.sqrt(sum / (data.length - 1));<a name="line.323"></a>
<FONT color="green">324</FONT>        }<a name="line.324"></a>
<FONT color="green">325</FONT>    <a name="line.325"></a>
<FONT color="green">326</FONT>        /**<a name="line.326"></a>
<FONT color="green">327</FONT>         * Fits a straight line to a set of (x, y) data, returning the slope and<a name="line.327"></a>
<FONT color="green">328</FONT>         * intercept.<a name="line.328"></a>
<FONT color="green">329</FONT>         *<a name="line.329"></a>
<FONT color="green">330</FONT>         * @param xData  the x-data (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.330"></a>
<FONT color="green">331</FONT>         * @param yData  the y-data (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.331"></a>
<FONT color="green">332</FONT>         *<a name="line.332"></a>
<FONT color="green">333</FONT>         * @return A double array with the intercept in [0] and the slope in [1].<a name="line.333"></a>
<FONT color="green">334</FONT>         */<a name="line.334"></a>
<FONT color="green">335</FONT>        public static double[] getLinearFit(Number[] xData, Number[] yData) {<a name="line.335"></a>
<FONT color="green">336</FONT>    <a name="line.336"></a>
<FONT color="green">337</FONT>            if (xData == null) {<a name="line.337"></a>
<FONT color="green">338</FONT>                throw new IllegalArgumentException("Null 'xData' argument.");<a name="line.338"></a>
<FONT color="green">339</FONT>            }<a name="line.339"></a>
<FONT color="green">340</FONT>            if (yData == null) {<a name="line.340"></a>
<FONT color="green">341</FONT>                throw new IllegalArgumentException("Null 'yData' argument.");<a name="line.341"></a>
<FONT color="green">342</FONT>            }<a name="line.342"></a>
<FONT color="green">343</FONT>            if (xData.length != yData.length) {<a name="line.343"></a>
<FONT color="green">344</FONT>                throw new IllegalArgumentException(<a name="line.344"></a>
<FONT color="green">345</FONT>                    "Statistics.getLinearFit(): array lengths must be equal.");<a name="line.345"></a>
<FONT color="green">346</FONT>            }<a name="line.346"></a>
<FONT color="green">347</FONT>    <a name="line.347"></a>
<FONT color="green">348</FONT>            double[] result = new double[2];<a name="line.348"></a>
<FONT color="green">349</FONT>            // slope<a name="line.349"></a>
<FONT color="green">350</FONT>            result[1] = getSlope(xData, yData);<a name="line.350"></a>
<FONT color="green">351</FONT>            // intercept<a name="line.351"></a>
<FONT color="green">352</FONT>            result[0] = calculateMean(yData) - result[1] * calculateMean(xData);<a name="line.352"></a>
<FONT color="green">353</FONT>    <a name="line.353"></a>
<FONT color="green">354</FONT>            return result;<a name="line.354"></a>
<FONT color="green">355</FONT>    <a name="line.355"></a>
<FONT color="green">356</FONT>        }<a name="line.356"></a>
<FONT color="green">357</FONT>    <a name="line.357"></a>
<FONT color="green">358</FONT>        /**<a name="line.358"></a>
<FONT color="green">359</FONT>         * Finds the slope of a regression line using least squares.<a name="line.359"></a>
<FONT color="green">360</FONT>         *<a name="line.360"></a>
<FONT color="green">361</FONT>         * @param xData  the x-values (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.361"></a>
<FONT color="green">362</FONT>         * @param yData  the y-values (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.362"></a>
<FONT color="green">363</FONT>         *<a name="line.363"></a>
<FONT color="green">364</FONT>         * @return The slope.<a name="line.364"></a>
<FONT color="green">365</FONT>         */<a name="line.365"></a>
<FONT color="green">366</FONT>        public static double getSlope(Number[] xData, Number[] yData) {<a name="line.366"></a>
<FONT color="green">367</FONT>    <a name="line.367"></a>
<FONT color="green">368</FONT>            if (xData == null) {<a name="line.368"></a>
<FONT color="green">369</FONT>                throw new IllegalArgumentException("Null 'xData' argument.");<a name="line.369"></a>
<FONT color="green">370</FONT>            }<a name="line.370"></a>
<FONT color="green">371</FONT>            if (yData == null) {<a name="line.371"></a>
<FONT color="green">372</FONT>                throw new IllegalArgumentException("Null 'yData' argument.");<a name="line.372"></a>
<FONT color="green">373</FONT>            }<a name="line.373"></a>
<FONT color="green">374</FONT>            if (xData.length != yData.length) {<a name="line.374"></a>
<FONT color="green">375</FONT>                throw new IllegalArgumentException("Array lengths must be equal.");<a name="line.375"></a>
<FONT color="green">376</FONT>            }<a name="line.376"></a>
<FONT color="green">377</FONT>    <a name="line.377"></a>
<FONT color="green">378</FONT>            // ********* stat function for linear slope ********<a name="line.378"></a>
<FONT color="green">379</FONT>            // y = a + bx<a name="line.379"></a>
<FONT color="green">380</FONT>            // a = ybar - b * xbar<a name="line.380"></a>
<FONT color="green">381</FONT>            //     sum(x * y) - (sum (x) * sum(y)) / n<a name="line.381"></a>
<FONT color="green">382</FONT>            // b = ------------------------------------<a name="line.382"></a>
<FONT color="green">383</FONT>            //     sum (x^2) - (sum(x)^2 / n<a name="line.383"></a>
<FONT color="green">384</FONT>            // *************************************************<a name="line.384"></a>
<FONT color="green">385</FONT>    <a name="line.385"></a>
<FONT color="green">386</FONT>            // sum of x, x^2, x * y, y<a name="line.386"></a>
<FONT color="green">387</FONT>            double sx = 0.0, sxx = 0.0, sxy = 0.0, sy = 0.0;<a name="line.387"></a>
<FONT color="green">388</FONT>            int counter;<a name="line.388"></a>
<FONT color="green">389</FONT>            for (counter = 0; counter &lt; xData.length; counter++) {<a name="line.389"></a>
<FONT color="green">390</FONT>                sx = sx + xData[counter].doubleValue();<a name="line.390"></a>
<FONT color="green">391</FONT>                sxx = sxx + Math.pow(xData[counter].doubleValue(), 2);<a name="line.391"></a>
<FONT color="green">392</FONT>                sxy = sxy + yData[counter].doubleValue()<a name="line.392"></a>
<FONT color="green">393</FONT>                          * xData[counter].doubleValue();<a name="line.393"></a>
<FONT color="green">394</FONT>                sy = sy + yData[counter].doubleValue();<a name="line.394"></a>
<FONT color="green">395</FONT>            }<a name="line.395"></a>
<FONT color="green">396</FONT>            return (sxy - (sx * sy) / counter) / (sxx - (sx * sx) / counter);<a name="line.396"></a>
<FONT color="green">397</FONT>    <a name="line.397"></a>
<FONT color="green">398</FONT>        }<a name="line.398"></a>
<FONT color="green">399</FONT>    <a name="line.399"></a>
<FONT color="green">400</FONT>        /**<a name="line.400"></a>
<FONT color="green">401</FONT>         * Calculates the correlation between two datasets.  Both arrays should<a name="line.401"></a>
<FONT color="green">402</FONT>         * contain the same number of items.  Null values are treated as zero.<a name="line.402"></a>
<FONT color="green">403</FONT>         * &lt;P&gt;<a name="line.403"></a>
<FONT color="green">404</FONT>         * Information about the correlation calculation was obtained from:<a name="line.404"></a>
<FONT color="green">405</FONT>         *<a name="line.405"></a>
<FONT color="green">406</FONT>         * http://trochim.human.cornell.edu/kb/statcorr.htm<a name="line.406"></a>
<FONT color="green">407</FONT>         *<a name="line.407"></a>
<FONT color="green">408</FONT>         * @param data1  the first dataset.<a name="line.408"></a>
<FONT color="green">409</FONT>         * @param data2  the second dataset.<a name="line.409"></a>
<FONT color="green">410</FONT>         *<a name="line.410"></a>
<FONT color="green">411</FONT>         * @return The correlation.<a name="line.411"></a>
<FONT color="green">412</FONT>         */<a name="line.412"></a>
<FONT color="green">413</FONT>        public static double getCorrelation(Number[] data1, Number[] data2) {<a name="line.413"></a>
<FONT color="green">414</FONT>            if (data1 == null) {<a name="line.414"></a>
<FONT color="green">415</FONT>                throw new IllegalArgumentException("Null 'data1' argument.");<a name="line.415"></a>
<FONT color="green">416</FONT>            }<a name="line.416"></a>
<FONT color="green">417</FONT>            if (data2 == null) {<a name="line.417"></a>
<FONT color="green">418</FONT>                throw new IllegalArgumentException("Null 'data2' argument.");<a name="line.418"></a>
<FONT color="green">419</FONT>            }<a name="line.419"></a>
<FONT color="green">420</FONT>            if (data1.length != data2.length) {<a name="line.420"></a>
<FONT color="green">421</FONT>                throw new IllegalArgumentException(<a name="line.421"></a>
<FONT color="green">422</FONT>                    "'data1' and 'data2' arrays must have same length."<a name="line.422"></a>
<FONT color="green">423</FONT>                );<a name="line.423"></a>
<FONT color="green">424</FONT>            }<a name="line.424"></a>
<FONT color="green">425</FONT>            int n = data1.length;<a name="line.425"></a>
<FONT color="green">426</FONT>            double sumX = 0.0;<a name="line.426"></a>
<FONT color="green">427</FONT>            double sumY = 0.0;<a name="line.427"></a>
<FONT color="green">428</FONT>            double sumX2 = 0.0;<a name="line.428"></a>
<FONT color="green">429</FONT>            double sumY2 = 0.0;<a name="line.429"></a>
<FONT color="green">430</FONT>            double sumXY = 0.0;<a name="line.430"></a>
<FONT color="green">431</FONT>            for (int i = 0; i &lt; n; i++) {<a name="line.431"></a>
<FONT color="green">432</FONT>                double x = 0.0;<a name="line.432"></a>
<FONT color="green">433</FONT>                if (data1[i] != null) {<a name="line.433"></a>
<FONT color="green">434</FONT>                    x = data1[i].doubleValue();<a name="line.434"></a>
<FONT color="green">435</FONT>                }<a name="line.435"></a>
<FONT color="green">436</FONT>                double y = 0.0;<a name="line.436"></a>
<FONT color="green">437</FONT>                if (data2[i] != null) {<a name="line.437"></a>
<FONT color="green">438</FONT>                    y = data2[i].doubleValue();<a name="line.438"></a>
<FONT color="green">439</FONT>                }<a name="line.439"></a>
<FONT color="green">440</FONT>                sumX = sumX + x;<a name="line.440"></a>
<FONT color="green">441</FONT>                sumY = sumY + y;<a name="line.441"></a>
<FONT color="green">442</FONT>                sumXY = sumXY + (x * y);<a name="line.442"></a>
<FONT color="green">443</FONT>                sumX2 = sumX2 + (x * x);<a name="line.443"></a>
<FONT color="green">444</FONT>                sumY2 = sumY2 + (y * y);<a name="line.444"></a>
<FONT color="green">445</FONT>            }<a name="line.445"></a>
<FONT color="green">446</FONT>            return (n * sumXY - sumX * sumY) / Math.pow((n * sumX2 - sumX * sumX)<a name="line.446"></a>
<FONT color="green">447</FONT>                    * (n * sumY2 - sumY * sumY), 0.5);<a name="line.447"></a>
<FONT color="green">448</FONT>        }<a name="line.448"></a>
<FONT color="green">449</FONT>    <a name="line.449"></a>
<FONT color="green">450</FONT>        /**<a name="line.450"></a>
<FONT color="green">451</FONT>         * Returns a data set for a moving average on the data set passed in.<a name="line.451"></a>
<FONT color="green">452</FONT>         *<a name="line.452"></a>
<FONT color="green">453</FONT>         * @param xData  an array of the x data.<a name="line.453"></a>
<FONT color="green">454</FONT>         * @param yData  an array of the y data.<a name="line.454"></a>
<FONT color="green">455</FONT>         * @param period  the number of data points to average<a name="line.455"></a>
<FONT color="green">456</FONT>         *<a name="line.456"></a>
<FONT color="green">457</FONT>         * @return A double[][] the length of the data set in the first dimension,<a name="line.457"></a>
<FONT color="green">458</FONT>         *         with two doubles for x and y in the second dimension<a name="line.458"></a>
<FONT color="green">459</FONT>         */<a name="line.459"></a>
<FONT color="green">460</FONT>        public static double[][] getMovingAverage(Number[] xData,<a name="line.460"></a>
<FONT color="green">461</FONT>                                                  Number[] yData,<a name="line.461"></a>
<FONT color="green">462</FONT>                                                  int period) {<a name="line.462"></a>
<FONT color="green">463</FONT>    <a name="line.463"></a>
<FONT color="green">464</FONT>            // check arguments...<a name="line.464"></a>
<FONT color="green">465</FONT>            if (xData.length != yData.length) {<a name="line.465"></a>
<FONT color="green">466</FONT>                throw new IllegalArgumentException("Array lengths must be equal.");<a name="line.466"></a>
<FONT color="green">467</FONT>            }<a name="line.467"></a>
<FONT color="green">468</FONT>    <a name="line.468"></a>
<FONT color="green">469</FONT>            if (period &gt; xData.length) {<a name="line.469"></a>
<FONT color="green">470</FONT>                throw new IllegalArgumentException(<a name="line.470"></a>
<FONT color="green">471</FONT>                    "Period can't be longer than dataset."<a name="line.471"></a>
<FONT color="green">472</FONT>                );<a name="line.472"></a>
<FONT color="green">473</FONT>            }<a name="line.473"></a>
<FONT color="green">474</FONT>    <a name="line.474"></a>
<FONT color="green">475</FONT>            double[][] result = new double[xData.length - period][2];<a name="line.475"></a>
<FONT color="green">476</FONT>            for (int i = 0; i &lt; result.length; i++) {<a name="line.476"></a>
<FONT color="green">477</FONT>                result[i][0] = xData[i + period].doubleValue();<a name="line.477"></a>
<FONT color="green">478</FONT>                // holds the moving average sum<a name="line.478"></a>
<FONT color="green">479</FONT>                double sum = 0.0;<a name="line.479"></a>
<FONT color="green">480</FONT>                for (int j = 0; j &lt; period; j++) {<a name="line.480"></a>
<FONT color="green">481</FONT>                    sum += yData[i + j].doubleValue();<a name="line.481"></a>
<FONT color="green">482</FONT>                }<a name="line.482"></a>
<FONT color="green">483</FONT>                sum = sum / period;<a name="line.483"></a>
<FONT color="green">484</FONT>                result[i][1] = sum;<a name="line.484"></a>
<FONT color="green">485</FONT>            }<a name="line.485"></a>
<FONT color="green">486</FONT>            return result;<a name="line.486"></a>
<FONT color="green">487</FONT>    <a name="line.487"></a>
<FONT color="green">488</FONT>        }<a name="line.488"></a>
<FONT color="green">489</FONT>    <a name="line.489"></a>
<FONT color="green">490</FONT>    }<a name="line.490"></a>




























































</PRE>
</BODY>
</HTML>
