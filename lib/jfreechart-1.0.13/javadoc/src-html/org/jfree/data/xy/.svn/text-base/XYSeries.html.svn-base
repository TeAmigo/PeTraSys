<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ===========================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JFreeChart : a free chart library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ===========================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2009, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     *<a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jfreechart/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it<a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by<a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or<a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but<a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY<a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public<a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,<a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.<a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc.<a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     *<a name="line.26"></a>
<FONT color="green">027</FONT>     * -------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * XYSeries.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * -------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C) Copyright 2001-2009, Object Refinery Limited and Contributors.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  David Gilbert (for Object Refinery Limited);<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   Aaron Metzger;<a name="line.33"></a>
<FONT color="green">034</FONT>     *                   Jonathan Gabbai;<a name="line.34"></a>
<FONT color="green">035</FONT>     *                   Richard Atkinson;<a name="line.35"></a>
<FONT color="green">036</FONT>     *                   Michel Santos;<a name="line.36"></a>
<FONT color="green">037</FONT>     *                   Ted Schwartz (fix for bug 1955483);<a name="line.37"></a>
<FONT color="green">038</FONT>     *<a name="line.38"></a>
<FONT color="green">039</FONT>     * Changes<a name="line.39"></a>
<FONT color="green">040</FONT>     * -------<a name="line.40"></a>
<FONT color="green">041</FONT>     * 15-Nov-2001 : Version 1 (DG);<a name="line.41"></a>
<FONT color="green">042</FONT>     * 03-Apr-2002 : Added an add(double, double) method (DG);<a name="line.42"></a>
<FONT color="green">043</FONT>     * 29-Apr-2002 : Added a clear() method (ARM);<a name="line.43"></a>
<FONT color="green">044</FONT>     * 06-Jun-2002 : Updated Javadoc comments (DG);<a name="line.44"></a>
<FONT color="green">045</FONT>     * 29-Aug-2002 : Modified to give user control over whether or not duplicate<a name="line.45"></a>
<FONT color="green">046</FONT>     *               x-values are allowed (DG);<a name="line.46"></a>
<FONT color="green">047</FONT>     * 07-Oct-2002 : Fixed errors reported by Checkstyle (DG);<a name="line.47"></a>
<FONT color="green">048</FONT>     * 11-Nov-2002 : Added maximum item count, code contributed by Jonathan<a name="line.48"></a>
<FONT color="green">049</FONT>     *               Gabbai (DG);<a name="line.49"></a>
<FONT color="green">050</FONT>     * 26-Mar-2003 : Implemented Serializable (DG);<a name="line.50"></a>
<FONT color="green">051</FONT>     * 04-Aug-2003 : Added getItems() method (DG);<a name="line.51"></a>
<FONT color="green">052</FONT>     * 15-Aug-2003 : Changed 'data' from private to protected, added new add()<a name="line.52"></a>
<FONT color="green">053</FONT>     *               methods with a 'notify' argument (DG);<a name="line.53"></a>
<FONT color="green">054</FONT>     * 22-Sep-2003 : Added getAllowDuplicateXValues() method (RA);<a name="line.54"></a>
<FONT color="green">055</FONT>     * 29-Jan-2004 : Added autoSort attribute, based on a contribution by<a name="line.55"></a>
<FONT color="green">056</FONT>     *               Michel Santos - see patch 886740 (DG);<a name="line.56"></a>
<FONT color="green">057</FONT>     * 03-Feb-2004 : Added indexOf() method (DG);<a name="line.57"></a>
<FONT color="green">058</FONT>     * 16-Feb-2004 : Added remove() method (DG);<a name="line.58"></a>
<FONT color="green">059</FONT>     * 18-Aug-2004 : Moved from org.jfree.data --&gt; org.jfree.data.xy (DG);<a name="line.59"></a>
<FONT color="green">060</FONT>     * 21-Feb-2005 : Added update(Number, Number) and addOrUpdate(Number, Number)<a name="line.60"></a>
<FONT color="green">061</FONT>     *               methods (DG);<a name="line.61"></a>
<FONT color="green">062</FONT>     * 03-May-2005 : Added a new constructor, fixed the setMaximumItemCount()<a name="line.62"></a>
<FONT color="green">063</FONT>     *               method to remove items (and notify listeners) if necessary,<a name="line.63"></a>
<FONT color="green">064</FONT>     *               fixed the add() and addOrUpdate() methods to handle unsorted<a name="line.64"></a>
<FONT color="green">065</FONT>     *               series (DG);<a name="line.65"></a>
<FONT color="green">066</FONT>     * ------------- JFreeChart 1.0.x ---------------------------------------------<a name="line.66"></a>
<FONT color="green">067</FONT>     * 11-Jan-2005 : Renamed update(int, Number) --&gt; updateByIndex() (DG);<a name="line.67"></a>
<FONT color="green">068</FONT>     * 15-Jan-2007 : Added toArray() method (DG);<a name="line.68"></a>
<FONT color="green">069</FONT>     * 31-Oct-2007 : Implemented faster hashCode() (DG);<a name="line.69"></a>
<FONT color="green">070</FONT>     * 22-Nov-2007 : Reimplemented clone() (DG);<a name="line.70"></a>
<FONT color="green">071</FONT>     * 01-May-2008 : Fixed bug 1955483 in addOrUpdate() method, thanks to<a name="line.71"></a>
<FONT color="green">072</FONT>     *               Ted Schwartz (DG);<a name="line.72"></a>
<FONT color="green">073</FONT>     * 24-Nov-2008 : Further fix for 1955483 (DG);<a name="line.73"></a>
<FONT color="green">074</FONT>     * 06-Mar-2009 : Added minX, maxX, minY and maxY fields (DG);<a name="line.74"></a>
<FONT color="green">075</FONT>     *<a name="line.75"></a>
<FONT color="green">076</FONT>     */<a name="line.76"></a>
<FONT color="green">077</FONT>    <a name="line.77"></a>
<FONT color="green">078</FONT>    package org.jfree.data.xy;<a name="line.78"></a>
<FONT color="green">079</FONT>    <a name="line.79"></a>
<FONT color="green">080</FONT>    import java.io.Serializable;<a name="line.80"></a>
<FONT color="green">081</FONT>    import java.util.Collections;<a name="line.81"></a>
<FONT color="green">082</FONT>    import java.util.Iterator;<a name="line.82"></a>
<FONT color="green">083</FONT>    import java.util.List;<a name="line.83"></a>
<FONT color="green">084</FONT>    <a name="line.84"></a>
<FONT color="green">085</FONT>    import org.jfree.data.general.Series;<a name="line.85"></a>
<FONT color="green">086</FONT>    import org.jfree.data.general.SeriesChangeEvent;<a name="line.86"></a>
<FONT color="green">087</FONT>    import org.jfree.data.general.SeriesException;<a name="line.87"></a>
<FONT color="green">088</FONT>    import org.jfree.util.ObjectUtilities;<a name="line.88"></a>
<FONT color="green">089</FONT>    <a name="line.89"></a>
<FONT color="green">090</FONT>    /**<a name="line.90"></a>
<FONT color="green">091</FONT>     * Represents a sequence of zero or more data items in the form (x, y).  By<a name="line.91"></a>
<FONT color="green">092</FONT>     * default, items in the series will be sorted into ascending order by x-value,<a name="line.92"></a>
<FONT color="green">093</FONT>     * and duplicate x-values are permitted.  Both the sorting and duplicate<a name="line.93"></a>
<FONT color="green">094</FONT>     * defaults can be changed in the constructor.  Y-values can be<a name="line.94"></a>
<FONT color="green">095</FONT>     * &lt;code&gt;null&lt;/code&gt; to represent missing values.<a name="line.95"></a>
<FONT color="green">096</FONT>     */<a name="line.96"></a>
<FONT color="green">097</FONT>    public class XYSeries extends Series implements Cloneable, Serializable {<a name="line.97"></a>
<FONT color="green">098</FONT>    <a name="line.98"></a>
<FONT color="green">099</FONT>        /** For serialization. */<a name="line.99"></a>
<FONT color="green">100</FONT>        static final long serialVersionUID = -5908509288197150436L;<a name="line.100"></a>
<FONT color="green">101</FONT>    <a name="line.101"></a>
<FONT color="green">102</FONT>        // In version 0.9.12, in response to several developer requests, I changed<a name="line.102"></a>
<FONT color="green">103</FONT>        // the 'data' attribute from 'private' to 'protected', so that others can<a name="line.103"></a>
<FONT color="green">104</FONT>        // make subclasses that work directly with the underlying data structure.<a name="line.104"></a>
<FONT color="green">105</FONT>    <a name="line.105"></a>
<FONT color="green">106</FONT>        /** Storage for the data items in the series. */<a name="line.106"></a>
<FONT color="green">107</FONT>        protected List data;<a name="line.107"></a>
<FONT color="green">108</FONT>    <a name="line.108"></a>
<FONT color="green">109</FONT>        /** The maximum number of items for the series. */<a name="line.109"></a>
<FONT color="green">110</FONT>        private int maximumItemCount = Integer.MAX_VALUE;<a name="line.110"></a>
<FONT color="green">111</FONT>    <a name="line.111"></a>
<FONT color="green">112</FONT>        /**<a name="line.112"></a>
<FONT color="green">113</FONT>         * A flag that controls whether the items are automatically sorted<a name="line.113"></a>
<FONT color="green">114</FONT>         * (by x-value ascending).<a name="line.114"></a>
<FONT color="green">115</FONT>         */<a name="line.115"></a>
<FONT color="green">116</FONT>        private boolean autoSort;<a name="line.116"></a>
<FONT color="green">117</FONT>    <a name="line.117"></a>
<FONT color="green">118</FONT>        /** A flag that controls whether or not duplicate x-values are allowed. */<a name="line.118"></a>
<FONT color="green">119</FONT>        private boolean allowDuplicateXValues;<a name="line.119"></a>
<FONT color="green">120</FONT>    <a name="line.120"></a>
<FONT color="green">121</FONT>        /** The lowest x-value in the series, excluding Double.NaN values. */<a name="line.121"></a>
<FONT color="green">122</FONT>        private double minX;<a name="line.122"></a>
<FONT color="green">123</FONT>    <a name="line.123"></a>
<FONT color="green">124</FONT>        /** The highest x-value in the series, excluding Double.NaN values. */<a name="line.124"></a>
<FONT color="green">125</FONT>        private double maxX;<a name="line.125"></a>
<FONT color="green">126</FONT>    <a name="line.126"></a>
<FONT color="green">127</FONT>        /** The lowest y-value in the series, excluding Double.NaN values. */<a name="line.127"></a>
<FONT color="green">128</FONT>        private double minY;<a name="line.128"></a>
<FONT color="green">129</FONT>    <a name="line.129"></a>
<FONT color="green">130</FONT>        /** The highest y-value in the series, excluding Double.NaN values. */<a name="line.130"></a>
<FONT color="green">131</FONT>        private double maxY;<a name="line.131"></a>
<FONT color="green">132</FONT>    <a name="line.132"></a>
<FONT color="green">133</FONT>        /**<a name="line.133"></a>
<FONT color="green">134</FONT>         * Creates a new empty series.  By default, items added to the series will<a name="line.134"></a>
<FONT color="green">135</FONT>         * be sorted into ascending order by x-value, and duplicate x-values will<a name="line.135"></a>
<FONT color="green">136</FONT>         * be allowed (these defaults can be modified with another constructor.<a name="line.136"></a>
<FONT color="green">137</FONT>         *<a name="line.137"></a>
<FONT color="green">138</FONT>         * @param key  the series key (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.138"></a>
<FONT color="green">139</FONT>         */<a name="line.139"></a>
<FONT color="green">140</FONT>        public XYSeries(Comparable key) {<a name="line.140"></a>
<FONT color="green">141</FONT>            this(key, true, true);<a name="line.141"></a>
<FONT color="green">142</FONT>        }<a name="line.142"></a>
<FONT color="green">143</FONT>    <a name="line.143"></a>
<FONT color="green">144</FONT>        /**<a name="line.144"></a>
<FONT color="green">145</FONT>         * Constructs a new empty series, with the auto-sort flag set as requested,<a name="line.145"></a>
<FONT color="green">146</FONT>         * and duplicate values allowed.<a name="line.146"></a>
<FONT color="green">147</FONT>         *<a name="line.147"></a>
<FONT color="green">148</FONT>         * @param key  the series key (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.148"></a>
<FONT color="green">149</FONT>         * @param autoSort  a flag that controls whether or not the items in the<a name="line.149"></a>
<FONT color="green">150</FONT>         *                  series are sorted.<a name="line.150"></a>
<FONT color="green">151</FONT>         */<a name="line.151"></a>
<FONT color="green">152</FONT>        public XYSeries(Comparable key, boolean autoSort) {<a name="line.152"></a>
<FONT color="green">153</FONT>            this(key, autoSort, true);<a name="line.153"></a>
<FONT color="green">154</FONT>        }<a name="line.154"></a>
<FONT color="green">155</FONT>    <a name="line.155"></a>
<FONT color="green">156</FONT>        /**<a name="line.156"></a>
<FONT color="green">157</FONT>         * Constructs a new xy-series that contains no data.  You can specify<a name="line.157"></a>
<FONT color="green">158</FONT>         * whether or not duplicate x-values are allowed for the series.<a name="line.158"></a>
<FONT color="green">159</FONT>         *<a name="line.159"></a>
<FONT color="green">160</FONT>         * @param key  the series key (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.160"></a>
<FONT color="green">161</FONT>         * @param autoSort  a flag that controls whether or not the items in the<a name="line.161"></a>
<FONT color="green">162</FONT>         *                  series are sorted.<a name="line.162"></a>
<FONT color="green">163</FONT>         * @param allowDuplicateXValues  a flag that controls whether duplicate<a name="line.163"></a>
<FONT color="green">164</FONT>         *                               x-values are allowed.<a name="line.164"></a>
<FONT color="green">165</FONT>         */<a name="line.165"></a>
<FONT color="green">166</FONT>        public XYSeries(Comparable key, boolean autoSort,<a name="line.166"></a>
<FONT color="green">167</FONT>                boolean allowDuplicateXValues) {<a name="line.167"></a>
<FONT color="green">168</FONT>            super(key);<a name="line.168"></a>
<FONT color="green">169</FONT>            this.data = new java.util.ArrayList();<a name="line.169"></a>
<FONT color="green">170</FONT>            this.autoSort = autoSort;<a name="line.170"></a>
<FONT color="green">171</FONT>            this.allowDuplicateXValues = allowDuplicateXValues;<a name="line.171"></a>
<FONT color="green">172</FONT>            this.minX = Double.NaN;<a name="line.172"></a>
<FONT color="green">173</FONT>            this.maxX = Double.NaN;<a name="line.173"></a>
<FONT color="green">174</FONT>            this.minY = Double.NaN;<a name="line.174"></a>
<FONT color="green">175</FONT>            this.maxY = Double.NaN;<a name="line.175"></a>
<FONT color="green">176</FONT>        }<a name="line.176"></a>
<FONT color="green">177</FONT>    <a name="line.177"></a>
<FONT color="green">178</FONT>        /**<a name="line.178"></a>
<FONT color="green">179</FONT>         * Returns the smallest x-value in the series, ignoring any Double.NaN<a name="line.179"></a>
<FONT color="green">180</FONT>         * values.  This method returns Double.NaN if there is no smallest x-value<a name="line.180"></a>
<FONT color="green">181</FONT>         * (for example, when the series is empty).<a name="line.181"></a>
<FONT color="green">182</FONT>         *<a name="line.182"></a>
<FONT color="green">183</FONT>         * @return The smallest x-value.<a name="line.183"></a>
<FONT color="green">184</FONT>         *<a name="line.184"></a>
<FONT color="green">185</FONT>         * @see #getMaxX()<a name="line.185"></a>
<FONT color="green">186</FONT>         *<a name="line.186"></a>
<FONT color="green">187</FONT>         * @since 1.0.13<a name="line.187"></a>
<FONT color="green">188</FONT>         */<a name="line.188"></a>
<FONT color="green">189</FONT>        public double getMinX() {<a name="line.189"></a>
<FONT color="green">190</FONT>            return this.minX;<a name="line.190"></a>
<FONT color="green">191</FONT>        }<a name="line.191"></a>
<FONT color="green">192</FONT>    <a name="line.192"></a>
<FONT color="green">193</FONT>        /**<a name="line.193"></a>
<FONT color="green">194</FONT>         * Returns the largest x-value in the series, ignoring any Double.NaN<a name="line.194"></a>
<FONT color="green">195</FONT>         * values.  This method returns Double.NaN if there is no largest x-value<a name="line.195"></a>
<FONT color="green">196</FONT>         * (for example, when the series is empty).<a name="line.196"></a>
<FONT color="green">197</FONT>         *<a name="line.197"></a>
<FONT color="green">198</FONT>         * @return The largest x-value.<a name="line.198"></a>
<FONT color="green">199</FONT>         *<a name="line.199"></a>
<FONT color="green">200</FONT>         * @see #getMinX()<a name="line.200"></a>
<FONT color="green">201</FONT>         *<a name="line.201"></a>
<FONT color="green">202</FONT>         * @since 1.0.13<a name="line.202"></a>
<FONT color="green">203</FONT>         */<a name="line.203"></a>
<FONT color="green">204</FONT>        public double getMaxX() {<a name="line.204"></a>
<FONT color="green">205</FONT>            return this.maxX;<a name="line.205"></a>
<FONT color="green">206</FONT>        }<a name="line.206"></a>
<FONT color="green">207</FONT>    <a name="line.207"></a>
<FONT color="green">208</FONT>        /**<a name="line.208"></a>
<FONT color="green">209</FONT>         * Returns the smallest y-value in the series, ignoring any null and<a name="line.209"></a>
<FONT color="green">210</FONT>         * Double.NaN values.  This method returns Double.NaN if there is no<a name="line.210"></a>
<FONT color="green">211</FONT>         * smallest y-value (for example, when the series is empty).<a name="line.211"></a>
<FONT color="green">212</FONT>         *<a name="line.212"></a>
<FONT color="green">213</FONT>         * @return The smallest y-value.<a name="line.213"></a>
<FONT color="green">214</FONT>         *<a name="line.214"></a>
<FONT color="green">215</FONT>         * @see #getMaxY()<a name="line.215"></a>
<FONT color="green">216</FONT>         *<a name="line.216"></a>
<FONT color="green">217</FONT>         * @since 1.0.13<a name="line.217"></a>
<FONT color="green">218</FONT>         */<a name="line.218"></a>
<FONT color="green">219</FONT>        public double getMinY() {<a name="line.219"></a>
<FONT color="green">220</FONT>            return this.minY;<a name="line.220"></a>
<FONT color="green">221</FONT>        }<a name="line.221"></a>
<FONT color="green">222</FONT>    <a name="line.222"></a>
<FONT color="green">223</FONT>        /**<a name="line.223"></a>
<FONT color="green">224</FONT>         * Returns the largest y-value in the series, ignoring any Double.NaN<a name="line.224"></a>
<FONT color="green">225</FONT>         * values.  This method returns Double.NaN if there is no largest y-value<a name="line.225"></a>
<FONT color="green">226</FONT>         * (for example, when the series is empty).<a name="line.226"></a>
<FONT color="green">227</FONT>         *<a name="line.227"></a>
<FONT color="green">228</FONT>         * @return The largest y-value.<a name="line.228"></a>
<FONT color="green">229</FONT>         *<a name="line.229"></a>
<FONT color="green">230</FONT>         * @see #getMinY()<a name="line.230"></a>
<FONT color="green">231</FONT>         *<a name="line.231"></a>
<FONT color="green">232</FONT>         * @since 1.0.13<a name="line.232"></a>
<FONT color="green">233</FONT>         */<a name="line.233"></a>
<FONT color="green">234</FONT>        public double getMaxY() {<a name="line.234"></a>
<FONT color="green">235</FONT>            return this.maxY;<a name="line.235"></a>
<FONT color="green">236</FONT>        }<a name="line.236"></a>
<FONT color="green">237</FONT>    <a name="line.237"></a>
<FONT color="green">238</FONT>        /**<a name="line.238"></a>
<FONT color="green">239</FONT>         * Updates the cached values for the minimum and maximum data values.<a name="line.239"></a>
<FONT color="green">240</FONT>         *<a name="line.240"></a>
<FONT color="green">241</FONT>         * @param item  the item added (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.241"></a>
<FONT color="green">242</FONT>         *<a name="line.242"></a>
<FONT color="green">243</FONT>         * @since 1.0.13<a name="line.243"></a>
<FONT color="green">244</FONT>         */<a name="line.244"></a>
<FONT color="green">245</FONT>        private void updateBoundsForAddedItem(XYDataItem item) {<a name="line.245"></a>
<FONT color="green">246</FONT>            double x = item.getXValue();<a name="line.246"></a>
<FONT color="green">247</FONT>            this.minX = minIgnoreNaN(this.minX, x);<a name="line.247"></a>
<FONT color="green">248</FONT>            this.maxX = maxIgnoreNaN(this.maxX, x);<a name="line.248"></a>
<FONT color="green">249</FONT>            if (item.getY() != null) {<a name="line.249"></a>
<FONT color="green">250</FONT>                double y = item.getYValue();<a name="line.250"></a>
<FONT color="green">251</FONT>                this.minY = minIgnoreNaN(this.minY, y);<a name="line.251"></a>
<FONT color="green">252</FONT>                this.maxY = maxIgnoreNaN(this.maxY, y);<a name="line.252"></a>
<FONT color="green">253</FONT>            }<a name="line.253"></a>
<FONT color="green">254</FONT>        }<a name="line.254"></a>
<FONT color="green">255</FONT>    <a name="line.255"></a>
<FONT color="green">256</FONT>        /**<a name="line.256"></a>
<FONT color="green">257</FONT>         * Updates the cached values for the minimum and maximum data values on<a name="line.257"></a>
<FONT color="green">258</FONT>         * the basis that the specified item has just been removed.<a name="line.258"></a>
<FONT color="green">259</FONT>         *<a name="line.259"></a>
<FONT color="green">260</FONT>         * @param item  the item added (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.260"></a>
<FONT color="green">261</FONT>         *<a name="line.261"></a>
<FONT color="green">262</FONT>         * @since 1.0.13<a name="line.262"></a>
<FONT color="green">263</FONT>         */<a name="line.263"></a>
<FONT color="green">264</FONT>        private void updateBoundsForRemovedItem(XYDataItem item) {<a name="line.264"></a>
<FONT color="green">265</FONT>            boolean itemContributesToXBounds = false;<a name="line.265"></a>
<FONT color="green">266</FONT>            boolean itemContributesToYBounds = false;<a name="line.266"></a>
<FONT color="green">267</FONT>            double x = item.getXValue();<a name="line.267"></a>
<FONT color="green">268</FONT>            if (!Double.isNaN(x)) {<a name="line.268"></a>
<FONT color="green">269</FONT>                if (x &lt;= this.minX || x &gt;= this.maxX) {<a name="line.269"></a>
<FONT color="green">270</FONT>                    itemContributesToXBounds = true;<a name="line.270"></a>
<FONT color="green">271</FONT>                }<a name="line.271"></a>
<FONT color="green">272</FONT>            }<a name="line.272"></a>
<FONT color="green">273</FONT>            if (item.getY() != null) {<a name="line.273"></a>
<FONT color="green">274</FONT>                double y = item.getYValue();<a name="line.274"></a>
<FONT color="green">275</FONT>                if (!Double.isNaN(y)) {<a name="line.275"></a>
<FONT color="green">276</FONT>                    if (y &lt;= this.minY || y &gt;= this.maxY) {<a name="line.276"></a>
<FONT color="green">277</FONT>                        itemContributesToYBounds = true;<a name="line.277"></a>
<FONT color="green">278</FONT>                    }<a name="line.278"></a>
<FONT color="green">279</FONT>                }<a name="line.279"></a>
<FONT color="green">280</FONT>            }<a name="line.280"></a>
<FONT color="green">281</FONT>            if (itemContributesToYBounds) {<a name="line.281"></a>
<FONT color="green">282</FONT>                findBoundsByIteration();<a name="line.282"></a>
<FONT color="green">283</FONT>            }<a name="line.283"></a>
<FONT color="green">284</FONT>            else if (itemContributesToXBounds) {<a name="line.284"></a>
<FONT color="green">285</FONT>                if (getAutoSort()) {<a name="line.285"></a>
<FONT color="green">286</FONT>                    this.minX = getX(0).doubleValue();<a name="line.286"></a>
<FONT color="green">287</FONT>                    this.maxX = getX(getItemCount() - 1).doubleValue();<a name="line.287"></a>
<FONT color="green">288</FONT>                }<a name="line.288"></a>
<FONT color="green">289</FONT>                else {<a name="line.289"></a>
<FONT color="green">290</FONT>                    findBoundsByIteration();<a name="line.290"></a>
<FONT color="green">291</FONT>                }<a name="line.291"></a>
<FONT color="green">292</FONT>            }<a name="line.292"></a>
<FONT color="green">293</FONT>        }<a name="line.293"></a>
<FONT color="green">294</FONT>    <a name="line.294"></a>
<FONT color="green">295</FONT>        /**<a name="line.295"></a>
<FONT color="green">296</FONT>         * Finds the bounds of the x and y values for the series, by iterating<a name="line.296"></a>
<FONT color="green">297</FONT>         * through all the data items.<a name="line.297"></a>
<FONT color="green">298</FONT>         *<a name="line.298"></a>
<FONT color="green">299</FONT>         * @since 1.0.13<a name="line.299"></a>
<FONT color="green">300</FONT>         */<a name="line.300"></a>
<FONT color="green">301</FONT>        private void findBoundsByIteration() {<a name="line.301"></a>
<FONT color="green">302</FONT>            this.minX = Double.NaN;<a name="line.302"></a>
<FONT color="green">303</FONT>            this.maxX = Double.NaN;<a name="line.303"></a>
<FONT color="green">304</FONT>            this.minY = Double.NaN;<a name="line.304"></a>
<FONT color="green">305</FONT>            this.maxY = Double.NaN;<a name="line.305"></a>
<FONT color="green">306</FONT>            Iterator iterator = this.data.iterator();<a name="line.306"></a>
<FONT color="green">307</FONT>            while (iterator.hasNext()) {<a name="line.307"></a>
<FONT color="green">308</FONT>                XYDataItem item = (XYDataItem) iterator.next();<a name="line.308"></a>
<FONT color="green">309</FONT>                updateBoundsForAddedItem(item);<a name="line.309"></a>
<FONT color="green">310</FONT>            }<a name="line.310"></a>
<FONT color="green">311</FONT>        }<a name="line.311"></a>
<FONT color="green">312</FONT>    <a name="line.312"></a>
<FONT color="green">313</FONT>        /**<a name="line.313"></a>
<FONT color="green">314</FONT>         * Returns the flag that controls whether the items in the series are<a name="line.314"></a>
<FONT color="green">315</FONT>         * automatically sorted.  There is no setter for this flag, it must be<a name="line.315"></a>
<FONT color="green">316</FONT>         * defined in the series constructor.<a name="line.316"></a>
<FONT color="green">317</FONT>         *<a name="line.317"></a>
<FONT color="green">318</FONT>         * @return A boolean.<a name="line.318"></a>
<FONT color="green">319</FONT>         */<a name="line.319"></a>
<FONT color="green">320</FONT>        public boolean getAutoSort() {<a name="line.320"></a>
<FONT color="green">321</FONT>            return this.autoSort;<a name="line.321"></a>
<FONT color="green">322</FONT>        }<a name="line.322"></a>
<FONT color="green">323</FONT>    <a name="line.323"></a>
<FONT color="green">324</FONT>        /**<a name="line.324"></a>
<FONT color="green">325</FONT>         * Returns a flag that controls whether duplicate x-values are allowed.<a name="line.325"></a>
<FONT color="green">326</FONT>         * This flag can only be set in the constructor.<a name="line.326"></a>
<FONT color="green">327</FONT>         *<a name="line.327"></a>
<FONT color="green">328</FONT>         * @return A boolean.<a name="line.328"></a>
<FONT color="green">329</FONT>         */<a name="line.329"></a>
<FONT color="green">330</FONT>        public boolean getAllowDuplicateXValues() {<a name="line.330"></a>
<FONT color="green">331</FONT>            return this.allowDuplicateXValues;<a name="line.331"></a>
<FONT color="green">332</FONT>        }<a name="line.332"></a>
<FONT color="green">333</FONT>    <a name="line.333"></a>
<FONT color="green">334</FONT>        /**<a name="line.334"></a>
<FONT color="green">335</FONT>         * Returns the number of items in the series.<a name="line.335"></a>
<FONT color="green">336</FONT>         *<a name="line.336"></a>
<FONT color="green">337</FONT>         * @return The item count.<a name="line.337"></a>
<FONT color="green">338</FONT>         *<a name="line.338"></a>
<FONT color="green">339</FONT>         * @see #getItems()<a name="line.339"></a>
<FONT color="green">340</FONT>         */<a name="line.340"></a>
<FONT color="green">341</FONT>        public int getItemCount() {<a name="line.341"></a>
<FONT color="green">342</FONT>            return this.data.size();<a name="line.342"></a>
<FONT color="green">343</FONT>        }<a name="line.343"></a>
<FONT color="green">344</FONT>    <a name="line.344"></a>
<FONT color="green">345</FONT>        /**<a name="line.345"></a>
<FONT color="green">346</FONT>         * Returns the list of data items for the series (the list contains<a name="line.346"></a>
<FONT color="green">347</FONT>         * {@link XYDataItem} objects and is unmodifiable).<a name="line.347"></a>
<FONT color="green">348</FONT>         *<a name="line.348"></a>
<FONT color="green">349</FONT>         * @return The list of data items.<a name="line.349"></a>
<FONT color="green">350</FONT>         */<a name="line.350"></a>
<FONT color="green">351</FONT>        public List getItems() {<a name="line.351"></a>
<FONT color="green">352</FONT>            return Collections.unmodifiableList(this.data);<a name="line.352"></a>
<FONT color="green">353</FONT>        }<a name="line.353"></a>
<FONT color="green">354</FONT>    <a name="line.354"></a>
<FONT color="green">355</FONT>        /**<a name="line.355"></a>
<FONT color="green">356</FONT>         * Returns the maximum number of items that will be retained in the series.<a name="line.356"></a>
<FONT color="green">357</FONT>         * The default value is &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;.<a name="line.357"></a>
<FONT color="green">358</FONT>         *<a name="line.358"></a>
<FONT color="green">359</FONT>         * @return The maximum item count.<a name="line.359"></a>
<FONT color="green">360</FONT>         *<a name="line.360"></a>
<FONT color="green">361</FONT>         * @see #setMaximumItemCount(int)<a name="line.361"></a>
<FONT color="green">362</FONT>         */<a name="line.362"></a>
<FONT color="green">363</FONT>        public int getMaximumItemCount() {<a name="line.363"></a>
<FONT color="green">364</FONT>            return this.maximumItemCount;<a name="line.364"></a>
<FONT color="green">365</FONT>        }<a name="line.365"></a>
<FONT color="green">366</FONT>    <a name="line.366"></a>
<FONT color="green">367</FONT>        /**<a name="line.367"></a>
<FONT color="green">368</FONT>         * Sets the maximum number of items that will be retained in the series.<a name="line.368"></a>
<FONT color="green">369</FONT>         * If you add a new item to the series such that the number of items will<a name="line.369"></a>
<FONT color="green">370</FONT>         * exceed the maximum item count, then the first element in the series is<a name="line.370"></a>
<FONT color="green">371</FONT>         * automatically removed, ensuring that the maximum item count is not<a name="line.371"></a>
<FONT color="green">372</FONT>         * exceeded.<a name="line.372"></a>
<FONT color="green">373</FONT>         * &lt;p&gt;<a name="line.373"></a>
<FONT color="green">374</FONT>         * Typically this value is set before the series is populated with data,<a name="line.374"></a>
<FONT color="green">375</FONT>         * but if it is applied later, it may cause some items to be removed from<a name="line.375"></a>
<FONT color="green">376</FONT>         * the series (in which case a {@link SeriesChangeEvent} will be sent to<a name="line.376"></a>
<FONT color="green">377</FONT>         * all registered listeners).<a name="line.377"></a>
<FONT color="green">378</FONT>         *<a name="line.378"></a>
<FONT color="green">379</FONT>         * @param maximum  the maximum number of items for the series.<a name="line.379"></a>
<FONT color="green">380</FONT>         */<a name="line.380"></a>
<FONT color="green">381</FONT>        public void setMaximumItemCount(int maximum) {<a name="line.381"></a>
<FONT color="green">382</FONT>            this.maximumItemCount = maximum;<a name="line.382"></a>
<FONT color="green">383</FONT>            int remove = this.data.size() - maximum;<a name="line.383"></a>
<FONT color="green">384</FONT>            if (remove &gt; 0) {<a name="line.384"></a>
<FONT color="green">385</FONT>                this.data.subList(0, remove).clear();<a name="line.385"></a>
<FONT color="green">386</FONT>                findBoundsByIteration();<a name="line.386"></a>
<FONT color="green">387</FONT>                fireSeriesChanged();<a name="line.387"></a>
<FONT color="green">388</FONT>            }<a name="line.388"></a>
<FONT color="green">389</FONT>        }<a name="line.389"></a>
<FONT color="green">390</FONT>    <a name="line.390"></a>
<FONT color="green">391</FONT>        /**<a name="line.391"></a>
<FONT color="green">392</FONT>         * Adds a data item to the series and sends a {@link SeriesChangeEvent} to<a name="line.392"></a>
<FONT color="green">393</FONT>         * all registered listeners.<a name="line.393"></a>
<FONT color="green">394</FONT>         *<a name="line.394"></a>
<FONT color="green">395</FONT>         * @param item  the (x, y) item (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.395"></a>
<FONT color="green">396</FONT>         */<a name="line.396"></a>
<FONT color="green">397</FONT>        public void add(XYDataItem item) {<a name="line.397"></a>
<FONT color="green">398</FONT>            // argument checking delegated...<a name="line.398"></a>
<FONT color="green">399</FONT>            add(item, true);<a name="line.399"></a>
<FONT color="green">400</FONT>        }<a name="line.400"></a>
<FONT color="green">401</FONT>    <a name="line.401"></a>
<FONT color="green">402</FONT>        /**<a name="line.402"></a>
<FONT color="green">403</FONT>         * Adds a data item to the series and sends a {@link SeriesChangeEvent} to<a name="line.403"></a>
<FONT color="green">404</FONT>         * all registered listeners.<a name="line.404"></a>
<FONT color="green">405</FONT>         *<a name="line.405"></a>
<FONT color="green">406</FONT>         * @param x  the x value.<a name="line.406"></a>
<FONT color="green">407</FONT>         * @param y  the y value.<a name="line.407"></a>
<FONT color="green">408</FONT>         */<a name="line.408"></a>
<FONT color="green">409</FONT>        public void add(double x, double y) {<a name="line.409"></a>
<FONT color="green">410</FONT>            add(new Double(x), new Double(y), true);<a name="line.410"></a>
<FONT color="green">411</FONT>        }<a name="line.411"></a>
<FONT color="green">412</FONT>    <a name="line.412"></a>
<FONT color="green">413</FONT>        /**<a name="line.413"></a>
<FONT color="green">414</FONT>         * Adds a data item to the series and, if requested, sends a<a name="line.414"></a>
<FONT color="green">415</FONT>         * {@link SeriesChangeEvent} to all registered listeners.<a name="line.415"></a>
<FONT color="green">416</FONT>         *<a name="line.416"></a>
<FONT color="green">417</FONT>         * @param x  the x value.<a name="line.417"></a>
<FONT color="green">418</FONT>         * @param y  the y value.<a name="line.418"></a>
<FONT color="green">419</FONT>         * @param notify  a flag that controls whether or not a<a name="line.419"></a>
<FONT color="green">420</FONT>         *                {@link SeriesChangeEvent} is sent to all registered<a name="line.420"></a>
<FONT color="green">421</FONT>         *                listeners.<a name="line.421"></a>
<FONT color="green">422</FONT>         */<a name="line.422"></a>
<FONT color="green">423</FONT>        public void add(double x, double y, boolean notify) {<a name="line.423"></a>
<FONT color="green">424</FONT>            add(new Double(x), new Double(y), notify);<a name="line.424"></a>
<FONT color="green">425</FONT>        }<a name="line.425"></a>
<FONT color="green">426</FONT>    <a name="line.426"></a>
<FONT color="green">427</FONT>        /**<a name="line.427"></a>
<FONT color="green">428</FONT>         * Adds a data item to the series and sends a {@link SeriesChangeEvent} to<a name="line.428"></a>
<FONT color="green">429</FONT>         * all registered listeners.  The unusual pairing of parameter types is to<a name="line.429"></a>
<FONT color="green">430</FONT>         * make it easier to add &lt;code&gt;null&lt;/code&gt; y-values.<a name="line.430"></a>
<FONT color="green">431</FONT>         *<a name="line.431"></a>
<FONT color="green">432</FONT>         * @param x  the x value.<a name="line.432"></a>
<FONT color="green">433</FONT>         * @param y  the y value (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.433"></a>
<FONT color="green">434</FONT>         */<a name="line.434"></a>
<FONT color="green">435</FONT>        public void add(double x, Number y) {<a name="line.435"></a>
<FONT color="green">436</FONT>            add(new Double(x), y);<a name="line.436"></a>
<FONT color="green">437</FONT>        }<a name="line.437"></a>
<FONT color="green">438</FONT>    <a name="line.438"></a>
<FONT color="green">439</FONT>        /**<a name="line.439"></a>
<FONT color="green">440</FONT>         * Adds a data item to the series and, if requested, sends a<a name="line.440"></a>
<FONT color="green">441</FONT>         * {@link SeriesChangeEvent} to all registered listeners.  The unusual<a name="line.441"></a>
<FONT color="green">442</FONT>         * pairing of parameter types is to make it easier to add null y-values.<a name="line.442"></a>
<FONT color="green">443</FONT>         *<a name="line.443"></a>
<FONT color="green">444</FONT>         * @param x  the x value.<a name="line.444"></a>
<FONT color="green">445</FONT>         * @param y  the y value (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.445"></a>
<FONT color="green">446</FONT>         * @param notify  a flag that controls whether or not a<a name="line.446"></a>
<FONT color="green">447</FONT>         *                {@link SeriesChangeEvent} is sent to all registered<a name="line.447"></a>
<FONT color="green">448</FONT>         *                listeners.<a name="line.448"></a>
<FONT color="green">449</FONT>         */<a name="line.449"></a>
<FONT color="green">450</FONT>        public void add(double x, Number y, boolean notify) {<a name="line.450"></a>
<FONT color="green">451</FONT>            add(new Double(x), y, notify);<a name="line.451"></a>
<FONT color="green">452</FONT>        }<a name="line.452"></a>
<FONT color="green">453</FONT>    <a name="line.453"></a>
<FONT color="green">454</FONT>        /**<a name="line.454"></a>
<FONT color="green">455</FONT>         * Adds a new data item to the series (in the correct position if the<a name="line.455"></a>
<FONT color="green">456</FONT>         * &lt;code&gt;autoSort&lt;/code&gt; flag is set for the series) and sends a<a name="line.456"></a>
<FONT color="green">457</FONT>         * {@link SeriesChangeEvent} to all registered listeners.<a name="line.457"></a>
<FONT color="green">458</FONT>         * &lt;P&gt;<a name="line.458"></a>
<FONT color="green">459</FONT>         * Throws an exception if the x-value is a duplicate AND the<a name="line.459"></a>
<FONT color="green">460</FONT>         * allowDuplicateXValues flag is false.<a name="line.460"></a>
<FONT color="green">461</FONT>         *<a name="line.461"></a>
<FONT color="green">462</FONT>         * @param x  the x-value (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.462"></a>
<FONT color="green">463</FONT>         * @param y  the y-value (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.463"></a>
<FONT color="green">464</FONT>         *<a name="line.464"></a>
<FONT color="green">465</FONT>         * @throws SeriesException if the x-value is a duplicate and the<a name="line.465"></a>
<FONT color="green">466</FONT>         *     &lt;code&gt;allowDuplicateXValues&lt;/code&gt; flag is not set for this series.<a name="line.466"></a>
<FONT color="green">467</FONT>         */<a name="line.467"></a>
<FONT color="green">468</FONT>        public void add(Number x, Number y) {<a name="line.468"></a>
<FONT color="green">469</FONT>            // argument checking delegated...<a name="line.469"></a>
<FONT color="green">470</FONT>            add(x, y, true);<a name="line.470"></a>
<FONT color="green">471</FONT>        }<a name="line.471"></a>
<FONT color="green">472</FONT>    <a name="line.472"></a>
<FONT color="green">473</FONT>        /**<a name="line.473"></a>
<FONT color="green">474</FONT>         * Adds new data to the series and, if requested, sends a<a name="line.474"></a>
<FONT color="green">475</FONT>         * {@link SeriesChangeEvent} to all registered listeners.<a name="line.475"></a>
<FONT color="green">476</FONT>         * &lt;P&gt;<a name="line.476"></a>
<FONT color="green">477</FONT>         * Throws an exception if the x-value is a duplicate AND the<a name="line.477"></a>
<FONT color="green">478</FONT>         * allowDuplicateXValues flag is false.<a name="line.478"></a>
<FONT color="green">479</FONT>         *<a name="line.479"></a>
<FONT color="green">480</FONT>         * @param x  the x-value (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.480"></a>
<FONT color="green">481</FONT>         * @param y  the y-value (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.481"></a>
<FONT color="green">482</FONT>         * @param notify  a flag the controls whether or not a<a name="line.482"></a>
<FONT color="green">483</FONT>         *                {@link SeriesChangeEvent} is sent to all registered<a name="line.483"></a>
<FONT color="green">484</FONT>         *                listeners.<a name="line.484"></a>
<FONT color="green">485</FONT>         */<a name="line.485"></a>
<FONT color="green">486</FONT>        public void add(Number x, Number y, boolean notify) {<a name="line.486"></a>
<FONT color="green">487</FONT>            // delegate argument checking to XYDataItem...<a name="line.487"></a>
<FONT color="green">488</FONT>            XYDataItem item = new XYDataItem(x, y);<a name="line.488"></a>
<FONT color="green">489</FONT>            add(item, notify);<a name="line.489"></a>
<FONT color="green">490</FONT>        }<a name="line.490"></a>
<FONT color="green">491</FONT>    <a name="line.491"></a>
<FONT color="green">492</FONT>        /**<a name="line.492"></a>
<FONT color="green">493</FONT>         * Adds a data item to the series and, if requested, sends a<a name="line.493"></a>
<FONT color="green">494</FONT>         * {@link SeriesChangeEvent} to all registered listeners.<a name="line.494"></a>
<FONT color="green">495</FONT>         *<a name="line.495"></a>
<FONT color="green">496</FONT>         * @param item  the (x, y) item (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.496"></a>
<FONT color="green">497</FONT>         * @param notify  a flag that controls whether or not a<a name="line.497"></a>
<FONT color="green">498</FONT>         *                {@link SeriesChangeEvent} is sent to all registered<a name="line.498"></a>
<FONT color="green">499</FONT>         *                listeners.<a name="line.499"></a>
<FONT color="green">500</FONT>         */<a name="line.500"></a>
<FONT color="green">501</FONT>        public void add(XYDataItem item, boolean notify) {<a name="line.501"></a>
<FONT color="green">502</FONT>            if (item == null) {<a name="line.502"></a>
<FONT color="green">503</FONT>                throw new IllegalArgumentException("Null 'item' argument.");<a name="line.503"></a>
<FONT color="green">504</FONT>            }<a name="line.504"></a>
<FONT color="green">505</FONT>            if (this.autoSort) {<a name="line.505"></a>
<FONT color="green">506</FONT>                int index = Collections.binarySearch(this.data, item);<a name="line.506"></a>
<FONT color="green">507</FONT>                if (index &lt; 0) {<a name="line.507"></a>
<FONT color="green">508</FONT>                    this.data.add(-index - 1, item);<a name="line.508"></a>
<FONT color="green">509</FONT>                }<a name="line.509"></a>
<FONT color="green">510</FONT>                else {<a name="line.510"></a>
<FONT color="green">511</FONT>                    if (this.allowDuplicateXValues) {<a name="line.511"></a>
<FONT color="green">512</FONT>                        // need to make sure we are adding *after* any duplicates<a name="line.512"></a>
<FONT color="green">513</FONT>                        int size = this.data.size();<a name="line.513"></a>
<FONT color="green">514</FONT>                        while (index &lt; size &amp;&amp; item.compareTo(<a name="line.514"></a>
<FONT color="green">515</FONT>                                this.data.get(index)) == 0) {<a name="line.515"></a>
<FONT color="green">516</FONT>                            index++;<a name="line.516"></a>
<FONT color="green">517</FONT>                        }<a name="line.517"></a>
<FONT color="green">518</FONT>                        if (index &lt; this.data.size()) {<a name="line.518"></a>
<FONT color="green">519</FONT>                            this.data.add(index, item);<a name="line.519"></a>
<FONT color="green">520</FONT>                        }<a name="line.520"></a>
<FONT color="green">521</FONT>                        else {<a name="line.521"></a>
<FONT color="green">522</FONT>                            this.data.add(item);<a name="line.522"></a>
<FONT color="green">523</FONT>                        }<a name="line.523"></a>
<FONT color="green">524</FONT>                    }<a name="line.524"></a>
<FONT color="green">525</FONT>                    else {<a name="line.525"></a>
<FONT color="green">526</FONT>                        throw new SeriesException("X-value already exists.");<a name="line.526"></a>
<FONT color="green">527</FONT>                    }<a name="line.527"></a>
<FONT color="green">528</FONT>                }<a name="line.528"></a>
<FONT color="green">529</FONT>            }<a name="line.529"></a>
<FONT color="green">530</FONT>            else {<a name="line.530"></a>
<FONT color="green">531</FONT>                if (!this.allowDuplicateXValues) {<a name="line.531"></a>
<FONT color="green">532</FONT>                    // can't allow duplicate values, so we need to check whether<a name="line.532"></a>
<FONT color="green">533</FONT>                    // there is an item with the given x-value already<a name="line.533"></a>
<FONT color="green">534</FONT>                    int index = indexOf(item.getX());<a name="line.534"></a>
<FONT color="green">535</FONT>                    if (index &gt;= 0) {<a name="line.535"></a>
<FONT color="green">536</FONT>                        throw new SeriesException("X-value already exists.");<a name="line.536"></a>
<FONT color="green">537</FONT>                    }<a name="line.537"></a>
<FONT color="green">538</FONT>                }<a name="line.538"></a>
<FONT color="green">539</FONT>                this.data.add(item);<a name="line.539"></a>
<FONT color="green">540</FONT>            }<a name="line.540"></a>
<FONT color="green">541</FONT>            updateBoundsForAddedItem(item);<a name="line.541"></a>
<FONT color="green">542</FONT>            if (getItemCount() &gt; this.maximumItemCount) {<a name="line.542"></a>
<FONT color="green">543</FONT>                XYDataItem removed = (XYDataItem) this.data.remove(0);<a name="line.543"></a>
<FONT color="green">544</FONT>                updateBoundsForRemovedItem(removed);<a name="line.544"></a>
<FONT color="green">545</FONT>            }<a name="line.545"></a>
<FONT color="green">546</FONT>            if (notify) {<a name="line.546"></a>
<FONT color="green">547</FONT>                fireSeriesChanged();<a name="line.547"></a>
<FONT color="green">548</FONT>            }<a name="line.548"></a>
<FONT color="green">549</FONT>        }<a name="line.549"></a>
<FONT color="green">550</FONT>    <a name="line.550"></a>
<FONT color="green">551</FONT>        /**<a name="line.551"></a>
<FONT color="green">552</FONT>         * Deletes a range of items from the series and sends a<a name="line.552"></a>
<FONT color="green">553</FONT>         * {@link SeriesChangeEvent} to all registered listeners.<a name="line.553"></a>
<FONT color="green">554</FONT>         *<a name="line.554"></a>
<FONT color="green">555</FONT>         * @param start  the start index (zero-based).<a name="line.555"></a>
<FONT color="green">556</FONT>         * @param end  the end index (zero-based).<a name="line.556"></a>
<FONT color="green">557</FONT>         */<a name="line.557"></a>
<FONT color="green">558</FONT>        public void delete(int start, int end) {<a name="line.558"></a>
<FONT color="green">559</FONT>            this.data.subList(start, end + 1).clear();<a name="line.559"></a>
<FONT color="green">560</FONT>            findBoundsByIteration();<a name="line.560"></a>
<FONT color="green">561</FONT>            fireSeriesChanged();<a name="line.561"></a>
<FONT color="green">562</FONT>        }<a name="line.562"></a>
<FONT color="green">563</FONT>    <a name="line.563"></a>
<FONT color="green">564</FONT>        /**<a name="line.564"></a>
<FONT color="green">565</FONT>         * Removes the item at the specified index and sends a<a name="line.565"></a>
<FONT color="green">566</FONT>         * {@link SeriesChangeEvent} to all registered listeners.<a name="line.566"></a>
<FONT color="green">567</FONT>         *<a name="line.567"></a>
<FONT color="green">568</FONT>         * @param index  the index.<a name="line.568"></a>
<FONT color="green">569</FONT>         *<a name="line.569"></a>
<FONT color="green">570</FONT>         * @return The item removed.<a name="line.570"></a>
<FONT color="green">571</FONT>         */<a name="line.571"></a>
<FONT color="green">572</FONT>        public XYDataItem remove(int index) {<a name="line.572"></a>
<FONT color="green">573</FONT>            XYDataItem removed = (XYDataItem) this.data.remove(index);<a name="line.573"></a>
<FONT color="green">574</FONT>            updateBoundsForRemovedItem(removed);<a name="line.574"></a>
<FONT color="green">575</FONT>            fireSeriesChanged();<a name="line.575"></a>
<FONT color="green">576</FONT>            return removed;<a name="line.576"></a>
<FONT color="green">577</FONT>        }<a name="line.577"></a>
<FONT color="green">578</FONT>    <a name="line.578"></a>
<FONT color="green">579</FONT>        /**<a name="line.579"></a>
<FONT color="green">580</FONT>         * Removes an item with the specified x-value and sends a<a name="line.580"></a>
<FONT color="green">581</FONT>         * {@link SeriesChangeEvent} to all registered listeners.  Note that when<a name="line.581"></a>
<FONT color="green">582</FONT>         * a series permits multiple items with the same x-value, this method<a name="line.582"></a>
<FONT color="green">583</FONT>         * could remove any one of the items with that x-value.<a name="line.583"></a>
<FONT color="green">584</FONT>         *<a name="line.584"></a>
<FONT color="green">585</FONT>         * @param x  the x-value.<a name="line.585"></a>
<FONT color="green">586</FONT>    <a name="line.586"></a>
<FONT color="green">587</FONT>         * @return The item removed.<a name="line.587"></a>
<FONT color="green">588</FONT>         */<a name="line.588"></a>
<FONT color="green">589</FONT>        public XYDataItem remove(Number x) {<a name="line.589"></a>
<FONT color="green">590</FONT>            return remove(indexOf(x));<a name="line.590"></a>
<FONT color="green">591</FONT>        }<a name="line.591"></a>
<FONT color="green">592</FONT>    <a name="line.592"></a>
<FONT color="green">593</FONT>        /**<a name="line.593"></a>
<FONT color="green">594</FONT>         * Removes all data items from the series and sends a<a name="line.594"></a>
<FONT color="green">595</FONT>         * {@link SeriesChangeEvent} to all registered listeners.<a name="line.595"></a>
<FONT color="green">596</FONT>         */<a name="line.596"></a>
<FONT color="green">597</FONT>        public void clear() {<a name="line.597"></a>
<FONT color="green">598</FONT>            if (this.data.size() &gt; 0) {<a name="line.598"></a>
<FONT color="green">599</FONT>                this.data.clear();<a name="line.599"></a>
<FONT color="green">600</FONT>                this.minX = Double.NaN;<a name="line.600"></a>
<FONT color="green">601</FONT>                this.maxX = Double.NaN;<a name="line.601"></a>
<FONT color="green">602</FONT>                this.minY = Double.NaN;<a name="line.602"></a>
<FONT color="green">603</FONT>                this.maxY = Double.NaN;<a name="line.603"></a>
<FONT color="green">604</FONT>                fireSeriesChanged();<a name="line.604"></a>
<FONT color="green">605</FONT>            }<a name="line.605"></a>
<FONT color="green">606</FONT>        }<a name="line.606"></a>
<FONT color="green">607</FONT>    <a name="line.607"></a>
<FONT color="green">608</FONT>        /**<a name="line.608"></a>
<FONT color="green">609</FONT>         * Return the data item with the specified index.<a name="line.609"></a>
<FONT color="green">610</FONT>         *<a name="line.610"></a>
<FONT color="green">611</FONT>         * @param index  the index.<a name="line.611"></a>
<FONT color="green">612</FONT>         *<a name="line.612"></a>
<FONT color="green">613</FONT>         * @return The data item with the specified index.<a name="line.613"></a>
<FONT color="green">614</FONT>         */<a name="line.614"></a>
<FONT color="green">615</FONT>        public XYDataItem getDataItem(int index) {<a name="line.615"></a>
<FONT color="green">616</FONT>            return (XYDataItem) this.data.get(index);<a name="line.616"></a>
<FONT color="green">617</FONT>        }<a name="line.617"></a>
<FONT color="green">618</FONT>    <a name="line.618"></a>
<FONT color="green">619</FONT>        /**<a name="line.619"></a>
<FONT color="green">620</FONT>         * Returns the x-value at the specified index.<a name="line.620"></a>
<FONT color="green">621</FONT>         *<a name="line.621"></a>
<FONT color="green">622</FONT>         * @param index  the index (zero-based).<a name="line.622"></a>
<FONT color="green">623</FONT>         *<a name="line.623"></a>
<FONT color="green">624</FONT>         * @return The x-value (never &lt;code&gt;null&lt;/code&gt;).<a name="line.624"></a>
<FONT color="green">625</FONT>         */<a name="line.625"></a>
<FONT color="green">626</FONT>        public Number getX(int index) {<a name="line.626"></a>
<FONT color="green">627</FONT>            return getDataItem(index).getX();<a name="line.627"></a>
<FONT color="green">628</FONT>        }<a name="line.628"></a>
<FONT color="green">629</FONT>    <a name="line.629"></a>
<FONT color="green">630</FONT>        /**<a name="line.630"></a>
<FONT color="green">631</FONT>         * Returns the y-value at the specified index.<a name="line.631"></a>
<FONT color="green">632</FONT>         *<a name="line.632"></a>
<FONT color="green">633</FONT>         * @param index  the index (zero-based).<a name="line.633"></a>
<FONT color="green">634</FONT>         *<a name="line.634"></a>
<FONT color="green">635</FONT>         * @return The y-value (possibly &lt;code&gt;null&lt;/code&gt;).<a name="line.635"></a>
<FONT color="green">636</FONT>         */<a name="line.636"></a>
<FONT color="green">637</FONT>        public Number getY(int index) {<a name="line.637"></a>
<FONT color="green">638</FONT>            return getDataItem(index).getY();<a name="line.638"></a>
<FONT color="green">639</FONT>        }<a name="line.639"></a>
<FONT color="green">640</FONT>    <a name="line.640"></a>
<FONT color="green">641</FONT>        /**<a name="line.641"></a>
<FONT color="green">642</FONT>         * Updates the value of an item in the series and sends a<a name="line.642"></a>
<FONT color="green">643</FONT>         * {@link SeriesChangeEvent} to all registered listeners.<a name="line.643"></a>
<FONT color="green">644</FONT>         *<a name="line.644"></a>
<FONT color="green">645</FONT>         * @param index  the item (zero based index).<a name="line.645"></a>
<FONT color="green">646</FONT>         * @param y  the new value (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.646"></a>
<FONT color="green">647</FONT>         *<a name="line.647"></a>
<FONT color="green">648</FONT>         * @deprecated Renamed {@link #updateByIndex(int, Number)} to avoid<a name="line.648"></a>
<FONT color="green">649</FONT>         *         confusion with the {@link #update(Number, Number)} method.<a name="line.649"></a>
<FONT color="green">650</FONT>         */<a name="line.650"></a>
<FONT color="green">651</FONT>        public void update(int index, Number y) {<a name="line.651"></a>
<FONT color="green">652</FONT>            XYDataItem item = getDataItem(index);<a name="line.652"></a>
<FONT color="green">653</FONT>    <a name="line.653"></a>
<FONT color="green">654</FONT>            // figure out if we need to iterate through all the y-values<a name="line.654"></a>
<FONT color="green">655</FONT>            boolean iterate = false;<a name="line.655"></a>
<FONT color="green">656</FONT>            double oldY = item.getYValue();<a name="line.656"></a>
<FONT color="green">657</FONT>            if (!Double.isNaN(oldY)) {<a name="line.657"></a>
<FONT color="green">658</FONT>                iterate = oldY &lt;= this.minY || oldY &gt;= this.maxY;<a name="line.658"></a>
<FONT color="green">659</FONT>            }<a name="line.659"></a>
<FONT color="green">660</FONT>            item.setY(y);<a name="line.660"></a>
<FONT color="green">661</FONT>    <a name="line.661"></a>
<FONT color="green">662</FONT>            if (iterate) {<a name="line.662"></a>
<FONT color="green">663</FONT>                findBoundsByIteration();<a name="line.663"></a>
<FONT color="green">664</FONT>            }<a name="line.664"></a>
<FONT color="green">665</FONT>            else if (y != null) {<a name="line.665"></a>
<FONT color="green">666</FONT>                double yy = y.doubleValue();<a name="line.666"></a>
<FONT color="green">667</FONT>                this.minY = minIgnoreNaN(this.minY, yy);<a name="line.667"></a>
<FONT color="green">668</FONT>                this.maxY = maxIgnoreNaN(this.maxY, yy);<a name="line.668"></a>
<FONT color="green">669</FONT>            }<a name="line.669"></a>
<FONT color="green">670</FONT>            fireSeriesChanged();<a name="line.670"></a>
<FONT color="green">671</FONT>        }<a name="line.671"></a>
<FONT color="green">672</FONT>    <a name="line.672"></a>
<FONT color="green">673</FONT>        /**<a name="line.673"></a>
<FONT color="green">674</FONT>         * A function to find the minimum of two values, but ignoring any<a name="line.674"></a>
<FONT color="green">675</FONT>         * Double.NaN values.<a name="line.675"></a>
<FONT color="green">676</FONT>         *<a name="line.676"></a>
<FONT color="green">677</FONT>         * @param a  the first value.<a name="line.677"></a>
<FONT color="green">678</FONT>         * @param b  the second value.<a name="line.678"></a>
<FONT color="green">679</FONT>         *<a name="line.679"></a>
<FONT color="green">680</FONT>         * @return The minimum of the two values.<a name="line.680"></a>
<FONT color="green">681</FONT>         */<a name="line.681"></a>
<FONT color="green">682</FONT>        private double minIgnoreNaN(double a, double b) {<a name="line.682"></a>
<FONT color="green">683</FONT>            if (Double.isNaN(a)) {<a name="line.683"></a>
<FONT color="green">684</FONT>                return b;<a name="line.684"></a>
<FONT color="green">685</FONT>            }<a name="line.685"></a>
<FONT color="green">686</FONT>            else {<a name="line.686"></a>
<FONT color="green">687</FONT>                if (Double.isNaN(b)) {<a name="line.687"></a>
<FONT color="green">688</FONT>                    return a;<a name="line.688"></a>
<FONT color="green">689</FONT>                }<a name="line.689"></a>
<FONT color="green">690</FONT>                else {<a name="line.690"></a>
<FONT color="green">691</FONT>                    return Math.min(a, b);<a name="line.691"></a>
<FONT color="green">692</FONT>                }<a name="line.692"></a>
<FONT color="green">693</FONT>            }<a name="line.693"></a>
<FONT color="green">694</FONT>        }<a name="line.694"></a>
<FONT color="green">695</FONT>    <a name="line.695"></a>
<FONT color="green">696</FONT>        /**<a name="line.696"></a>
<FONT color="green">697</FONT>         * A function to find the maximum of two values, but ignoring any<a name="line.697"></a>
<FONT color="green">698</FONT>         * Double.NaN values.<a name="line.698"></a>
<FONT color="green">699</FONT>         *<a name="line.699"></a>
<FONT color="green">700</FONT>         * @param a  the first value.<a name="line.700"></a>
<FONT color="green">701</FONT>         * @param b  the second value.<a name="line.701"></a>
<FONT color="green">702</FONT>         *<a name="line.702"></a>
<FONT color="green">703</FONT>         * @return The maximum of the two values.<a name="line.703"></a>
<FONT color="green">704</FONT>         */<a name="line.704"></a>
<FONT color="green">705</FONT>        private double maxIgnoreNaN(double a, double b) {<a name="line.705"></a>
<FONT color="green">706</FONT>            if (Double.isNaN(a)) {<a name="line.706"></a>
<FONT color="green">707</FONT>                return b;<a name="line.707"></a>
<FONT color="green">708</FONT>            }<a name="line.708"></a>
<FONT color="green">709</FONT>            else {<a name="line.709"></a>
<FONT color="green">710</FONT>                if (Double.isNaN(b)) {<a name="line.710"></a>
<FONT color="green">711</FONT>                    return a;<a name="line.711"></a>
<FONT color="green">712</FONT>                }<a name="line.712"></a>
<FONT color="green">713</FONT>                else {<a name="line.713"></a>
<FONT color="green">714</FONT>                    return Math.max(a, b);<a name="line.714"></a>
<FONT color="green">715</FONT>                }<a name="line.715"></a>
<FONT color="green">716</FONT>            }<a name="line.716"></a>
<FONT color="green">717</FONT>        }<a name="line.717"></a>
<FONT color="green">718</FONT>    <a name="line.718"></a>
<FONT color="green">719</FONT>        /**<a name="line.719"></a>
<FONT color="green">720</FONT>         * Updates the value of an item in the series and sends a<a name="line.720"></a>
<FONT color="green">721</FONT>         * {@link SeriesChangeEvent} to all registered listeners.<a name="line.721"></a>
<FONT color="green">722</FONT>         *<a name="line.722"></a>
<FONT color="green">723</FONT>         * @param index  the item (zero based index).<a name="line.723"></a>
<FONT color="green">724</FONT>         * @param y  the new value (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.724"></a>
<FONT color="green">725</FONT>         *<a name="line.725"></a>
<FONT color="green">726</FONT>         * @since 1.0.1<a name="line.726"></a>
<FONT color="green">727</FONT>         */<a name="line.727"></a>
<FONT color="green">728</FONT>        public void updateByIndex(int index, Number y) {<a name="line.728"></a>
<FONT color="green">729</FONT>            update(index, y);<a name="line.729"></a>
<FONT color="green">730</FONT>        }<a name="line.730"></a>
<FONT color="green">731</FONT>    <a name="line.731"></a>
<FONT color="green">732</FONT>        /**<a name="line.732"></a>
<FONT color="green">733</FONT>         * Updates an item in the series.<a name="line.733"></a>
<FONT color="green">734</FONT>         *<a name="line.734"></a>
<FONT color="green">735</FONT>         * @param x  the x-value (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.735"></a>
<FONT color="green">736</FONT>         * @param y  the y-value (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.736"></a>
<FONT color="green">737</FONT>         *<a name="line.737"></a>
<FONT color="green">738</FONT>         * @throws SeriesException if there is no existing item with the specified<a name="line.738"></a>
<FONT color="green">739</FONT>         *         x-value.<a name="line.739"></a>
<FONT color="green">740</FONT>         */<a name="line.740"></a>
<FONT color="green">741</FONT>        public void update(Number x, Number y) {<a name="line.741"></a>
<FONT color="green">742</FONT>            int index = indexOf(x);<a name="line.742"></a>
<FONT color="green">743</FONT>            if (index &lt; 0) {<a name="line.743"></a>
<FONT color="green">744</FONT>                throw new SeriesException("No observation for x = " + x);<a name="line.744"></a>
<FONT color="green">745</FONT>            }<a name="line.745"></a>
<FONT color="green">746</FONT>            else {<a name="line.746"></a>
<FONT color="green">747</FONT>                updateByIndex(index, y);<a name="line.747"></a>
<FONT color="green">748</FONT>            }<a name="line.748"></a>
<FONT color="green">749</FONT>        }<a name="line.749"></a>
<FONT color="green">750</FONT>    <a name="line.750"></a>
<FONT color="green">751</FONT>        /**<a name="line.751"></a>
<FONT color="green">752</FONT>         * Adds or updates an item in the series and sends a<a name="line.752"></a>
<FONT color="green">753</FONT>         * {@link SeriesChangeEvent} to all registered listeners.<a name="line.753"></a>
<FONT color="green">754</FONT>         *<a name="line.754"></a>
<FONT color="green">755</FONT>         * @param x  the x-value.<a name="line.755"></a>
<FONT color="green">756</FONT>         * @param y  the y-value.<a name="line.756"></a>
<FONT color="green">757</FONT>         *<a name="line.757"></a>
<FONT color="green">758</FONT>         * @return The item that was overwritten, if any.<a name="line.758"></a>
<FONT color="green">759</FONT>         *<a name="line.759"></a>
<FONT color="green">760</FONT>         * @since 1.0.10<a name="line.760"></a>
<FONT color="green">761</FONT>         */<a name="line.761"></a>
<FONT color="green">762</FONT>        public XYDataItem addOrUpdate(double x, double y) {<a name="line.762"></a>
<FONT color="green">763</FONT>            return addOrUpdate(new Double(x), new Double(y));<a name="line.763"></a>
<FONT color="green">764</FONT>        }<a name="line.764"></a>
<FONT color="green">765</FONT>    <a name="line.765"></a>
<FONT color="green">766</FONT>        /**<a name="line.766"></a>
<FONT color="green">767</FONT>         * Adds or updates an item in the series and sends a<a name="line.767"></a>
<FONT color="green">768</FONT>         * {@link SeriesChangeEvent} to all registered listeners.<a name="line.768"></a>
<FONT color="green">769</FONT>         *<a name="line.769"></a>
<FONT color="green">770</FONT>         * @param x  the x-value (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.770"></a>
<FONT color="green">771</FONT>         * @param y  the y-value (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.771"></a>
<FONT color="green">772</FONT>         *<a name="line.772"></a>
<FONT color="green">773</FONT>         * @return A copy of the overwritten data item, or &lt;code&gt;null&lt;/code&gt; if no<a name="line.773"></a>
<FONT color="green">774</FONT>         *         item was overwritten.<a name="line.774"></a>
<FONT color="green">775</FONT>         */<a name="line.775"></a>
<FONT color="green">776</FONT>        public XYDataItem addOrUpdate(Number x, Number y) {<a name="line.776"></a>
<FONT color="green">777</FONT>            if (x == null) {<a name="line.777"></a>
<FONT color="green">778</FONT>                throw new IllegalArgumentException("Null 'x' argument.");<a name="line.778"></a>
<FONT color="green">779</FONT>            }<a name="line.779"></a>
<FONT color="green">780</FONT>            if (this.allowDuplicateXValues) {<a name="line.780"></a>
<FONT color="green">781</FONT>                add(x, y);<a name="line.781"></a>
<FONT color="green">782</FONT>                return null;<a name="line.782"></a>
<FONT color="green">783</FONT>            }<a name="line.783"></a>
<FONT color="green">784</FONT>    <a name="line.784"></a>
<FONT color="green">785</FONT>            // if we get to here, we know that duplicate X values are not permitted<a name="line.785"></a>
<FONT color="green">786</FONT>            XYDataItem overwritten = null;<a name="line.786"></a>
<FONT color="green">787</FONT>            int index = indexOf(x);<a name="line.787"></a>
<FONT color="green">788</FONT>            if (index &gt;= 0) {<a name="line.788"></a>
<FONT color="green">789</FONT>                XYDataItem existing = (XYDataItem) this.data.get(index);<a name="line.789"></a>
<FONT color="green">790</FONT>                try {<a name="line.790"></a>
<FONT color="green">791</FONT>                    overwritten = (XYDataItem) existing.clone();<a name="line.791"></a>
<FONT color="green">792</FONT>                }<a name="line.792"></a>
<FONT color="green">793</FONT>                catch (CloneNotSupportedException e) {<a name="line.793"></a>
<FONT color="green">794</FONT>                    throw new SeriesException("Couldn't clone XYDataItem!");<a name="line.794"></a>
<FONT color="green">795</FONT>                }<a name="line.795"></a>
<FONT color="green">796</FONT>                // figure out if we need to iterate through all the y-values<a name="line.796"></a>
<FONT color="green">797</FONT>                boolean iterate = false;<a name="line.797"></a>
<FONT color="green">798</FONT>                double oldY = existing.getYValue();<a name="line.798"></a>
<FONT color="green">799</FONT>                if (!Double.isNaN(oldY)) {<a name="line.799"></a>
<FONT color="green">800</FONT>                    iterate = oldY &lt;= this.minY || oldY &gt;= this.maxY;<a name="line.800"></a>
<FONT color="green">801</FONT>                }<a name="line.801"></a>
<FONT color="green">802</FONT>                existing.setY(y);<a name="line.802"></a>
<FONT color="green">803</FONT>    <a name="line.803"></a>
<FONT color="green">804</FONT>                if (iterate) {<a name="line.804"></a>
<FONT color="green">805</FONT>                    findBoundsByIteration();<a name="line.805"></a>
<FONT color="green">806</FONT>                }<a name="line.806"></a>
<FONT color="green">807</FONT>                else if (y != null) {<a name="line.807"></a>
<FONT color="green">808</FONT>                    double yy = y.doubleValue();<a name="line.808"></a>
<FONT color="green">809</FONT>                    this.minY = minIgnoreNaN(this.minY, yy);<a name="line.809"></a>
<FONT color="green">810</FONT>                    this.maxY = minIgnoreNaN(this.maxY, yy);<a name="line.810"></a>
<FONT color="green">811</FONT>                }<a name="line.811"></a>
<FONT color="green">812</FONT>            }<a name="line.812"></a>
<FONT color="green">813</FONT>            else {<a name="line.813"></a>
<FONT color="green">814</FONT>                // if the series is sorted, the negative index is a result from<a name="line.814"></a>
<FONT color="green">815</FONT>                // Collections.binarySearch() and tells us where to insert the<a name="line.815"></a>
<FONT color="green">816</FONT>                // new item...otherwise it will be just -1 and we should just<a name="line.816"></a>
<FONT color="green">817</FONT>                // append the value to the list...<a name="line.817"></a>
<FONT color="green">818</FONT>                XYDataItem item = new XYDataItem(x, y);<a name="line.818"></a>
<FONT color="green">819</FONT>                if (this.autoSort) {<a name="line.819"></a>
<FONT color="green">820</FONT>                    this.data.add(-index - 1, item);<a name="line.820"></a>
<FONT color="green">821</FONT>                }<a name="line.821"></a>
<FONT color="green">822</FONT>                else {<a name="line.822"></a>
<FONT color="green">823</FONT>                    this.data.add(item);<a name="line.823"></a>
<FONT color="green">824</FONT>                }<a name="line.824"></a>
<FONT color="green">825</FONT>                updateBoundsForAddedItem(item);<a name="line.825"></a>
<FONT color="green">826</FONT>    <a name="line.826"></a>
<FONT color="green">827</FONT>                // check if this addition will exceed the maximum item count...<a name="line.827"></a>
<FONT color="green">828</FONT>                if (getItemCount() &gt; this.maximumItemCount) {<a name="line.828"></a>
<FONT color="green">829</FONT>                    XYDataItem removed = (XYDataItem) this.data.remove(0);<a name="line.829"></a>
<FONT color="green">830</FONT>                    updateBoundsForRemovedItem(removed);<a name="line.830"></a>
<FONT color="green">831</FONT>                }<a name="line.831"></a>
<FONT color="green">832</FONT>            }<a name="line.832"></a>
<FONT color="green">833</FONT>            fireSeriesChanged();<a name="line.833"></a>
<FONT color="green">834</FONT>            return overwritten;<a name="line.834"></a>
<FONT color="green">835</FONT>        }<a name="line.835"></a>
<FONT color="green">836</FONT>    <a name="line.836"></a>
<FONT color="green">837</FONT>        /**<a name="line.837"></a>
<FONT color="green">838</FONT>         * Returns the index of the item with the specified x-value, or a negative<a name="line.838"></a>
<FONT color="green">839</FONT>         * index if the series does not contain an item with that x-value.  Be<a name="line.839"></a>
<FONT color="green">840</FONT>         * aware that for an unsorted series, the index is found by iterating<a name="line.840"></a>
<FONT color="green">841</FONT>         * through all items in the series.<a name="line.841"></a>
<FONT color="green">842</FONT>         *<a name="line.842"></a>
<FONT color="green">843</FONT>         * @param x  the x-value (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.843"></a>
<FONT color="green">844</FONT>         *<a name="line.844"></a>
<FONT color="green">845</FONT>         * @return The index.<a name="line.845"></a>
<FONT color="green">846</FONT>         */<a name="line.846"></a>
<FONT color="green">847</FONT>        public int indexOf(Number x) {<a name="line.847"></a>
<FONT color="green">848</FONT>            if (this.autoSort) {<a name="line.848"></a>
<FONT color="green">849</FONT>                return Collections.binarySearch(this.data, new XYDataItem(x, null));<a name="line.849"></a>
<FONT color="green">850</FONT>            }<a name="line.850"></a>
<FONT color="green">851</FONT>            else {<a name="line.851"></a>
<FONT color="green">852</FONT>                for (int i = 0; i &lt; this.data.size(); i++) {<a name="line.852"></a>
<FONT color="green">853</FONT>                    XYDataItem item = (XYDataItem) this.data.get(i);<a name="line.853"></a>
<FONT color="green">854</FONT>                    if (item.getX().equals(x)) {<a name="line.854"></a>
<FONT color="green">855</FONT>                        return i;<a name="line.855"></a>
<FONT color="green">856</FONT>                    }<a name="line.856"></a>
<FONT color="green">857</FONT>                }<a name="line.857"></a>
<FONT color="green">858</FONT>                return -1;<a name="line.858"></a>
<FONT color="green">859</FONT>            }<a name="line.859"></a>
<FONT color="green">860</FONT>        }<a name="line.860"></a>
<FONT color="green">861</FONT>    <a name="line.861"></a>
<FONT color="green">862</FONT>        /**<a name="line.862"></a>
<FONT color="green">863</FONT>         * Returns a new array containing the x and y values from this series.<a name="line.863"></a>
<FONT color="green">864</FONT>         *<a name="line.864"></a>
<FONT color="green">865</FONT>         * @return A new array containing the x and y values from this series.<a name="line.865"></a>
<FONT color="green">866</FONT>         *<a name="line.866"></a>
<FONT color="green">867</FONT>         * @since 1.0.4<a name="line.867"></a>
<FONT color="green">868</FONT>         */<a name="line.868"></a>
<FONT color="green">869</FONT>        public double[][] toArray() {<a name="line.869"></a>
<FONT color="green">870</FONT>            int itemCount = getItemCount();<a name="line.870"></a>
<FONT color="green">871</FONT>            double[][] result = new double[2][itemCount];<a name="line.871"></a>
<FONT color="green">872</FONT>            for (int i = 0; i &lt; itemCount; i++) {<a name="line.872"></a>
<FONT color="green">873</FONT>                result[0][i] = this.getX(i).doubleValue();<a name="line.873"></a>
<FONT color="green">874</FONT>                Number y = getY(i);<a name="line.874"></a>
<FONT color="green">875</FONT>                if (y != null) {<a name="line.875"></a>
<FONT color="green">876</FONT>                    result[1][i] = y.doubleValue();<a name="line.876"></a>
<FONT color="green">877</FONT>                }<a name="line.877"></a>
<FONT color="green">878</FONT>                else {<a name="line.878"></a>
<FONT color="green">879</FONT>                    result[1][i] = Double.NaN;<a name="line.879"></a>
<FONT color="green">880</FONT>                }<a name="line.880"></a>
<FONT color="green">881</FONT>            }<a name="line.881"></a>
<FONT color="green">882</FONT>            return result;<a name="line.882"></a>
<FONT color="green">883</FONT>        }<a name="line.883"></a>
<FONT color="green">884</FONT>    <a name="line.884"></a>
<FONT color="green">885</FONT>        /**<a name="line.885"></a>
<FONT color="green">886</FONT>         * Returns a clone of the series.<a name="line.886"></a>
<FONT color="green">887</FONT>         *<a name="line.887"></a>
<FONT color="green">888</FONT>         * @return A clone of the series.<a name="line.888"></a>
<FONT color="green">889</FONT>         *<a name="line.889"></a>
<FONT color="green">890</FONT>         * @throws CloneNotSupportedException if there is a cloning problem.<a name="line.890"></a>
<FONT color="green">891</FONT>         */<a name="line.891"></a>
<FONT color="green">892</FONT>        public Object clone() throws CloneNotSupportedException {<a name="line.892"></a>
<FONT color="green">893</FONT>            XYSeries clone = (XYSeries) super.clone();<a name="line.893"></a>
<FONT color="green">894</FONT>            clone.data = (List) ObjectUtilities.deepClone(this.data);<a name="line.894"></a>
<FONT color="green">895</FONT>            return clone;<a name="line.895"></a>
<FONT color="green">896</FONT>        }<a name="line.896"></a>
<FONT color="green">897</FONT>    <a name="line.897"></a>
<FONT color="green">898</FONT>        /**<a name="line.898"></a>
<FONT color="green">899</FONT>         * Creates a new series by copying a subset of the data in this time series.<a name="line.899"></a>
<FONT color="green">900</FONT>         *<a name="line.900"></a>
<FONT color="green">901</FONT>         * @param start  the index of the first item to copy.<a name="line.901"></a>
<FONT color="green">902</FONT>         * @param end  the index of the last item to copy.<a name="line.902"></a>
<FONT color="green">903</FONT>         *<a name="line.903"></a>
<FONT color="green">904</FONT>         * @return A series containing a copy of this series from start until end.<a name="line.904"></a>
<FONT color="green">905</FONT>         *<a name="line.905"></a>
<FONT color="green">906</FONT>         * @throws CloneNotSupportedException if there is a cloning problem.<a name="line.906"></a>
<FONT color="green">907</FONT>         */<a name="line.907"></a>
<FONT color="green">908</FONT>        public XYSeries createCopy(int start, int end)<a name="line.908"></a>
<FONT color="green">909</FONT>                throws CloneNotSupportedException {<a name="line.909"></a>
<FONT color="green">910</FONT>    <a name="line.910"></a>
<FONT color="green">911</FONT>            XYSeries copy = (XYSeries) super.clone();<a name="line.911"></a>
<FONT color="green">912</FONT>            copy.data = new java.util.ArrayList();<a name="line.912"></a>
<FONT color="green">913</FONT>            if (this.data.size() &gt; 0) {<a name="line.913"></a>
<FONT color="green">914</FONT>                for (int index = start; index &lt;= end; index++) {<a name="line.914"></a>
<FONT color="green">915</FONT>                    XYDataItem item = (XYDataItem) this.data.get(index);<a name="line.915"></a>
<FONT color="green">916</FONT>                    XYDataItem clone = (XYDataItem) item.clone();<a name="line.916"></a>
<FONT color="green">917</FONT>                    try {<a name="line.917"></a>
<FONT color="green">918</FONT>                        copy.add(clone);<a name="line.918"></a>
<FONT color="green">919</FONT>                    }<a name="line.919"></a>
<FONT color="green">920</FONT>                    catch (SeriesException e) {<a name="line.920"></a>
<FONT color="green">921</FONT>                        System.err.println("Unable to add cloned data item.");<a name="line.921"></a>
<FONT color="green">922</FONT>                    }<a name="line.922"></a>
<FONT color="green">923</FONT>                }<a name="line.923"></a>
<FONT color="green">924</FONT>            }<a name="line.924"></a>
<FONT color="green">925</FONT>            return copy;<a name="line.925"></a>
<FONT color="green">926</FONT>    <a name="line.926"></a>
<FONT color="green">927</FONT>        }<a name="line.927"></a>
<FONT color="green">928</FONT>    <a name="line.928"></a>
<FONT color="green">929</FONT>        /**<a name="line.929"></a>
<FONT color="green">930</FONT>         * Tests this series for equality with an arbitrary object.<a name="line.930"></a>
<FONT color="green">931</FONT>         *<a name="line.931"></a>
<FONT color="green">932</FONT>         * @param obj  the object to test against for equality<a name="line.932"></a>
<FONT color="green">933</FONT>         *             (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.933"></a>
<FONT color="green">934</FONT>         *<a name="line.934"></a>
<FONT color="green">935</FONT>         * @return A boolean.<a name="line.935"></a>
<FONT color="green">936</FONT>         */<a name="line.936"></a>
<FONT color="green">937</FONT>        public boolean equals(Object obj) {<a name="line.937"></a>
<FONT color="green">938</FONT>            if (obj == this) {<a name="line.938"></a>
<FONT color="green">939</FONT>                return true;<a name="line.939"></a>
<FONT color="green">940</FONT>            }<a name="line.940"></a>
<FONT color="green">941</FONT>            if (!(obj instanceof XYSeries)) {<a name="line.941"></a>
<FONT color="green">942</FONT>                return false;<a name="line.942"></a>
<FONT color="green">943</FONT>            }<a name="line.943"></a>
<FONT color="green">944</FONT>            if (!super.equals(obj)) {<a name="line.944"></a>
<FONT color="green">945</FONT>                return false;<a name="line.945"></a>
<FONT color="green">946</FONT>            }<a name="line.946"></a>
<FONT color="green">947</FONT>            XYSeries that = (XYSeries) obj;<a name="line.947"></a>
<FONT color="green">948</FONT>            if (this.maximumItemCount != that.maximumItemCount) {<a name="line.948"></a>
<FONT color="green">949</FONT>                return false;<a name="line.949"></a>
<FONT color="green">950</FONT>            }<a name="line.950"></a>
<FONT color="green">951</FONT>            if (this.autoSort != that.autoSort) {<a name="line.951"></a>
<FONT color="green">952</FONT>                return false;<a name="line.952"></a>
<FONT color="green">953</FONT>            }<a name="line.953"></a>
<FONT color="green">954</FONT>            if (this.allowDuplicateXValues != that.allowDuplicateXValues) {<a name="line.954"></a>
<FONT color="green">955</FONT>                return false;<a name="line.955"></a>
<FONT color="green">956</FONT>            }<a name="line.956"></a>
<FONT color="green">957</FONT>            if (!ObjectUtilities.equal(this.data, that.data)) {<a name="line.957"></a>
<FONT color="green">958</FONT>                return false;<a name="line.958"></a>
<FONT color="green">959</FONT>            }<a name="line.959"></a>
<FONT color="green">960</FONT>            return true;<a name="line.960"></a>
<FONT color="green">961</FONT>        }<a name="line.961"></a>
<FONT color="green">962</FONT>    <a name="line.962"></a>
<FONT color="green">963</FONT>        /**<a name="line.963"></a>
<FONT color="green">964</FONT>         * Returns a hash code.<a name="line.964"></a>
<FONT color="green">965</FONT>         *<a name="line.965"></a>
<FONT color="green">966</FONT>         * @return A hash code.<a name="line.966"></a>
<FONT color="green">967</FONT>         */<a name="line.967"></a>
<FONT color="green">968</FONT>        public int hashCode() {<a name="line.968"></a>
<FONT color="green">969</FONT>            int result = super.hashCode();<a name="line.969"></a>
<FONT color="green">970</FONT>            // it is too slow to look at every data item, so let's just look at<a name="line.970"></a>
<FONT color="green">971</FONT>            // the first, middle and last items...<a name="line.971"></a>
<FONT color="green">972</FONT>            int count = getItemCount();<a name="line.972"></a>
<FONT color="green">973</FONT>            if (count &gt; 0) {<a name="line.973"></a>
<FONT color="green">974</FONT>                XYDataItem item = getDataItem(0);<a name="line.974"></a>
<FONT color="green">975</FONT>                result = 29 * result + item.hashCode();<a name="line.975"></a>
<FONT color="green">976</FONT>            }<a name="line.976"></a>
<FONT color="green">977</FONT>            if (count &gt; 1) {<a name="line.977"></a>
<FONT color="green">978</FONT>                XYDataItem item = getDataItem(count - 1);<a name="line.978"></a>
<FONT color="green">979</FONT>                result = 29 * result + item.hashCode();<a name="line.979"></a>
<FONT color="green">980</FONT>            }<a name="line.980"></a>
<FONT color="green">981</FONT>            if (count &gt; 2) {<a name="line.981"></a>
<FONT color="green">982</FONT>                XYDataItem item = getDataItem(count / 2);<a name="line.982"></a>
<FONT color="green">983</FONT>                result = 29 * result + item.hashCode();<a name="line.983"></a>
<FONT color="green">984</FONT>            }<a name="line.984"></a>
<FONT color="green">985</FONT>            result = 29 * result + this.maximumItemCount;<a name="line.985"></a>
<FONT color="green">986</FONT>            result = 29 * result + (this.autoSort ? 1 : 0);<a name="line.986"></a>
<FONT color="green">987</FONT>            result = 29 * result + (this.allowDuplicateXValues ? 1 : 0);<a name="line.987"></a>
<FONT color="green">988</FONT>            return result;<a name="line.988"></a>
<FONT color="green">989</FONT>        }<a name="line.989"></a>
<FONT color="green">990</FONT>    <a name="line.990"></a>
<FONT color="green">991</FONT>    }<a name="line.991"></a>
<FONT color="green">992</FONT>    <a name="line.992"></a>




























































</PRE>
</BODY>
</HTML>
