<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ===========================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JFreeChart : a free chart library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ===========================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     *<a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jfreechart/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it<a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by<a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or<a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but<a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY<a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public<a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,<a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.<a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc.<a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     *<a name="line.26"></a>
<FONT color="green">027</FONT>     * --------------------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * DefaultContourDataset.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * --------------------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C) Copyright 2002-2008, by David M. O'Donnell and Contributors.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  David M. O'Donnell;<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   David Gilbert (for Object Refinery Limited);<a name="line.33"></a>
<FONT color="green">034</FONT>     *<a name="line.34"></a>
<FONT color="green">035</FONT>     * Changes (from 23-Jan-2003)<a name="line.35"></a>
<FONT color="green">036</FONT>     * --------------------------<a name="line.36"></a>
<FONT color="green">037</FONT>     * 23-Jan-2003 : Added standard header (DG);<a name="line.37"></a>
<FONT color="green">038</FONT>     * 20-May-2003 : removed member vars numX and numY, which were never used (TM);<a name="line.38"></a>
<FONT color="green">039</FONT>     * 06-May-2004 : Now extends AbstractXYZDataset (DG);<a name="line.39"></a>
<FONT color="green">040</FONT>     * 15-Jul-2004 : Switched getX() with getXValue(), getY() with getYValue() and<a name="line.40"></a>
<FONT color="green">041</FONT>     *               getZ() with getZValue() methods (DG);<a name="line.41"></a>
<FONT color="green">042</FONT>     * ------------- JFREECHART 1.0.x --------------------------------------------<a name="line.42"></a>
<FONT color="green">043</FONT>     * 31-Jan-2007 : Deprecated (DG);<a name="line.43"></a>
<FONT color="green">044</FONT>     *<a name="line.44"></a>
<FONT color="green">045</FONT>     */<a name="line.45"></a>
<FONT color="green">046</FONT>    <a name="line.46"></a>
<FONT color="green">047</FONT>    package org.jfree.data.contour;<a name="line.47"></a>
<FONT color="green">048</FONT>    <a name="line.48"></a>
<FONT color="green">049</FONT>    import java.util.Arrays;<a name="line.49"></a>
<FONT color="green">050</FONT>    import java.util.Date;<a name="line.50"></a>
<FONT color="green">051</FONT>    import java.util.Vector;<a name="line.51"></a>
<FONT color="green">052</FONT>    <a name="line.52"></a>
<FONT color="green">053</FONT>    import org.jfree.chart.plot.XYPlot;<a name="line.53"></a>
<FONT color="green">054</FONT>    import org.jfree.chart.renderer.xy.XYBlockRenderer;<a name="line.54"></a>
<FONT color="green">055</FONT>    import org.jfree.data.Range;<a name="line.55"></a>
<FONT color="green">056</FONT>    import org.jfree.data.xy.AbstractXYZDataset;<a name="line.56"></a>
<FONT color="green">057</FONT>    import org.jfree.data.xy.XYDataset;<a name="line.57"></a>
<FONT color="green">058</FONT>    <a name="line.58"></a>
<FONT color="green">059</FONT>    /**<a name="line.59"></a>
<FONT color="green">060</FONT>     * A convenience class that provides a default implementation of the<a name="line.60"></a>
<FONT color="green">061</FONT>     * {@link ContourDataset} interface.<a name="line.61"></a>
<FONT color="green">062</FONT>     *<a name="line.62"></a>
<FONT color="green">063</FONT>     * @deprecated This class is no longer supported (as of version 1.0.4).  If<a name="line.63"></a>
<FONT color="green">064</FONT>     *     you are creating contour plots, please try to use {@link XYPlot} and<a name="line.64"></a>
<FONT color="green">065</FONT>     *     {@link XYBlockRenderer}.<a name="line.65"></a>
<FONT color="green">066</FONT>     */<a name="line.66"></a>
<FONT color="green">067</FONT>    public class DefaultContourDataset extends AbstractXYZDataset<a name="line.67"></a>
<FONT color="green">068</FONT>                                       implements ContourDataset {<a name="line.68"></a>
<FONT color="green">069</FONT>    <a name="line.69"></a>
<FONT color="green">070</FONT>        /** The series name (this dataset supports only one series). */<a name="line.70"></a>
<FONT color="green">071</FONT>        protected Comparable seriesKey = null;<a name="line.71"></a>
<FONT color="green">072</FONT>    <a name="line.72"></a>
<FONT color="green">073</FONT>        /** Storage for the x values. */<a name="line.73"></a>
<FONT color="green">074</FONT>        protected Number[] xValues = null;<a name="line.74"></a>
<FONT color="green">075</FONT>    <a name="line.75"></a>
<FONT color="green">076</FONT>        /** Storage for the y values. */<a name="line.76"></a>
<FONT color="green">077</FONT>        protected Number[] yValues = null;<a name="line.77"></a>
<FONT color="green">078</FONT>    <a name="line.78"></a>
<FONT color="green">079</FONT>        /** Storage for the z values. */<a name="line.79"></a>
<FONT color="green">080</FONT>        protected Number[] zValues = null;<a name="line.80"></a>
<FONT color="green">081</FONT>    <a name="line.81"></a>
<FONT color="green">082</FONT>        /** The index for the start of each column in the data. */<a name="line.82"></a>
<FONT color="green">083</FONT>        protected int[] xIndex = null;<a name="line.83"></a>
<FONT color="green">084</FONT>    <a name="line.84"></a>
<FONT color="green">085</FONT>        /** Flags that track whether x, y and z are dates. */<a name="line.85"></a>
<FONT color="green">086</FONT>        boolean[] dateAxis = new boolean[3];<a name="line.86"></a>
<FONT color="green">087</FONT>    <a name="line.87"></a>
<FONT color="green">088</FONT>        /**<a name="line.88"></a>
<FONT color="green">089</FONT>         * Creates a new dataset, initially empty.<a name="line.89"></a>
<FONT color="green">090</FONT>         */<a name="line.90"></a>
<FONT color="green">091</FONT>        public DefaultContourDataset() {<a name="line.91"></a>
<FONT color="green">092</FONT>            super();<a name="line.92"></a>
<FONT color="green">093</FONT>        }<a name="line.93"></a>
<FONT color="green">094</FONT>    <a name="line.94"></a>
<FONT color="green">095</FONT>        /**<a name="line.95"></a>
<FONT color="green">096</FONT>         * Constructs a new dataset with the given data.<a name="line.96"></a>
<FONT color="green">097</FONT>         *<a name="line.97"></a>
<FONT color="green">098</FONT>         * @param seriesKey  the series key.<a name="line.98"></a>
<FONT color="green">099</FONT>         * @param xData  the x values.<a name="line.99"></a>
<FONT color="green">100</FONT>         * @param yData  the y values.<a name="line.100"></a>
<FONT color="green">101</FONT>         * @param zData  the z values.<a name="line.101"></a>
<FONT color="green">102</FONT>         */<a name="line.102"></a>
<FONT color="green">103</FONT>        public DefaultContourDataset(Comparable seriesKey,<a name="line.103"></a>
<FONT color="green">104</FONT>                                     Object[] xData,<a name="line.104"></a>
<FONT color="green">105</FONT>                                     Object[] yData,<a name="line.105"></a>
<FONT color="green">106</FONT>                                     Object[] zData) {<a name="line.106"></a>
<FONT color="green">107</FONT>    <a name="line.107"></a>
<FONT color="green">108</FONT>            this.seriesKey = seriesKey;<a name="line.108"></a>
<FONT color="green">109</FONT>            initialize(xData, yData, zData);<a name="line.109"></a>
<FONT color="green">110</FONT>        }<a name="line.110"></a>
<FONT color="green">111</FONT>    <a name="line.111"></a>
<FONT color="green">112</FONT>        /**<a name="line.112"></a>
<FONT color="green">113</FONT>         * Initialises the dataset.<a name="line.113"></a>
<FONT color="green">114</FONT>         *<a name="line.114"></a>
<FONT color="green">115</FONT>         * @param xData  the x values.<a name="line.115"></a>
<FONT color="green">116</FONT>         * @param yData  the y values.<a name="line.116"></a>
<FONT color="green">117</FONT>         * @param zData  the z values.<a name="line.117"></a>
<FONT color="green">118</FONT>         */<a name="line.118"></a>
<FONT color="green">119</FONT>        public void initialize(Object[] xData,<a name="line.119"></a>
<FONT color="green">120</FONT>                               Object[] yData,<a name="line.120"></a>
<FONT color="green">121</FONT>                               Object[] zData) {<a name="line.121"></a>
<FONT color="green">122</FONT>    <a name="line.122"></a>
<FONT color="green">123</FONT>            this.xValues = new Double[xData.length];<a name="line.123"></a>
<FONT color="green">124</FONT>            this.yValues = new Double[yData.length];<a name="line.124"></a>
<FONT color="green">125</FONT>            this.zValues = new Double[zData.length];<a name="line.125"></a>
<FONT color="green">126</FONT>    <a name="line.126"></a>
<FONT color="green">127</FONT>            // We organise the data with the following assumption:<a name="line.127"></a>
<FONT color="green">128</FONT>            // 1) the data are sorted by x then y<a name="line.128"></a>
<FONT color="green">129</FONT>            // 2) that the data will be represented by a rectangle formed by<a name="line.129"></a>
<FONT color="green">130</FONT>            //    using x[i+1], x, y[j+1], and y.<a name="line.130"></a>
<FONT color="green">131</FONT>            // 3) we march along the y-axis at the same value of x until a new<a name="line.131"></a>
<FONT color="green">132</FONT>            //    value x is found at which point we will flag the index<a name="line.132"></a>
<FONT color="green">133</FONT>            //    where x[i+1]&lt;&gt;x[i]<a name="line.133"></a>
<FONT color="green">134</FONT>    <a name="line.134"></a>
<FONT color="green">135</FONT>            Vector tmpVector = new Vector(); //create a temporary vector<a name="line.135"></a>
<FONT color="green">136</FONT>            double x = 1.123452e31; // set x to some arbitary value (used below)<a name="line.136"></a>
<FONT color="green">137</FONT>            for (int k = 0; k &lt; this.xValues.length; k++) {<a name="line.137"></a>
<FONT color="green">138</FONT>                if (xData[k] != null) {<a name="line.138"></a>
<FONT color="green">139</FONT>                    Number xNumber;<a name="line.139"></a>
<FONT color="green">140</FONT>                    if (xData[k] instanceof Number) {<a name="line.140"></a>
<FONT color="green">141</FONT>                        xNumber = (Number) xData[k];<a name="line.141"></a>
<FONT color="green">142</FONT>                    }<a name="line.142"></a>
<FONT color="green">143</FONT>                    else if (xData[k] instanceof Date) {<a name="line.143"></a>
<FONT color="green">144</FONT>                        this.dateAxis[0] = true;<a name="line.144"></a>
<FONT color="green">145</FONT>                        Date xDate = (Date) xData[k];<a name="line.145"></a>
<FONT color="green">146</FONT>                        xNumber = new Long(xDate.getTime()); //store data as Long<a name="line.146"></a>
<FONT color="green">147</FONT>                    }<a name="line.147"></a>
<FONT color="green">148</FONT>                    else {<a name="line.148"></a>
<FONT color="green">149</FONT>                        xNumber = new Integer(0);<a name="line.149"></a>
<FONT color="green">150</FONT>                    }<a name="line.150"></a>
<FONT color="green">151</FONT>                    this.xValues[k] = new Double(xNumber.doubleValue());<a name="line.151"></a>
<FONT color="green">152</FONT>                        // store Number as Double<a name="line.152"></a>
<FONT color="green">153</FONT>    <a name="line.153"></a>
<FONT color="green">154</FONT>                    // check if starting new column<a name="line.154"></a>
<FONT color="green">155</FONT>                    if (x != this.xValues[k].doubleValue()) {<a name="line.155"></a>
<FONT color="green">156</FONT>                        tmpVector.add(new Integer(k)); //store index where new<a name="line.156"></a>
<FONT color="green">157</FONT>                                                       //column starts<a name="line.157"></a>
<FONT color="green">158</FONT>                        x = this.xValues[k].doubleValue();<a name="line.158"></a>
<FONT color="green">159</FONT>                                                 // set x to most recent value<a name="line.159"></a>
<FONT color="green">160</FONT>                    }<a name="line.160"></a>
<FONT color="green">161</FONT>                }<a name="line.161"></a>
<FONT color="green">162</FONT>            }<a name="line.162"></a>
<FONT color="green">163</FONT>    <a name="line.163"></a>
<FONT color="green">164</FONT>            Object[] inttmp = tmpVector.toArray();<a name="line.164"></a>
<FONT color="green">165</FONT>            this.xIndex = new int[inttmp.length];  // create array xIndex to hold<a name="line.165"></a>
<FONT color="green">166</FONT>                                                   // new column indices<a name="line.166"></a>
<FONT color="green">167</FONT>    <a name="line.167"></a>
<FONT color="green">168</FONT>            for (int i = 0; i &lt; inttmp.length; i++) {<a name="line.168"></a>
<FONT color="green">169</FONT>                this.xIndex[i] = ((Integer) inttmp[i]).intValue();<a name="line.169"></a>
<FONT color="green">170</FONT>            }<a name="line.170"></a>
<FONT color="green">171</FONT>            for (int k = 0; k &lt; this.yValues.length; k++) { // store y and z axes<a name="line.171"></a>
<FONT color="green">172</FONT>                                                            // as Doubles<a name="line.172"></a>
<FONT color="green">173</FONT>                this.yValues[k] = (Double) yData[k];<a name="line.173"></a>
<FONT color="green">174</FONT>                if (zData[k] != null) {<a name="line.174"></a>
<FONT color="green">175</FONT>                    this.zValues[k] = (Double) zData[k];<a name="line.175"></a>
<FONT color="green">176</FONT>                }<a name="line.176"></a>
<FONT color="green">177</FONT>            }<a name="line.177"></a>
<FONT color="green">178</FONT>        }<a name="line.178"></a>
<FONT color="green">179</FONT>    <a name="line.179"></a>
<FONT color="green">180</FONT>        /**<a name="line.180"></a>
<FONT color="green">181</FONT>         * Creates an object array from an array of doubles.<a name="line.181"></a>
<FONT color="green">182</FONT>         *<a name="line.182"></a>
<FONT color="green">183</FONT>         * @param data  the data.<a name="line.183"></a>
<FONT color="green">184</FONT>         *<a name="line.184"></a>
<FONT color="green">185</FONT>         * @return An array of &lt;code&gt;Double&lt;/code&gt; objects.<a name="line.185"></a>
<FONT color="green">186</FONT>         */<a name="line.186"></a>
<FONT color="green">187</FONT>        public static Object[][] formObjectArray(double[][] data) {<a name="line.187"></a>
<FONT color="green">188</FONT>            Object[][] object = new Double[data.length][data[0].length];<a name="line.188"></a>
<FONT color="green">189</FONT>    <a name="line.189"></a>
<FONT color="green">190</FONT>            for (int i = 0; i &lt; object.length; i++) {<a name="line.190"></a>
<FONT color="green">191</FONT>                for (int j = 0; j &lt; object[i].length; j++) {<a name="line.191"></a>
<FONT color="green">192</FONT>                    object[i][j] = new Double(data[i][j]);<a name="line.192"></a>
<FONT color="green">193</FONT>                }<a name="line.193"></a>
<FONT color="green">194</FONT>            }<a name="line.194"></a>
<FONT color="green">195</FONT>            return object;<a name="line.195"></a>
<FONT color="green">196</FONT>        }<a name="line.196"></a>
<FONT color="green">197</FONT>    <a name="line.197"></a>
<FONT color="green">198</FONT>        /**<a name="line.198"></a>
<FONT color="green">199</FONT>         * Creates an object array from an array of doubles.<a name="line.199"></a>
<FONT color="green">200</FONT>         *<a name="line.200"></a>
<FONT color="green">201</FONT>         * @param data  the data.<a name="line.201"></a>
<FONT color="green">202</FONT>         *<a name="line.202"></a>
<FONT color="green">203</FONT>         * @return An array of &lt;code&gt;Double&lt;/code&gt; objects.<a name="line.203"></a>
<FONT color="green">204</FONT>         */<a name="line.204"></a>
<FONT color="green">205</FONT>        public static Object[] formObjectArray(double[] data) {<a name="line.205"></a>
<FONT color="green">206</FONT>            Object[] object = new Double[data.length];<a name="line.206"></a>
<FONT color="green">207</FONT>            for (int i = 0; i &lt; object.length; i++) {<a name="line.207"></a>
<FONT color="green">208</FONT>                object[i] = new Double(data[i]);<a name="line.208"></a>
<FONT color="green">209</FONT>            }<a name="line.209"></a>
<FONT color="green">210</FONT>            return object;<a name="line.210"></a>
<FONT color="green">211</FONT>        }<a name="line.211"></a>
<FONT color="green">212</FONT>    <a name="line.212"></a>
<FONT color="green">213</FONT>        /**<a name="line.213"></a>
<FONT color="green">214</FONT>         * Returns the number of items in the specified series.  This method<a name="line.214"></a>
<FONT color="green">215</FONT>         * is provided to satisfy the {@link XYDataset} interface implementation.<a name="line.215"></a>
<FONT color="green">216</FONT>         *<a name="line.216"></a>
<FONT color="green">217</FONT>         * @param series  must be zero, as this dataset only supports one series.<a name="line.217"></a>
<FONT color="green">218</FONT>         *<a name="line.218"></a>
<FONT color="green">219</FONT>         * @return The item count.<a name="line.219"></a>
<FONT color="green">220</FONT>         */<a name="line.220"></a>
<FONT color="green">221</FONT>        public int getItemCount(int series) {<a name="line.221"></a>
<FONT color="green">222</FONT>            if (series &gt; 0) {<a name="line.222"></a>
<FONT color="green">223</FONT>                throw new IllegalArgumentException("Only one series for contour");<a name="line.223"></a>
<FONT color="green">224</FONT>            }<a name="line.224"></a>
<FONT color="green">225</FONT>            return this.zValues.length;<a name="line.225"></a>
<FONT color="green">226</FONT>        }<a name="line.226"></a>
<FONT color="green">227</FONT>    <a name="line.227"></a>
<FONT color="green">228</FONT>        /**<a name="line.228"></a>
<FONT color="green">229</FONT>         * Returns the maximum z-value.<a name="line.229"></a>
<FONT color="green">230</FONT>         *<a name="line.230"></a>
<FONT color="green">231</FONT>         * @return The maximum z-value.<a name="line.231"></a>
<FONT color="green">232</FONT>         */<a name="line.232"></a>
<FONT color="green">233</FONT>        public double getMaxZValue() {<a name="line.233"></a>
<FONT color="green">234</FONT>            double zMax = -1.e20;<a name="line.234"></a>
<FONT color="green">235</FONT>            for (int k = 0; k &lt; this.zValues.length; k++) {<a name="line.235"></a>
<FONT color="green">236</FONT>                if (this.zValues[k] != null) {<a name="line.236"></a>
<FONT color="green">237</FONT>                    zMax = Math.max(zMax, this.zValues[k].doubleValue());<a name="line.237"></a>
<FONT color="green">238</FONT>                }<a name="line.238"></a>
<FONT color="green">239</FONT>            }<a name="line.239"></a>
<FONT color="green">240</FONT>            return zMax;<a name="line.240"></a>
<FONT color="green">241</FONT>        }<a name="line.241"></a>
<FONT color="green">242</FONT>    <a name="line.242"></a>
<FONT color="green">243</FONT>        /**<a name="line.243"></a>
<FONT color="green">244</FONT>         * Returns the minimum z-value.<a name="line.244"></a>
<FONT color="green">245</FONT>         *<a name="line.245"></a>
<FONT color="green">246</FONT>         * @return The minimum z-value.<a name="line.246"></a>
<FONT color="green">247</FONT>         */<a name="line.247"></a>
<FONT color="green">248</FONT>        public double getMinZValue() {<a name="line.248"></a>
<FONT color="green">249</FONT>            double zMin = 1.e20;<a name="line.249"></a>
<FONT color="green">250</FONT>            for (int k = 0; k &lt; this.zValues.length; k++) {<a name="line.250"></a>
<FONT color="green">251</FONT>                if (this.zValues[k] != null) {<a name="line.251"></a>
<FONT color="green">252</FONT>                    zMin = Math.min(zMin, this.zValues[k].doubleValue());<a name="line.252"></a>
<FONT color="green">253</FONT>                }<a name="line.253"></a>
<FONT color="green">254</FONT>            }<a name="line.254"></a>
<FONT color="green">255</FONT>            return zMin;<a name="line.255"></a>
<FONT color="green">256</FONT>        }<a name="line.256"></a>
<FONT color="green">257</FONT>    <a name="line.257"></a>
<FONT color="green">258</FONT>        /**<a name="line.258"></a>
<FONT color="green">259</FONT>         * Returns the maximum z-value within visible region of plot.<a name="line.259"></a>
<FONT color="green">260</FONT>         *<a name="line.260"></a>
<FONT color="green">261</FONT>         * @param x  the x range.<a name="line.261"></a>
<FONT color="green">262</FONT>         * @param y  the y range.<a name="line.262"></a>
<FONT color="green">263</FONT>         *<a name="line.263"></a>
<FONT color="green">264</FONT>         * @return The z range.<a name="line.264"></a>
<FONT color="green">265</FONT>         */<a name="line.265"></a>
<FONT color="green">266</FONT>        public Range getZValueRange(Range x, Range y) {<a name="line.266"></a>
<FONT color="green">267</FONT>    <a name="line.267"></a>
<FONT color="green">268</FONT>            double minX = x.getLowerBound();<a name="line.268"></a>
<FONT color="green">269</FONT>            double minY = y.getLowerBound();<a name="line.269"></a>
<FONT color="green">270</FONT>            double maxX = x.getUpperBound();<a name="line.270"></a>
<FONT color="green">271</FONT>            double maxY = y.getUpperBound();<a name="line.271"></a>
<FONT color="green">272</FONT>    <a name="line.272"></a>
<FONT color="green">273</FONT>            double zMin = 1.e20;<a name="line.273"></a>
<FONT color="green">274</FONT>            double zMax = -1.e20;<a name="line.274"></a>
<FONT color="green">275</FONT>            for (int k = 0; k &lt; this.zValues.length; k++) {<a name="line.275"></a>
<FONT color="green">276</FONT>                if (this.xValues[k].doubleValue() &gt;= minX<a name="line.276"></a>
<FONT color="green">277</FONT>                    &amp;&amp; this.xValues[k].doubleValue() &lt;= maxX<a name="line.277"></a>
<FONT color="green">278</FONT>                    &amp;&amp; this.yValues[k].doubleValue() &gt;= minY<a name="line.278"></a>
<FONT color="green">279</FONT>                    &amp;&amp; this.yValues[k].doubleValue() &lt;= maxY) {<a name="line.279"></a>
<FONT color="green">280</FONT>                    if (this.zValues[k] != null) {<a name="line.280"></a>
<FONT color="green">281</FONT>                        zMin = Math.min(zMin, this.zValues[k].doubleValue());<a name="line.281"></a>
<FONT color="green">282</FONT>                        zMax = Math.max(zMax, this.zValues[k].doubleValue());<a name="line.282"></a>
<FONT color="green">283</FONT>                    }<a name="line.283"></a>
<FONT color="green">284</FONT>                }<a name="line.284"></a>
<FONT color="green">285</FONT>            }<a name="line.285"></a>
<FONT color="green">286</FONT>    <a name="line.286"></a>
<FONT color="green">287</FONT>            return new Range(zMin, zMax);<a name="line.287"></a>
<FONT color="green">288</FONT>        }<a name="line.288"></a>
<FONT color="green">289</FONT>    <a name="line.289"></a>
<FONT color="green">290</FONT>        /**<a name="line.290"></a>
<FONT color="green">291</FONT>         * Returns the minimum z-value.<a name="line.291"></a>
<FONT color="green">292</FONT>         *<a name="line.292"></a>
<FONT color="green">293</FONT>         * @param minX  the minimum x value.<a name="line.293"></a>
<FONT color="green">294</FONT>         * @param minY  the minimum y value.<a name="line.294"></a>
<FONT color="green">295</FONT>         * @param maxX  the maximum x value.<a name="line.295"></a>
<FONT color="green">296</FONT>         * @param maxY  the maximum y value.<a name="line.296"></a>
<FONT color="green">297</FONT>         *<a name="line.297"></a>
<FONT color="green">298</FONT>         * @return The minimum z-value.<a name="line.298"></a>
<FONT color="green">299</FONT>         */<a name="line.299"></a>
<FONT color="green">300</FONT>        public double getMinZValue(double minX,<a name="line.300"></a>
<FONT color="green">301</FONT>                                   double minY,<a name="line.301"></a>
<FONT color="green">302</FONT>                                   double maxX,<a name="line.302"></a>
<FONT color="green">303</FONT>                                   double maxY) {<a name="line.303"></a>
<FONT color="green">304</FONT>    <a name="line.304"></a>
<FONT color="green">305</FONT>            double zMin = 1.e20;<a name="line.305"></a>
<FONT color="green">306</FONT>            for (int k = 0; k &lt; this.zValues.length; k++) {<a name="line.306"></a>
<FONT color="green">307</FONT>                if (this.zValues[k] != null) {<a name="line.307"></a>
<FONT color="green">308</FONT>                    zMin = Math.min(zMin, this.zValues[k].doubleValue());<a name="line.308"></a>
<FONT color="green">309</FONT>                }<a name="line.309"></a>
<FONT color="green">310</FONT>            }<a name="line.310"></a>
<FONT color="green">311</FONT>            return zMin;<a name="line.311"></a>
<FONT color="green">312</FONT>    <a name="line.312"></a>
<FONT color="green">313</FONT>        }<a name="line.313"></a>
<FONT color="green">314</FONT>    <a name="line.314"></a>
<FONT color="green">315</FONT>        /**<a name="line.315"></a>
<FONT color="green">316</FONT>         * Returns the number of series.<a name="line.316"></a>
<FONT color="green">317</FONT>         * &lt;P&gt;<a name="line.317"></a>
<FONT color="green">318</FONT>         * Required by XYDataset interface (this will always return 1)<a name="line.318"></a>
<FONT color="green">319</FONT>         *<a name="line.319"></a>
<FONT color="green">320</FONT>         * @return 1.<a name="line.320"></a>
<FONT color="green">321</FONT>         */<a name="line.321"></a>
<FONT color="green">322</FONT>        public int getSeriesCount() {<a name="line.322"></a>
<FONT color="green">323</FONT>            return 1;<a name="line.323"></a>
<FONT color="green">324</FONT>        }<a name="line.324"></a>
<FONT color="green">325</FONT>    <a name="line.325"></a>
<FONT color="green">326</FONT>        /**<a name="line.326"></a>
<FONT color="green">327</FONT>         * Returns the name of the specified series.<a name="line.327"></a>
<FONT color="green">328</FONT>         *<a name="line.328"></a>
<FONT color="green">329</FONT>         * Method provided to satisfy the XYDataset interface implementation<a name="line.329"></a>
<FONT color="green">330</FONT>         *<a name="line.330"></a>
<FONT color="green">331</FONT>         * @param series must be zero.<a name="line.331"></a>
<FONT color="green">332</FONT>         *<a name="line.332"></a>
<FONT color="green">333</FONT>         * @return The series name.<a name="line.333"></a>
<FONT color="green">334</FONT>         */<a name="line.334"></a>
<FONT color="green">335</FONT>        public Comparable getSeriesKey(int series) {<a name="line.335"></a>
<FONT color="green">336</FONT>            if (series &gt; 0) {<a name="line.336"></a>
<FONT color="green">337</FONT>                throw new IllegalArgumentException("Only one series for contour");<a name="line.337"></a>
<FONT color="green">338</FONT>            }<a name="line.338"></a>
<FONT color="green">339</FONT>            return this.seriesKey;<a name="line.339"></a>
<FONT color="green">340</FONT>        }<a name="line.340"></a>
<FONT color="green">341</FONT>    <a name="line.341"></a>
<FONT color="green">342</FONT>        /**<a name="line.342"></a>
<FONT color="green">343</FONT>         * Returns the index of the xvalues.<a name="line.343"></a>
<FONT color="green">344</FONT>         *<a name="line.344"></a>
<FONT color="green">345</FONT>         * @return The x values.<a name="line.345"></a>
<FONT color="green">346</FONT>         */<a name="line.346"></a>
<FONT color="green">347</FONT>        public int[] getXIndices() {<a name="line.347"></a>
<FONT color="green">348</FONT>            return this.xIndex;<a name="line.348"></a>
<FONT color="green">349</FONT>        }<a name="line.349"></a>
<FONT color="green">350</FONT>    <a name="line.350"></a>
<FONT color="green">351</FONT>        /**<a name="line.351"></a>
<FONT color="green">352</FONT>         * Returns the x values.<a name="line.352"></a>
<FONT color="green">353</FONT>         *<a name="line.353"></a>
<FONT color="green">354</FONT>         * @return The x values.<a name="line.354"></a>
<FONT color="green">355</FONT>         */<a name="line.355"></a>
<FONT color="green">356</FONT>        public Number[] getXValues() {<a name="line.356"></a>
<FONT color="green">357</FONT>            return this.xValues;<a name="line.357"></a>
<FONT color="green">358</FONT>        }<a name="line.358"></a>
<FONT color="green">359</FONT>    <a name="line.359"></a>
<FONT color="green">360</FONT>        /**<a name="line.360"></a>
<FONT color="green">361</FONT>         * Returns the x value for the specified series and index (zero-based<a name="line.361"></a>
<FONT color="green">362</FONT>         * indices).  Required by the {@link XYDataset}.<a name="line.362"></a>
<FONT color="green">363</FONT>         *<a name="line.363"></a>
<FONT color="green">364</FONT>         * @param series  must be zero;<a name="line.364"></a>
<FONT color="green">365</FONT>         * @param item  the item index (zero-based).<a name="line.365"></a>
<FONT color="green">366</FONT>         *<a name="line.366"></a>
<FONT color="green">367</FONT>         * @return The x value.<a name="line.367"></a>
<FONT color="green">368</FONT>         */<a name="line.368"></a>
<FONT color="green">369</FONT>        public Number getX(int series, int item) {<a name="line.369"></a>
<FONT color="green">370</FONT>            if (series &gt; 0) {<a name="line.370"></a>
<FONT color="green">371</FONT>                throw new IllegalArgumentException("Only one series for contour");<a name="line.371"></a>
<FONT color="green">372</FONT>            }<a name="line.372"></a>
<FONT color="green">373</FONT>            return this.xValues[item];<a name="line.373"></a>
<FONT color="green">374</FONT>        }<a name="line.374"></a>
<FONT color="green">375</FONT>    <a name="line.375"></a>
<FONT color="green">376</FONT>        /**<a name="line.376"></a>
<FONT color="green">377</FONT>         * Returns an x value.<a name="line.377"></a>
<FONT color="green">378</FONT>         *<a name="line.378"></a>
<FONT color="green">379</FONT>         * @param item  the item index (zero-based).<a name="line.379"></a>
<FONT color="green">380</FONT>         *<a name="line.380"></a>
<FONT color="green">381</FONT>         * @return The X value.<a name="line.381"></a>
<FONT color="green">382</FONT>         */<a name="line.382"></a>
<FONT color="green">383</FONT>        public Number getXValue(int item) {<a name="line.383"></a>
<FONT color="green">384</FONT>            return this.xValues[item];<a name="line.384"></a>
<FONT color="green">385</FONT>        }<a name="line.385"></a>
<FONT color="green">386</FONT>    <a name="line.386"></a>
<FONT color="green">387</FONT>        /**<a name="line.387"></a>
<FONT color="green">388</FONT>         * Returns a Number array containing all y values.<a name="line.388"></a>
<FONT color="green">389</FONT>         *<a name="line.389"></a>
<FONT color="green">390</FONT>         * @return The Y values.<a name="line.390"></a>
<FONT color="green">391</FONT>         */<a name="line.391"></a>
<FONT color="green">392</FONT>        public Number[] getYValues() {<a name="line.392"></a>
<FONT color="green">393</FONT>            return this.yValues;<a name="line.393"></a>
<FONT color="green">394</FONT>        }<a name="line.394"></a>
<FONT color="green">395</FONT>    <a name="line.395"></a>
<FONT color="green">396</FONT>        /**<a name="line.396"></a>
<FONT color="green">397</FONT>         * Returns the y value for the specified series and index (zero-based<a name="line.397"></a>
<FONT color="green">398</FONT>         * indices).  Required by the {@link XYDataset}.<a name="line.398"></a>
<FONT color="green">399</FONT>         *<a name="line.399"></a>
<FONT color="green">400</FONT>         * @param series  the series index (must be zero for this dataset).<a name="line.400"></a>
<FONT color="green">401</FONT>         * @param item  the item index (zero-based).<a name="line.401"></a>
<FONT color="green">402</FONT>         *<a name="line.402"></a>
<FONT color="green">403</FONT>         * @return The Y value.<a name="line.403"></a>
<FONT color="green">404</FONT>         */<a name="line.404"></a>
<FONT color="green">405</FONT>        public Number getY(int series, int item) {<a name="line.405"></a>
<FONT color="green">406</FONT>            if (series &gt; 0) {<a name="line.406"></a>
<FONT color="green">407</FONT>                throw new IllegalArgumentException("Only one series for contour");<a name="line.407"></a>
<FONT color="green">408</FONT>            }<a name="line.408"></a>
<FONT color="green">409</FONT>            return this.yValues[item];<a name="line.409"></a>
<FONT color="green">410</FONT>        }<a name="line.410"></a>
<FONT color="green">411</FONT>    <a name="line.411"></a>
<FONT color="green">412</FONT>        /**<a name="line.412"></a>
<FONT color="green">413</FONT>         * Returns a Number array containing all z values.<a name="line.413"></a>
<FONT color="green">414</FONT>         *<a name="line.414"></a>
<FONT color="green">415</FONT>         * @return The Z values.<a name="line.415"></a>
<FONT color="green">416</FONT>         */<a name="line.416"></a>
<FONT color="green">417</FONT>        public Number[] getZValues() {<a name="line.417"></a>
<FONT color="green">418</FONT>            return this.zValues;<a name="line.418"></a>
<FONT color="green">419</FONT>        }<a name="line.419"></a>
<FONT color="green">420</FONT>    <a name="line.420"></a>
<FONT color="green">421</FONT>        /**<a name="line.421"></a>
<FONT color="green">422</FONT>         * Returns the z value for the specified series and index (zero-based<a name="line.422"></a>
<FONT color="green">423</FONT>         * indices).  Required by the {@link XYDataset}<a name="line.423"></a>
<FONT color="green">424</FONT>         *<a name="line.424"></a>
<FONT color="green">425</FONT>         * @param series  the series index (must be zero for this dataset).<a name="line.425"></a>
<FONT color="green">426</FONT>         * @param item  the item index (zero-based).<a name="line.426"></a>
<FONT color="green">427</FONT>         *<a name="line.427"></a>
<FONT color="green">428</FONT>         * @return The Z value.<a name="line.428"></a>
<FONT color="green">429</FONT>         */<a name="line.429"></a>
<FONT color="green">430</FONT>        public Number getZ(int series, int item) {<a name="line.430"></a>
<FONT color="green">431</FONT>            if (series &gt; 0) {<a name="line.431"></a>
<FONT color="green">432</FONT>                throw new IllegalArgumentException("Only one series for contour");<a name="line.432"></a>
<FONT color="green">433</FONT>            }<a name="line.433"></a>
<FONT color="green">434</FONT>            return this.zValues[item];<a name="line.434"></a>
<FONT color="green">435</FONT>        }<a name="line.435"></a>
<FONT color="green">436</FONT>    <a name="line.436"></a>
<FONT color="green">437</FONT>        /**<a name="line.437"></a>
<FONT color="green">438</FONT>         * Returns an int array contain the index into the x values.<a name="line.438"></a>
<FONT color="green">439</FONT>         *<a name="line.439"></a>
<FONT color="green">440</FONT>         * @return The X values.<a name="line.440"></a>
<FONT color="green">441</FONT>         */<a name="line.441"></a>
<FONT color="green">442</FONT>        public int[] indexX() {<a name="line.442"></a>
<FONT color="green">443</FONT>            int[] index = new int[this.xValues.length];<a name="line.443"></a>
<FONT color="green">444</FONT>            for (int k = 0; k &lt; index.length; k++) {<a name="line.444"></a>
<FONT color="green">445</FONT>                index[k] = indexX(k);<a name="line.445"></a>
<FONT color="green">446</FONT>            }<a name="line.446"></a>
<FONT color="green">447</FONT>            return index;<a name="line.447"></a>
<FONT color="green">448</FONT>        }<a name="line.448"></a>
<FONT color="green">449</FONT>    <a name="line.449"></a>
<FONT color="green">450</FONT>        /**<a name="line.450"></a>
<FONT color="green">451</FONT>         * Given index k, returns the column index containing k.<a name="line.451"></a>
<FONT color="green">452</FONT>         *<a name="line.452"></a>
<FONT color="green">453</FONT>         * @param k index of interest.<a name="line.453"></a>
<FONT color="green">454</FONT>         *<a name="line.454"></a>
<FONT color="green">455</FONT>         * @return The column index.<a name="line.455"></a>
<FONT color="green">456</FONT>         */<a name="line.456"></a>
<FONT color="green">457</FONT>        public int indexX(int k) {<a name="line.457"></a>
<FONT color="green">458</FONT>            int i = Arrays.binarySearch(this.xIndex, k);<a name="line.458"></a>
<FONT color="green">459</FONT>            if (i &gt;= 0) {<a name="line.459"></a>
<FONT color="green">460</FONT>                return i;<a name="line.460"></a>
<FONT color="green">461</FONT>            }<a name="line.461"></a>
<FONT color="green">462</FONT>            else {<a name="line.462"></a>
<FONT color="green">463</FONT>                return -1 * i - 2;<a name="line.463"></a>
<FONT color="green">464</FONT>            }<a name="line.464"></a>
<FONT color="green">465</FONT>        }<a name="line.465"></a>
<FONT color="green">466</FONT>    <a name="line.466"></a>
<FONT color="green">467</FONT>    <a name="line.467"></a>
<FONT color="green">468</FONT>        /**<a name="line.468"></a>
<FONT color="green">469</FONT>         * Given index k, return the row index containing k.<a name="line.469"></a>
<FONT color="green">470</FONT>         *<a name="line.470"></a>
<FONT color="green">471</FONT>         * @param k index of interest.<a name="line.471"></a>
<FONT color="green">472</FONT>         *<a name="line.472"></a>
<FONT color="green">473</FONT>         * @return The row index.<a name="line.473"></a>
<FONT color="green">474</FONT>         */<a name="line.474"></a>
<FONT color="green">475</FONT>        public int indexY(int k) { // this may be obsolete (not used anywhere)<a name="line.475"></a>
<FONT color="green">476</FONT>            return (k / this.xValues.length);<a name="line.476"></a>
<FONT color="green">477</FONT>        }<a name="line.477"></a>
<FONT color="green">478</FONT>    <a name="line.478"></a>
<FONT color="green">479</FONT>        /**<a name="line.479"></a>
<FONT color="green">480</FONT>         * Given column and row indices, returns the k index.<a name="line.480"></a>
<FONT color="green">481</FONT>         *<a name="line.481"></a>
<FONT color="green">482</FONT>         * @param i index of along x-axis.<a name="line.482"></a>
<FONT color="green">483</FONT>         * @param j index of along y-axis.<a name="line.483"></a>
<FONT color="green">484</FONT>         *<a name="line.484"></a>
<FONT color="green">485</FONT>         * @return The Z index.<a name="line.485"></a>
<FONT color="green">486</FONT>         */<a name="line.486"></a>
<FONT color="green">487</FONT>        public int indexZ(int i, int j) {<a name="line.487"></a>
<FONT color="green">488</FONT>            return this.xValues.length * j + i;<a name="line.488"></a>
<FONT color="green">489</FONT>        }<a name="line.489"></a>
<FONT color="green">490</FONT>    <a name="line.490"></a>
<FONT color="green">491</FONT>        /**<a name="line.491"></a>
<FONT color="green">492</FONT>         * Returns true if axis are dates.<a name="line.492"></a>
<FONT color="green">493</FONT>         *<a name="line.493"></a>
<FONT color="green">494</FONT>         * @param axisNumber The axis where 0-x, 1-y, and 2-z.<a name="line.494"></a>
<FONT color="green">495</FONT>         *<a name="line.495"></a>
<FONT color="green">496</FONT>         * @return A boolean.<a name="line.496"></a>
<FONT color="green">497</FONT>         */<a name="line.497"></a>
<FONT color="green">498</FONT>        public boolean isDateAxis(int axisNumber) {<a name="line.498"></a>
<FONT color="green">499</FONT>            if (axisNumber &lt; 0 || axisNumber &gt; 2) {<a name="line.499"></a>
<FONT color="green">500</FONT>                return false; // bad axisNumber<a name="line.500"></a>
<FONT color="green">501</FONT>            }<a name="line.501"></a>
<FONT color="green">502</FONT>            return this.dateAxis[axisNumber];<a name="line.502"></a>
<FONT color="green">503</FONT>        }<a name="line.503"></a>
<FONT color="green">504</FONT>    <a name="line.504"></a>
<FONT color="green">505</FONT>        /**<a name="line.505"></a>
<FONT color="green">506</FONT>         * Sets the names of the series in the data source.<a name="line.506"></a>
<FONT color="green">507</FONT>         *<a name="line.507"></a>
<FONT color="green">508</FONT>         * @param seriesKeys  the keys of the series in the data source.<a name="line.508"></a>
<FONT color="green">509</FONT>         */<a name="line.509"></a>
<FONT color="green">510</FONT>        public void setSeriesKeys(Comparable[] seriesKeys) {<a name="line.510"></a>
<FONT color="green">511</FONT>            if (seriesKeys.length &gt; 1) {<a name="line.511"></a>
<FONT color="green">512</FONT>                throw new IllegalArgumentException(<a name="line.512"></a>
<FONT color="green">513</FONT>                        "Contours only support one series");<a name="line.513"></a>
<FONT color="green">514</FONT>            }<a name="line.514"></a>
<FONT color="green">515</FONT>            this.seriesKey = seriesKeys[0];<a name="line.515"></a>
<FONT color="green">516</FONT>            fireDatasetChanged();<a name="line.516"></a>
<FONT color="green">517</FONT>        }<a name="line.517"></a>
<FONT color="green">518</FONT>    <a name="line.518"></a>
<FONT color="green">519</FONT>    }<a name="line.519"></a>




























































</PRE>
</BODY>
</HTML>
