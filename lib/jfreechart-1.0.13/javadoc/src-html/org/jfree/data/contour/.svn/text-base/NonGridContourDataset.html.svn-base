<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ===========================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JFreeChart : a free chart library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ===========================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     *<a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jfreechart/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it<a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by<a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or<a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but<a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY<a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public<a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,<a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.<a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc.<a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     *<a name="line.26"></a>
<FONT color="green">027</FONT>     * --------------------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * NonGridContourDataset.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * --------------------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C) Copyright 2002-2008, by David M. O'Donnell.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  David M. O'Donnell;<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   David Gilbert (for Object Refinery Limited);<a name="line.33"></a>
<FONT color="green">034</FONT>     *<a name="line.34"></a>
<FONT color="green">035</FONT>     * Changes (from 24-Jul-2003)<a name="line.35"></a>
<FONT color="green">036</FONT>     * --------------------------<a name="line.36"></a>
<FONT color="green">037</FONT>     * 24-Jul-2003 : Added standard header (DG);<a name="line.37"></a>
<FONT color="green">038</FONT>     * ------------- JFREECHART 1.0.x ---------------------------------------------<a name="line.38"></a>
<FONT color="green">039</FONT>     * 31-Jan-2007 : Deprecated (DG);<a name="line.39"></a>
<FONT color="green">040</FONT>     *<a name="line.40"></a>
<FONT color="green">041</FONT>     */<a name="line.41"></a>
<FONT color="green">042</FONT>    <a name="line.42"></a>
<FONT color="green">043</FONT>    package org.jfree.data.contour;<a name="line.43"></a>
<FONT color="green">044</FONT>    <a name="line.44"></a>
<FONT color="green">045</FONT>    import org.jfree.chart.plot.XYPlot;<a name="line.45"></a>
<FONT color="green">046</FONT>    import org.jfree.chart.renderer.xy.XYBlockRenderer;<a name="line.46"></a>
<FONT color="green">047</FONT>    import org.jfree.data.Range;<a name="line.47"></a>
<FONT color="green">048</FONT>    <a name="line.48"></a>
<FONT color="green">049</FONT>    /**<a name="line.49"></a>
<FONT color="green">050</FONT>     * A convenience class that extends the {@link DefaultContourDataset} to<a name="line.50"></a>
<FONT color="green">051</FONT>     * accommodate non-grid data.<a name="line.51"></a>
<FONT color="green">052</FONT>     *<a name="line.52"></a>
<FONT color="green">053</FONT>     * @deprecated This class is no longer supported (as of version 1.0.4).  If<a name="line.53"></a>
<FONT color="green">054</FONT>     *     you are creating contour plots, please try to use {@link XYPlot} and<a name="line.54"></a>
<FONT color="green">055</FONT>     *     {@link XYBlockRenderer}.<a name="line.55"></a>
<FONT color="green">056</FONT>     */<a name="line.56"></a>
<FONT color="green">057</FONT>    public class NonGridContourDataset extends DefaultContourDataset {<a name="line.57"></a>
<FONT color="green">058</FONT>    <a name="line.58"></a>
<FONT color="green">059</FONT>        /** Default number of x values. */<a name="line.59"></a>
<FONT color="green">060</FONT>        static final int DEFAULT_NUM_X = 50;<a name="line.60"></a>
<FONT color="green">061</FONT>    <a name="line.61"></a>
<FONT color="green">062</FONT>        /** Default number of y values. */<a name="line.62"></a>
<FONT color="green">063</FONT>        static final int DEFAULT_NUM_Y = 50;<a name="line.63"></a>
<FONT color="green">064</FONT>    <a name="line.64"></a>
<FONT color="green">065</FONT>        /** Default power. */<a name="line.65"></a>
<FONT color="green">066</FONT>        static final int DEFAULT_POWER = 4;<a name="line.66"></a>
<FONT color="green">067</FONT>    <a name="line.67"></a>
<FONT color="green">068</FONT>        /**<a name="line.68"></a>
<FONT color="green">069</FONT>         * Default constructor.<a name="line.69"></a>
<FONT color="green">070</FONT>         */<a name="line.70"></a>
<FONT color="green">071</FONT>        public NonGridContourDataset() {<a name="line.71"></a>
<FONT color="green">072</FONT>            super();<a name="line.72"></a>
<FONT color="green">073</FONT>        }<a name="line.73"></a>
<FONT color="green">074</FONT>    <a name="line.74"></a>
<FONT color="green">075</FONT>        /**<a name="line.75"></a>
<FONT color="green">076</FONT>         * Constructor for NonGridContourDataset.  Uses default values for grid<a name="line.76"></a>
<FONT color="green">077</FONT>         * dimensions and weighting.<a name="line.77"></a>
<FONT color="green">078</FONT>         *<a name="line.78"></a>
<FONT color="green">079</FONT>         * @param seriesName  the series name.<a name="line.79"></a>
<FONT color="green">080</FONT>         * @param xData  the x values.<a name="line.80"></a>
<FONT color="green">081</FONT>         * @param yData  the y values.<a name="line.81"></a>
<FONT color="green">082</FONT>         * @param zData  the z values.<a name="line.82"></a>
<FONT color="green">083</FONT>         */<a name="line.83"></a>
<FONT color="green">084</FONT>        public NonGridContourDataset(String seriesName,<a name="line.84"></a>
<FONT color="green">085</FONT>                                     Object[] xData, Object[] yData,<a name="line.85"></a>
<FONT color="green">086</FONT>                                     Object[] zData) {<a name="line.86"></a>
<FONT color="green">087</FONT>            super(seriesName, xData, yData, zData);<a name="line.87"></a>
<FONT color="green">088</FONT>            buildGrid(DEFAULT_NUM_X, DEFAULT_NUM_Y, DEFAULT_POWER);<a name="line.88"></a>
<FONT color="green">089</FONT>        }<a name="line.89"></a>
<FONT color="green">090</FONT>    <a name="line.90"></a>
<FONT color="green">091</FONT>        /**<a name="line.91"></a>
<FONT color="green">092</FONT>         * Constructor for NonGridContourDataset.<a name="line.92"></a>
<FONT color="green">093</FONT>         *<a name="line.93"></a>
<FONT color="green">094</FONT>         * @param seriesName  the series name.<a name="line.94"></a>
<FONT color="green">095</FONT>         * @param xData  the x values.<a name="line.95"></a>
<FONT color="green">096</FONT>         * @param yData  the y values.<a name="line.96"></a>
<FONT color="green">097</FONT>         * @param zData  the z values.<a name="line.97"></a>
<FONT color="green">098</FONT>         * @param numX  number grid cells in along the x-axis<a name="line.98"></a>
<FONT color="green">099</FONT>         * @param numY  number grid cells in along the y-axis<a name="line.99"></a>
<FONT color="green">100</FONT>         * @param power  exponent for inverse distance weighting<a name="line.100"></a>
<FONT color="green">101</FONT>         */<a name="line.101"></a>
<FONT color="green">102</FONT>        public NonGridContourDataset(String seriesName,<a name="line.102"></a>
<FONT color="green">103</FONT>                                     Object[] xData, Object[] yData,<a name="line.103"></a>
<FONT color="green">104</FONT>                                     Object[] zData,<a name="line.104"></a>
<FONT color="green">105</FONT>                                     int numX, int numY, int power) {<a name="line.105"></a>
<FONT color="green">106</FONT>            super(seriesName, xData, yData, zData);<a name="line.106"></a>
<FONT color="green">107</FONT>            buildGrid(numX, numY, power);<a name="line.107"></a>
<FONT color="green">108</FONT>        }<a name="line.108"></a>
<FONT color="green">109</FONT>    <a name="line.109"></a>
<FONT color="green">110</FONT>        /**<a name="line.110"></a>
<FONT color="green">111</FONT>         * Builds a regular grid.  Maps the non-grid data into the regular grid<a name="line.111"></a>
<FONT color="green">112</FONT>         * using an inverse distance between grid and non-grid points.  Weighting<a name="line.112"></a>
<FONT color="green">113</FONT>         * of distance can be controlled by setting through the power parameter<a name="line.113"></a>
<FONT color="green">114</FONT>         * that controls the exponent used on the distance weighting<a name="line.114"></a>
<FONT color="green">115</FONT>         * (e.g., distance^power).<a name="line.115"></a>
<FONT color="green">116</FONT>         *<a name="line.116"></a>
<FONT color="green">117</FONT>         * @param numX  number grid points in along the x-axis<a name="line.117"></a>
<FONT color="green">118</FONT>         * @param numY  number grid points in along the y-axis<a name="line.118"></a>
<FONT color="green">119</FONT>         * @param power  exponent for inverse distance weighting<a name="line.119"></a>
<FONT color="green">120</FONT>         */<a name="line.120"></a>
<FONT color="green">121</FONT>        protected void buildGrid(int numX, int numY, int power) {<a name="line.121"></a>
<FONT color="green">122</FONT>    <a name="line.122"></a>
<FONT color="green">123</FONT>            int numValues = numX * numY;<a name="line.123"></a>
<FONT color="green">124</FONT>            double[] xGrid = new double[numValues];<a name="line.124"></a>
<FONT color="green">125</FONT>            double[] yGrid = new double [numValues];<a name="line.125"></a>
<FONT color="green">126</FONT>            double[] zGrid = new double [numValues];<a name="line.126"></a>
<FONT color="green">127</FONT>    <a name="line.127"></a>
<FONT color="green">128</FONT>            // Find min, max for the x and y axes<a name="line.128"></a>
<FONT color="green">129</FONT>            double xMin = 1.e20;<a name="line.129"></a>
<FONT color="green">130</FONT>            for (int k = 0; k &lt; this.xValues.length; k++) {<a name="line.130"></a>
<FONT color="green">131</FONT>                xMin = Math.min(xMin, this.xValues[k].doubleValue());<a name="line.131"></a>
<FONT color="green">132</FONT>            }<a name="line.132"></a>
<FONT color="green">133</FONT>    <a name="line.133"></a>
<FONT color="green">134</FONT>            double xMax = -1.e20;<a name="line.134"></a>
<FONT color="green">135</FONT>            for (int k = 0; k &lt; this.xValues.length; k++) {<a name="line.135"></a>
<FONT color="green">136</FONT>                xMax = Math.max(xMax, this.xValues[k].doubleValue());<a name="line.136"></a>
<FONT color="green">137</FONT>            }<a name="line.137"></a>
<FONT color="green">138</FONT>    <a name="line.138"></a>
<FONT color="green">139</FONT>            double yMin = 1.e20;<a name="line.139"></a>
<FONT color="green">140</FONT>            for (int k = 0; k &lt; this.yValues.length; k++) {<a name="line.140"></a>
<FONT color="green">141</FONT>                yMin = Math.min(yMin, this.yValues[k].doubleValue());<a name="line.141"></a>
<FONT color="green">142</FONT>            }<a name="line.142"></a>
<FONT color="green">143</FONT>    <a name="line.143"></a>
<FONT color="green">144</FONT>            double yMax = -1.e20;<a name="line.144"></a>
<FONT color="green">145</FONT>            for (int k = 0; k &lt; this.yValues.length; k++) {<a name="line.145"></a>
<FONT color="green">146</FONT>                yMax = Math.max(yMax, this.yValues[k].doubleValue());<a name="line.146"></a>
<FONT color="green">147</FONT>            }<a name="line.147"></a>
<FONT color="green">148</FONT>    <a name="line.148"></a>
<FONT color="green">149</FONT>            Range xRange = new Range(xMin, xMax);<a name="line.149"></a>
<FONT color="green">150</FONT>            Range yRange = new Range(yMin, yMax);<a name="line.150"></a>
<FONT color="green">151</FONT>    <a name="line.151"></a>
<FONT color="green">152</FONT>            xRange.getLength();<a name="line.152"></a>
<FONT color="green">153</FONT>            yRange.getLength();<a name="line.153"></a>
<FONT color="green">154</FONT>    <a name="line.154"></a>
<FONT color="green">155</FONT>            // Determine the cell size<a name="line.155"></a>
<FONT color="green">156</FONT>            double dxGrid = xRange.getLength() / (numX - 1);<a name="line.156"></a>
<FONT color="green">157</FONT>            double dyGrid = yRange.getLength() / (numY - 1);<a name="line.157"></a>
<FONT color="green">158</FONT>    <a name="line.158"></a>
<FONT color="green">159</FONT>            // Generate the grid<a name="line.159"></a>
<FONT color="green">160</FONT>            double x = 0.0;<a name="line.160"></a>
<FONT color="green">161</FONT>            for (int i = 0; i &lt; numX; i++) {<a name="line.161"></a>
<FONT color="green">162</FONT>                if (i == 0) {<a name="line.162"></a>
<FONT color="green">163</FONT>                    x = xMin;<a name="line.163"></a>
<FONT color="green">164</FONT>                }<a name="line.164"></a>
<FONT color="green">165</FONT>                else {<a name="line.165"></a>
<FONT color="green">166</FONT>                    x += dxGrid;<a name="line.166"></a>
<FONT color="green">167</FONT>                }<a name="line.167"></a>
<FONT color="green">168</FONT>                double y = 0.0;<a name="line.168"></a>
<FONT color="green">169</FONT>                for (int j = 0; j &lt; numY; j++) {<a name="line.169"></a>
<FONT color="green">170</FONT>                    int k = numY * i + j;<a name="line.170"></a>
<FONT color="green">171</FONT>                    xGrid[k] = x;<a name="line.171"></a>
<FONT color="green">172</FONT>                    if (j == 0) {<a name="line.172"></a>
<FONT color="green">173</FONT>                        y = yMin;<a name="line.173"></a>
<FONT color="green">174</FONT>                    }<a name="line.174"></a>
<FONT color="green">175</FONT>                    else {<a name="line.175"></a>
<FONT color="green">176</FONT>                        y += dyGrid;<a name="line.176"></a>
<FONT color="green">177</FONT>                    }<a name="line.177"></a>
<FONT color="green">178</FONT>                    yGrid[k] = y;<a name="line.178"></a>
<FONT color="green">179</FONT>                }<a name="line.179"></a>
<FONT color="green">180</FONT>            }<a name="line.180"></a>
<FONT color="green">181</FONT>    <a name="line.181"></a>
<FONT color="green">182</FONT>            // Map the nongrid data into the new regular grid<a name="line.182"></a>
<FONT color="green">183</FONT>            for (int kGrid = 0; kGrid &lt; xGrid.length; kGrid++) {<a name="line.183"></a>
<FONT color="green">184</FONT>                double dTotal = 0.0;<a name="line.184"></a>
<FONT color="green">185</FONT>                zGrid[kGrid] = 0.0;<a name="line.185"></a>
<FONT color="green">186</FONT>                for (int k = 0; k &lt; this.xValues.length; k++) {<a name="line.186"></a>
<FONT color="green">187</FONT>                    double xPt = this.xValues[k].doubleValue();<a name="line.187"></a>
<FONT color="green">188</FONT>                    double yPt = this.yValues[k].doubleValue();<a name="line.188"></a>
<FONT color="green">189</FONT>                    double d = distance(xPt, yPt, xGrid[kGrid], yGrid[kGrid]);<a name="line.189"></a>
<FONT color="green">190</FONT>                    if (power != 1) {<a name="line.190"></a>
<FONT color="green">191</FONT>                        d = Math.pow(d, power);<a name="line.191"></a>
<FONT color="green">192</FONT>                    }<a name="line.192"></a>
<FONT color="green">193</FONT>                    d = Math.sqrt(d);<a name="line.193"></a>
<FONT color="green">194</FONT>                    if (d &gt; 0.0) {<a name="line.194"></a>
<FONT color="green">195</FONT>                        d = 1.0 / d;<a name="line.195"></a>
<FONT color="green">196</FONT>                    }<a name="line.196"></a>
<FONT color="green">197</FONT>                    else { // if d is real small set the inverse to a large number<a name="line.197"></a>
<FONT color="green">198</FONT>                           // to avoid INF<a name="line.198"></a>
<FONT color="green">199</FONT>                        d = 1.e20;<a name="line.199"></a>
<FONT color="green">200</FONT>                    }<a name="line.200"></a>
<FONT color="green">201</FONT>                    if (this.zValues[k] != null) {<a name="line.201"></a>
<FONT color="green">202</FONT>                        // scale by the inverse of distance^power<a name="line.202"></a>
<FONT color="green">203</FONT>                        zGrid[kGrid] += this.zValues[k].doubleValue() * d;<a name="line.203"></a>
<FONT color="green">204</FONT>                    }<a name="line.204"></a>
<FONT color="green">205</FONT>                    dTotal += d;<a name="line.205"></a>
<FONT color="green">206</FONT>                }<a name="line.206"></a>
<FONT color="green">207</FONT>                zGrid[kGrid] = zGrid[kGrid] / dTotal;  //remove distance of the sum<a name="line.207"></a>
<FONT color="green">208</FONT>            }<a name="line.208"></a>
<FONT color="green">209</FONT>    <a name="line.209"></a>
<FONT color="green">210</FONT>            //initalize xValues, yValues, and zValues arrays.<a name="line.210"></a>
<FONT color="green">211</FONT>            initialize(<a name="line.211"></a>
<FONT color="green">212</FONT>                formObjectArray(xGrid), formObjectArray(yGrid),<a name="line.212"></a>
<FONT color="green">213</FONT>                formObjectArray(zGrid)<a name="line.213"></a>
<FONT color="green">214</FONT>            );<a name="line.214"></a>
<FONT color="green">215</FONT>    <a name="line.215"></a>
<FONT color="green">216</FONT>        }<a name="line.216"></a>
<FONT color="green">217</FONT>    <a name="line.217"></a>
<FONT color="green">218</FONT>        /**<a name="line.218"></a>
<FONT color="green">219</FONT>         * Calculates the distance between two points.<a name="line.219"></a>
<FONT color="green">220</FONT>         *<a name="line.220"></a>
<FONT color="green">221</FONT>         * @param xDataPt  the x coordinate.<a name="line.221"></a>
<FONT color="green">222</FONT>         * @param yDataPt  the y coordinate.<a name="line.222"></a>
<FONT color="green">223</FONT>         * @param xGrdPt  the x grid coordinate.<a name="line.223"></a>
<FONT color="green">224</FONT>         * @param yGrdPt  the y grid coordinate.<a name="line.224"></a>
<FONT color="green">225</FONT>         *<a name="line.225"></a>
<FONT color="green">226</FONT>         * @return The distance between two points.<a name="line.226"></a>
<FONT color="green">227</FONT>         */<a name="line.227"></a>
<FONT color="green">228</FONT>        protected double distance(double xDataPt,<a name="line.228"></a>
<FONT color="green">229</FONT>                                  double yDataPt,<a name="line.229"></a>
<FONT color="green">230</FONT>                                  double xGrdPt,<a name="line.230"></a>
<FONT color="green">231</FONT>                                  double yGrdPt) {<a name="line.231"></a>
<FONT color="green">232</FONT>            double dx = xDataPt - xGrdPt;<a name="line.232"></a>
<FONT color="green">233</FONT>            double dy = yDataPt - yGrdPt;<a name="line.233"></a>
<FONT color="green">234</FONT>            return Math.sqrt(dx * dx + dy * dy);<a name="line.234"></a>
<FONT color="green">235</FONT>        }<a name="line.235"></a>
<FONT color="green">236</FONT>    <a name="line.236"></a>
<FONT color="green">237</FONT>    }<a name="line.237"></a>




























































</PRE>
</BODY>
</HTML>
