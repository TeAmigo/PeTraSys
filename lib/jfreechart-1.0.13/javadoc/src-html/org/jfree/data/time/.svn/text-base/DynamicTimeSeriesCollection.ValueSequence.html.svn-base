<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ===========================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JFreeChart : a free chart library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ===========================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     *<a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jfreechart/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it<a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by<a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or<a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but<a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY<a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public<a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,<a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.<a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc.<a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     *<a name="line.26"></a>
<FONT color="green">027</FONT>     * --------------------------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * DynamicTimeSeriesCollection.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * --------------------------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C) Copyright 2002-2008, by I. H. Thomae and Contributors.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  I. H. Thomae (ithomae@ists.dartmouth.edu);<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   David Gilbert (for Object Refinery Limited);<a name="line.33"></a>
<FONT color="green">034</FONT>     *<a name="line.34"></a>
<FONT color="green">035</FONT>     * Changes<a name="line.35"></a>
<FONT color="green">036</FONT>     * -------<a name="line.36"></a>
<FONT color="green">037</FONT>     * 22-Nov-2002 : Initial version completed<a name="line.37"></a>
<FONT color="green">038</FONT>     *    Jan 2003 : Optimized advanceTime(), added implemnt'n of RangeInfo intfc<a name="line.38"></a>
<FONT color="green">039</FONT>     *               (using cached values for min, max, and range); also added<a name="line.39"></a>
<FONT color="green">040</FONT>     *               getOldestIndex() and getNewestIndex() ftns so client classes<a name="line.40"></a>
<FONT color="green">041</FONT>     *               can use this class as the master "index authority".<a name="line.41"></a>
<FONT color="green">042</FONT>     * 22-Jan-2003 : Made this class stand on its own, rather than extending<a name="line.42"></a>
<FONT color="green">043</FONT>     *               class FastTimeSeriesCollection<a name="line.43"></a>
<FONT color="green">044</FONT>     * 31-Jan-2003 : Changed TimePeriod --&gt; RegularTimePeriod (DG);<a name="line.44"></a>
<FONT color="green">045</FONT>     * 13-Mar-2003 : Moved to com.jrefinery.data.time package (DG);<a name="line.45"></a>
<FONT color="green">046</FONT>     * 29-Apr-2003 : Added small change to appendData method, from Irv Thomae (DG);<a name="line.46"></a>
<FONT color="green">047</FONT>     * 19-Sep-2003 : Added new appendData method, from Irv Thomae (DG);<a name="line.47"></a>
<FONT color="green">048</FONT>     * 05-May-2004 : Now extends AbstractIntervalXYDataset.  This also required a<a name="line.48"></a>
<FONT color="green">049</FONT>     *               change to the return type of the getY() method - I'm slightly<a name="line.49"></a>
<FONT color="green">050</FONT>     *               unsure of the implications of this, so it might require some<a name="line.50"></a>
<FONT color="green">051</FONT>     *               further amendment (DG);<a name="line.51"></a>
<FONT color="green">052</FONT>     * 15-Jul-2004 : Switched getX() with getXValue() and getY() with<a name="line.52"></a>
<FONT color="green">053</FONT>     *               getYValue() (DG);<a name="line.53"></a>
<FONT color="green">054</FONT>     * 11-Jan-2004 : Removed deprecated code in preparation for the 1.0.0<a name="line.54"></a>
<FONT color="green">055</FONT>     *               release (DG);<a name="line.55"></a>
<FONT color="green">056</FONT>     * 02-Feb-2007 : Removed author tags all over JFreeChart sources (DG);<a name="line.56"></a>
<FONT color="green">057</FONT>     *<a name="line.57"></a>
<FONT color="green">058</FONT>     */<a name="line.58"></a>
<FONT color="green">059</FONT>    <a name="line.59"></a>
<FONT color="green">060</FONT>    package org.jfree.data.time;<a name="line.60"></a>
<FONT color="green">061</FONT>    <a name="line.61"></a>
<FONT color="green">062</FONT>    import java.util.Calendar;<a name="line.62"></a>
<FONT color="green">063</FONT>    import java.util.TimeZone;<a name="line.63"></a>
<FONT color="green">064</FONT>    <a name="line.64"></a>
<FONT color="green">065</FONT>    import org.jfree.data.DomainInfo;<a name="line.65"></a>
<FONT color="green">066</FONT>    import org.jfree.data.Range;<a name="line.66"></a>
<FONT color="green">067</FONT>    import org.jfree.data.RangeInfo;<a name="line.67"></a>
<FONT color="green">068</FONT>    import org.jfree.data.general.SeriesChangeEvent;<a name="line.68"></a>
<FONT color="green">069</FONT>    import org.jfree.data.xy.AbstractIntervalXYDataset;<a name="line.69"></a>
<FONT color="green">070</FONT>    import org.jfree.data.xy.IntervalXYDataset;<a name="line.70"></a>
<FONT color="green">071</FONT>    <a name="line.71"></a>
<FONT color="green">072</FONT>    /**<a name="line.72"></a>
<FONT color="green">073</FONT>     * A dynamic dataset.<a name="line.73"></a>
<FONT color="green">074</FONT>     * &lt;p&gt;<a name="line.74"></a>
<FONT color="green">075</FONT>     * Like FastTimeSeriesCollection, this class is a functional replacement<a name="line.75"></a>
<FONT color="green">076</FONT>     * for JFreeChart's TimeSeriesCollection _and_ TimeSeries classes.<a name="line.76"></a>
<FONT color="green">077</FONT>     * FastTimeSeriesCollection is appropriate for a fixed time range; for<a name="line.77"></a>
<FONT color="green">078</FONT>     * real-time applications this subclass adds the ability to append new<a name="line.78"></a>
<FONT color="green">079</FONT>     * data and discard the oldest.<a name="line.79"></a>
<FONT color="green">080</FONT>     * In this class, the arrays used in FastTimeSeriesCollection become FIFO's.<a name="line.80"></a>
<FONT color="green">081</FONT>     * NOTE:As presented here, all data is assumed &gt;= 0, an assumption which is<a name="line.81"></a>
<FONT color="green">082</FONT>     * embodied only in methods associated with interface RangeInfo.<a name="line.82"></a>
<FONT color="green">083</FONT>     */<a name="line.83"></a>
<FONT color="green">084</FONT>    public class DynamicTimeSeriesCollection extends AbstractIntervalXYDataset<a name="line.84"></a>
<FONT color="green">085</FONT>                                             implements IntervalXYDataset,<a name="line.85"></a>
<FONT color="green">086</FONT>                                                        DomainInfo,<a name="line.86"></a>
<FONT color="green">087</FONT>                                                        RangeInfo {<a name="line.87"></a>
<FONT color="green">088</FONT>    <a name="line.88"></a>
<FONT color="green">089</FONT>        /**<a name="line.89"></a>
<FONT color="green">090</FONT>         * Useful constant for controlling the x-value returned for a time<a name="line.90"></a>
<FONT color="green">091</FONT>         * period.<a name="line.91"></a>
<FONT color="green">092</FONT>         */<a name="line.92"></a>
<FONT color="green">093</FONT>        public static final int START = 0;<a name="line.93"></a>
<FONT color="green">094</FONT>    <a name="line.94"></a>
<FONT color="green">095</FONT>        /**<a name="line.95"></a>
<FONT color="green">096</FONT>         * Useful constant for controlling the x-value returned for a time period.<a name="line.96"></a>
<FONT color="green">097</FONT>         */<a name="line.97"></a>
<FONT color="green">098</FONT>        public static final int MIDDLE = 1;<a name="line.98"></a>
<FONT color="green">099</FONT>    <a name="line.99"></a>
<FONT color="green">100</FONT>        /**<a name="line.100"></a>
<FONT color="green">101</FONT>         * Useful constant for controlling the x-value returned for a time period.<a name="line.101"></a>
<FONT color="green">102</FONT>         */<a name="line.102"></a>
<FONT color="green">103</FONT>        public static final int END = 2;<a name="line.103"></a>
<FONT color="green">104</FONT>    <a name="line.104"></a>
<FONT color="green">105</FONT>        /** The maximum number of items for each series (can be overridden). */<a name="line.105"></a>
<FONT color="green">106</FONT>        private int maximumItemCount = 2000;  // an arbitrary safe default value<a name="line.106"></a>
<FONT color="green">107</FONT>    <a name="line.107"></a>
<FONT color="green">108</FONT>        /** The history count. */<a name="line.108"></a>
<FONT color="green">109</FONT>        protected int historyCount;<a name="line.109"></a>
<FONT color="green">110</FONT>    <a name="line.110"></a>
<FONT color="green">111</FONT>        /** Storage for the series keys. */<a name="line.111"></a>
<FONT color="green">112</FONT>        private Comparable[] seriesKeys;<a name="line.112"></a>
<FONT color="green">113</FONT>    <a name="line.113"></a>
<FONT color="green">114</FONT>        /** The time period class - barely used, and could be removed (DG). */<a name="line.114"></a>
<FONT color="green">115</FONT>        private Class timePeriodClass = Minute.class;   // default value;<a name="line.115"></a>
<FONT color="green">116</FONT>    <a name="line.116"></a>
<FONT color="green">117</FONT>        /** Storage for the x-values. */<a name="line.117"></a>
<FONT color="green">118</FONT>        protected RegularTimePeriod[] pointsInTime;<a name="line.118"></a>
<FONT color="green">119</FONT>    <a name="line.119"></a>
<FONT color="green">120</FONT>        /** The number of series. */<a name="line.120"></a>
<FONT color="green">121</FONT>        private int seriesCount;<a name="line.121"></a>
<FONT color="green">122</FONT>    <a name="line.122"></a>
<FONT color="green">123</FONT>        /**<a name="line.123"></a>
<FONT color="green">124</FONT>         * A wrapper for a fixed array of float values.<a name="line.124"></a>
<FONT color="green">125</FONT>         */<a name="line.125"></a>
<FONT color="green">126</FONT>        protected class ValueSequence {<a name="line.126"></a>
<FONT color="green">127</FONT>    <a name="line.127"></a>
<FONT color="green">128</FONT>            /** Storage for the float values. */<a name="line.128"></a>
<FONT color="green">129</FONT>            float[] dataPoints;<a name="line.129"></a>
<FONT color="green">130</FONT>    <a name="line.130"></a>
<FONT color="green">131</FONT>            /**<a name="line.131"></a>
<FONT color="green">132</FONT>             * Default constructor:<a name="line.132"></a>
<FONT color="green">133</FONT>             */<a name="line.133"></a>
<FONT color="green">134</FONT>            public ValueSequence() {<a name="line.134"></a>
<FONT color="green">135</FONT>                this(DynamicTimeSeriesCollection.this.maximumItemCount);<a name="line.135"></a>
<FONT color="green">136</FONT>            }<a name="line.136"></a>
<FONT color="green">137</FONT>    <a name="line.137"></a>
<FONT color="green">138</FONT>            /**<a name="line.138"></a>
<FONT color="green">139</FONT>             * Creates a sequence with the specified length.<a name="line.139"></a>
<FONT color="green">140</FONT>             *<a name="line.140"></a>
<FONT color="green">141</FONT>             * @param length  the length.<a name="line.141"></a>
<FONT color="green">142</FONT>             */<a name="line.142"></a>
<FONT color="green">143</FONT>            public ValueSequence(int length) {<a name="line.143"></a>
<FONT color="green">144</FONT>                this.dataPoints = new float[length];<a name="line.144"></a>
<FONT color="green">145</FONT>                for (int i = 0; i &lt; length; i++) {<a name="line.145"></a>
<FONT color="green">146</FONT>                    this.dataPoints[i] = 0.0f;<a name="line.146"></a>
<FONT color="green">147</FONT>                }<a name="line.147"></a>
<FONT color="green">148</FONT>            }<a name="line.148"></a>
<FONT color="green">149</FONT>    <a name="line.149"></a>
<FONT color="green">150</FONT>            /**<a name="line.150"></a>
<FONT color="green">151</FONT>             * Enters data into the storage array.<a name="line.151"></a>
<FONT color="green">152</FONT>             *<a name="line.152"></a>
<FONT color="green">153</FONT>             * @param index  the index.<a name="line.153"></a>
<FONT color="green">154</FONT>             * @param value  the value.<a name="line.154"></a>
<FONT color="green">155</FONT>             */<a name="line.155"></a>
<FONT color="green">156</FONT>            public void enterData(int index, float value) {<a name="line.156"></a>
<FONT color="green">157</FONT>                this.dataPoints[index] = value;<a name="line.157"></a>
<FONT color="green">158</FONT>            }<a name="line.158"></a>
<FONT color="green">159</FONT>    <a name="line.159"></a>
<FONT color="green">160</FONT>            /**<a name="line.160"></a>
<FONT color="green">161</FONT>             * Returns a value from the storage array.<a name="line.161"></a>
<FONT color="green">162</FONT>             *<a name="line.162"></a>
<FONT color="green">163</FONT>             * @param index  the index.<a name="line.163"></a>
<FONT color="green">164</FONT>             *<a name="line.164"></a>
<FONT color="green">165</FONT>             * @return The value.<a name="line.165"></a>
<FONT color="green">166</FONT>             */<a name="line.166"></a>
<FONT color="green">167</FONT>            public float getData(int index) {<a name="line.167"></a>
<FONT color="green">168</FONT>                return this.dataPoints[index];<a name="line.168"></a>
<FONT color="green">169</FONT>            }<a name="line.169"></a>
<FONT color="green">170</FONT>        }<a name="line.170"></a>
<FONT color="green">171</FONT>    <a name="line.171"></a>
<FONT color="green">172</FONT>        /** An array for storing the objects that represent each series. */<a name="line.172"></a>
<FONT color="green">173</FONT>        protected ValueSequence[] valueHistory;<a name="line.173"></a>
<FONT color="green">174</FONT>    <a name="line.174"></a>
<FONT color="green">175</FONT>        /** A working calendar (to recycle) */<a name="line.175"></a>
<FONT color="green">176</FONT>        protected Calendar workingCalendar;<a name="line.176"></a>
<FONT color="green">177</FONT>    <a name="line.177"></a>
<FONT color="green">178</FONT>        /**<a name="line.178"></a>
<FONT color="green">179</FONT>         * The position within a time period to return as the x-value (START,<a name="line.179"></a>
<FONT color="green">180</FONT>         * MIDDLE or END).<a name="line.180"></a>
<FONT color="green">181</FONT>         */<a name="line.181"></a>
<FONT color="green">182</FONT>        private int position;<a name="line.182"></a>
<FONT color="green">183</FONT>    <a name="line.183"></a>
<FONT color="green">184</FONT>        /**<a name="line.184"></a>
<FONT color="green">185</FONT>         * A flag that indicates that the domain is 'points in time'.  If this flag<a name="line.185"></a>
<FONT color="green">186</FONT>         * is true, only the x-value is used to determine the range of values in<a name="line.186"></a>
<FONT color="green">187</FONT>         * the domain, the start and end x-values are ignored.<a name="line.187"></a>
<FONT color="green">188</FONT>         */<a name="line.188"></a>
<FONT color="green">189</FONT>        private boolean domainIsPointsInTime;<a name="line.189"></a>
<FONT color="green">190</FONT>    <a name="line.190"></a>
<FONT color="green">191</FONT>        /** index for mapping: points to the oldest valid time &amp; data. */<a name="line.191"></a>
<FONT color="green">192</FONT>        private int oldestAt;  // as a class variable, initializes == 0<a name="line.192"></a>
<FONT color="green">193</FONT>    <a name="line.193"></a>
<FONT color="green">194</FONT>        /** Index of the newest data item. */<a name="line.194"></a>
<FONT color="green">195</FONT>        private int newestAt;<a name="line.195"></a>
<FONT color="green">196</FONT>    <a name="line.196"></a>
<FONT color="green">197</FONT>        // cached values used for interface DomainInfo:<a name="line.197"></a>
<FONT color="green">198</FONT>    <a name="line.198"></a>
<FONT color="green">199</FONT>        /** the # of msec by which time advances. */<a name="line.199"></a>
<FONT color="green">200</FONT>        private long deltaTime;<a name="line.200"></a>
<FONT color="green">201</FONT>    <a name="line.201"></a>
<FONT color="green">202</FONT>        /** Cached domain start (for use by DomainInfo). */<a name="line.202"></a>
<FONT color="green">203</FONT>        private Long domainStart;<a name="line.203"></a>
<FONT color="green">204</FONT>    <a name="line.204"></a>
<FONT color="green">205</FONT>        /** Cached domain end (for use by DomainInfo). */<a name="line.205"></a>
<FONT color="green">206</FONT>        private Long domainEnd;<a name="line.206"></a>
<FONT color="green">207</FONT>    <a name="line.207"></a>
<FONT color="green">208</FONT>        /** Cached domain range (for use by DomainInfo). */<a name="line.208"></a>
<FONT color="green">209</FONT>        private Range domainRange;<a name="line.209"></a>
<FONT color="green">210</FONT>    <a name="line.210"></a>
<FONT color="green">211</FONT>        // Cached values used for interface RangeInfo: (note minValue pinned at 0)<a name="line.211"></a>
<FONT color="green">212</FONT>        //   A single set of extrema covers the entire SeriesCollection<a name="line.212"></a>
<FONT color="green">213</FONT>    <a name="line.213"></a>
<FONT color="green">214</FONT>        /** The minimum value. */<a name="line.214"></a>
<FONT color="green">215</FONT>        private Float minValue = new Float(0.0f);<a name="line.215"></a>
<FONT color="green">216</FONT>    <a name="line.216"></a>
<FONT color="green">217</FONT>        /** The maximum value. */<a name="line.217"></a>
<FONT color="green">218</FONT>        private Float maxValue = null;<a name="line.218"></a>
<FONT color="green">219</FONT>    <a name="line.219"></a>
<FONT color="green">220</FONT>        /** The value range. */<a name="line.220"></a>
<FONT color="green">221</FONT>        private Range valueRange;  // autoinit's to null.<a name="line.221"></a>
<FONT color="green">222</FONT>    <a name="line.222"></a>
<FONT color="green">223</FONT>        /**<a name="line.223"></a>
<FONT color="green">224</FONT>         * Constructs a dataset with capacity for N series, tied to default<a name="line.224"></a>
<FONT color="green">225</FONT>         * timezone.<a name="line.225"></a>
<FONT color="green">226</FONT>         *<a name="line.226"></a>
<FONT color="green">227</FONT>         * @param nSeries the number of series to be accommodated.<a name="line.227"></a>
<FONT color="green">228</FONT>         * @param nMoments the number of TimePeriods to be spanned.<a name="line.228"></a>
<FONT color="green">229</FONT>         */<a name="line.229"></a>
<FONT color="green">230</FONT>        public DynamicTimeSeriesCollection(int nSeries, int nMoments) {<a name="line.230"></a>
<FONT color="green">231</FONT>    <a name="line.231"></a>
<FONT color="green">232</FONT>            this(nSeries, nMoments, new Millisecond(), TimeZone.getDefault());<a name="line.232"></a>
<FONT color="green">233</FONT>            this.newestAt = nMoments - 1;<a name="line.233"></a>
<FONT color="green">234</FONT>    <a name="line.234"></a>
<FONT color="green">235</FONT>        }<a name="line.235"></a>
<FONT color="green">236</FONT>    <a name="line.236"></a>
<FONT color="green">237</FONT>        /**<a name="line.237"></a>
<FONT color="green">238</FONT>         * Constructs an empty dataset, tied to a specific timezone.<a name="line.238"></a>
<FONT color="green">239</FONT>         *<a name="line.239"></a>
<FONT color="green">240</FONT>         * @param nSeries the number of series to be accommodated<a name="line.240"></a>
<FONT color="green">241</FONT>         * @param nMoments the number of TimePeriods to be spanned<a name="line.241"></a>
<FONT color="green">242</FONT>         * @param zone the timezone.<a name="line.242"></a>
<FONT color="green">243</FONT>         */<a name="line.243"></a>
<FONT color="green">244</FONT>        public DynamicTimeSeriesCollection(int nSeries, int nMoments,<a name="line.244"></a>
<FONT color="green">245</FONT>                                           TimeZone zone) {<a name="line.245"></a>
<FONT color="green">246</FONT>            this(nSeries, nMoments, new Millisecond(), zone);<a name="line.246"></a>
<FONT color="green">247</FONT>            this.newestAt = nMoments - 1;<a name="line.247"></a>
<FONT color="green">248</FONT>        }<a name="line.248"></a>
<FONT color="green">249</FONT>    <a name="line.249"></a>
<FONT color="green">250</FONT>        /**<a name="line.250"></a>
<FONT color="green">251</FONT>         * Creates a new dataset.<a name="line.251"></a>
<FONT color="green">252</FONT>         *<a name="line.252"></a>
<FONT color="green">253</FONT>         * @param nSeries  the number of series.<a name="line.253"></a>
<FONT color="green">254</FONT>         * @param nMoments  the number of items per series.<a name="line.254"></a>
<FONT color="green">255</FONT>         * @param timeSample  a time period sample.<a name="line.255"></a>
<FONT color="green">256</FONT>         */<a name="line.256"></a>
<FONT color="green">257</FONT>        public DynamicTimeSeriesCollection(int nSeries,<a name="line.257"></a>
<FONT color="green">258</FONT>                                           int nMoments,<a name="line.258"></a>
<FONT color="green">259</FONT>                                           RegularTimePeriod timeSample) {<a name="line.259"></a>
<FONT color="green">260</FONT>            this(nSeries, nMoments, timeSample, TimeZone.getDefault());<a name="line.260"></a>
<FONT color="green">261</FONT>        }<a name="line.261"></a>
<FONT color="green">262</FONT>    <a name="line.262"></a>
<FONT color="green">263</FONT>        /**<a name="line.263"></a>
<FONT color="green">264</FONT>         * Creates a new dataset.<a name="line.264"></a>
<FONT color="green">265</FONT>         *<a name="line.265"></a>
<FONT color="green">266</FONT>         * @param nSeries  the number of series.<a name="line.266"></a>
<FONT color="green">267</FONT>         * @param nMoments  the number of items per series.<a name="line.267"></a>
<FONT color="green">268</FONT>         * @param timeSample  a time period sample.<a name="line.268"></a>
<FONT color="green">269</FONT>         * @param zone  the time zone.<a name="line.269"></a>
<FONT color="green">270</FONT>         */<a name="line.270"></a>
<FONT color="green">271</FONT>        public DynamicTimeSeriesCollection(int nSeries,<a name="line.271"></a>
<FONT color="green">272</FONT>                                           int nMoments,<a name="line.272"></a>
<FONT color="green">273</FONT>                                           RegularTimePeriod timeSample,<a name="line.273"></a>
<FONT color="green">274</FONT>                                           TimeZone zone) {<a name="line.274"></a>
<FONT color="green">275</FONT>    <a name="line.275"></a>
<FONT color="green">276</FONT>            // the first initialization must precede creation of the ValueSet array:<a name="line.276"></a>
<FONT color="green">277</FONT>            this.maximumItemCount = nMoments;  // establishes length of each array<a name="line.277"></a>
<FONT color="green">278</FONT>            this.historyCount = nMoments;<a name="line.278"></a>
<FONT color="green">279</FONT>            this.seriesKeys = new Comparable[nSeries];<a name="line.279"></a>
<FONT color="green">280</FONT>            // initialize the members of "seriesNames" array so they won't be null:<a name="line.280"></a>
<FONT color="green">281</FONT>            for (int i = 0; i &lt; nSeries; i++) {<a name="line.281"></a>
<FONT color="green">282</FONT>                this.seriesKeys[i] = "";<a name="line.282"></a>
<FONT color="green">283</FONT>            }<a name="line.283"></a>
<FONT color="green">284</FONT>            this.newestAt = nMoments - 1;<a name="line.284"></a>
<FONT color="green">285</FONT>            this.valueHistory = new ValueSequence[nSeries];<a name="line.285"></a>
<FONT color="green">286</FONT>            this.timePeriodClass = timeSample.getClass();<a name="line.286"></a>
<FONT color="green">287</FONT>    <a name="line.287"></a>
<FONT color="green">288</FONT>            /// Expand the following for all defined TimePeriods:<a name="line.288"></a>
<FONT color="green">289</FONT>            if (this.timePeriodClass == Second.class) {<a name="line.289"></a>
<FONT color="green">290</FONT>                this.pointsInTime = new Second[nMoments];<a name="line.290"></a>
<FONT color="green">291</FONT>            }<a name="line.291"></a>
<FONT color="green">292</FONT>            else if (this.timePeriodClass == Minute.class) {<a name="line.292"></a>
<FONT color="green">293</FONT>                this.pointsInTime = new Minute[nMoments];<a name="line.293"></a>
<FONT color="green">294</FONT>            }<a name="line.294"></a>
<FONT color="green">295</FONT>            else if (this.timePeriodClass == Hour.class) {<a name="line.295"></a>
<FONT color="green">296</FONT>                this.pointsInTime = new Hour[nMoments];<a name="line.296"></a>
<FONT color="green">297</FONT>            }<a name="line.297"></a>
<FONT color="green">298</FONT>            ///  .. etc....<a name="line.298"></a>
<FONT color="green">299</FONT>            this.workingCalendar = Calendar.getInstance(zone);<a name="line.299"></a>
<FONT color="green">300</FONT>            this.position = START;<a name="line.300"></a>
<FONT color="green">301</FONT>            this.domainIsPointsInTime = true;<a name="line.301"></a>
<FONT color="green">302</FONT>        }<a name="line.302"></a>
<FONT color="green">303</FONT>    <a name="line.303"></a>
<FONT color="green">304</FONT>        /**<a name="line.304"></a>
<FONT color="green">305</FONT>         * Fill the pointsInTime with times using TimePeriod.next():<a name="line.305"></a>
<FONT color="green">306</FONT>         * Will silently return if the time array was already populated.<a name="line.306"></a>
<FONT color="green">307</FONT>         *<a name="line.307"></a>
<FONT color="green">308</FONT>         * Also computes the data cached for later use by<a name="line.308"></a>
<FONT color="green">309</FONT>         * methods implementing the DomainInfo interface:<a name="line.309"></a>
<FONT color="green">310</FONT>         *<a name="line.310"></a>
<FONT color="green">311</FONT>         * @param start  the start.<a name="line.311"></a>
<FONT color="green">312</FONT>         *<a name="line.312"></a>
<FONT color="green">313</FONT>         * @return ??.<a name="line.313"></a>
<FONT color="green">314</FONT>         */<a name="line.314"></a>
<FONT color="green">315</FONT>        public synchronized long setTimeBase(RegularTimePeriod start) {<a name="line.315"></a>
<FONT color="green">316</FONT>    <a name="line.316"></a>
<FONT color="green">317</FONT>            if (this.pointsInTime[0] == null) {<a name="line.317"></a>
<FONT color="green">318</FONT>                this.pointsInTime[0] = start;<a name="line.318"></a>
<FONT color="green">319</FONT>                for (int i = 1; i &lt; this.historyCount; i++) {<a name="line.319"></a>
<FONT color="green">320</FONT>                    this.pointsInTime[i] = this.pointsInTime[i - 1].next();<a name="line.320"></a>
<FONT color="green">321</FONT>                }<a name="line.321"></a>
<FONT color="green">322</FONT>            }<a name="line.322"></a>
<FONT color="green">323</FONT>            long oldestL = this.pointsInTime[0].getFirstMillisecond(<a name="line.323"></a>
<FONT color="green">324</FONT>                this.workingCalendar<a name="line.324"></a>
<FONT color="green">325</FONT>            );<a name="line.325"></a>
<FONT color="green">326</FONT>            long nextL = this.pointsInTime[1].getFirstMillisecond(<a name="line.326"></a>
<FONT color="green">327</FONT>                this.workingCalendar<a name="line.327"></a>
<FONT color="green">328</FONT>            );<a name="line.328"></a>
<FONT color="green">329</FONT>            this.deltaTime = nextL - oldestL;<a name="line.329"></a>
<FONT color="green">330</FONT>            this.oldestAt = 0;<a name="line.330"></a>
<FONT color="green">331</FONT>            this.newestAt = this.historyCount - 1;<a name="line.331"></a>
<FONT color="green">332</FONT>            findDomainLimits();<a name="line.332"></a>
<FONT color="green">333</FONT>            return this.deltaTime;<a name="line.333"></a>
<FONT color="green">334</FONT>    <a name="line.334"></a>
<FONT color="green">335</FONT>        }<a name="line.335"></a>
<FONT color="green">336</FONT>    <a name="line.336"></a>
<FONT color="green">337</FONT>        /**<a name="line.337"></a>
<FONT color="green">338</FONT>         * Finds the domain limits.  Note: this doesn't need to be synchronized<a name="line.338"></a>
<FONT color="green">339</FONT>         * because it's called from within another method that already is.<a name="line.339"></a>
<FONT color="green">340</FONT>         */<a name="line.340"></a>
<FONT color="green">341</FONT>        protected void findDomainLimits() {<a name="line.341"></a>
<FONT color="green">342</FONT>    <a name="line.342"></a>
<FONT color="green">343</FONT>            long startL = getOldestTime().getFirstMillisecond(this.workingCalendar);<a name="line.343"></a>
<FONT color="green">344</FONT>            long endL;<a name="line.344"></a>
<FONT color="green">345</FONT>            if (this.domainIsPointsInTime) {<a name="line.345"></a>
<FONT color="green">346</FONT>                endL = getNewestTime().getFirstMillisecond(this.workingCalendar);<a name="line.346"></a>
<FONT color="green">347</FONT>            }<a name="line.347"></a>
<FONT color="green">348</FONT>            else {<a name="line.348"></a>
<FONT color="green">349</FONT>                endL = getNewestTime().getLastMillisecond(this.workingCalendar);<a name="line.349"></a>
<FONT color="green">350</FONT>            }<a name="line.350"></a>
<FONT color="green">351</FONT>            this.domainStart = new Long(startL);<a name="line.351"></a>
<FONT color="green">352</FONT>            this.domainEnd = new Long(endL);<a name="line.352"></a>
<FONT color="green">353</FONT>            this.domainRange = new Range(startL, endL);<a name="line.353"></a>
<FONT color="green">354</FONT>    <a name="line.354"></a>
<FONT color="green">355</FONT>        }<a name="line.355"></a>
<FONT color="green">356</FONT>    <a name="line.356"></a>
<FONT color="green">357</FONT>        /**<a name="line.357"></a>
<FONT color="green">358</FONT>         * Returns the x position type (START, MIDDLE or END).<a name="line.358"></a>
<FONT color="green">359</FONT>         *<a name="line.359"></a>
<FONT color="green">360</FONT>         * @return The x position type.<a name="line.360"></a>
<FONT color="green">361</FONT>         */<a name="line.361"></a>
<FONT color="green">362</FONT>        public int getPosition() {<a name="line.362"></a>
<FONT color="green">363</FONT>            return this.position;<a name="line.363"></a>
<FONT color="green">364</FONT>        }<a name="line.364"></a>
<FONT color="green">365</FONT>    <a name="line.365"></a>
<FONT color="green">366</FONT>        /**<a name="line.366"></a>
<FONT color="green">367</FONT>         * Sets the x position type (START, MIDDLE or END).<a name="line.367"></a>
<FONT color="green">368</FONT>         *<a name="line.368"></a>
<FONT color="green">369</FONT>         * @param position The x position type.<a name="line.369"></a>
<FONT color="green">370</FONT>         */<a name="line.370"></a>
<FONT color="green">371</FONT>        public void setPosition(int position) {<a name="line.371"></a>
<FONT color="green">372</FONT>            this.position = position;<a name="line.372"></a>
<FONT color="green">373</FONT>        }<a name="line.373"></a>
<FONT color="green">374</FONT>    <a name="line.374"></a>
<FONT color="green">375</FONT>        /**<a name="line.375"></a>
<FONT color="green">376</FONT>         * Adds a series to the dataset.  Only the y-values are supplied, the<a name="line.376"></a>
<FONT color="green">377</FONT>         * x-values are specified elsewhere.<a name="line.377"></a>
<FONT color="green">378</FONT>         *<a name="line.378"></a>
<FONT color="green">379</FONT>         * @param values  the y-values.<a name="line.379"></a>
<FONT color="green">380</FONT>         * @param seriesNumber  the series index (zero-based).<a name="line.380"></a>
<FONT color="green">381</FONT>         * @param seriesKey  the series key.<a name="line.381"></a>
<FONT color="green">382</FONT>         *<a name="line.382"></a>
<FONT color="green">383</FONT>         * Use this as-is during setup only, or add the synchronized keyword around<a name="line.383"></a>
<FONT color="green">384</FONT>         * the copy loop.<a name="line.384"></a>
<FONT color="green">385</FONT>         */<a name="line.385"></a>
<FONT color="green">386</FONT>        public void addSeries(float[] values,<a name="line.386"></a>
<FONT color="green">387</FONT>                              int seriesNumber, Comparable seriesKey) {<a name="line.387"></a>
<FONT color="green">388</FONT>    <a name="line.388"></a>
<FONT color="green">389</FONT>            invalidateRangeInfo();<a name="line.389"></a>
<FONT color="green">390</FONT>            int i;<a name="line.390"></a>
<FONT color="green">391</FONT>            if (values == null) {<a name="line.391"></a>
<FONT color="green">392</FONT>                throw new IllegalArgumentException("TimeSeriesDataset.addSeries(): "<a name="line.392"></a>
<FONT color="green">393</FONT>                    + "cannot add null array of values.");<a name="line.393"></a>
<FONT color="green">394</FONT>            }<a name="line.394"></a>
<FONT color="green">395</FONT>            if (seriesNumber &gt;= this.valueHistory.length) {<a name="line.395"></a>
<FONT color="green">396</FONT>                throw new IllegalArgumentException("TimeSeriesDataset.addSeries(): "<a name="line.396"></a>
<FONT color="green">397</FONT>                    + "cannot add more series than specified in c'tor");<a name="line.397"></a>
<FONT color="green">398</FONT>            }<a name="line.398"></a>
<FONT color="green">399</FONT>            if (this.valueHistory[seriesNumber] == null) {<a name="line.399"></a>
<FONT color="green">400</FONT>                this.valueHistory[seriesNumber]<a name="line.400"></a>
<FONT color="green">401</FONT>                    = new ValueSequence(this.historyCount);<a name="line.401"></a>
<FONT color="green">402</FONT>                this.seriesCount++;<a name="line.402"></a>
<FONT color="green">403</FONT>            }<a name="line.403"></a>
<FONT color="green">404</FONT>            // But if that series array already exists, just overwrite its contents<a name="line.404"></a>
<FONT color="green">405</FONT>    <a name="line.405"></a>
<FONT color="green">406</FONT>            // Avoid IndexOutOfBoundsException:<a name="line.406"></a>
<FONT color="green">407</FONT>            int srcLength = values.length;<a name="line.407"></a>
<FONT color="green">408</FONT>            int copyLength = this.historyCount;<a name="line.408"></a>
<FONT color="green">409</FONT>            boolean fillNeeded = false;<a name="line.409"></a>
<FONT color="green">410</FONT>            if (srcLength &lt; this.historyCount) {<a name="line.410"></a>
<FONT color="green">411</FONT>                fillNeeded = true;<a name="line.411"></a>
<FONT color="green">412</FONT>                copyLength = srcLength;<a name="line.412"></a>
<FONT color="green">413</FONT>            }<a name="line.413"></a>
<FONT color="green">414</FONT>            //{<a name="line.414"></a>
<FONT color="green">415</FONT>            for (i = 0; i &lt; copyLength; i++) { // deep copy from values[], caller<a name="line.415"></a>
<FONT color="green">416</FONT>                                               // can safely discard that array<a name="line.416"></a>
<FONT color="green">417</FONT>                this.valueHistory[seriesNumber].enterData(i, values[i]);<a name="line.417"></a>
<FONT color="green">418</FONT>            }<a name="line.418"></a>
<FONT color="green">419</FONT>            if (fillNeeded) {<a name="line.419"></a>
<FONT color="green">420</FONT>                for (i = copyLength; i &lt; this.historyCount; i++) {<a name="line.420"></a>
<FONT color="green">421</FONT>                    this.valueHistory[seriesNumber].enterData(i, 0.0f);<a name="line.421"></a>
<FONT color="green">422</FONT>                }<a name="line.422"></a>
<FONT color="green">423</FONT>            }<a name="line.423"></a>
<FONT color="green">424</FONT>          //}<a name="line.424"></a>
<FONT color="green">425</FONT>            if (seriesKey != null) {<a name="line.425"></a>
<FONT color="green">426</FONT>                this.seriesKeys[seriesNumber] = seriesKey;<a name="line.426"></a>
<FONT color="green">427</FONT>            }<a name="line.427"></a>
<FONT color="green">428</FONT>            fireSeriesChanged();<a name="line.428"></a>
<FONT color="green">429</FONT>    <a name="line.429"></a>
<FONT color="green">430</FONT>        }<a name="line.430"></a>
<FONT color="green">431</FONT>    <a name="line.431"></a>
<FONT color="green">432</FONT>        /**<a name="line.432"></a>
<FONT color="green">433</FONT>         * Sets the name of a series.  If planning to add values individually.<a name="line.433"></a>
<FONT color="green">434</FONT>         *<a name="line.434"></a>
<FONT color="green">435</FONT>         * @param seriesNumber  the series.<a name="line.435"></a>
<FONT color="green">436</FONT>         * @param key  the new key.<a name="line.436"></a>
<FONT color="green">437</FONT>         */<a name="line.437"></a>
<FONT color="green">438</FONT>        public void setSeriesKey(int seriesNumber, Comparable key) {<a name="line.438"></a>
<FONT color="green">439</FONT>            this.seriesKeys[seriesNumber] = key;<a name="line.439"></a>
<FONT color="green">440</FONT>        }<a name="line.440"></a>
<FONT color="green">441</FONT>    <a name="line.441"></a>
<FONT color="green">442</FONT>        /**<a name="line.442"></a>
<FONT color="green">443</FONT>         * Adds a value to a series.<a name="line.443"></a>
<FONT color="green">444</FONT>         *<a name="line.444"></a>
<FONT color="green">445</FONT>         * @param seriesNumber  the series index.<a name="line.445"></a>
<FONT color="green">446</FONT>         * @param index  ??.<a name="line.446"></a>
<FONT color="green">447</FONT>         * @param value  the value.<a name="line.447"></a>
<FONT color="green">448</FONT>         */<a name="line.448"></a>
<FONT color="green">449</FONT>        public void addValue(int seriesNumber, int index, float value) {<a name="line.449"></a>
<FONT color="green">450</FONT>    <a name="line.450"></a>
<FONT color="green">451</FONT>            invalidateRangeInfo();<a name="line.451"></a>
<FONT color="green">452</FONT>            if (seriesNumber &gt;= this.valueHistory.length) {<a name="line.452"></a>
<FONT color="green">453</FONT>                throw new IllegalArgumentException(<a name="line.453"></a>
<FONT color="green">454</FONT>                    "TimeSeriesDataset.addValue(): series #"<a name="line.454"></a>
<FONT color="green">455</FONT>                    + seriesNumber + "unspecified in c'tor"<a name="line.455"></a>
<FONT color="green">456</FONT>                );<a name="line.456"></a>
<FONT color="green">457</FONT>            }<a name="line.457"></a>
<FONT color="green">458</FONT>            if (this.valueHistory[seriesNumber] == null) {<a name="line.458"></a>
<FONT color="green">459</FONT>                this.valueHistory[seriesNumber]<a name="line.459"></a>
<FONT color="green">460</FONT>                    = new ValueSequence(this.historyCount);<a name="line.460"></a>
<FONT color="green">461</FONT>                this.seriesCount++;<a name="line.461"></a>
<FONT color="green">462</FONT>            }<a name="line.462"></a>
<FONT color="green">463</FONT>            // But if that series array already exists, just overwrite its contents<a name="line.463"></a>
<FONT color="green">464</FONT>            //synchronized(this)<a name="line.464"></a>
<FONT color="green">465</FONT>            //{<a name="line.465"></a>
<FONT color="green">466</FONT>                this.valueHistory[seriesNumber].enterData(index, value);<a name="line.466"></a>
<FONT color="green">467</FONT>            //}<a name="line.467"></a>
<FONT color="green">468</FONT>            fireSeriesChanged();<a name="line.468"></a>
<FONT color="green">469</FONT>        }<a name="line.469"></a>
<FONT color="green">470</FONT>    <a name="line.470"></a>
<FONT color="green">471</FONT>        /**<a name="line.471"></a>
<FONT color="green">472</FONT>         * Returns the number of series in the collection.<a name="line.472"></a>
<FONT color="green">473</FONT>         *<a name="line.473"></a>
<FONT color="green">474</FONT>         * @return The series count.<a name="line.474"></a>
<FONT color="green">475</FONT>         */<a name="line.475"></a>
<FONT color="green">476</FONT>        public int getSeriesCount() {<a name="line.476"></a>
<FONT color="green">477</FONT>            return this.seriesCount;<a name="line.477"></a>
<FONT color="green">478</FONT>        }<a name="line.478"></a>
<FONT color="green">479</FONT>    <a name="line.479"></a>
<FONT color="green">480</FONT>        /**<a name="line.480"></a>
<FONT color="green">481</FONT>         * Returns the number of items in a series.<a name="line.481"></a>
<FONT color="green">482</FONT>         * &lt;p&gt;<a name="line.482"></a>
<FONT color="green">483</FONT>         * For this implementation, all series have the same number of items.<a name="line.483"></a>
<FONT color="green">484</FONT>         *<a name="line.484"></a>
<FONT color="green">485</FONT>         * @param series  the series index (zero-based).<a name="line.485"></a>
<FONT color="green">486</FONT>         *<a name="line.486"></a>
<FONT color="green">487</FONT>         * @return The item count.<a name="line.487"></a>
<FONT color="green">488</FONT>         */<a name="line.488"></a>
<FONT color="green">489</FONT>        public int getItemCount(int series) {  // all arrays equal length,<a name="line.489"></a>
<FONT color="green">490</FONT>                                               // so ignore argument:<a name="line.490"></a>
<FONT color="green">491</FONT>            return this.historyCount;<a name="line.491"></a>
<FONT color="green">492</FONT>        }<a name="line.492"></a>
<FONT color="green">493</FONT>    <a name="line.493"></a>
<FONT color="green">494</FONT>        // Methods for managing the FIFO's:<a name="line.494"></a>
<FONT color="green">495</FONT>    <a name="line.495"></a>
<FONT color="green">496</FONT>        /**<a name="line.496"></a>
<FONT color="green">497</FONT>         * Re-map an index, for use in retrieving data.<a name="line.497"></a>
<FONT color="green">498</FONT>         *<a name="line.498"></a>
<FONT color="green">499</FONT>         * @param toFetch  the index.<a name="line.499"></a>
<FONT color="green">500</FONT>         *<a name="line.500"></a>
<FONT color="green">501</FONT>         * @return The translated index.<a name="line.501"></a>
<FONT color="green">502</FONT>         */<a name="line.502"></a>
<FONT color="green">503</FONT>        protected int translateGet(int toFetch) {<a name="line.503"></a>
<FONT color="green">504</FONT>            if (this.oldestAt == 0) {<a name="line.504"></a>
<FONT color="green">505</FONT>                return toFetch;  // no translation needed<a name="line.505"></a>
<FONT color="green">506</FONT>            }<a name="line.506"></a>
<FONT color="green">507</FONT>            // else  [implicit here]<a name="line.507"></a>
<FONT color="green">508</FONT>            int newIndex = toFetch + this.oldestAt;<a name="line.508"></a>
<FONT color="green">509</FONT>            if (newIndex &gt;= this.historyCount) {<a name="line.509"></a>
<FONT color="green">510</FONT>                newIndex -= this.historyCount;<a name="line.510"></a>
<FONT color="green">511</FONT>            }<a name="line.511"></a>
<FONT color="green">512</FONT>            return newIndex;<a name="line.512"></a>
<FONT color="green">513</FONT>        }<a name="line.513"></a>
<FONT color="green">514</FONT>    <a name="line.514"></a>
<FONT color="green">515</FONT>        /**<a name="line.515"></a>
<FONT color="green">516</FONT>         * Returns the actual index to a time offset by "delta" from newestAt.<a name="line.516"></a>
<FONT color="green">517</FONT>         *<a name="line.517"></a>
<FONT color="green">518</FONT>         * @param delta  the delta.<a name="line.518"></a>
<FONT color="green">519</FONT>         *<a name="line.519"></a>
<FONT color="green">520</FONT>         * @return The offset.<a name="line.520"></a>
<FONT color="green">521</FONT>         */<a name="line.521"></a>
<FONT color="green">522</FONT>        public int offsetFromNewest(int delta) {<a name="line.522"></a>
<FONT color="green">523</FONT>            return wrapOffset(this.newestAt + delta);<a name="line.523"></a>
<FONT color="green">524</FONT>        }<a name="line.524"></a>
<FONT color="green">525</FONT>    <a name="line.525"></a>
<FONT color="green">526</FONT>        /**<a name="line.526"></a>
<FONT color="green">527</FONT>         * ??<a name="line.527"></a>
<FONT color="green">528</FONT>         *<a name="line.528"></a>
<FONT color="green">529</FONT>         * @param delta ??<a name="line.529"></a>
<FONT color="green">530</FONT>         *<a name="line.530"></a>
<FONT color="green">531</FONT>         * @return The offset.<a name="line.531"></a>
<FONT color="green">532</FONT>         */<a name="line.532"></a>
<FONT color="green">533</FONT>        public int offsetFromOldest(int delta) {<a name="line.533"></a>
<FONT color="green">534</FONT>            return wrapOffset(this.oldestAt + delta);<a name="line.534"></a>
<FONT color="green">535</FONT>        }<a name="line.535"></a>
<FONT color="green">536</FONT>    <a name="line.536"></a>
<FONT color="green">537</FONT>        /**<a name="line.537"></a>
<FONT color="green">538</FONT>         * ??<a name="line.538"></a>
<FONT color="green">539</FONT>         *<a name="line.539"></a>
<FONT color="green">540</FONT>         * @param protoIndex  the index.<a name="line.540"></a>
<FONT color="green">541</FONT>         *<a name="line.541"></a>
<FONT color="green">542</FONT>         * @return The offset.<a name="line.542"></a>
<FONT color="green">543</FONT>         */<a name="line.543"></a>
<FONT color="green">544</FONT>        protected int wrapOffset(int protoIndex) {<a name="line.544"></a>
<FONT color="green">545</FONT>            int tmp = protoIndex;<a name="line.545"></a>
<FONT color="green">546</FONT>            if (tmp &gt;= this.historyCount) {<a name="line.546"></a>
<FONT color="green">547</FONT>                tmp -= this.historyCount;<a name="line.547"></a>
<FONT color="green">548</FONT>            }<a name="line.548"></a>
<FONT color="green">549</FONT>            else if (tmp &lt; 0) {<a name="line.549"></a>
<FONT color="green">550</FONT>                tmp += this.historyCount;<a name="line.550"></a>
<FONT color="green">551</FONT>            }<a name="line.551"></a>
<FONT color="green">552</FONT>            return tmp;<a name="line.552"></a>
<FONT color="green">553</FONT>        }<a name="line.553"></a>
<FONT color="green">554</FONT>    <a name="line.554"></a>
<FONT color="green">555</FONT>        /**<a name="line.555"></a>
<FONT color="green">556</FONT>         * Adjust the array offset as needed when a new time-period is added:<a name="line.556"></a>
<FONT color="green">557</FONT>         * Increments the indices "oldestAt" and "newestAt", mod(array length),<a name="line.557"></a>
<FONT color="green">558</FONT>         * zeroes the series values at newestAt, returns the new TimePeriod.<a name="line.558"></a>
<FONT color="green">559</FONT>         *<a name="line.559"></a>
<FONT color="green">560</FONT>         * @return The new time period.<a name="line.560"></a>
<FONT color="green">561</FONT>         */<a name="line.561"></a>
<FONT color="green">562</FONT>        public synchronized RegularTimePeriod advanceTime() {<a name="line.562"></a>
<FONT color="green">563</FONT>            RegularTimePeriod nextInstant = this.pointsInTime[this.newestAt].next();<a name="line.563"></a>
<FONT color="green">564</FONT>            this.newestAt = this.oldestAt;  // newestAt takes value previously held<a name="line.564"></a>
<FONT color="green">565</FONT>                                            // by oldestAT<a name="line.565"></a>
<FONT color="green">566</FONT>            /***<a name="line.566"></a>
<FONT color="green">567</FONT>             * The next 10 lines or so should be expanded if data can be negative<a name="line.567"></a>
<FONT color="green">568</FONT>             ***/<a name="line.568"></a>
<FONT color="green">569</FONT>            // if the oldest data contained a maximum Y-value, invalidate the stored<a name="line.569"></a>
<FONT color="green">570</FONT>            //   Y-max and Y-range data:<a name="line.570"></a>
<FONT color="green">571</FONT>            boolean extremaChanged = false;<a name="line.571"></a>
<FONT color="green">572</FONT>            float oldMax = 0.0f;<a name="line.572"></a>
<FONT color="green">573</FONT>            if (this.maxValue != null) {<a name="line.573"></a>
<FONT color="green">574</FONT>                oldMax = this.maxValue.floatValue();<a name="line.574"></a>
<FONT color="green">575</FONT>            }<a name="line.575"></a>
<FONT color="green">576</FONT>            for (int s = 0; s &lt; getSeriesCount(); s++) {<a name="line.576"></a>
<FONT color="green">577</FONT>                if (this.valueHistory[s].getData(this.oldestAt) == oldMax) {<a name="line.577"></a>
<FONT color="green">578</FONT>                    extremaChanged = true;<a name="line.578"></a>
<FONT color="green">579</FONT>                }<a name="line.579"></a>
<FONT color="green">580</FONT>                if (extremaChanged) {<a name="line.580"></a>
<FONT color="green">581</FONT>                    break;<a name="line.581"></a>
<FONT color="green">582</FONT>                }<a name="line.582"></a>
<FONT color="green">583</FONT>            }  /*** If data can be &lt; 0, add code here to check the minimum    **/<a name="line.583"></a>
<FONT color="green">584</FONT>            if (extremaChanged) {<a name="line.584"></a>
<FONT color="green">585</FONT>                invalidateRangeInfo();<a name="line.585"></a>
<FONT color="green">586</FONT>            }<a name="line.586"></a>
<FONT color="green">587</FONT>            //  wipe the next (about to be used) set of data slots<a name="line.587"></a>
<FONT color="green">588</FONT>            float wiper = (float) 0.0;<a name="line.588"></a>
<FONT color="green">589</FONT>            for (int s = 0; s &lt; getSeriesCount(); s++) {<a name="line.589"></a>
<FONT color="green">590</FONT>                this.valueHistory[s].enterData(this.newestAt, wiper);<a name="line.590"></a>
<FONT color="green">591</FONT>            }<a name="line.591"></a>
<FONT color="green">592</FONT>            // Update the array of TimePeriods:<a name="line.592"></a>
<FONT color="green">593</FONT>            this.pointsInTime[this.newestAt] = nextInstant;<a name="line.593"></a>
<FONT color="green">594</FONT>            // Now advance "oldestAt", wrapping at end of the array<a name="line.594"></a>
<FONT color="green">595</FONT>            this.oldestAt++;<a name="line.595"></a>
<FONT color="green">596</FONT>            if (this.oldestAt &gt;= this.historyCount) {<a name="line.596"></a>
<FONT color="green">597</FONT>                this.oldestAt = 0;<a name="line.597"></a>
<FONT color="green">598</FONT>            }<a name="line.598"></a>
<FONT color="green">599</FONT>            // Update the domain limits:<a name="line.599"></a>
<FONT color="green">600</FONT>            long startL = this.domainStart.longValue();  //(time is kept in msec)<a name="line.600"></a>
<FONT color="green">601</FONT>            this.domainStart = new Long(startL + this.deltaTime);<a name="line.601"></a>
<FONT color="green">602</FONT>            long endL = this.domainEnd.longValue();<a name="line.602"></a>
<FONT color="green">603</FONT>            this.domainEnd = new Long(endL + this.deltaTime);<a name="line.603"></a>
<FONT color="green">604</FONT>            this.domainRange = new Range(startL, endL);<a name="line.604"></a>
<FONT color="green">605</FONT>            fireSeriesChanged();<a name="line.605"></a>
<FONT color="green">606</FONT>            return nextInstant;<a name="line.606"></a>
<FONT color="green">607</FONT>        }<a name="line.607"></a>
<FONT color="green">608</FONT>    <a name="line.608"></a>
<FONT color="green">609</FONT>        //  If data can be &lt; 0, the next 2 methods should be modified<a name="line.609"></a>
<FONT color="green">610</FONT>    <a name="line.610"></a>
<FONT color="green">611</FONT>        /**<a name="line.611"></a>
<FONT color="green">612</FONT>         * Invalidates the range info.<a name="line.612"></a>
<FONT color="green">613</FONT>         */<a name="line.613"></a>
<FONT color="green">614</FONT>        public void invalidateRangeInfo() {<a name="line.614"></a>
<FONT color="green">615</FONT>            this.maxValue = null;<a name="line.615"></a>
<FONT color="green">616</FONT>            this.valueRange = null;<a name="line.616"></a>
<FONT color="green">617</FONT>        }<a name="line.617"></a>
<FONT color="green">618</FONT>    <a name="line.618"></a>
<FONT color="green">619</FONT>        /**<a name="line.619"></a>
<FONT color="green">620</FONT>         * Returns the maximum value.<a name="line.620"></a>
<FONT color="green">621</FONT>         *<a name="line.621"></a>
<FONT color="green">622</FONT>         * @return The maximum value.<a name="line.622"></a>
<FONT color="green">623</FONT>         */<a name="line.623"></a>
<FONT color="green">624</FONT>        protected double findMaxValue() {<a name="line.624"></a>
<FONT color="green">625</FONT>            double max = 0.0f;<a name="line.625"></a>
<FONT color="green">626</FONT>            for (int s = 0; s &lt; getSeriesCount(); s++) {<a name="line.626"></a>
<FONT color="green">627</FONT>                for (int i = 0; i &lt; this.historyCount; i++) {<a name="line.627"></a>
<FONT color="green">628</FONT>                    double tmp = getYValue(s, i);<a name="line.628"></a>
<FONT color="green">629</FONT>                    if (tmp &gt; max) {<a name="line.629"></a>
<FONT color="green">630</FONT>                        max = tmp;<a name="line.630"></a>
<FONT color="green">631</FONT>                    }<a name="line.631"></a>
<FONT color="green">632</FONT>                }<a name="line.632"></a>
<FONT color="green">633</FONT>            }<a name="line.633"></a>
<FONT color="green">634</FONT>            return max;<a name="line.634"></a>
<FONT color="green">635</FONT>        }<a name="line.635"></a>
<FONT color="green">636</FONT>    <a name="line.636"></a>
<FONT color="green">637</FONT>        /** End, positive-data-only code  **/<a name="line.637"></a>
<FONT color="green">638</FONT>    <a name="line.638"></a>
<FONT color="green">639</FONT>        /**<a name="line.639"></a>
<FONT color="green">640</FONT>         * Returns the index of the oldest data item.<a name="line.640"></a>
<FONT color="green">641</FONT>         *<a name="line.641"></a>
<FONT color="green">642</FONT>         * @return The index.<a name="line.642"></a>
<FONT color="green">643</FONT>         */<a name="line.643"></a>
<FONT color="green">644</FONT>        public int getOldestIndex() {<a name="line.644"></a>
<FONT color="green">645</FONT>            return this.oldestAt;<a name="line.645"></a>
<FONT color="green">646</FONT>        }<a name="line.646"></a>
<FONT color="green">647</FONT>    <a name="line.647"></a>
<FONT color="green">648</FONT>        /**<a name="line.648"></a>
<FONT color="green">649</FONT>         * Returns the index of the newest data item.<a name="line.649"></a>
<FONT color="green">650</FONT>         *<a name="line.650"></a>
<FONT color="green">651</FONT>         * @return The index.<a name="line.651"></a>
<FONT color="green">652</FONT>         */<a name="line.652"></a>
<FONT color="green">653</FONT>        public int getNewestIndex() {<a name="line.653"></a>
<FONT color="green">654</FONT>            return this.newestAt;<a name="line.654"></a>
<FONT color="green">655</FONT>        }<a name="line.655"></a>
<FONT color="green">656</FONT>    <a name="line.656"></a>
<FONT color="green">657</FONT>        // appendData() writes new data at the index position given by newestAt/<a name="line.657"></a>
<FONT color="green">658</FONT>        // When adding new data dynamically, use advanceTime(), followed by this:<a name="line.658"></a>
<FONT color="green">659</FONT>        /**<a name="line.659"></a>
<FONT color="green">660</FONT>         * Appends new data.<a name="line.660"></a>
<FONT color="green">661</FONT>         *<a name="line.661"></a>
<FONT color="green">662</FONT>         * @param newData  the data.<a name="line.662"></a>
<FONT color="green">663</FONT>         */<a name="line.663"></a>
<FONT color="green">664</FONT>        public void appendData(float[] newData) {<a name="line.664"></a>
<FONT color="green">665</FONT>            int nDataPoints = newData.length;<a name="line.665"></a>
<FONT color="green">666</FONT>            if (nDataPoints &gt; this.valueHistory.length) {<a name="line.666"></a>
<FONT color="green">667</FONT>                throw new IllegalArgumentException(<a name="line.667"></a>
<FONT color="green">668</FONT>                   "More data than series to put them in"<a name="line.668"></a>
<FONT color="green">669</FONT>                );<a name="line.669"></a>
<FONT color="green">670</FONT>            }<a name="line.670"></a>
<FONT color="green">671</FONT>            int s;   // index to select the "series"<a name="line.671"></a>
<FONT color="green">672</FONT>            for (s = 0; s &lt; nDataPoints; s++) {<a name="line.672"></a>
<FONT color="green">673</FONT>                // check whether the "valueHistory" array member exists; if not,<a name="line.673"></a>
<FONT color="green">674</FONT>                // create them:<a name="line.674"></a>
<FONT color="green">675</FONT>                if (this.valueHistory[s] == null) {<a name="line.675"></a>
<FONT color="green">676</FONT>                    this.valueHistory[s] = new ValueSequence(this.historyCount);<a name="line.676"></a>
<FONT color="green">677</FONT>                }<a name="line.677"></a>
<FONT color="green">678</FONT>                this.valueHistory[s].enterData(this.newestAt, newData[s]);<a name="line.678"></a>
<FONT color="green">679</FONT>            }<a name="line.679"></a>
<FONT color="green">680</FONT>            fireSeriesChanged();<a name="line.680"></a>
<FONT color="green">681</FONT>        }<a name="line.681"></a>
<FONT color="green">682</FONT>    <a name="line.682"></a>
<FONT color="green">683</FONT>        /**<a name="line.683"></a>
<FONT color="green">684</FONT>         * Appends data at specified index, for loading up with data from file(s).<a name="line.684"></a>
<FONT color="green">685</FONT>         *<a name="line.685"></a>
<FONT color="green">686</FONT>         * @param  newData  the data<a name="line.686"></a>
<FONT color="green">687</FONT>         * @param  insertionIndex  the index value at which to put it<a name="line.687"></a>
<FONT color="green">688</FONT>         * @param  refresh  value of n in "refresh the display on every nth call"<a name="line.688"></a>
<FONT color="green">689</FONT>         *                 (ignored if &lt;= 0 )<a name="line.689"></a>
<FONT color="green">690</FONT>         */<a name="line.690"></a>
<FONT color="green">691</FONT>         public void appendData(float[] newData, int insertionIndex, int refresh) {<a name="line.691"></a>
<FONT color="green">692</FONT>             int nDataPoints = newData.length;<a name="line.692"></a>
<FONT color="green">693</FONT>             if (nDataPoints &gt; this.valueHistory.length) {<a name="line.693"></a>
<FONT color="green">694</FONT>                 throw new IllegalArgumentException(<a name="line.694"></a>
<FONT color="green">695</FONT>                     "More data than series to put them " + "in"<a name="line.695"></a>
<FONT color="green">696</FONT>                 );<a name="line.696"></a>
<FONT color="green">697</FONT>             }<a name="line.697"></a>
<FONT color="green">698</FONT>             for (int s = 0; s &lt; nDataPoints; s++) {<a name="line.698"></a>
<FONT color="green">699</FONT>                 if (this.valueHistory[s] == null) {<a name="line.699"></a>
<FONT color="green">700</FONT>                    this.valueHistory[s] = new ValueSequence(this.historyCount);<a name="line.700"></a>
<FONT color="green">701</FONT>                 }<a name="line.701"></a>
<FONT color="green">702</FONT>                 this.valueHistory[s].enterData(insertionIndex, newData[s]);<a name="line.702"></a>
<FONT color="green">703</FONT>             }<a name="line.703"></a>
<FONT color="green">704</FONT>             if (refresh &gt; 0) {<a name="line.704"></a>
<FONT color="green">705</FONT>                 insertionIndex++;<a name="line.705"></a>
<FONT color="green">706</FONT>                 if (insertionIndex % refresh == 0) {<a name="line.706"></a>
<FONT color="green">707</FONT>                     fireSeriesChanged();<a name="line.707"></a>
<FONT color="green">708</FONT>                 }<a name="line.708"></a>
<FONT color="green">709</FONT>             }<a name="line.709"></a>
<FONT color="green">710</FONT>        }<a name="line.710"></a>
<FONT color="green">711</FONT>    <a name="line.711"></a>
<FONT color="green">712</FONT>        /**<a name="line.712"></a>
<FONT color="green">713</FONT>         * Returns the newest time.<a name="line.713"></a>
<FONT color="green">714</FONT>         *<a name="line.714"></a>
<FONT color="green">715</FONT>         * @return The newest time.<a name="line.715"></a>
<FONT color="green">716</FONT>         */<a name="line.716"></a>
<FONT color="green">717</FONT>        public RegularTimePeriod getNewestTime() {<a name="line.717"></a>
<FONT color="green">718</FONT>            return this.pointsInTime[this.newestAt];<a name="line.718"></a>
<FONT color="green">719</FONT>        }<a name="line.719"></a>
<FONT color="green">720</FONT>    <a name="line.720"></a>
<FONT color="green">721</FONT>        /**<a name="line.721"></a>
<FONT color="green">722</FONT>         * Returns the oldest time.<a name="line.722"></a>
<FONT color="green">723</FONT>         *<a name="line.723"></a>
<FONT color="green">724</FONT>         * @return The oldest time.<a name="line.724"></a>
<FONT color="green">725</FONT>         */<a name="line.725"></a>
<FONT color="green">726</FONT>        public RegularTimePeriod getOldestTime() {<a name="line.726"></a>
<FONT color="green">727</FONT>            return this.pointsInTime[this.oldestAt];<a name="line.727"></a>
<FONT color="green">728</FONT>        }<a name="line.728"></a>
<FONT color="green">729</FONT>    <a name="line.729"></a>
<FONT color="green">730</FONT>        /**<a name="line.730"></a>
<FONT color="green">731</FONT>         * Returns the x-value.<a name="line.731"></a>
<FONT color="green">732</FONT>         *<a name="line.732"></a>
<FONT color="green">733</FONT>         * @param series  the series index (zero-based).<a name="line.733"></a>
<FONT color="green">734</FONT>         * @param item  the item index (zero-based).<a name="line.734"></a>
<FONT color="green">735</FONT>         *<a name="line.735"></a>
<FONT color="green">736</FONT>         * @return The value.<a name="line.736"></a>
<FONT color="green">737</FONT>         */<a name="line.737"></a>
<FONT color="green">738</FONT>        // getXxx() ftns can ignore the "series" argument:<a name="line.738"></a>
<FONT color="green">739</FONT>        // Don't synchronize this!! Instead, synchronize the loop that calls it.<a name="line.739"></a>
<FONT color="green">740</FONT>        public Number getX(int series, int item) {<a name="line.740"></a>
<FONT color="green">741</FONT>            RegularTimePeriod tp = this.pointsInTime[translateGet(item)];<a name="line.741"></a>
<FONT color="green">742</FONT>            return new Long(getX(tp));<a name="line.742"></a>
<FONT color="green">743</FONT>        }<a name="line.743"></a>
<FONT color="green">744</FONT>    <a name="line.744"></a>
<FONT color="green">745</FONT>        /**<a name="line.745"></a>
<FONT color="green">746</FONT>         * Returns the y-value.<a name="line.746"></a>
<FONT color="green">747</FONT>         *<a name="line.747"></a>
<FONT color="green">748</FONT>         * @param series  the series index (zero-based).<a name="line.748"></a>
<FONT color="green">749</FONT>         * @param item  the item index (zero-based).<a name="line.749"></a>
<FONT color="green">750</FONT>         *<a name="line.750"></a>
<FONT color="green">751</FONT>         * @return The value.<a name="line.751"></a>
<FONT color="green">752</FONT>         */<a name="line.752"></a>
<FONT color="green">753</FONT>        public double getYValue(int series, int item) {<a name="line.753"></a>
<FONT color="green">754</FONT>            // Don't synchronize this!!<a name="line.754"></a>
<FONT color="green">755</FONT>            // Instead, synchronize the loop that calls it.<a name="line.755"></a>
<FONT color="green">756</FONT>            ValueSequence values = this.valueHistory[series];<a name="line.756"></a>
<FONT color="green">757</FONT>            return values.getData(translateGet(item));<a name="line.757"></a>
<FONT color="green">758</FONT>        }<a name="line.758"></a>
<FONT color="green">759</FONT>    <a name="line.759"></a>
<FONT color="green">760</FONT>        /**<a name="line.760"></a>
<FONT color="green">761</FONT>         * Returns the y-value.<a name="line.761"></a>
<FONT color="green">762</FONT>         *<a name="line.762"></a>
<FONT color="green">763</FONT>         * @param series  the series index (zero-based).<a name="line.763"></a>
<FONT color="green">764</FONT>         * @param item  the item index (zero-based).<a name="line.764"></a>
<FONT color="green">765</FONT>         *<a name="line.765"></a>
<FONT color="green">766</FONT>         * @return The value.<a name="line.766"></a>
<FONT color="green">767</FONT>         */<a name="line.767"></a>
<FONT color="green">768</FONT>        public Number getY(int series, int item) {<a name="line.768"></a>
<FONT color="green">769</FONT>            return new Float(getYValue(series, item));<a name="line.769"></a>
<FONT color="green">770</FONT>        }<a name="line.770"></a>
<FONT color="green">771</FONT>    <a name="line.771"></a>
<FONT color="green">772</FONT>        /**<a name="line.772"></a>
<FONT color="green">773</FONT>         * Returns the start x-value.<a name="line.773"></a>
<FONT color="green">774</FONT>         *<a name="line.774"></a>
<FONT color="green">775</FONT>         * @param series  the series index (zero-based).<a name="line.775"></a>
<FONT color="green">776</FONT>         * @param item  the item index (zero-based).<a name="line.776"></a>
<FONT color="green">777</FONT>         *<a name="line.777"></a>
<FONT color="green">778</FONT>         * @return The value.<a name="line.778"></a>
<FONT color="green">779</FONT>         */<a name="line.779"></a>
<FONT color="green">780</FONT>        public Number getStartX(int series, int item) {<a name="line.780"></a>
<FONT color="green">781</FONT>            RegularTimePeriod tp = this.pointsInTime[translateGet(item)];<a name="line.781"></a>
<FONT color="green">782</FONT>            return new Long(tp.getFirstMillisecond(this.workingCalendar));<a name="line.782"></a>
<FONT color="green">783</FONT>        }<a name="line.783"></a>
<FONT color="green">784</FONT>    <a name="line.784"></a>
<FONT color="green">785</FONT>        /**<a name="line.785"></a>
<FONT color="green">786</FONT>         * Returns the end x-value.<a name="line.786"></a>
<FONT color="green">787</FONT>         *<a name="line.787"></a>
<FONT color="green">788</FONT>         * @param series  the series index (zero-based).<a name="line.788"></a>
<FONT color="green">789</FONT>         * @param item  the item index (zero-based).<a name="line.789"></a>
<FONT color="green">790</FONT>         *<a name="line.790"></a>
<FONT color="green">791</FONT>         * @return The value.<a name="line.791"></a>
<FONT color="green">792</FONT>         */<a name="line.792"></a>
<FONT color="green">793</FONT>        public Number getEndX(int series, int item) {<a name="line.793"></a>
<FONT color="green">794</FONT>            RegularTimePeriod tp = this.pointsInTime[translateGet(item)];<a name="line.794"></a>
<FONT color="green">795</FONT>            return new Long(tp.getLastMillisecond(this.workingCalendar));<a name="line.795"></a>
<FONT color="green">796</FONT>        }<a name="line.796"></a>
<FONT color="green">797</FONT>    <a name="line.797"></a>
<FONT color="green">798</FONT>        /**<a name="line.798"></a>
<FONT color="green">799</FONT>         * Returns the start y-value.<a name="line.799"></a>
<FONT color="green">800</FONT>         *<a name="line.800"></a>
<FONT color="green">801</FONT>         * @param series  the series index (zero-based).<a name="line.801"></a>
<FONT color="green">802</FONT>         * @param item  the item index (zero-based).<a name="line.802"></a>
<FONT color="green">803</FONT>         *<a name="line.803"></a>
<FONT color="green">804</FONT>         * @return The value.<a name="line.804"></a>
<FONT color="green">805</FONT>         */<a name="line.805"></a>
<FONT color="green">806</FONT>        public Number getStartY(int series, int item) {<a name="line.806"></a>
<FONT color="green">807</FONT>            return getY(series, item);<a name="line.807"></a>
<FONT color="green">808</FONT>        }<a name="line.808"></a>
<FONT color="green">809</FONT>    <a name="line.809"></a>
<FONT color="green">810</FONT>        /**<a name="line.810"></a>
<FONT color="green">811</FONT>         * Returns the end y-value.<a name="line.811"></a>
<FONT color="green">812</FONT>         *<a name="line.812"></a>
<FONT color="green">813</FONT>         * @param series  the series index (zero-based).<a name="line.813"></a>
<FONT color="green">814</FONT>         * @param item  the item index (zero-based).<a name="line.814"></a>
<FONT color="green">815</FONT>         *<a name="line.815"></a>
<FONT color="green">816</FONT>         * @return The value.<a name="line.816"></a>
<FONT color="green">817</FONT>         */<a name="line.817"></a>
<FONT color="green">818</FONT>        public Number getEndY(int series, int item) {<a name="line.818"></a>
<FONT color="green">819</FONT>            return getY(series, item);<a name="line.819"></a>
<FONT color="green">820</FONT>        }<a name="line.820"></a>
<FONT color="green">821</FONT>    <a name="line.821"></a>
<FONT color="green">822</FONT>        /* // "Extras" found useful when analyzing/verifying class behavior:<a name="line.822"></a>
<FONT color="green">823</FONT>        public Number getUntranslatedXValue(int series, int item)<a name="line.823"></a>
<FONT color="green">824</FONT>        {<a name="line.824"></a>
<FONT color="green">825</FONT>          return super.getXValue(series, item);<a name="line.825"></a>
<FONT color="green">826</FONT>        }<a name="line.826"></a>
<FONT color="green">827</FONT>    <a name="line.827"></a>
<FONT color="green">828</FONT>        public float getUntranslatedY(int series, int item)<a name="line.828"></a>
<FONT color="green">829</FONT>        {<a name="line.829"></a>
<FONT color="green">830</FONT>          return super.getY(series, item);<a name="line.830"></a>
<FONT color="green">831</FONT>        }  */<a name="line.831"></a>
<FONT color="green">832</FONT>    <a name="line.832"></a>
<FONT color="green">833</FONT>        /**<a name="line.833"></a>
<FONT color="green">834</FONT>         * Returns the key for a series.<a name="line.834"></a>
<FONT color="green">835</FONT>         *<a name="line.835"></a>
<FONT color="green">836</FONT>         * @param series  the series index (zero-based).<a name="line.836"></a>
<FONT color="green">837</FONT>         *<a name="line.837"></a>
<FONT color="green">838</FONT>         * @return The key.<a name="line.838"></a>
<FONT color="green">839</FONT>         */<a name="line.839"></a>
<FONT color="green">840</FONT>        public Comparable getSeriesKey(int series) {<a name="line.840"></a>
<FONT color="green">841</FONT>            return this.seriesKeys[series];<a name="line.841"></a>
<FONT color="green">842</FONT>        }<a name="line.842"></a>
<FONT color="green">843</FONT>    <a name="line.843"></a>
<FONT color="green">844</FONT>        /**<a name="line.844"></a>
<FONT color="green">845</FONT>         * Sends a {@link SeriesChangeEvent} to all registered listeners.<a name="line.845"></a>
<FONT color="green">846</FONT>         */<a name="line.846"></a>
<FONT color="green">847</FONT>        protected void fireSeriesChanged() {<a name="line.847"></a>
<FONT color="green">848</FONT>            seriesChanged(new SeriesChangeEvent(this));<a name="line.848"></a>
<FONT color="green">849</FONT>        }<a name="line.849"></a>
<FONT color="green">850</FONT>    <a name="line.850"></a>
<FONT color="green">851</FONT>        // The next 3 functions override the base-class implementation of<a name="line.851"></a>
<FONT color="green">852</FONT>        // the DomainInfo interface.  Using saved limits (updated by<a name="line.852"></a>
<FONT color="green">853</FONT>        // each updateTime() call), improves performance.<a name="line.853"></a>
<FONT color="green">854</FONT>        //<a name="line.854"></a>
<FONT color="green">855</FONT>    <a name="line.855"></a>
<FONT color="green">856</FONT>        /**<a name="line.856"></a>
<FONT color="green">857</FONT>         * Returns the minimum x-value in the dataset.<a name="line.857"></a>
<FONT color="green">858</FONT>         *<a name="line.858"></a>
<FONT color="green">859</FONT>         * @param includeInterval  a flag that determines whether or not the<a name="line.859"></a>
<FONT color="green">860</FONT>         *                         x-interval is taken into account.<a name="line.860"></a>
<FONT color="green">861</FONT>         *<a name="line.861"></a>
<FONT color="green">862</FONT>         * @return The minimum value.<a name="line.862"></a>
<FONT color="green">863</FONT>         */<a name="line.863"></a>
<FONT color="green">864</FONT>        public double getDomainLowerBound(boolean includeInterval) {<a name="line.864"></a>
<FONT color="green">865</FONT>            return this.domainStart.doubleValue();<a name="line.865"></a>
<FONT color="green">866</FONT>            // a Long kept updated by advanceTime()<a name="line.866"></a>
<FONT color="green">867</FONT>        }<a name="line.867"></a>
<FONT color="green">868</FONT>    <a name="line.868"></a>
<FONT color="green">869</FONT>        /**<a name="line.869"></a>
<FONT color="green">870</FONT>         * Returns the maximum x-value in the dataset.<a name="line.870"></a>
<FONT color="green">871</FONT>         *<a name="line.871"></a>
<FONT color="green">872</FONT>         * @param includeInterval  a flag that determines whether or not the<a name="line.872"></a>
<FONT color="green">873</FONT>         *                         x-interval is taken into account.<a name="line.873"></a>
<FONT color="green">874</FONT>         *<a name="line.874"></a>
<FONT color="green">875</FONT>         * @return The maximum value.<a name="line.875"></a>
<FONT color="green">876</FONT>         */<a name="line.876"></a>
<FONT color="green">877</FONT>        public double getDomainUpperBound(boolean includeInterval) {<a name="line.877"></a>
<FONT color="green">878</FONT>            return this.domainEnd.doubleValue();<a name="line.878"></a>
<FONT color="green">879</FONT>            // a Long kept updated by advanceTime()<a name="line.879"></a>
<FONT color="green">880</FONT>        }<a name="line.880"></a>
<FONT color="green">881</FONT>    <a name="line.881"></a>
<FONT color="green">882</FONT>        /**<a name="line.882"></a>
<FONT color="green">883</FONT>         * Returns the range of the values in this dataset's domain.<a name="line.883"></a>
<FONT color="green">884</FONT>         *<a name="line.884"></a>
<FONT color="green">885</FONT>         * @param includeInterval  a flag that determines whether or not the<a name="line.885"></a>
<FONT color="green">886</FONT>         *                         x-interval is taken into account.<a name="line.886"></a>
<FONT color="green">887</FONT>         *<a name="line.887"></a>
<FONT color="green">888</FONT>         * @return The range.<a name="line.888"></a>
<FONT color="green">889</FONT>         */<a name="line.889"></a>
<FONT color="green">890</FONT>        public Range getDomainBounds(boolean includeInterval) {<a name="line.890"></a>
<FONT color="green">891</FONT>            if (this.domainRange == null) {<a name="line.891"></a>
<FONT color="green">892</FONT>                findDomainLimits();<a name="line.892"></a>
<FONT color="green">893</FONT>            }<a name="line.893"></a>
<FONT color="green">894</FONT>            return this.domainRange;<a name="line.894"></a>
<FONT color="green">895</FONT>        }<a name="line.895"></a>
<FONT color="green">896</FONT>    <a name="line.896"></a>
<FONT color="green">897</FONT>        /**<a name="line.897"></a>
<FONT color="green">898</FONT>         * Returns the x-value for a time period.<a name="line.898"></a>
<FONT color="green">899</FONT>         *<a name="line.899"></a>
<FONT color="green">900</FONT>         * @param period  the period.<a name="line.900"></a>
<FONT color="green">901</FONT>         *<a name="line.901"></a>
<FONT color="green">902</FONT>         * @return The x-value.<a name="line.902"></a>
<FONT color="green">903</FONT>         */<a name="line.903"></a>
<FONT color="green">904</FONT>        private long getX(RegularTimePeriod period) {<a name="line.904"></a>
<FONT color="green">905</FONT>            switch (this.position) {<a name="line.905"></a>
<FONT color="green">906</FONT>                case (START) :<a name="line.906"></a>
<FONT color="green">907</FONT>                    return period.getFirstMillisecond(this.workingCalendar);<a name="line.907"></a>
<FONT color="green">908</FONT>                case (MIDDLE) :<a name="line.908"></a>
<FONT color="green">909</FONT>                    return period.getMiddleMillisecond(this.workingCalendar);<a name="line.909"></a>
<FONT color="green">910</FONT>                case (END) :<a name="line.910"></a>
<FONT color="green">911</FONT>                    return period.getLastMillisecond(this.workingCalendar);<a name="line.911"></a>
<FONT color="green">912</FONT>                default:<a name="line.912"></a>
<FONT color="green">913</FONT>                    return period.getMiddleMillisecond(this.workingCalendar);<a name="line.913"></a>
<FONT color="green">914</FONT>            }<a name="line.914"></a>
<FONT color="green">915</FONT>         }<a name="line.915"></a>
<FONT color="green">916</FONT>    <a name="line.916"></a>
<FONT color="green">917</FONT>        // The next 3 functions implement the RangeInfo interface.<a name="line.917"></a>
<FONT color="green">918</FONT>        // Using saved limits (updated by each updateTime() call) significantly<a name="line.918"></a>
<FONT color="green">919</FONT>        // improves performance.  WARNING: this code makes the simplifying<a name="line.919"></a>
<FONT color="green">920</FONT>        // assumption that data is never negative.  Expand as needed for the<a name="line.920"></a>
<FONT color="green">921</FONT>        // general case.<a name="line.921"></a>
<FONT color="green">922</FONT>    <a name="line.922"></a>
<FONT color="green">923</FONT>        /**<a name="line.923"></a>
<FONT color="green">924</FONT>         * Returns the minimum range value.<a name="line.924"></a>
<FONT color="green">925</FONT>         *<a name="line.925"></a>
<FONT color="green">926</FONT>         * @param includeInterval  a flag that determines whether or not the<a name="line.926"></a>
<FONT color="green">927</FONT>         *                         y-interval is taken into account.<a name="line.927"></a>
<FONT color="green">928</FONT>         *<a name="line.928"></a>
<FONT color="green">929</FONT>         * @return The minimum range value.<a name="line.929"></a>
<FONT color="green">930</FONT>         */<a name="line.930"></a>
<FONT color="green">931</FONT>        public double getRangeLowerBound(boolean includeInterval) {<a name="line.931"></a>
<FONT color="green">932</FONT>            double result = Double.NaN;<a name="line.932"></a>
<FONT color="green">933</FONT>            if (this.minValue != null) {<a name="line.933"></a>
<FONT color="green">934</FONT>                result = this.minValue.doubleValue();<a name="line.934"></a>
<FONT color="green">935</FONT>            }<a name="line.935"></a>
<FONT color="green">936</FONT>            return result;<a name="line.936"></a>
<FONT color="green">937</FONT>        }<a name="line.937"></a>
<FONT color="green">938</FONT>    <a name="line.938"></a>
<FONT color="green">939</FONT>        /**<a name="line.939"></a>
<FONT color="green">940</FONT>         * Returns the maximum range value.<a name="line.940"></a>
<FONT color="green">941</FONT>         *<a name="line.941"></a>
<FONT color="green">942</FONT>         * @param includeInterval  a flag that determines whether or not the<a name="line.942"></a>
<FONT color="green">943</FONT>         *                         y-interval is taken into account.<a name="line.943"></a>
<FONT color="green">944</FONT>         *<a name="line.944"></a>
<FONT color="green">945</FONT>         * @return The maximum range value.<a name="line.945"></a>
<FONT color="green">946</FONT>         */<a name="line.946"></a>
<FONT color="green">947</FONT>        public double getRangeUpperBound(boolean includeInterval) {<a name="line.947"></a>
<FONT color="green">948</FONT>            double result = Double.NaN;<a name="line.948"></a>
<FONT color="green">949</FONT>            if (this.maxValue != null) {<a name="line.949"></a>
<FONT color="green">950</FONT>                result = this.maxValue.doubleValue();<a name="line.950"></a>
<FONT color="green">951</FONT>            }<a name="line.951"></a>
<FONT color="green">952</FONT>            return result;<a name="line.952"></a>
<FONT color="green">953</FONT>        }<a name="line.953"></a>
<FONT color="green">954</FONT>    <a name="line.954"></a>
<FONT color="green">955</FONT>        /**<a name="line.955"></a>
<FONT color="green">956</FONT>         * Returns the value range.<a name="line.956"></a>
<FONT color="green">957</FONT>         *<a name="line.957"></a>
<FONT color="green">958</FONT>         * @param includeInterval  a flag that determines whether or not the<a name="line.958"></a>
<FONT color="green">959</FONT>         *                         y-interval is taken into account.<a name="line.959"></a>
<FONT color="green">960</FONT>         *<a name="line.960"></a>
<FONT color="green">961</FONT>         * @return The range.<a name="line.961"></a>
<FONT color="green">962</FONT>         */<a name="line.962"></a>
<FONT color="green">963</FONT>        public Range getRangeBounds(boolean includeInterval) {<a name="line.963"></a>
<FONT color="green">964</FONT>            if (this.valueRange == null) {<a name="line.964"></a>
<FONT color="green">965</FONT>                double max = getRangeUpperBound(includeInterval);<a name="line.965"></a>
<FONT color="green">966</FONT>                this.valueRange = new Range(0.0, max);<a name="line.966"></a>
<FONT color="green">967</FONT>            }<a name="line.967"></a>
<FONT color="green">968</FONT>            return this.valueRange;<a name="line.968"></a>
<FONT color="green">969</FONT>        }<a name="line.969"></a>
<FONT color="green">970</FONT>    <a name="line.970"></a>
<FONT color="green">971</FONT>    }<a name="line.971"></a>




























































</PRE>
</BODY>
</HTML>
