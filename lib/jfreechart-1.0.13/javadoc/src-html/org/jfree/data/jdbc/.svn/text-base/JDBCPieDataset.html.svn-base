<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ===========================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JFreeChart : a free chart library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ===========================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     *<a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jfreechart/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it<a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by<a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or<a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but<a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY<a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public<a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,<a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.<a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc.<a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     *<a name="line.26"></a>
<FONT color="green">027</FONT>     * -------------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * JDBCPieDataset.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * -------------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C) Copyright 2002-2008, by Bryan Scott and Contributors.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  Bryan Scott; Andy<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   David Gilbert (for Object Refinery Limited);<a name="line.33"></a>
<FONT color="green">034</FONT>     *                   Thomas Morgner;<a name="line.34"></a>
<FONT color="green">035</FONT>     *<a name="line.35"></a>
<FONT color="green">036</FONT>     * Changes<a name="line.36"></a>
<FONT color="green">037</FONT>     * -------<a name="line.37"></a>
<FONT color="green">038</FONT>     * 26-Apr-2002 : Creation based on JdbcXYDataSet, but extending<a name="line.38"></a>
<FONT color="green">039</FONT>     *               DefaultPieDataset (BS);<a name="line.39"></a>
<FONT color="green">040</FONT>     * 24-Jun-2002 : Removed unnecessary import and local variable (DG);<a name="line.40"></a>
<FONT color="green">041</FONT>     * 13-Aug-2002 : Updated Javadoc comments and imports, removed default<a name="line.41"></a>
<FONT color="green">042</FONT>     *               constructor (DG);<a name="line.42"></a>
<FONT color="green">043</FONT>     * 18-Sep-2002 : Updated to support BIGINT (BS);<a name="line.43"></a>
<FONT color="green">044</FONT>     * 21-Jan-2003 : Renamed JdbcPieDataset --&gt; JDBCPieDataset (DG);<a name="line.44"></a>
<FONT color="green">045</FONT>     * 03-Feb-2003 : Added Types.DECIMAL (see bug report 677814) (DG);<a name="line.45"></a>
<FONT color="green">046</FONT>     * 05-Jun-2003 : Updated to support TIME, optimised executeQuery method (BS);<a name="line.46"></a>
<FONT color="green">047</FONT>     * 30-Jul-2003 : Added empty contructor and executeQuery(connection,string)<a name="line.47"></a>
<FONT color="green">048</FONT>     *               method (BS);<a name="line.48"></a>
<FONT color="green">049</FONT>     * 02-Dec-2003 : Throwing exceptions allows to handle errors, removed default<a name="line.49"></a>
<FONT color="green">050</FONT>     *               constructor, as without a connection, a query can never be<a name="line.50"></a>
<FONT color="green">051</FONT>     *               executed (TM);<a name="line.51"></a>
<FONT color="green">052</FONT>     * 04-Dec-2003 : Added missing Javadocs (DG);<a name="line.52"></a>
<FONT color="green">053</FONT>     * ------------- JFREECHART 1.0.x ---------------------------------------------<a name="line.53"></a>
<FONT color="green">054</FONT>     * 02-Feb-2007 : Removed author tags all over JFreeChart sources (DG);<a name="line.54"></a>
<FONT color="green">055</FONT>     *<a name="line.55"></a>
<FONT color="green">056</FONT>     */<a name="line.56"></a>
<FONT color="green">057</FONT>    <a name="line.57"></a>
<FONT color="green">058</FONT>    package org.jfree.data.jdbc;<a name="line.58"></a>
<FONT color="green">059</FONT>    <a name="line.59"></a>
<FONT color="green">060</FONT>    import java.sql.Connection;<a name="line.60"></a>
<FONT color="green">061</FONT>    import java.sql.DriverManager;<a name="line.61"></a>
<FONT color="green">062</FONT>    import java.sql.ResultSet;<a name="line.62"></a>
<FONT color="green">063</FONT>    import java.sql.ResultSetMetaData;<a name="line.63"></a>
<FONT color="green">064</FONT>    import java.sql.SQLException;<a name="line.64"></a>
<FONT color="green">065</FONT>    import java.sql.Statement;<a name="line.65"></a>
<FONT color="green">066</FONT>    import java.sql.Timestamp;<a name="line.66"></a>
<FONT color="green">067</FONT>    import java.sql.Types;<a name="line.67"></a>
<FONT color="green">068</FONT>    <a name="line.68"></a>
<FONT color="green">069</FONT>    import org.jfree.data.general.DefaultPieDataset;<a name="line.69"></a>
<FONT color="green">070</FONT>    import org.jfree.data.general.PieDataset;<a name="line.70"></a>
<FONT color="green">071</FONT>    <a name="line.71"></a>
<FONT color="green">072</FONT>    /**<a name="line.72"></a>
<FONT color="green">073</FONT>     * A {@link PieDataset} that reads data from a database via JDBC.<a name="line.73"></a>
<FONT color="green">074</FONT>     * &lt;P&gt;<a name="line.74"></a>
<FONT color="green">075</FONT>     * A query should be supplied that returns data in two columns, the first<a name="line.75"></a>
<FONT color="green">076</FONT>     * containing VARCHAR data, and the second containing numerical data.  The<a name="line.76"></a>
<FONT color="green">077</FONT>     * data is cached in-memory and can be refreshed at any time.<a name="line.77"></a>
<FONT color="green">078</FONT>     */<a name="line.78"></a>
<FONT color="green">079</FONT>    public class JDBCPieDataset extends DefaultPieDataset {<a name="line.79"></a>
<FONT color="green">080</FONT>    <a name="line.80"></a>
<FONT color="green">081</FONT>        /** For serialization. */<a name="line.81"></a>
<FONT color="green">082</FONT>        static final long serialVersionUID = -8753216855496746108L;<a name="line.82"></a>
<FONT color="green">083</FONT>    <a name="line.83"></a>
<FONT color="green">084</FONT>        /** The database connection. */<a name="line.84"></a>
<FONT color="green">085</FONT>        private transient Connection connection;<a name="line.85"></a>
<FONT color="green">086</FONT>    <a name="line.86"></a>
<FONT color="green">087</FONT>        /**<a name="line.87"></a>
<FONT color="green">088</FONT>         * Creates a new JDBCPieDataset and establishes a new database connection.<a name="line.88"></a>
<FONT color="green">089</FONT>         *<a name="line.89"></a>
<FONT color="green">090</FONT>         * @param url  the URL of the database connection.<a name="line.90"></a>
<FONT color="green">091</FONT>         * @param driverName  the database driver class name.<a name="line.91"></a>
<FONT color="green">092</FONT>         * @param user  the database user.<a name="line.92"></a>
<FONT color="green">093</FONT>         * @param password  the database users password.<a name="line.93"></a>
<FONT color="green">094</FONT>         *<a name="line.94"></a>
<FONT color="green">095</FONT>         * @throws ClassNotFoundException if the driver cannot be found.<a name="line.95"></a>
<FONT color="green">096</FONT>         * @throws SQLException if there is a problem obtaining a database<a name="line.96"></a>
<FONT color="green">097</FONT>         *                      connection.<a name="line.97"></a>
<FONT color="green">098</FONT>         */<a name="line.98"></a>
<FONT color="green">099</FONT>        public JDBCPieDataset(String url,<a name="line.99"></a>
<FONT color="green">100</FONT>                              String driverName,<a name="line.100"></a>
<FONT color="green">101</FONT>                              String user,<a name="line.101"></a>
<FONT color="green">102</FONT>                              String password)<a name="line.102"></a>
<FONT color="green">103</FONT>            throws SQLException, ClassNotFoundException {<a name="line.103"></a>
<FONT color="green">104</FONT>    <a name="line.104"></a>
<FONT color="green">105</FONT>            Class.forName(driverName);<a name="line.105"></a>
<FONT color="green">106</FONT>            this.connection = DriverManager.getConnection(url, user, password);<a name="line.106"></a>
<FONT color="green">107</FONT>        }<a name="line.107"></a>
<FONT color="green">108</FONT>    <a name="line.108"></a>
<FONT color="green">109</FONT>        /**<a name="line.109"></a>
<FONT color="green">110</FONT>         * Creates a new JDBCPieDataset using a pre-existing database connection.<a name="line.110"></a>
<FONT color="green">111</FONT>         * &lt;P&gt;<a name="line.111"></a>
<FONT color="green">112</FONT>         * The dataset is initially empty, since no query has been supplied yet.<a name="line.112"></a>
<FONT color="green">113</FONT>         *<a name="line.113"></a>
<FONT color="green">114</FONT>         * @param con  the database connection.<a name="line.114"></a>
<FONT color="green">115</FONT>         */<a name="line.115"></a>
<FONT color="green">116</FONT>        public JDBCPieDataset(Connection con) {<a name="line.116"></a>
<FONT color="green">117</FONT>            if (con == null) {<a name="line.117"></a>
<FONT color="green">118</FONT>                throw new NullPointerException("A connection must be supplied.");<a name="line.118"></a>
<FONT color="green">119</FONT>            }<a name="line.119"></a>
<FONT color="green">120</FONT>            this.connection = con;<a name="line.120"></a>
<FONT color="green">121</FONT>        }<a name="line.121"></a>
<FONT color="green">122</FONT>    <a name="line.122"></a>
<FONT color="green">123</FONT>    <a name="line.123"></a>
<FONT color="green">124</FONT>        /**<a name="line.124"></a>
<FONT color="green">125</FONT>         * Creates a new JDBCPieDataset using a pre-existing database connection.<a name="line.125"></a>
<FONT color="green">126</FONT>         * &lt;P&gt;<a name="line.126"></a>
<FONT color="green">127</FONT>         * The dataset is initialised with the supplied query.<a name="line.127"></a>
<FONT color="green">128</FONT>         *<a name="line.128"></a>
<FONT color="green">129</FONT>         * @param con  the database connection.<a name="line.129"></a>
<FONT color="green">130</FONT>         * @param query  the database connection.<a name="line.130"></a>
<FONT color="green">131</FONT>         *<a name="line.131"></a>
<FONT color="green">132</FONT>         * @throws SQLException if there is a problem executing the query.<a name="line.132"></a>
<FONT color="green">133</FONT>         */<a name="line.133"></a>
<FONT color="green">134</FONT>        public JDBCPieDataset(Connection con, String query) throws SQLException {<a name="line.134"></a>
<FONT color="green">135</FONT>            this(con);<a name="line.135"></a>
<FONT color="green">136</FONT>            executeQuery(query);<a name="line.136"></a>
<FONT color="green">137</FONT>        }<a name="line.137"></a>
<FONT color="green">138</FONT>    <a name="line.138"></a>
<FONT color="green">139</FONT>        /**<a name="line.139"></a>
<FONT color="green">140</FONT>         *  ExecuteQuery will attempt execute the query passed to it against the<a name="line.140"></a>
<FONT color="green">141</FONT>         *  existing database connection.  If no connection exists then no action<a name="line.141"></a>
<FONT color="green">142</FONT>         *  is taken.<a name="line.142"></a>
<FONT color="green">143</FONT>         *  The results from the query are extracted and cached locally, thus<a name="line.143"></a>
<FONT color="green">144</FONT>         *  applying an upper limit on how many rows can be retrieved successfully.<a name="line.144"></a>
<FONT color="green">145</FONT>         *<a name="line.145"></a>
<FONT color="green">146</FONT>         * @param  query  the query to be executed.<a name="line.146"></a>
<FONT color="green">147</FONT>         *<a name="line.147"></a>
<FONT color="green">148</FONT>         * @throws SQLException if there is a problem executing the query.<a name="line.148"></a>
<FONT color="green">149</FONT>         */<a name="line.149"></a>
<FONT color="green">150</FONT>        public void executeQuery(String query) throws SQLException {<a name="line.150"></a>
<FONT color="green">151</FONT>          executeQuery(this.connection, query);<a name="line.151"></a>
<FONT color="green">152</FONT>        }<a name="line.152"></a>
<FONT color="green">153</FONT>    <a name="line.153"></a>
<FONT color="green">154</FONT>        /**<a name="line.154"></a>
<FONT color="green">155</FONT>         *  ExecuteQuery will attempt execute the query passed to it against the<a name="line.155"></a>
<FONT color="green">156</FONT>         *  existing database connection.  If no connection exists then no action<a name="line.156"></a>
<FONT color="green">157</FONT>         *  is taken.<a name="line.157"></a>
<FONT color="green">158</FONT>         *  The results from the query are extracted and cached locally, thus<a name="line.158"></a>
<FONT color="green">159</FONT>         *  applying an upper limit on how many rows can be retrieved successfully.<a name="line.159"></a>
<FONT color="green">160</FONT>         *<a name="line.160"></a>
<FONT color="green">161</FONT>         * @param  query  the query to be executed<a name="line.161"></a>
<FONT color="green">162</FONT>         * @param  con  the connection the query is to be executed against<a name="line.162"></a>
<FONT color="green">163</FONT>         *<a name="line.163"></a>
<FONT color="green">164</FONT>         * @throws SQLException if there is a problem executing the query.<a name="line.164"></a>
<FONT color="green">165</FONT>         */<a name="line.165"></a>
<FONT color="green">166</FONT>        public void executeQuery(Connection con, String query) throws SQLException {<a name="line.166"></a>
<FONT color="green">167</FONT>    <a name="line.167"></a>
<FONT color="green">168</FONT>            Statement statement = null;<a name="line.168"></a>
<FONT color="green">169</FONT>            ResultSet resultSet = null;<a name="line.169"></a>
<FONT color="green">170</FONT>    <a name="line.170"></a>
<FONT color="green">171</FONT>            try {<a name="line.171"></a>
<FONT color="green">172</FONT>                statement = con.createStatement();<a name="line.172"></a>
<FONT color="green">173</FONT>                resultSet = statement.executeQuery(query);<a name="line.173"></a>
<FONT color="green">174</FONT>                ResultSetMetaData metaData = resultSet.getMetaData();<a name="line.174"></a>
<FONT color="green">175</FONT>    <a name="line.175"></a>
<FONT color="green">176</FONT>                int columnCount = metaData.getColumnCount();<a name="line.176"></a>
<FONT color="green">177</FONT>                if (columnCount != 2) {<a name="line.177"></a>
<FONT color="green">178</FONT>                    throw new SQLException(<a name="line.178"></a>
<FONT color="green">179</FONT>                        "Invalid sql generated.  PieDataSet requires 2 columns only"<a name="line.179"></a>
<FONT color="green">180</FONT>                    );<a name="line.180"></a>
<FONT color="green">181</FONT>                }<a name="line.181"></a>
<FONT color="green">182</FONT>    <a name="line.182"></a>
<FONT color="green">183</FONT>                int columnType = metaData.getColumnType(2);<a name="line.183"></a>
<FONT color="green">184</FONT>                double value = Double.NaN;<a name="line.184"></a>
<FONT color="green">185</FONT>                while (resultSet.next()) {<a name="line.185"></a>
<FONT color="green">186</FONT>                    Comparable key = resultSet.getString(1);<a name="line.186"></a>
<FONT color="green">187</FONT>                    switch (columnType) {<a name="line.187"></a>
<FONT color="green">188</FONT>                        case Types.NUMERIC:<a name="line.188"></a>
<FONT color="green">189</FONT>                        case Types.REAL:<a name="line.189"></a>
<FONT color="green">190</FONT>                        case Types.INTEGER:<a name="line.190"></a>
<FONT color="green">191</FONT>                        case Types.DOUBLE:<a name="line.191"></a>
<FONT color="green">192</FONT>                        case Types.FLOAT:<a name="line.192"></a>
<FONT color="green">193</FONT>                        case Types.DECIMAL:<a name="line.193"></a>
<FONT color="green">194</FONT>                        case Types.BIGINT:<a name="line.194"></a>
<FONT color="green">195</FONT>                            value = resultSet.getDouble(2);<a name="line.195"></a>
<FONT color="green">196</FONT>                            setValue(key, value);<a name="line.196"></a>
<FONT color="green">197</FONT>                            break;<a name="line.197"></a>
<FONT color="green">198</FONT>    <a name="line.198"></a>
<FONT color="green">199</FONT>                        case Types.DATE:<a name="line.199"></a>
<FONT color="green">200</FONT>                        case Types.TIME:<a name="line.200"></a>
<FONT color="green">201</FONT>                        case Types.TIMESTAMP:<a name="line.201"></a>
<FONT color="green">202</FONT>                            Timestamp date = resultSet.getTimestamp(2);<a name="line.202"></a>
<FONT color="green">203</FONT>                            value = date.getTime();<a name="line.203"></a>
<FONT color="green">204</FONT>                            setValue(key, value);<a name="line.204"></a>
<FONT color="green">205</FONT>                            break;<a name="line.205"></a>
<FONT color="green">206</FONT>    <a name="line.206"></a>
<FONT color="green">207</FONT>                        default:<a name="line.207"></a>
<FONT color="green">208</FONT>                            System.err.println(<a name="line.208"></a>
<FONT color="green">209</FONT>                                "JDBCPieDataset - unknown data type"<a name="line.209"></a>
<FONT color="green">210</FONT>                            );<a name="line.210"></a>
<FONT color="green">211</FONT>                            break;<a name="line.211"></a>
<FONT color="green">212</FONT>                    }<a name="line.212"></a>
<FONT color="green">213</FONT>                }<a name="line.213"></a>
<FONT color="green">214</FONT>    <a name="line.214"></a>
<FONT color="green">215</FONT>                fireDatasetChanged();<a name="line.215"></a>
<FONT color="green">216</FONT>    <a name="line.216"></a>
<FONT color="green">217</FONT>            }<a name="line.217"></a>
<FONT color="green">218</FONT>            finally {<a name="line.218"></a>
<FONT color="green">219</FONT>                if (resultSet != null) {<a name="line.219"></a>
<FONT color="green">220</FONT>                    try {<a name="line.220"></a>
<FONT color="green">221</FONT>                        resultSet.close();<a name="line.221"></a>
<FONT color="green">222</FONT>                    }<a name="line.222"></a>
<FONT color="green">223</FONT>                    catch (Exception e) {<a name="line.223"></a>
<FONT color="green">224</FONT>                        System.err.println("JDBCPieDataset: swallowing exception.");<a name="line.224"></a>
<FONT color="green">225</FONT>                    }<a name="line.225"></a>
<FONT color="green">226</FONT>                }<a name="line.226"></a>
<FONT color="green">227</FONT>                if (statement != null) {<a name="line.227"></a>
<FONT color="green">228</FONT>                    try {<a name="line.228"></a>
<FONT color="green">229</FONT>                        statement.close();<a name="line.229"></a>
<FONT color="green">230</FONT>                    }<a name="line.230"></a>
<FONT color="green">231</FONT>                    catch (Exception e) {<a name="line.231"></a>
<FONT color="green">232</FONT>                        System.err.println("JDBCPieDataset: swallowing exception.");<a name="line.232"></a>
<FONT color="green">233</FONT>                    }<a name="line.233"></a>
<FONT color="green">234</FONT>                }<a name="line.234"></a>
<FONT color="green">235</FONT>            }<a name="line.235"></a>
<FONT color="green">236</FONT>        }<a name="line.236"></a>
<FONT color="green">237</FONT>    <a name="line.237"></a>
<FONT color="green">238</FONT>    <a name="line.238"></a>
<FONT color="green">239</FONT>        /**<a name="line.239"></a>
<FONT color="green">240</FONT>         * Close the database connection<a name="line.240"></a>
<FONT color="green">241</FONT>         */<a name="line.241"></a>
<FONT color="green">242</FONT>        public void close() {<a name="line.242"></a>
<FONT color="green">243</FONT>            try {<a name="line.243"></a>
<FONT color="green">244</FONT>                this.connection.close();<a name="line.244"></a>
<FONT color="green">245</FONT>            }<a name="line.245"></a>
<FONT color="green">246</FONT>            catch (Exception e) {<a name="line.246"></a>
<FONT color="green">247</FONT>                System.err.println("JdbcXYDataset: swallowing exception.");<a name="line.247"></a>
<FONT color="green">248</FONT>            }<a name="line.248"></a>
<FONT color="green">249</FONT>        }<a name="line.249"></a>
<FONT color="green">250</FONT>    }<a name="line.250"></a>




























































</PRE>
</BODY>
</HTML>
