<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ===========================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JFreeChart : a free chart library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ===========================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     *<a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jfreechart/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it<a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by<a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or<a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but<a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY<a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public<a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,<a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.<a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc.<a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     *<a name="line.26"></a>
<FONT color="green">027</FONT>     * -------------------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * DefaultKeyedValues2D.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * -------------------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C) Copyright 2002-2008, by Object Refinery Limited.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  David Gilbert (for Object Refinery Limited);<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   Andreas Schroeder;<a name="line.33"></a>
<FONT color="green">034</FONT>     *<a name="line.34"></a>
<FONT color="green">035</FONT>     * Changes<a name="line.35"></a>
<FONT color="green">036</FONT>     * -------<a name="line.36"></a>
<FONT color="green">037</FONT>     * 28-Oct-2002 : Version 1 (DG);<a name="line.37"></a>
<FONT color="green">038</FONT>     * 21-Jan-2003 : Updated Javadocs (DG);<a name="line.38"></a>
<FONT color="green">039</FONT>     * 13-Mar-2003 : Implemented Serializable (DG);<a name="line.39"></a>
<FONT color="green">040</FONT>     * 18-Aug-2003 : Implemented Cloneable (DG);<a name="line.40"></a>
<FONT color="green">041</FONT>     * 31-Mar-2004 : Made the rows optionally sortable by a flag (AS);<a name="line.41"></a>
<FONT color="green">042</FONT>     * 01-Apr-2004 : Implemented remove method (AS);<a name="line.42"></a>
<FONT color="green">043</FONT>     * 05-Apr-2004 : Added clear() method (DG);<a name="line.43"></a>
<FONT color="green">044</FONT>     * 15-Sep-2004 : Fixed clone() method (DG);<a name="line.44"></a>
<FONT color="green">045</FONT>     * 12-Jan-2005 : Fixed bug in getValue() method (DG);<a name="line.45"></a>
<FONT color="green">046</FONT>     * 23-Mar-2005 : Implemented PublicCloneable (DG);<a name="line.46"></a>
<FONT color="green">047</FONT>     * 09-Jun-2005 : Modified getValue() method to throw exception for unknown<a name="line.47"></a>
<FONT color="green">048</FONT>     *               keys (DG);<a name="line.48"></a>
<FONT color="green">049</FONT>     * ------------- JFREECHART 1.0.x ---------------------------------------------<a name="line.49"></a>
<FONT color="green">050</FONT>     * 18-Jan-2007 : Fixed bug in getValue() method (DG);<a name="line.50"></a>
<FONT color="green">051</FONT>     * 30-Mar-2007 : Fixed bug 1690654, problem with removeValue() (DG);<a name="line.51"></a>
<FONT color="green">052</FONT>     * 21-Nov-2007 : Fixed bug (1835955) in removeColumn(Comparable) method (DG);<a name="line.52"></a>
<FONT color="green">053</FONT>     * 23-Nov-2007 : Added argument checks to removeRow(Comparable) to make it<a name="line.53"></a>
<FONT color="green">054</FONT>     *               consistent with the removeRow(Comparable) method (DG);<a name="line.54"></a>
<FONT color="green">055</FONT>     *<a name="line.55"></a>
<FONT color="green">056</FONT>     */<a name="line.56"></a>
<FONT color="green">057</FONT>    <a name="line.57"></a>
<FONT color="green">058</FONT>    package org.jfree.data;<a name="line.58"></a>
<FONT color="green">059</FONT>    <a name="line.59"></a>
<FONT color="green">060</FONT>    import java.io.Serializable;<a name="line.60"></a>
<FONT color="green">061</FONT>    import java.util.Collections;<a name="line.61"></a>
<FONT color="green">062</FONT>    import java.util.Iterator;<a name="line.62"></a>
<FONT color="green">063</FONT>    import java.util.List;<a name="line.63"></a>
<FONT color="green">064</FONT>    <a name="line.64"></a>
<FONT color="green">065</FONT>    import org.jfree.util.ObjectUtilities;<a name="line.65"></a>
<FONT color="green">066</FONT>    import org.jfree.util.PublicCloneable;<a name="line.66"></a>
<FONT color="green">067</FONT>    <a name="line.67"></a>
<FONT color="green">068</FONT>    /**<a name="line.68"></a>
<FONT color="green">069</FONT>     * A data structure that stores zero, one or many values, where each value<a name="line.69"></a>
<FONT color="green">070</FONT>     * is associated with two keys (a 'row' key and a 'column' key).  The keys<a name="line.70"></a>
<FONT color="green">071</FONT>     * should be (a) instances of {@link Comparable} and (b) immutable.<a name="line.71"></a>
<FONT color="green">072</FONT>     */<a name="line.72"></a>
<FONT color="green">073</FONT>    public class DefaultKeyedValues2D implements KeyedValues2D, PublicCloneable,<a name="line.73"></a>
<FONT color="green">074</FONT>            Cloneable, Serializable {<a name="line.74"></a>
<FONT color="green">075</FONT>    <a name="line.75"></a>
<FONT color="green">076</FONT>        /** For serialization. */<a name="line.76"></a>
<FONT color="green">077</FONT>        private static final long serialVersionUID = -5514169970951994748L;<a name="line.77"></a>
<FONT color="green">078</FONT>    <a name="line.78"></a>
<FONT color="green">079</FONT>        /** The row keys. */<a name="line.79"></a>
<FONT color="green">080</FONT>        private List rowKeys;<a name="line.80"></a>
<FONT color="green">081</FONT>    <a name="line.81"></a>
<FONT color="green">082</FONT>        /** The column keys. */<a name="line.82"></a>
<FONT color="green">083</FONT>        private List columnKeys;<a name="line.83"></a>
<FONT color="green">084</FONT>    <a name="line.84"></a>
<FONT color="green">085</FONT>        /** The row data. */<a name="line.85"></a>
<FONT color="green">086</FONT>        private List rows;<a name="line.86"></a>
<FONT color="green">087</FONT>    <a name="line.87"></a>
<FONT color="green">088</FONT>        /** If the row keys should be sorted by their comparable order. */<a name="line.88"></a>
<FONT color="green">089</FONT>        private boolean sortRowKeys;<a name="line.89"></a>
<FONT color="green">090</FONT>    <a name="line.90"></a>
<FONT color="green">091</FONT>        /**<a name="line.91"></a>
<FONT color="green">092</FONT>         * Creates a new instance (initially empty).<a name="line.92"></a>
<FONT color="green">093</FONT>         */<a name="line.93"></a>
<FONT color="green">094</FONT>        public DefaultKeyedValues2D() {<a name="line.94"></a>
<FONT color="green">095</FONT>            this(false);<a name="line.95"></a>
<FONT color="green">096</FONT>        }<a name="line.96"></a>
<FONT color="green">097</FONT>    <a name="line.97"></a>
<FONT color="green">098</FONT>        /**<a name="line.98"></a>
<FONT color="green">099</FONT>         * Creates a new instance (initially empty).<a name="line.99"></a>
<FONT color="green">100</FONT>         *<a name="line.100"></a>
<FONT color="green">101</FONT>         * @param sortRowKeys  if the row keys should be sorted.<a name="line.101"></a>
<FONT color="green">102</FONT>         */<a name="line.102"></a>
<FONT color="green">103</FONT>        public DefaultKeyedValues2D(boolean sortRowKeys) {<a name="line.103"></a>
<FONT color="green">104</FONT>            this.rowKeys = new java.util.ArrayList();<a name="line.104"></a>
<FONT color="green">105</FONT>            this.columnKeys = new java.util.ArrayList();<a name="line.105"></a>
<FONT color="green">106</FONT>            this.rows = new java.util.ArrayList();<a name="line.106"></a>
<FONT color="green">107</FONT>            this.sortRowKeys = sortRowKeys;<a name="line.107"></a>
<FONT color="green">108</FONT>        }<a name="line.108"></a>
<FONT color="green">109</FONT>    <a name="line.109"></a>
<FONT color="green">110</FONT>        /**<a name="line.110"></a>
<FONT color="green">111</FONT>         * Returns the row count.<a name="line.111"></a>
<FONT color="green">112</FONT>         *<a name="line.112"></a>
<FONT color="green">113</FONT>         * @return The row count.<a name="line.113"></a>
<FONT color="green">114</FONT>         *<a name="line.114"></a>
<FONT color="green">115</FONT>         * @see #getColumnCount()<a name="line.115"></a>
<FONT color="green">116</FONT>         */<a name="line.116"></a>
<FONT color="green">117</FONT>        public int getRowCount() {<a name="line.117"></a>
<FONT color="green">118</FONT>            return this.rowKeys.size();<a name="line.118"></a>
<FONT color="green">119</FONT>        }<a name="line.119"></a>
<FONT color="green">120</FONT>    <a name="line.120"></a>
<FONT color="green">121</FONT>        /**<a name="line.121"></a>
<FONT color="green">122</FONT>         * Returns the column count.<a name="line.122"></a>
<FONT color="green">123</FONT>         *<a name="line.123"></a>
<FONT color="green">124</FONT>         * @return The column count.<a name="line.124"></a>
<FONT color="green">125</FONT>         *<a name="line.125"></a>
<FONT color="green">126</FONT>         * @see #getRowCount()<a name="line.126"></a>
<FONT color="green">127</FONT>         */<a name="line.127"></a>
<FONT color="green">128</FONT>        public int getColumnCount() {<a name="line.128"></a>
<FONT color="green">129</FONT>            return this.columnKeys.size();<a name="line.129"></a>
<FONT color="green">130</FONT>        }<a name="line.130"></a>
<FONT color="green">131</FONT>    <a name="line.131"></a>
<FONT color="green">132</FONT>        /**<a name="line.132"></a>
<FONT color="green">133</FONT>         * Returns the value for a given row and column.<a name="line.133"></a>
<FONT color="green">134</FONT>         *<a name="line.134"></a>
<FONT color="green">135</FONT>         * @param row  the row index.<a name="line.135"></a>
<FONT color="green">136</FONT>         * @param column  the column index.<a name="line.136"></a>
<FONT color="green">137</FONT>         *<a name="line.137"></a>
<FONT color="green">138</FONT>         * @return The value.<a name="line.138"></a>
<FONT color="green">139</FONT>         *<a name="line.139"></a>
<FONT color="green">140</FONT>         * @see #getValue(Comparable, Comparable)<a name="line.140"></a>
<FONT color="green">141</FONT>         */<a name="line.141"></a>
<FONT color="green">142</FONT>        public Number getValue(int row, int column) {<a name="line.142"></a>
<FONT color="green">143</FONT>            Number result = null;<a name="line.143"></a>
<FONT color="green">144</FONT>            DefaultKeyedValues rowData = (DefaultKeyedValues) this.rows.get(row);<a name="line.144"></a>
<FONT color="green">145</FONT>            if (rowData != null) {<a name="line.145"></a>
<FONT color="green">146</FONT>                Comparable columnKey = (Comparable) this.columnKeys.get(column);<a name="line.146"></a>
<FONT color="green">147</FONT>                // the row may not have an entry for this key, in which case the<a name="line.147"></a>
<FONT color="green">148</FONT>                // return value is null<a name="line.148"></a>
<FONT color="green">149</FONT>                int index = rowData.getIndex(columnKey);<a name="line.149"></a>
<FONT color="green">150</FONT>                if (index &gt;= 0) {<a name="line.150"></a>
<FONT color="green">151</FONT>                    result = rowData.getValue(index);<a name="line.151"></a>
<FONT color="green">152</FONT>                }<a name="line.152"></a>
<FONT color="green">153</FONT>            }<a name="line.153"></a>
<FONT color="green">154</FONT>            return result;<a name="line.154"></a>
<FONT color="green">155</FONT>        }<a name="line.155"></a>
<FONT color="green">156</FONT>    <a name="line.156"></a>
<FONT color="green">157</FONT>        /**<a name="line.157"></a>
<FONT color="green">158</FONT>         * Returns the key for a given row.<a name="line.158"></a>
<FONT color="green">159</FONT>         *<a name="line.159"></a>
<FONT color="green">160</FONT>         * @param row  the row index (in the range 0 to {@link #getRowCount()} - 1).<a name="line.160"></a>
<FONT color="green">161</FONT>         *<a name="line.161"></a>
<FONT color="green">162</FONT>         * @return The row key.<a name="line.162"></a>
<FONT color="green">163</FONT>         *<a name="line.163"></a>
<FONT color="green">164</FONT>         * @see #getRowIndex(Comparable)<a name="line.164"></a>
<FONT color="green">165</FONT>         * @see #getColumnKey(int)<a name="line.165"></a>
<FONT color="green">166</FONT>         */<a name="line.166"></a>
<FONT color="green">167</FONT>        public Comparable getRowKey(int row) {<a name="line.167"></a>
<FONT color="green">168</FONT>            return (Comparable) this.rowKeys.get(row);<a name="line.168"></a>
<FONT color="green">169</FONT>        }<a name="line.169"></a>
<FONT color="green">170</FONT>    <a name="line.170"></a>
<FONT color="green">171</FONT>        /**<a name="line.171"></a>
<FONT color="green">172</FONT>         * Returns the row index for a given key.<a name="line.172"></a>
<FONT color="green">173</FONT>         *<a name="line.173"></a>
<FONT color="green">174</FONT>         * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.174"></a>
<FONT color="green">175</FONT>         *<a name="line.175"></a>
<FONT color="green">176</FONT>         * @return The row index.<a name="line.176"></a>
<FONT color="green">177</FONT>         *<a name="line.177"></a>
<FONT color="green">178</FONT>         * @see #getRowKey(int)<a name="line.178"></a>
<FONT color="green">179</FONT>         * @see #getColumnIndex(Comparable)<a name="line.179"></a>
<FONT color="green">180</FONT>         */<a name="line.180"></a>
<FONT color="green">181</FONT>        public int getRowIndex(Comparable key) {<a name="line.181"></a>
<FONT color="green">182</FONT>            if (key == null) {<a name="line.182"></a>
<FONT color="green">183</FONT>                throw new IllegalArgumentException("Null 'key' argument.");<a name="line.183"></a>
<FONT color="green">184</FONT>            }<a name="line.184"></a>
<FONT color="green">185</FONT>            if (this.sortRowKeys) {<a name="line.185"></a>
<FONT color="green">186</FONT>                return Collections.binarySearch(this.rowKeys, key);<a name="line.186"></a>
<FONT color="green">187</FONT>            }<a name="line.187"></a>
<FONT color="green">188</FONT>            else {<a name="line.188"></a>
<FONT color="green">189</FONT>                return this.rowKeys.indexOf(key);<a name="line.189"></a>
<FONT color="green">190</FONT>            }<a name="line.190"></a>
<FONT color="green">191</FONT>        }<a name="line.191"></a>
<FONT color="green">192</FONT>    <a name="line.192"></a>
<FONT color="green">193</FONT>        /**<a name="line.193"></a>
<FONT color="green">194</FONT>         * Returns the row keys in an unmodifiable list.<a name="line.194"></a>
<FONT color="green">195</FONT>         *<a name="line.195"></a>
<FONT color="green">196</FONT>         * @return The row keys.<a name="line.196"></a>
<FONT color="green">197</FONT>         *<a name="line.197"></a>
<FONT color="green">198</FONT>         * @see #getColumnKeys()<a name="line.198"></a>
<FONT color="green">199</FONT>         */<a name="line.199"></a>
<FONT color="green">200</FONT>        public List getRowKeys() {<a name="line.200"></a>
<FONT color="green">201</FONT>            return Collections.unmodifiableList(this.rowKeys);<a name="line.201"></a>
<FONT color="green">202</FONT>        }<a name="line.202"></a>
<FONT color="green">203</FONT>    <a name="line.203"></a>
<FONT color="green">204</FONT>        /**<a name="line.204"></a>
<FONT color="green">205</FONT>         * Returns the key for a given column.<a name="line.205"></a>
<FONT color="green">206</FONT>         *<a name="line.206"></a>
<FONT color="green">207</FONT>         * @param column  the column (in the range 0 to {@link #getColumnCount()}<a name="line.207"></a>
<FONT color="green">208</FONT>         *     - 1).<a name="line.208"></a>
<FONT color="green">209</FONT>         *<a name="line.209"></a>
<FONT color="green">210</FONT>         * @return The key.<a name="line.210"></a>
<FONT color="green">211</FONT>         *<a name="line.211"></a>
<FONT color="green">212</FONT>         * @see #getColumnIndex(Comparable)<a name="line.212"></a>
<FONT color="green">213</FONT>         * @see #getRowKey(int)<a name="line.213"></a>
<FONT color="green">214</FONT>         */<a name="line.214"></a>
<FONT color="green">215</FONT>        public Comparable getColumnKey(int column) {<a name="line.215"></a>
<FONT color="green">216</FONT>            return (Comparable) this.columnKeys.get(column);<a name="line.216"></a>
<FONT color="green">217</FONT>        }<a name="line.217"></a>
<FONT color="green">218</FONT>    <a name="line.218"></a>
<FONT color="green">219</FONT>        /**<a name="line.219"></a>
<FONT color="green">220</FONT>         * Returns the column index for a given key.<a name="line.220"></a>
<FONT color="green">221</FONT>         *<a name="line.221"></a>
<FONT color="green">222</FONT>         * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.222"></a>
<FONT color="green">223</FONT>         *<a name="line.223"></a>
<FONT color="green">224</FONT>         * @return The column index.<a name="line.224"></a>
<FONT color="green">225</FONT>         *<a name="line.225"></a>
<FONT color="green">226</FONT>         * @see #getColumnKey(int)<a name="line.226"></a>
<FONT color="green">227</FONT>         * @see #getRowIndex(Comparable)<a name="line.227"></a>
<FONT color="green">228</FONT>         */<a name="line.228"></a>
<FONT color="green">229</FONT>        public int getColumnIndex(Comparable key) {<a name="line.229"></a>
<FONT color="green">230</FONT>            if (key == null) {<a name="line.230"></a>
<FONT color="green">231</FONT>                throw new IllegalArgumentException("Null 'key' argument.");<a name="line.231"></a>
<FONT color="green">232</FONT>            }<a name="line.232"></a>
<FONT color="green">233</FONT>            return this.columnKeys.indexOf(key);<a name="line.233"></a>
<FONT color="green">234</FONT>        }<a name="line.234"></a>
<FONT color="green">235</FONT>    <a name="line.235"></a>
<FONT color="green">236</FONT>        /**<a name="line.236"></a>
<FONT color="green">237</FONT>         * Returns the column keys in an unmodifiable list.<a name="line.237"></a>
<FONT color="green">238</FONT>         *<a name="line.238"></a>
<FONT color="green">239</FONT>         * @return The column keys.<a name="line.239"></a>
<FONT color="green">240</FONT>         *<a name="line.240"></a>
<FONT color="green">241</FONT>         * @see #getRowKeys()<a name="line.241"></a>
<FONT color="green">242</FONT>         */<a name="line.242"></a>
<FONT color="green">243</FONT>        public List getColumnKeys() {<a name="line.243"></a>
<FONT color="green">244</FONT>            return Collections.unmodifiableList(this.columnKeys);<a name="line.244"></a>
<FONT color="green">245</FONT>        }<a name="line.245"></a>
<FONT color="green">246</FONT>    <a name="line.246"></a>
<FONT color="green">247</FONT>        /**<a name="line.247"></a>
<FONT color="green">248</FONT>         * Returns the value for the given row and column keys.  This method will<a name="line.248"></a>
<FONT color="green">249</FONT>         * throw an {@link UnknownKeyException} if either key is not defined in the<a name="line.249"></a>
<FONT color="green">250</FONT>         * data structure.<a name="line.250"></a>
<FONT color="green">251</FONT>         *<a name="line.251"></a>
<FONT color="green">252</FONT>         * @param rowKey  the row key (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.252"></a>
<FONT color="green">253</FONT>         * @param columnKey  the column key (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.253"></a>
<FONT color="green">254</FONT>         *<a name="line.254"></a>
<FONT color="green">255</FONT>         * @return The value (possibly &lt;code&gt;null&lt;/code&gt;).<a name="line.255"></a>
<FONT color="green">256</FONT>         *<a name="line.256"></a>
<FONT color="green">257</FONT>         * @see #addValue(Number, Comparable, Comparable)<a name="line.257"></a>
<FONT color="green">258</FONT>         * @see #removeValue(Comparable, Comparable)<a name="line.258"></a>
<FONT color="green">259</FONT>         */<a name="line.259"></a>
<FONT color="green">260</FONT>        public Number getValue(Comparable rowKey, Comparable columnKey) {<a name="line.260"></a>
<FONT color="green">261</FONT>            if (rowKey == null) {<a name="line.261"></a>
<FONT color="green">262</FONT>                throw new IllegalArgumentException("Null 'rowKey' argument.");<a name="line.262"></a>
<FONT color="green">263</FONT>            }<a name="line.263"></a>
<FONT color="green">264</FONT>            if (columnKey == null) {<a name="line.264"></a>
<FONT color="green">265</FONT>                throw new IllegalArgumentException("Null 'columnKey' argument.");<a name="line.265"></a>
<FONT color="green">266</FONT>            }<a name="line.266"></a>
<FONT color="green">267</FONT>    <a name="line.267"></a>
<FONT color="green">268</FONT>            // check that the column key is defined in the 2D structure<a name="line.268"></a>
<FONT color="green">269</FONT>            if (!(this.columnKeys.contains(columnKey))) {<a name="line.269"></a>
<FONT color="green">270</FONT>                throw new UnknownKeyException("Unrecognised columnKey: "<a name="line.270"></a>
<FONT color="green">271</FONT>                        + columnKey);<a name="line.271"></a>
<FONT color="green">272</FONT>            }<a name="line.272"></a>
<FONT color="green">273</FONT>    <a name="line.273"></a>
<FONT color="green">274</FONT>            // now fetch the row data - need to bear in mind that the row<a name="line.274"></a>
<FONT color="green">275</FONT>            // structure may not have an entry for the column key, but that we<a name="line.275"></a>
<FONT color="green">276</FONT>            // have already checked that the key is valid for the 2D structure<a name="line.276"></a>
<FONT color="green">277</FONT>            int row = getRowIndex(rowKey);<a name="line.277"></a>
<FONT color="green">278</FONT>            if (row &gt;= 0) {<a name="line.278"></a>
<FONT color="green">279</FONT>                DefaultKeyedValues rowData<a name="line.279"></a>
<FONT color="green">280</FONT>                    = (DefaultKeyedValues) this.rows.get(row);<a name="line.280"></a>
<FONT color="green">281</FONT>                int col = rowData.getIndex(columnKey);<a name="line.281"></a>
<FONT color="green">282</FONT>                return (col &gt;= 0 ? rowData.getValue(col) : null);<a name="line.282"></a>
<FONT color="green">283</FONT>            }<a name="line.283"></a>
<FONT color="green">284</FONT>            else {<a name="line.284"></a>
<FONT color="green">285</FONT>                throw new UnknownKeyException("Unrecognised rowKey: " + rowKey);<a name="line.285"></a>
<FONT color="green">286</FONT>            }<a name="line.286"></a>
<FONT color="green">287</FONT>        }<a name="line.287"></a>
<FONT color="green">288</FONT>    <a name="line.288"></a>
<FONT color="green">289</FONT>        /**<a name="line.289"></a>
<FONT color="green">290</FONT>         * Adds a value to the table.  Performs the same function as<a name="line.290"></a>
<FONT color="green">291</FONT>         * #setValue(Number, Comparable, Comparable).<a name="line.291"></a>
<FONT color="green">292</FONT>         *<a name="line.292"></a>
<FONT color="green">293</FONT>         * @param value  the value (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.293"></a>
<FONT color="green">294</FONT>         * @param rowKey  the row key (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.294"></a>
<FONT color="green">295</FONT>         * @param columnKey  the column key (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.295"></a>
<FONT color="green">296</FONT>         *<a name="line.296"></a>
<FONT color="green">297</FONT>         * @see #setValue(Number, Comparable, Comparable)<a name="line.297"></a>
<FONT color="green">298</FONT>         * @see #removeValue(Comparable, Comparable)<a name="line.298"></a>
<FONT color="green">299</FONT>         */<a name="line.299"></a>
<FONT color="green">300</FONT>        public void addValue(Number value, Comparable rowKey,<a name="line.300"></a>
<FONT color="green">301</FONT>                             Comparable columnKey) {<a name="line.301"></a>
<FONT color="green">302</FONT>            // defer argument checking<a name="line.302"></a>
<FONT color="green">303</FONT>            setValue(value, rowKey, columnKey);<a name="line.303"></a>
<FONT color="green">304</FONT>        }<a name="line.304"></a>
<FONT color="green">305</FONT>    <a name="line.305"></a>
<FONT color="green">306</FONT>        /**<a name="line.306"></a>
<FONT color="green">307</FONT>         * Adds or updates a value.<a name="line.307"></a>
<FONT color="green">308</FONT>         *<a name="line.308"></a>
<FONT color="green">309</FONT>         * @param value  the value (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.309"></a>
<FONT color="green">310</FONT>         * @param rowKey  the row key (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.310"></a>
<FONT color="green">311</FONT>         * @param columnKey  the column key (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.311"></a>
<FONT color="green">312</FONT>         *<a name="line.312"></a>
<FONT color="green">313</FONT>         * @see #addValue(Number, Comparable, Comparable)<a name="line.313"></a>
<FONT color="green">314</FONT>         * @see #removeValue(Comparable, Comparable)<a name="line.314"></a>
<FONT color="green">315</FONT>         */<a name="line.315"></a>
<FONT color="green">316</FONT>        public void setValue(Number value, Comparable rowKey,<a name="line.316"></a>
<FONT color="green">317</FONT>                             Comparable columnKey) {<a name="line.317"></a>
<FONT color="green">318</FONT>    <a name="line.318"></a>
<FONT color="green">319</FONT>            DefaultKeyedValues row;<a name="line.319"></a>
<FONT color="green">320</FONT>            int rowIndex = getRowIndex(rowKey);<a name="line.320"></a>
<FONT color="green">321</FONT>    <a name="line.321"></a>
<FONT color="green">322</FONT>            if (rowIndex &gt;= 0) {<a name="line.322"></a>
<FONT color="green">323</FONT>                row = (DefaultKeyedValues) this.rows.get(rowIndex);<a name="line.323"></a>
<FONT color="green">324</FONT>            }<a name="line.324"></a>
<FONT color="green">325</FONT>            else {<a name="line.325"></a>
<FONT color="green">326</FONT>                row = new DefaultKeyedValues();<a name="line.326"></a>
<FONT color="green">327</FONT>                if (this.sortRowKeys) {<a name="line.327"></a>
<FONT color="green">328</FONT>                    rowIndex = -rowIndex - 1;<a name="line.328"></a>
<FONT color="green">329</FONT>                    this.rowKeys.add(rowIndex, rowKey);<a name="line.329"></a>
<FONT color="green">330</FONT>                    this.rows.add(rowIndex, row);<a name="line.330"></a>
<FONT color="green">331</FONT>                }<a name="line.331"></a>
<FONT color="green">332</FONT>                else {<a name="line.332"></a>
<FONT color="green">333</FONT>                    this.rowKeys.add(rowKey);<a name="line.333"></a>
<FONT color="green">334</FONT>                    this.rows.add(row);<a name="line.334"></a>
<FONT color="green">335</FONT>                }<a name="line.335"></a>
<FONT color="green">336</FONT>            }<a name="line.336"></a>
<FONT color="green">337</FONT>            row.setValue(columnKey, value);<a name="line.337"></a>
<FONT color="green">338</FONT>    <a name="line.338"></a>
<FONT color="green">339</FONT>            int columnIndex = this.columnKeys.indexOf(columnKey);<a name="line.339"></a>
<FONT color="green">340</FONT>            if (columnIndex &lt; 0) {<a name="line.340"></a>
<FONT color="green">341</FONT>                this.columnKeys.add(columnKey);<a name="line.341"></a>
<FONT color="green">342</FONT>            }<a name="line.342"></a>
<FONT color="green">343</FONT>        }<a name="line.343"></a>
<FONT color="green">344</FONT>    <a name="line.344"></a>
<FONT color="green">345</FONT>        /**<a name="line.345"></a>
<FONT color="green">346</FONT>         * Removes a value from the table by setting it to &lt;code&gt;null&lt;/code&gt;.  If<a name="line.346"></a>
<FONT color="green">347</FONT>         * all the values in the specified row and/or column are now<a name="line.347"></a>
<FONT color="green">348</FONT>         * &lt;code&gt;null&lt;/code&gt;, the row and/or column is removed from the table.<a name="line.348"></a>
<FONT color="green">349</FONT>         *<a name="line.349"></a>
<FONT color="green">350</FONT>         * @param rowKey  the row key (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.350"></a>
<FONT color="green">351</FONT>         * @param columnKey  the column key (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.351"></a>
<FONT color="green">352</FONT>         *<a name="line.352"></a>
<FONT color="green">353</FONT>         * @see #addValue(Number, Comparable, Comparable)<a name="line.353"></a>
<FONT color="green">354</FONT>         */<a name="line.354"></a>
<FONT color="green">355</FONT>        public void removeValue(Comparable rowKey, Comparable columnKey) {<a name="line.355"></a>
<FONT color="green">356</FONT>            setValue(null, rowKey, columnKey);<a name="line.356"></a>
<FONT color="green">357</FONT>    <a name="line.357"></a>
<FONT color="green">358</FONT>            // 1. check whether the row is now empty.<a name="line.358"></a>
<FONT color="green">359</FONT>            boolean allNull = true;<a name="line.359"></a>
<FONT color="green">360</FONT>            int rowIndex = getRowIndex(rowKey);<a name="line.360"></a>
<FONT color="green">361</FONT>            DefaultKeyedValues row = (DefaultKeyedValues) this.rows.get(rowIndex);<a name="line.361"></a>
<FONT color="green">362</FONT>    <a name="line.362"></a>
<FONT color="green">363</FONT>            for (int item = 0, itemCount = row.getItemCount(); item &lt; itemCount;<a name="line.363"></a>
<FONT color="green">364</FONT>                 item++) {<a name="line.364"></a>
<FONT color="green">365</FONT>                if (row.getValue(item) != null) {<a name="line.365"></a>
<FONT color="green">366</FONT>                    allNull = false;<a name="line.366"></a>
<FONT color="green">367</FONT>                    break;<a name="line.367"></a>
<FONT color="green">368</FONT>                }<a name="line.368"></a>
<FONT color="green">369</FONT>            }<a name="line.369"></a>
<FONT color="green">370</FONT>    <a name="line.370"></a>
<FONT color="green">371</FONT>            if (allNull) {<a name="line.371"></a>
<FONT color="green">372</FONT>                this.rowKeys.remove(rowIndex);<a name="line.372"></a>
<FONT color="green">373</FONT>                this.rows.remove(rowIndex);<a name="line.373"></a>
<FONT color="green">374</FONT>            }<a name="line.374"></a>
<FONT color="green">375</FONT>    <a name="line.375"></a>
<FONT color="green">376</FONT>            // 2. check whether the column is now empty.<a name="line.376"></a>
<FONT color="green">377</FONT>            allNull = true;<a name="line.377"></a>
<FONT color="green">378</FONT>            //int columnIndex = getColumnIndex(columnKey);<a name="line.378"></a>
<FONT color="green">379</FONT>    <a name="line.379"></a>
<FONT color="green">380</FONT>            for (int item = 0, itemCount = this.rows.size(); item &lt; itemCount;<a name="line.380"></a>
<FONT color="green">381</FONT>                 item++) {<a name="line.381"></a>
<FONT color="green">382</FONT>                row = (DefaultKeyedValues) this.rows.get(item);<a name="line.382"></a>
<FONT color="green">383</FONT>                int columnIndex = row.getIndex(columnKey);<a name="line.383"></a>
<FONT color="green">384</FONT>                if (columnIndex &gt;= 0 &amp;&amp; row.getValue(columnIndex) != null) {<a name="line.384"></a>
<FONT color="green">385</FONT>                    allNull = false;<a name="line.385"></a>
<FONT color="green">386</FONT>                    break;<a name="line.386"></a>
<FONT color="green">387</FONT>                }<a name="line.387"></a>
<FONT color="green">388</FONT>            }<a name="line.388"></a>
<FONT color="green">389</FONT>    <a name="line.389"></a>
<FONT color="green">390</FONT>            if (allNull) {<a name="line.390"></a>
<FONT color="green">391</FONT>                for (int item = 0, itemCount = this.rows.size(); item &lt; itemCount;<a name="line.391"></a>
<FONT color="green">392</FONT>                     item++) {<a name="line.392"></a>
<FONT color="green">393</FONT>                    row = (DefaultKeyedValues) this.rows.get(item);<a name="line.393"></a>
<FONT color="green">394</FONT>                    int columnIndex = row.getIndex(columnKey);<a name="line.394"></a>
<FONT color="green">395</FONT>                    if (columnIndex &gt;= 0) {<a name="line.395"></a>
<FONT color="green">396</FONT>                        row.removeValue(columnIndex);<a name="line.396"></a>
<FONT color="green">397</FONT>                    }<a name="line.397"></a>
<FONT color="green">398</FONT>                }<a name="line.398"></a>
<FONT color="green">399</FONT>                this.columnKeys.remove(columnKey);<a name="line.399"></a>
<FONT color="green">400</FONT>            }<a name="line.400"></a>
<FONT color="green">401</FONT>        }<a name="line.401"></a>
<FONT color="green">402</FONT>    <a name="line.402"></a>
<FONT color="green">403</FONT>        /**<a name="line.403"></a>
<FONT color="green">404</FONT>         * Removes a row.<a name="line.404"></a>
<FONT color="green">405</FONT>         *<a name="line.405"></a>
<FONT color="green">406</FONT>         * @param rowIndex  the row index.<a name="line.406"></a>
<FONT color="green">407</FONT>         *<a name="line.407"></a>
<FONT color="green">408</FONT>         * @see #removeRow(Comparable)<a name="line.408"></a>
<FONT color="green">409</FONT>         * @see #removeColumn(int)<a name="line.409"></a>
<FONT color="green">410</FONT>         */<a name="line.410"></a>
<FONT color="green">411</FONT>        public void removeRow(int rowIndex) {<a name="line.411"></a>
<FONT color="green">412</FONT>            this.rowKeys.remove(rowIndex);<a name="line.412"></a>
<FONT color="green">413</FONT>            this.rows.remove(rowIndex);<a name="line.413"></a>
<FONT color="green">414</FONT>        }<a name="line.414"></a>
<FONT color="green">415</FONT>    <a name="line.415"></a>
<FONT color="green">416</FONT>        /**<a name="line.416"></a>
<FONT color="green">417</FONT>         * Removes a row from the table.<a name="line.417"></a>
<FONT color="green">418</FONT>         *<a name="line.418"></a>
<FONT color="green">419</FONT>         * @param rowKey  the row key (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.419"></a>
<FONT color="green">420</FONT>         *<a name="line.420"></a>
<FONT color="green">421</FONT>         * @see #removeRow(int)<a name="line.421"></a>
<FONT color="green">422</FONT>         * @see #removeColumn(Comparable)<a name="line.422"></a>
<FONT color="green">423</FONT>         *<a name="line.423"></a>
<FONT color="green">424</FONT>         * @throws UnknownKeyException if &lt;code&gt;rowKey&lt;/code&gt; is not defined in the<a name="line.424"></a>
<FONT color="green">425</FONT>         *         table.<a name="line.425"></a>
<FONT color="green">426</FONT>         */<a name="line.426"></a>
<FONT color="green">427</FONT>        public void removeRow(Comparable rowKey) {<a name="line.427"></a>
<FONT color="green">428</FONT>            if (rowKey == null) {<a name="line.428"></a>
<FONT color="green">429</FONT>                throw new IllegalArgumentException("Null 'rowKey' argument.");<a name="line.429"></a>
<FONT color="green">430</FONT>            }<a name="line.430"></a>
<FONT color="green">431</FONT>            int index = getRowIndex(rowKey);<a name="line.431"></a>
<FONT color="green">432</FONT>            if (index &gt;= 0) {<a name="line.432"></a>
<FONT color="green">433</FONT>                removeRow(index);<a name="line.433"></a>
<FONT color="green">434</FONT>            }<a name="line.434"></a>
<FONT color="green">435</FONT>            else {<a name="line.435"></a>
<FONT color="green">436</FONT>                throw new UnknownKeyException("Unknown key: " + rowKey);<a name="line.436"></a>
<FONT color="green">437</FONT>            }<a name="line.437"></a>
<FONT color="green">438</FONT>        }<a name="line.438"></a>
<FONT color="green">439</FONT>    <a name="line.439"></a>
<FONT color="green">440</FONT>        /**<a name="line.440"></a>
<FONT color="green">441</FONT>         * Removes a column.<a name="line.441"></a>
<FONT color="green">442</FONT>         *<a name="line.442"></a>
<FONT color="green">443</FONT>         * @param columnIndex  the column index.<a name="line.443"></a>
<FONT color="green">444</FONT>         *<a name="line.444"></a>
<FONT color="green">445</FONT>         * @see #removeColumn(Comparable)<a name="line.445"></a>
<FONT color="green">446</FONT>         * @see #removeRow(int)<a name="line.446"></a>
<FONT color="green">447</FONT>         */<a name="line.447"></a>
<FONT color="green">448</FONT>        public void removeColumn(int columnIndex) {<a name="line.448"></a>
<FONT color="green">449</FONT>            Comparable columnKey = getColumnKey(columnIndex);<a name="line.449"></a>
<FONT color="green">450</FONT>            removeColumn(columnKey);<a name="line.450"></a>
<FONT color="green">451</FONT>        }<a name="line.451"></a>
<FONT color="green">452</FONT>    <a name="line.452"></a>
<FONT color="green">453</FONT>        /**<a name="line.453"></a>
<FONT color="green">454</FONT>         * Removes a column from the table.<a name="line.454"></a>
<FONT color="green">455</FONT>         *<a name="line.455"></a>
<FONT color="green">456</FONT>         * @param columnKey  the column key (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.456"></a>
<FONT color="green">457</FONT>         *<a name="line.457"></a>
<FONT color="green">458</FONT>         * @throws UnknownKeyException if the table does not contain a column with<a name="line.458"></a>
<FONT color="green">459</FONT>         *     the specified key.<a name="line.459"></a>
<FONT color="green">460</FONT>         * @throws IllegalArgumentException if &lt;code&gt;columnKey&lt;/code&gt; is<a name="line.460"></a>
<FONT color="green">461</FONT>         *     &lt;code&gt;null&lt;/code&gt;.<a name="line.461"></a>
<FONT color="green">462</FONT>         *<a name="line.462"></a>
<FONT color="green">463</FONT>         * @see #removeColumn(int)<a name="line.463"></a>
<FONT color="green">464</FONT>         * @see #removeRow(Comparable)<a name="line.464"></a>
<FONT color="green">465</FONT>         */<a name="line.465"></a>
<FONT color="green">466</FONT>        public void removeColumn(Comparable columnKey) {<a name="line.466"></a>
<FONT color="green">467</FONT>            if (columnKey == null) {<a name="line.467"></a>
<FONT color="green">468</FONT>                throw new IllegalArgumentException("Null 'columnKey' argument.");<a name="line.468"></a>
<FONT color="green">469</FONT>            }<a name="line.469"></a>
<FONT color="green">470</FONT>            if (!this.columnKeys.contains(columnKey)) {<a name="line.470"></a>
<FONT color="green">471</FONT>                throw new UnknownKeyException("Unknown key: " + columnKey);<a name="line.471"></a>
<FONT color="green">472</FONT>            }<a name="line.472"></a>
<FONT color="green">473</FONT>            Iterator iterator = this.rows.iterator();<a name="line.473"></a>
<FONT color="green">474</FONT>            while (iterator.hasNext()) {<a name="line.474"></a>
<FONT color="green">475</FONT>                DefaultKeyedValues rowData = (DefaultKeyedValues) iterator.next();<a name="line.475"></a>
<FONT color="green">476</FONT>                int index = rowData.getIndex(columnKey);<a name="line.476"></a>
<FONT color="green">477</FONT>                if (index &gt;= 0) {<a name="line.477"></a>
<FONT color="green">478</FONT>                    rowData.removeValue(columnKey);<a name="line.478"></a>
<FONT color="green">479</FONT>                }<a name="line.479"></a>
<FONT color="green">480</FONT>            }<a name="line.480"></a>
<FONT color="green">481</FONT>            this.columnKeys.remove(columnKey);<a name="line.481"></a>
<FONT color="green">482</FONT>        }<a name="line.482"></a>
<FONT color="green">483</FONT>    <a name="line.483"></a>
<FONT color="green">484</FONT>        /**<a name="line.484"></a>
<FONT color="green">485</FONT>         * Clears all the data and associated keys.<a name="line.485"></a>
<FONT color="green">486</FONT>         */<a name="line.486"></a>
<FONT color="green">487</FONT>        public void clear() {<a name="line.487"></a>
<FONT color="green">488</FONT>            this.rowKeys.clear();<a name="line.488"></a>
<FONT color="green">489</FONT>            this.columnKeys.clear();<a name="line.489"></a>
<FONT color="green">490</FONT>            this.rows.clear();<a name="line.490"></a>
<FONT color="green">491</FONT>        }<a name="line.491"></a>
<FONT color="green">492</FONT>    <a name="line.492"></a>
<FONT color="green">493</FONT>        /**<a name="line.493"></a>
<FONT color="green">494</FONT>         * Tests if this object is equal to another.<a name="line.494"></a>
<FONT color="green">495</FONT>         *<a name="line.495"></a>
<FONT color="green">496</FONT>         * @param o  the other object (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.496"></a>
<FONT color="green">497</FONT>         *<a name="line.497"></a>
<FONT color="green">498</FONT>         * @return A boolean.<a name="line.498"></a>
<FONT color="green">499</FONT>         */<a name="line.499"></a>
<FONT color="green">500</FONT>        public boolean equals(Object o) {<a name="line.500"></a>
<FONT color="green">501</FONT>    <a name="line.501"></a>
<FONT color="green">502</FONT>            if (o == null) {<a name="line.502"></a>
<FONT color="green">503</FONT>                return false;<a name="line.503"></a>
<FONT color="green">504</FONT>            }<a name="line.504"></a>
<FONT color="green">505</FONT>            if (o == this) {<a name="line.505"></a>
<FONT color="green">506</FONT>                return true;<a name="line.506"></a>
<FONT color="green">507</FONT>            }<a name="line.507"></a>
<FONT color="green">508</FONT>    <a name="line.508"></a>
<FONT color="green">509</FONT>            if (!(o instanceof KeyedValues2D)) {<a name="line.509"></a>
<FONT color="green">510</FONT>                return false;<a name="line.510"></a>
<FONT color="green">511</FONT>            }<a name="line.511"></a>
<FONT color="green">512</FONT>            KeyedValues2D kv2D = (KeyedValues2D) o;<a name="line.512"></a>
<FONT color="green">513</FONT>            if (!getRowKeys().equals(kv2D.getRowKeys())) {<a name="line.513"></a>
<FONT color="green">514</FONT>                return false;<a name="line.514"></a>
<FONT color="green">515</FONT>            }<a name="line.515"></a>
<FONT color="green">516</FONT>            if (!getColumnKeys().equals(kv2D.getColumnKeys())) {<a name="line.516"></a>
<FONT color="green">517</FONT>                return false;<a name="line.517"></a>
<FONT color="green">518</FONT>            }<a name="line.518"></a>
<FONT color="green">519</FONT>            int rowCount = getRowCount();<a name="line.519"></a>
<FONT color="green">520</FONT>            if (rowCount != kv2D.getRowCount()) {<a name="line.520"></a>
<FONT color="green">521</FONT>                return false;<a name="line.521"></a>
<FONT color="green">522</FONT>            }<a name="line.522"></a>
<FONT color="green">523</FONT>    <a name="line.523"></a>
<FONT color="green">524</FONT>            int colCount = getColumnCount();<a name="line.524"></a>
<FONT color="green">525</FONT>            if (colCount != kv2D.getColumnCount()) {<a name="line.525"></a>
<FONT color="green">526</FONT>                return false;<a name="line.526"></a>
<FONT color="green">527</FONT>            }<a name="line.527"></a>
<FONT color="green">528</FONT>    <a name="line.528"></a>
<FONT color="green">529</FONT>            for (int r = 0; r &lt; rowCount; r++) {<a name="line.529"></a>
<FONT color="green">530</FONT>                for (int c = 0; c &lt; colCount; c++) {<a name="line.530"></a>
<FONT color="green">531</FONT>                    Number v1 = getValue(r, c);<a name="line.531"></a>
<FONT color="green">532</FONT>                    Number v2 = kv2D.getValue(r, c);<a name="line.532"></a>
<FONT color="green">533</FONT>                    if (v1 == null) {<a name="line.533"></a>
<FONT color="green">534</FONT>                        if (v2 != null) {<a name="line.534"></a>
<FONT color="green">535</FONT>                            return false;<a name="line.535"></a>
<FONT color="green">536</FONT>                        }<a name="line.536"></a>
<FONT color="green">537</FONT>                    }<a name="line.537"></a>
<FONT color="green">538</FONT>                    else {<a name="line.538"></a>
<FONT color="green">539</FONT>                        if (!v1.equals(v2)) {<a name="line.539"></a>
<FONT color="green">540</FONT>                            return false;<a name="line.540"></a>
<FONT color="green">541</FONT>                        }<a name="line.541"></a>
<FONT color="green">542</FONT>                    }<a name="line.542"></a>
<FONT color="green">543</FONT>                }<a name="line.543"></a>
<FONT color="green">544</FONT>            }<a name="line.544"></a>
<FONT color="green">545</FONT>            return true;<a name="line.545"></a>
<FONT color="green">546</FONT>        }<a name="line.546"></a>
<FONT color="green">547</FONT>    <a name="line.547"></a>
<FONT color="green">548</FONT>        /**<a name="line.548"></a>
<FONT color="green">549</FONT>         * Returns a hash code.<a name="line.549"></a>
<FONT color="green">550</FONT>         *<a name="line.550"></a>
<FONT color="green">551</FONT>         * @return A hash code.<a name="line.551"></a>
<FONT color="green">552</FONT>         */<a name="line.552"></a>
<FONT color="green">553</FONT>        public int hashCode() {<a name="line.553"></a>
<FONT color="green">554</FONT>            int result;<a name="line.554"></a>
<FONT color="green">555</FONT>            result = this.rowKeys.hashCode();<a name="line.555"></a>
<FONT color="green">556</FONT>            result = 29 * result + this.columnKeys.hashCode();<a name="line.556"></a>
<FONT color="green">557</FONT>            result = 29 * result + this.rows.hashCode();<a name="line.557"></a>
<FONT color="green">558</FONT>            return result;<a name="line.558"></a>
<FONT color="green">559</FONT>        }<a name="line.559"></a>
<FONT color="green">560</FONT>    <a name="line.560"></a>
<FONT color="green">561</FONT>        /**<a name="line.561"></a>
<FONT color="green">562</FONT>         * Returns a clone.<a name="line.562"></a>
<FONT color="green">563</FONT>         *<a name="line.563"></a>
<FONT color="green">564</FONT>         * @return A clone.<a name="line.564"></a>
<FONT color="green">565</FONT>         *<a name="line.565"></a>
<FONT color="green">566</FONT>         * @throws CloneNotSupportedException  this class will not throw this<a name="line.566"></a>
<FONT color="green">567</FONT>         *         exception, but subclasses (if any) might.<a name="line.567"></a>
<FONT color="green">568</FONT>         */<a name="line.568"></a>
<FONT color="green">569</FONT>        public Object clone() throws CloneNotSupportedException {<a name="line.569"></a>
<FONT color="green">570</FONT>            DefaultKeyedValues2D clone = (DefaultKeyedValues2D) super.clone();<a name="line.570"></a>
<FONT color="green">571</FONT>            // for the keys, a shallow copy should be fine because keys<a name="line.571"></a>
<FONT color="green">572</FONT>            // should be immutable...<a name="line.572"></a>
<FONT color="green">573</FONT>            clone.columnKeys = new java.util.ArrayList(this.columnKeys);<a name="line.573"></a>
<FONT color="green">574</FONT>            clone.rowKeys = new java.util.ArrayList(this.rowKeys);<a name="line.574"></a>
<FONT color="green">575</FONT>    <a name="line.575"></a>
<FONT color="green">576</FONT>            // but the row data requires a deep copy<a name="line.576"></a>
<FONT color="green">577</FONT>            clone.rows = (List) ObjectUtilities.deepClone(this.rows);<a name="line.577"></a>
<FONT color="green">578</FONT>            return clone;<a name="line.578"></a>
<FONT color="green">579</FONT>        }<a name="line.579"></a>
<FONT color="green">580</FONT>    <a name="line.580"></a>
<FONT color="green">581</FONT>    }<a name="line.581"></a>




























































</PRE>
</BODY>
</HTML>
