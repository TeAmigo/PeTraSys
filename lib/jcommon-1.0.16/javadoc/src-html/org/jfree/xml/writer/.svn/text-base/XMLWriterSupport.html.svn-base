<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ========================================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JCommon : a free general purpose class library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ========================================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     * <a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jcommon/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it <a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by <a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or <a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but <a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY <a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public <a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, <a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.  <a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc. <a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     * <a name="line.26"></a>
<FONT color="green">027</FONT>     * ---------------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * XMLWriterSupport.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * ---------------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C)opyright 2003-2005, by Thomas Morgner and Contributors.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  Thomas Morgner;<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   David Gilbert (for Object Refinery Limited);<a name="line.33"></a>
<FONT color="green">034</FONT>     *<a name="line.34"></a>
<FONT color="green">035</FONT>     * $Id: XMLWriterSupport.java,v 1.6 2005/11/08 14:35:52 mungady Exp $<a name="line.35"></a>
<FONT color="green">036</FONT>     *<a name="line.36"></a>
<FONT color="green">037</FONT>     * Changes<a name="line.37"></a>
<FONT color="green">038</FONT>     * -------<a name="line.38"></a>
<FONT color="green">039</FONT>     * 21-Jun-2003 : Initial version (TM);<a name="line.39"></a>
<FONT color="green">040</FONT>     * 26-Nov-2003 : Updated Javadocs (DG);<a name="line.40"></a>
<FONT color="green">041</FONT>     *<a name="line.41"></a>
<FONT color="green">042</FONT>     */<a name="line.42"></a>
<FONT color="green">043</FONT>    <a name="line.43"></a>
<FONT color="green">044</FONT>    package org.jfree.xml.writer;<a name="line.44"></a>
<FONT color="green">045</FONT>    <a name="line.45"></a>
<FONT color="green">046</FONT>    import java.io.IOException;<a name="line.46"></a>
<FONT color="green">047</FONT>    import java.io.Writer;<a name="line.47"></a>
<FONT color="green">048</FONT>    import java.util.Enumeration;<a name="line.48"></a>
<FONT color="green">049</FONT>    import java.util.Iterator;<a name="line.49"></a>
<FONT color="green">050</FONT>    import java.util.Properties;<a name="line.50"></a>
<FONT color="green">051</FONT>    <a name="line.51"></a>
<FONT color="green">052</FONT>    /**<a name="line.52"></a>
<FONT color="green">053</FONT>     * A support class for writing XML files.<a name="line.53"></a>
<FONT color="green">054</FONT>     *<a name="line.54"></a>
<FONT color="green">055</FONT>     * @author Thomas Morgner<a name="line.55"></a>
<FONT color="green">056</FONT>     */<a name="line.56"></a>
<FONT color="green">057</FONT>    public class XMLWriterSupport {<a name="line.57"></a>
<FONT color="green">058</FONT>    <a name="line.58"></a>
<FONT color="green">059</FONT>        /** A constant for controlling the indent function. */<a name="line.59"></a>
<FONT color="green">060</FONT>        public static final int OPEN_TAG_INCREASE = 1;<a name="line.60"></a>
<FONT color="green">061</FONT>    <a name="line.61"></a>
<FONT color="green">062</FONT>        /** A constant for controlling the indent function. */<a name="line.62"></a>
<FONT color="green">063</FONT>        public static final int CLOSE_TAG_DECREASE = 2;<a name="line.63"></a>
<FONT color="green">064</FONT>    <a name="line.64"></a>
<FONT color="green">065</FONT>        /** A constant for controlling the indent function. */<a name="line.65"></a>
<FONT color="green">066</FONT>        public static final int INDENT_ONLY = 3;<a name="line.66"></a>
<FONT color="green">067</FONT>    <a name="line.67"></a>
<FONT color="green">068</FONT>        /** A constant for close. */<a name="line.68"></a>
<FONT color="green">069</FONT>        public static final boolean CLOSE = true;<a name="line.69"></a>
<FONT color="green">070</FONT>    <a name="line.70"></a>
<FONT color="green">071</FONT>        /** A constant for open. */<a name="line.71"></a>
<FONT color="green">072</FONT>        public static final boolean OPEN = false;<a name="line.72"></a>
<FONT color="green">073</FONT>    <a name="line.73"></a>
<FONT color="green">074</FONT>        /** The line separator. */<a name="line.74"></a>
<FONT color="green">075</FONT>        private static String lineSeparator;<a name="line.75"></a>
<FONT color="green">076</FONT>    <a name="line.76"></a>
<FONT color="green">077</FONT>        /** A list of safe tags. */<a name="line.77"></a>
<FONT color="green">078</FONT>        private SafeTagList safeTags;<a name="line.78"></a>
<FONT color="green">079</FONT>    <a name="line.79"></a>
<FONT color="green">080</FONT>        /** The indent level for that writer. */<a name="line.80"></a>
<FONT color="green">081</FONT>        private int indentLevel;<a name="line.81"></a>
<FONT color="green">082</FONT>    <a name="line.82"></a>
<FONT color="green">083</FONT>        /** The indent string. */<a name="line.83"></a>
<FONT color="green">084</FONT>        private String indentString;<a name="line.84"></a>
<FONT color="green">085</FONT>    <a name="line.85"></a>
<FONT color="green">086</FONT>        /** <a name="line.86"></a>
<FONT color="green">087</FONT>         * A flag indicating whether to force a linebreak before printing the next <a name="line.87"></a>
<FONT color="green">088</FONT>         * tag. <a name="line.88"></a>
<FONT color="green">089</FONT>         */<a name="line.89"></a>
<FONT color="green">090</FONT>        private boolean newLineOk;<a name="line.90"></a>
<FONT color="green">091</FONT>    <a name="line.91"></a>
<FONT color="green">092</FONT>        /**<a name="line.92"></a>
<FONT color="green">093</FONT>         * Default Constructor. The created XMLWriterSupport will not have no safe <a name="line.93"></a>
<FONT color="green">094</FONT>         * tags and starts with an indention level of 0.  <a name="line.94"></a>
<FONT color="green">095</FONT>         */<a name="line.95"></a>
<FONT color="green">096</FONT>        public XMLWriterSupport() {<a name="line.96"></a>
<FONT color="green">097</FONT>            this(new SafeTagList(), 0);<a name="line.97"></a>
<FONT color="green">098</FONT>        }<a name="line.98"></a>
<FONT color="green">099</FONT>    <a name="line.99"></a>
<FONT color="green">100</FONT>        /**<a name="line.100"></a>
<FONT color="green">101</FONT>         * Creates a new support instance.<a name="line.101"></a>
<FONT color="green">102</FONT>         *<a name="line.102"></a>
<FONT color="green">103</FONT>         * @param safeTags  tags that are safe for line breaks.<a name="line.103"></a>
<FONT color="green">104</FONT>         * @param indentLevel  the index level.<a name="line.104"></a>
<FONT color="green">105</FONT>         */<a name="line.105"></a>
<FONT color="green">106</FONT>        public XMLWriterSupport(final SafeTagList safeTags, final int indentLevel) {<a name="line.106"></a>
<FONT color="green">107</FONT>            this(safeTags, indentLevel, "    ");<a name="line.107"></a>
<FONT color="green">108</FONT>        }<a name="line.108"></a>
<FONT color="green">109</FONT>    <a name="line.109"></a>
<FONT color="green">110</FONT>        /**<a name="line.110"></a>
<FONT color="green">111</FONT>         * Creates a new support instance.<a name="line.111"></a>
<FONT color="green">112</FONT>         *<a name="line.112"></a>
<FONT color="green">113</FONT>         * @param safeTags  the tags that are safe for line breaks.<a name="line.113"></a>
<FONT color="green">114</FONT>         * @param indentLevel  the indent level.<a name="line.114"></a>
<FONT color="green">115</FONT>         * @param indentString  the indent string.<a name="line.115"></a>
<FONT color="green">116</FONT>         */<a name="line.116"></a>
<FONT color="green">117</FONT>        public XMLWriterSupport(final SafeTagList safeTags, final int indentLevel, <a name="line.117"></a>
<FONT color="green">118</FONT>                final String indentString) {<a name="line.118"></a>
<FONT color="green">119</FONT>            if (indentString == null) {<a name="line.119"></a>
<FONT color="green">120</FONT>                throw new NullPointerException("IndentString must not be null");<a name="line.120"></a>
<FONT color="green">121</FONT>            }<a name="line.121"></a>
<FONT color="green">122</FONT>    <a name="line.122"></a>
<FONT color="green">123</FONT>            this.safeTags = safeTags;<a name="line.123"></a>
<FONT color="green">124</FONT>            this.indentLevel = indentLevel;<a name="line.124"></a>
<FONT color="green">125</FONT>            this.indentString = indentString;<a name="line.125"></a>
<FONT color="green">126</FONT>        }<a name="line.126"></a>
<FONT color="green">127</FONT>    <a name="line.127"></a>
<FONT color="green">128</FONT>        /**<a name="line.128"></a>
<FONT color="green">129</FONT>         * Starts a new block by increasing the indent level.<a name="line.129"></a>
<FONT color="green">130</FONT>         *<a name="line.130"></a>
<FONT color="green">131</FONT>         * @throws IOException if an IO error occurs.<a name="line.131"></a>
<FONT color="green">132</FONT>         */<a name="line.132"></a>
<FONT color="green">133</FONT>        public void startBlock() throws IOException {<a name="line.133"></a>
<FONT color="green">134</FONT>            this.indentLevel++;<a name="line.134"></a>
<FONT color="green">135</FONT>            allowLineBreak();<a name="line.135"></a>
<FONT color="green">136</FONT>        }<a name="line.136"></a>
<FONT color="green">137</FONT>    <a name="line.137"></a>
<FONT color="green">138</FONT>        /**<a name="line.138"></a>
<FONT color="green">139</FONT>         * Ends the current block by decreasing the indent level.<a name="line.139"></a>
<FONT color="green">140</FONT>         *<a name="line.140"></a>
<FONT color="green">141</FONT>         * @throws IOException if an IO error occurs.<a name="line.141"></a>
<FONT color="green">142</FONT>         */<a name="line.142"></a>
<FONT color="green">143</FONT>        public void endBlock() throws IOException {<a name="line.143"></a>
<FONT color="green">144</FONT>            this.indentLevel--;<a name="line.144"></a>
<FONT color="green">145</FONT>            allowLineBreak();<a name="line.145"></a>
<FONT color="green">146</FONT>        }<a name="line.146"></a>
<FONT color="green">147</FONT>    <a name="line.147"></a>
<FONT color="green">148</FONT>        /**<a name="line.148"></a>
<FONT color="green">149</FONT>         * Forces a linebreak on the next call to writeTag or writeCloseTag.<a name="line.149"></a>
<FONT color="green">150</FONT>         *<a name="line.150"></a>
<FONT color="green">151</FONT>         * @throws IOException if an IO error occurs.<a name="line.151"></a>
<FONT color="green">152</FONT>         */<a name="line.152"></a>
<FONT color="green">153</FONT>        public void allowLineBreak() throws IOException {<a name="line.153"></a>
<FONT color="green">154</FONT>            this.newLineOk = true;<a name="line.154"></a>
<FONT color="green">155</FONT>        }<a name="line.155"></a>
<FONT color="green">156</FONT>    <a name="line.156"></a>
<FONT color="green">157</FONT>        /**<a name="line.157"></a>
<FONT color="green">158</FONT>         * Returns the line separator.<a name="line.158"></a>
<FONT color="green">159</FONT>         *<a name="line.159"></a>
<FONT color="green">160</FONT>         * @return the line separator.<a name="line.160"></a>
<FONT color="green">161</FONT>         */<a name="line.161"></a>
<FONT color="green">162</FONT>        public static String getLineSeparator() {<a name="line.162"></a>
<FONT color="green">163</FONT>            if (lineSeparator == null) {<a name="line.163"></a>
<FONT color="green">164</FONT>                try {<a name="line.164"></a>
<FONT color="green">165</FONT>                    lineSeparator = System.getProperty("line.separator", "\n");<a name="line.165"></a>
<FONT color="green">166</FONT>                }<a name="line.166"></a>
<FONT color="green">167</FONT>                catch (SecurityException se) {<a name="line.167"></a>
<FONT color="green">168</FONT>                    lineSeparator = "\n";<a name="line.168"></a>
<FONT color="green">169</FONT>                }<a name="line.169"></a>
<FONT color="green">170</FONT>            }<a name="line.170"></a>
<FONT color="green">171</FONT>            return lineSeparator;<a name="line.171"></a>
<FONT color="green">172</FONT>        }<a name="line.172"></a>
<FONT color="green">173</FONT>    <a name="line.173"></a>
<FONT color="green">174</FONT>        /**<a name="line.174"></a>
<FONT color="green">175</FONT>         * Writes an opening XML tag that has no attributes.<a name="line.175"></a>
<FONT color="green">176</FONT>         *<a name="line.176"></a>
<FONT color="green">177</FONT>         * @param w  the writer.<a name="line.177"></a>
<FONT color="green">178</FONT>         * @param name  the tag name.<a name="line.178"></a>
<FONT color="green">179</FONT>         *<a name="line.179"></a>
<FONT color="green">180</FONT>         * @throws java.io.IOException if there is an I/O problem.<a name="line.180"></a>
<FONT color="green">181</FONT>         */<a name="line.181"></a>
<FONT color="green">182</FONT>        public void writeTag(final Writer w, final String name) throws IOException {<a name="line.182"></a>
<FONT color="green">183</FONT>            if (this.newLineOk) {<a name="line.183"></a>
<FONT color="green">184</FONT>                w.write(getLineSeparator());<a name="line.184"></a>
<FONT color="green">185</FONT>            }<a name="line.185"></a>
<FONT color="green">186</FONT>            indent(w, OPEN_TAG_INCREASE);<a name="line.186"></a>
<FONT color="green">187</FONT>    <a name="line.187"></a>
<FONT color="green">188</FONT>            w.write("&lt;");<a name="line.188"></a>
<FONT color="green">189</FONT>            w.write(name);<a name="line.189"></a>
<FONT color="green">190</FONT>            w.write("&gt;");<a name="line.190"></a>
<FONT color="green">191</FONT>            if (getSafeTags().isSafeForOpen(name)) {<a name="line.191"></a>
<FONT color="green">192</FONT>                w.write(getLineSeparator());<a name="line.192"></a>
<FONT color="green">193</FONT>            }<a name="line.193"></a>
<FONT color="green">194</FONT>        }<a name="line.194"></a>
<FONT color="green">195</FONT>    <a name="line.195"></a>
<FONT color="green">196</FONT>        /**<a name="line.196"></a>
<FONT color="green">197</FONT>         * Writes a closing XML tag.<a name="line.197"></a>
<FONT color="green">198</FONT>         *<a name="line.198"></a>
<FONT color="green">199</FONT>         * @param w  the writer.<a name="line.199"></a>
<FONT color="green">200</FONT>         * @param tag  the tag name.<a name="line.200"></a>
<FONT color="green">201</FONT>         *<a name="line.201"></a>
<FONT color="green">202</FONT>         * @throws java.io.IOException if there is an I/O problem.<a name="line.202"></a>
<FONT color="green">203</FONT>         */<a name="line.203"></a>
<FONT color="green">204</FONT>        public void writeCloseTag(final Writer w, final String tag) <a name="line.204"></a>
<FONT color="green">205</FONT>                throws IOException {<a name="line.205"></a>
<FONT color="green">206</FONT>            // check whether the tag contains CData - we ma not indent such tags<a name="line.206"></a>
<FONT color="green">207</FONT>            if (this.newLineOk || getSafeTags().isSafeForOpen(tag)) {<a name="line.207"></a>
<FONT color="green">208</FONT>                if (this.newLineOk) {<a name="line.208"></a>
<FONT color="green">209</FONT>                    w.write(getLineSeparator());<a name="line.209"></a>
<FONT color="green">210</FONT>                }<a name="line.210"></a>
<FONT color="green">211</FONT>                indent(w, CLOSE_TAG_DECREASE);<a name="line.211"></a>
<FONT color="green">212</FONT>            }<a name="line.212"></a>
<FONT color="green">213</FONT>            else {<a name="line.213"></a>
<FONT color="green">214</FONT>                decreaseIndent();<a name="line.214"></a>
<FONT color="green">215</FONT>            }<a name="line.215"></a>
<FONT color="green">216</FONT>            w.write("&lt;/");<a name="line.216"></a>
<FONT color="green">217</FONT>            w.write(tag);<a name="line.217"></a>
<FONT color="green">218</FONT>            w.write("&gt;");<a name="line.218"></a>
<FONT color="green">219</FONT>            if (getSafeTags().isSafeForClose(tag)) {<a name="line.219"></a>
<FONT color="green">220</FONT>                w.write(getLineSeparator());<a name="line.220"></a>
<FONT color="green">221</FONT>            }<a name="line.221"></a>
<FONT color="green">222</FONT>            this.newLineOk = false;<a name="line.222"></a>
<FONT color="green">223</FONT>        }<a name="line.223"></a>
<FONT color="green">224</FONT>    <a name="line.224"></a>
<FONT color="green">225</FONT>        /**<a name="line.225"></a>
<FONT color="green">226</FONT>         * Writes an opening XML tag with an attribute/value pair.<a name="line.226"></a>
<FONT color="green">227</FONT>         *<a name="line.227"></a>
<FONT color="green">228</FONT>         * @param w  the writer.<a name="line.228"></a>
<FONT color="green">229</FONT>         * @param name  the tag name.<a name="line.229"></a>
<FONT color="green">230</FONT>         * @param attributeName  the attribute name.<a name="line.230"></a>
<FONT color="green">231</FONT>         * @param attributeValue  the attribute value.<a name="line.231"></a>
<FONT color="green">232</FONT>         * @param close  controls whether the tag is closed.<a name="line.232"></a>
<FONT color="green">233</FONT>         *<a name="line.233"></a>
<FONT color="green">234</FONT>         * @throws java.io.IOException if there is an I/O problem.<a name="line.234"></a>
<FONT color="green">235</FONT>         */<a name="line.235"></a>
<FONT color="green">236</FONT>        public void writeTag(final Writer w, final String name, <a name="line.236"></a>
<FONT color="green">237</FONT>                final String attributeName, final String attributeValue,<a name="line.237"></a>
<FONT color="green">238</FONT>                final boolean close) throws IOException {<a name="line.238"></a>
<FONT color="green">239</FONT>            final AttributeList attr = new AttributeList();<a name="line.239"></a>
<FONT color="green">240</FONT>            if (attributeName != null) {<a name="line.240"></a>
<FONT color="green">241</FONT>                attr.setAttribute(attributeName, attributeValue);<a name="line.241"></a>
<FONT color="green">242</FONT>            }<a name="line.242"></a>
<FONT color="green">243</FONT>            writeTag(w, name, attr, close);<a name="line.243"></a>
<FONT color="green">244</FONT>        }<a name="line.244"></a>
<FONT color="green">245</FONT>    <a name="line.245"></a>
<FONT color="green">246</FONT>        /**<a name="line.246"></a>
<FONT color="green">247</FONT>         * Writes an opening XML tag along with a list of attribute/value pairs.<a name="line.247"></a>
<FONT color="green">248</FONT>         *<a name="line.248"></a>
<FONT color="green">249</FONT>         * @param w  the writer.<a name="line.249"></a>
<FONT color="green">250</FONT>         * @param name  the tag name.<a name="line.250"></a>
<FONT color="green">251</FONT>         * @param attributes  the attributes.<a name="line.251"></a>
<FONT color="green">252</FONT>         * @param close  controls whether the tag is closed.<a name="line.252"></a>
<FONT color="green">253</FONT>         *<a name="line.253"></a>
<FONT color="green">254</FONT>         * @throws java.io.IOException if there is an I/O problem.<a name="line.254"></a>
<FONT color="green">255</FONT>         * @deprecated use the attribute list instead of the properties.<a name="line.255"></a>
<FONT color="green">256</FONT>         */<a name="line.256"></a>
<FONT color="green">257</FONT>        public void writeTag(final Writer w, final String name, <a name="line.257"></a>
<FONT color="green">258</FONT>                final Properties attributes, final boolean close)<a name="line.258"></a>
<FONT color="green">259</FONT>                throws IOException {<a name="line.259"></a>
<FONT color="green">260</FONT>            final AttributeList attList = new AttributeList();<a name="line.260"></a>
<FONT color="green">261</FONT>            final Enumeration keys = attributes.keys();<a name="line.261"></a>
<FONT color="green">262</FONT>            while (keys.hasMoreElements()) {<a name="line.262"></a>
<FONT color="green">263</FONT>                final String key = (String) keys.nextElement();<a name="line.263"></a>
<FONT color="green">264</FONT>                attList.setAttribute(key, attributes.getProperty(key));<a name="line.264"></a>
<FONT color="green">265</FONT>            }<a name="line.265"></a>
<FONT color="green">266</FONT>            writeTag(w, name, attList, close);<a name="line.266"></a>
<FONT color="green">267</FONT>        }<a name="line.267"></a>
<FONT color="green">268</FONT>    <a name="line.268"></a>
<FONT color="green">269</FONT>        /**<a name="line.269"></a>
<FONT color="green">270</FONT>         * Writes an opening XML tag along with a list of attribute/value pairs.<a name="line.270"></a>
<FONT color="green">271</FONT>         *<a name="line.271"></a>
<FONT color="green">272</FONT>         * @param w  the writer.<a name="line.272"></a>
<FONT color="green">273</FONT>         * @param name  the tag name.<a name="line.273"></a>
<FONT color="green">274</FONT>         * @param attributes  the attributes.<a name="line.274"></a>
<FONT color="green">275</FONT>         * @param close  controls whether the tag is closed.<a name="line.275"></a>
<FONT color="green">276</FONT>         *<a name="line.276"></a>
<FONT color="green">277</FONT>         * @throws java.io.IOException if there is an I/O problem.     <a name="line.277"></a>
<FONT color="green">278</FONT>         */<a name="line.278"></a>
<FONT color="green">279</FONT>        public void writeTag(final Writer w, final String name, <a name="line.279"></a>
<FONT color="green">280</FONT>                final AttributeList attributes, final boolean close)<a name="line.280"></a>
<FONT color="green">281</FONT>                throws IOException {<a name="line.281"></a>
<FONT color="green">282</FONT>    <a name="line.282"></a>
<FONT color="green">283</FONT>            if (this.newLineOk) {<a name="line.283"></a>
<FONT color="green">284</FONT>                w.write(getLineSeparator());<a name="line.284"></a>
<FONT color="green">285</FONT>                this.newLineOk = false;<a name="line.285"></a>
<FONT color="green">286</FONT>            }<a name="line.286"></a>
<FONT color="green">287</FONT>            indent(w, OPEN_TAG_INCREASE);<a name="line.287"></a>
<FONT color="green">288</FONT>    <a name="line.288"></a>
<FONT color="green">289</FONT>            w.write("&lt;");<a name="line.289"></a>
<FONT color="green">290</FONT>            w.write(name);<a name="line.290"></a>
<FONT color="green">291</FONT>            final Iterator keys = attributes.keys();<a name="line.291"></a>
<FONT color="green">292</FONT>            while (keys.hasNext()) {<a name="line.292"></a>
<FONT color="green">293</FONT>                final String key = (String) keys.next();<a name="line.293"></a>
<FONT color="green">294</FONT>                final String value = attributes.getAttribute(key);<a name="line.294"></a>
<FONT color="green">295</FONT>                w.write(" ");<a name="line.295"></a>
<FONT color="green">296</FONT>                w.write(key);<a name="line.296"></a>
<FONT color="green">297</FONT>                w.write("=\"");<a name="line.297"></a>
<FONT color="green">298</FONT>                w.write(normalize(value));<a name="line.298"></a>
<FONT color="green">299</FONT>                w.write("\"");<a name="line.299"></a>
<FONT color="green">300</FONT>            }<a name="line.300"></a>
<FONT color="green">301</FONT>            if (close) {<a name="line.301"></a>
<FONT color="green">302</FONT>                w.write("/&gt;");<a name="line.302"></a>
<FONT color="green">303</FONT>                if (getSafeTags().isSafeForClose(name)) {<a name="line.303"></a>
<FONT color="green">304</FONT>                    w.write(getLineSeparator());<a name="line.304"></a>
<FONT color="green">305</FONT>                }<a name="line.305"></a>
<FONT color="green">306</FONT>                decreaseIndent();<a name="line.306"></a>
<FONT color="green">307</FONT>            }<a name="line.307"></a>
<FONT color="green">308</FONT>            else {<a name="line.308"></a>
<FONT color="green">309</FONT>                w.write("&gt;");<a name="line.309"></a>
<FONT color="green">310</FONT>                if (getSafeTags().isSafeForOpen(name)) {<a name="line.310"></a>
<FONT color="green">311</FONT>                    w.write(getLineSeparator());<a name="line.311"></a>
<FONT color="green">312</FONT>                }<a name="line.312"></a>
<FONT color="green">313</FONT>            }<a name="line.313"></a>
<FONT color="green">314</FONT>        }<a name="line.314"></a>
<FONT color="green">315</FONT>    <a name="line.315"></a>
<FONT color="green">316</FONT>        /**<a name="line.316"></a>
<FONT color="green">317</FONT>         * Normalises a string, replacing certain characters with their escape <a name="line.317"></a>
<FONT color="green">318</FONT>         * sequences so that the XML text is not corrupted.<a name="line.318"></a>
<FONT color="green">319</FONT>         *<a name="line.319"></a>
<FONT color="green">320</FONT>         * @param s  the string.<a name="line.320"></a>
<FONT color="green">321</FONT>         *<a name="line.321"></a>
<FONT color="green">322</FONT>         * @return the normalised string.<a name="line.322"></a>
<FONT color="green">323</FONT>         */<a name="line.323"></a>
<FONT color="green">324</FONT>        public static String normalize(final String s) {<a name="line.324"></a>
<FONT color="green">325</FONT>            if (s == null) {<a name="line.325"></a>
<FONT color="green">326</FONT>                return "";<a name="line.326"></a>
<FONT color="green">327</FONT>            }<a name="line.327"></a>
<FONT color="green">328</FONT>            final StringBuffer str = new StringBuffer();<a name="line.328"></a>
<FONT color="green">329</FONT>            final int len = s.length();<a name="line.329"></a>
<FONT color="green">330</FONT>    <a name="line.330"></a>
<FONT color="green">331</FONT>            for (int i = 0; i &lt; len; i++) {<a name="line.331"></a>
<FONT color="green">332</FONT>                final char ch = s.charAt(i);<a name="line.332"></a>
<FONT color="green">333</FONT>    <a name="line.333"></a>
<FONT color="green">334</FONT>                switch (ch) {<a name="line.334"></a>
<FONT color="green">335</FONT>                    case '&lt;':<a name="line.335"></a>
<FONT color="green">336</FONT>                        {<a name="line.336"></a>
<FONT color="green">337</FONT>                            str.append("&amp;lt;");<a name="line.337"></a>
<FONT color="green">338</FONT>                            break;<a name="line.338"></a>
<FONT color="green">339</FONT>                        }<a name="line.339"></a>
<FONT color="green">340</FONT>                    case '&gt;':<a name="line.340"></a>
<FONT color="green">341</FONT>                        {<a name="line.341"></a>
<FONT color="green">342</FONT>                            str.append("&amp;gt;");<a name="line.342"></a>
<FONT color="green">343</FONT>                            break;<a name="line.343"></a>
<FONT color="green">344</FONT>                        }<a name="line.344"></a>
<FONT color="green">345</FONT>                    case '&amp;':<a name="line.345"></a>
<FONT color="green">346</FONT>                        {<a name="line.346"></a>
<FONT color="green">347</FONT>                            str.append("&amp;amp;");<a name="line.347"></a>
<FONT color="green">348</FONT>                            break;<a name="line.348"></a>
<FONT color="green">349</FONT>                        }<a name="line.349"></a>
<FONT color="green">350</FONT>                    case '"':<a name="line.350"></a>
<FONT color="green">351</FONT>                        {<a name="line.351"></a>
<FONT color="green">352</FONT>                            str.append("&amp;quot;");<a name="line.352"></a>
<FONT color="green">353</FONT>                            break;<a name="line.353"></a>
<FONT color="green">354</FONT>                        }<a name="line.354"></a>
<FONT color="green">355</FONT>                    case '\n':<a name="line.355"></a>
<FONT color="green">356</FONT>                        {<a name="line.356"></a>
<FONT color="green">357</FONT>                            if (i &gt; 0) {<a name="line.357"></a>
<FONT color="green">358</FONT>                                final char lastChar = str.charAt(str.length() - 1);<a name="line.358"></a>
<FONT color="green">359</FONT>    <a name="line.359"></a>
<FONT color="green">360</FONT>                                if (lastChar != '\r') {<a name="line.360"></a>
<FONT color="green">361</FONT>                                    str.append(getLineSeparator());<a name="line.361"></a>
<FONT color="green">362</FONT>                                }<a name="line.362"></a>
<FONT color="green">363</FONT>                                else {<a name="line.363"></a>
<FONT color="green">364</FONT>                                    str.append('\n');<a name="line.364"></a>
<FONT color="green">365</FONT>                                }<a name="line.365"></a>
<FONT color="green">366</FONT>                            }<a name="line.366"></a>
<FONT color="green">367</FONT>                            else {<a name="line.367"></a>
<FONT color="green">368</FONT>                                str.append(getLineSeparator());<a name="line.368"></a>
<FONT color="green">369</FONT>                            }<a name="line.369"></a>
<FONT color="green">370</FONT>                            break;<a name="line.370"></a>
<FONT color="green">371</FONT>                        }<a name="line.371"></a>
<FONT color="green">372</FONT>                    default :<a name="line.372"></a>
<FONT color="green">373</FONT>                        {<a name="line.373"></a>
<FONT color="green">374</FONT>                            str.append(ch);<a name="line.374"></a>
<FONT color="green">375</FONT>                        }<a name="line.375"></a>
<FONT color="green">376</FONT>                }<a name="line.376"></a>
<FONT color="green">377</FONT>            }<a name="line.377"></a>
<FONT color="green">378</FONT>    <a name="line.378"></a>
<FONT color="green">379</FONT>            return (str.toString());<a name="line.379"></a>
<FONT color="green">380</FONT>        }<a name="line.380"></a>
<FONT color="green">381</FONT>    <a name="line.381"></a>
<FONT color="green">382</FONT>        /**<a name="line.382"></a>
<FONT color="green">383</FONT>         * Indent the line. Called for proper indenting in various places.<a name="line.383"></a>
<FONT color="green">384</FONT>         *<a name="line.384"></a>
<FONT color="green">385</FONT>         * @param writer the writer which should receive the indentention.<a name="line.385"></a>
<FONT color="green">386</FONT>         * @param increase the current indent level.<a name="line.386"></a>
<FONT color="green">387</FONT>         * @throws java.io.IOException if writing the stream failed.<a name="line.387"></a>
<FONT color="green">388</FONT>         */<a name="line.388"></a>
<FONT color="green">389</FONT>        public void indent(final Writer writer, final int increase) <a name="line.389"></a>
<FONT color="green">390</FONT>                throws IOException {<a name="line.390"></a>
<FONT color="green">391</FONT>            if (increase == CLOSE_TAG_DECREASE) {<a name="line.391"></a>
<FONT color="green">392</FONT>                decreaseIndent();<a name="line.392"></a>
<FONT color="green">393</FONT>            }<a name="line.393"></a>
<FONT color="green">394</FONT>            for (int i = 0; i &lt; this.indentLevel; i++) {<a name="line.394"></a>
<FONT color="green">395</FONT>                writer.write(this.indentString); // 4 spaces, we could also try tab,<a name="line.395"></a>
<FONT color="green">396</FONT>                // but I do not know whether this works<a name="line.396"></a>
<FONT color="green">397</FONT>                // with our XML edit pane<a name="line.397"></a>
<FONT color="green">398</FONT>            }<a name="line.398"></a>
<FONT color="green">399</FONT>            if (increase == OPEN_TAG_INCREASE) {<a name="line.399"></a>
<FONT color="green">400</FONT>                increaseIndent();<a name="line.400"></a>
<FONT color="green">401</FONT>            }<a name="line.401"></a>
<FONT color="green">402</FONT>        }<a name="line.402"></a>
<FONT color="green">403</FONT>    <a name="line.403"></a>
<FONT color="green">404</FONT>        /**<a name="line.404"></a>
<FONT color="green">405</FONT>         * Returns the current indent level.<a name="line.405"></a>
<FONT color="green">406</FONT>         *<a name="line.406"></a>
<FONT color="green">407</FONT>         * @return the current indent level.<a name="line.407"></a>
<FONT color="green">408</FONT>         */<a name="line.408"></a>
<FONT color="green">409</FONT>        public int getIndentLevel() {<a name="line.409"></a>
<FONT color="green">410</FONT>            return this.indentLevel;<a name="line.410"></a>
<FONT color="green">411</FONT>        }<a name="line.411"></a>
<FONT color="green">412</FONT>    <a name="line.412"></a>
<FONT color="green">413</FONT>        /**<a name="line.413"></a>
<FONT color="green">414</FONT>         * Increases the indention by one level.<a name="line.414"></a>
<FONT color="green">415</FONT>         */<a name="line.415"></a>
<FONT color="green">416</FONT>        protected void increaseIndent() {<a name="line.416"></a>
<FONT color="green">417</FONT>            this.indentLevel++;<a name="line.417"></a>
<FONT color="green">418</FONT>        }<a name="line.418"></a>
<FONT color="green">419</FONT>    <a name="line.419"></a>
<FONT color="green">420</FONT>        /**<a name="line.420"></a>
<FONT color="green">421</FONT>         * Decreates the indention by one level.<a name="line.421"></a>
<FONT color="green">422</FONT>         */<a name="line.422"></a>
<FONT color="green">423</FONT>        protected void decreaseIndent() {<a name="line.423"></a>
<FONT color="green">424</FONT>            this.indentLevel--;<a name="line.424"></a>
<FONT color="green">425</FONT>        }<a name="line.425"></a>
<FONT color="green">426</FONT>    <a name="line.426"></a>
<FONT color="green">427</FONT>        /**<a name="line.427"></a>
<FONT color="green">428</FONT>         * Returns the list of safe tags.<a name="line.428"></a>
<FONT color="green">429</FONT>         *<a name="line.429"></a>
<FONT color="green">430</FONT>         * @return The list.<a name="line.430"></a>
<FONT color="green">431</FONT>         */<a name="line.431"></a>
<FONT color="green">432</FONT>        public SafeTagList getSafeTags() {<a name="line.432"></a>
<FONT color="green">433</FONT>            return this.safeTags;<a name="line.433"></a>
<FONT color="green">434</FONT>        }<a name="line.434"></a>
<FONT color="green">435</FONT>    }<a name="line.435"></a>




























































</PRE>
</BODY>
</HTML>
