<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ========================================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JCommon : a free general purpose class library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ========================================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     * <a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jcommon/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it <a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by <a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or <a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but <a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY <a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public <a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, <a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.  <a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc. <a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     * <a name="line.26"></a>
<FONT color="green">027</FONT>     * -------------------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * DescriptionGenerator.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * -------------------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C)opyright 2003, 2004, by Thomas Morgner and Contributors.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  Thomas Morgner;<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   David Gilbert (for Object Refinery Limited);<a name="line.33"></a>
<FONT color="green">034</FONT>     *<a name="line.34"></a>
<FONT color="green">035</FONT>     * $Id: DescriptionGenerator.java,v 1.4 2005/10/18 13:32:20 mungady Exp $<a name="line.35"></a>
<FONT color="green">036</FONT>     *<a name="line.36"></a>
<FONT color="green">037</FONT>     * Changes<a name="line.37"></a>
<FONT color="green">038</FONT>     * -------------------------<a name="line.38"></a>
<FONT color="green">039</FONT>     * 21.06.2003 : Initial version<a name="line.39"></a>
<FONT color="green">040</FONT>     *<a name="line.40"></a>
<FONT color="green">041</FONT>     */<a name="line.41"></a>
<FONT color="green">042</FONT>    <a name="line.42"></a>
<FONT color="green">043</FONT>    package org.jfree.xml.generator;<a name="line.43"></a>
<FONT color="green">044</FONT>    <a name="line.44"></a>
<FONT color="green">045</FONT>    import java.io.BufferedInputStream;<a name="line.45"></a>
<FONT color="green">046</FONT>    import java.io.BufferedWriter;<a name="line.46"></a>
<FONT color="green">047</FONT>    import java.io.File;<a name="line.47"></a>
<FONT color="green">048</FONT>    import java.io.FileWriter;<a name="line.48"></a>
<FONT color="green">049</FONT>    import java.io.IOException;<a name="line.49"></a>
<FONT color="green">050</FONT>    import java.io.InputStream;<a name="line.50"></a>
<FONT color="green">051</FONT>    import java.io.Writer;<a name="line.51"></a>
<FONT color="green">052</FONT>    import java.net.URL;<a name="line.52"></a>
<FONT color="green">053</FONT>    import java.util.Iterator;<a name="line.53"></a>
<FONT color="green">054</FONT>    import java.util.Properties;<a name="line.54"></a>
<FONT color="green">055</FONT>    <a name="line.55"></a>
<FONT color="green">056</FONT>    import org.jfree.util.Log;<a name="line.56"></a>
<FONT color="green">057</FONT>    import org.jfree.util.PrintStreamLogTarget;<a name="line.57"></a>
<FONT color="green">058</FONT>    import org.jfree.util.ObjectUtilities;<a name="line.58"></a>
<FONT color="green">059</FONT>    import org.jfree.xml.generator.model.DescriptionModel;<a name="line.59"></a>
<FONT color="green">060</FONT>    <a name="line.60"></a>
<FONT color="green">061</FONT>    /**<a name="line.61"></a>
<FONT color="green">062</FONT>     * A utility application for generating class descriptions.<a name="line.62"></a>
<FONT color="green">063</FONT>     */<a name="line.63"></a>
<FONT color="green">064</FONT>    public final class DescriptionGenerator {<a name="line.64"></a>
<FONT color="green">065</FONT>    <a name="line.65"></a>
<FONT color="green">066</FONT>        /**<a name="line.66"></a>
<FONT color="green">067</FONT>         * Loads a property set from the specified URL.<a name="line.67"></a>
<FONT color="green">068</FONT>         * <a name="line.68"></a>
<FONT color="green">069</FONT>         * @param propertyURL  the URL.<a name="line.69"></a>
<FONT color="green">070</FONT>         * <a name="line.70"></a>
<FONT color="green">071</FONT>         * @return The properties.<a name="line.71"></a>
<FONT color="green">072</FONT>         */<a name="line.72"></a>
<FONT color="green">073</FONT>        private static Properties loadProperties(final URL propertyURL) {<a name="line.73"></a>
<FONT color="green">074</FONT>            final Properties p = new Properties();<a name="line.74"></a>
<FONT color="green">075</FONT>            try {<a name="line.75"></a>
<FONT color="green">076</FONT>                final InputStream in = new BufferedInputStream(propertyURL.openStream());<a name="line.76"></a>
<FONT color="green">077</FONT>                p.load(in);<a name="line.77"></a>
<FONT color="green">078</FONT>                in.close();<a name="line.78"></a>
<FONT color="green">079</FONT>            }<a name="line.79"></a>
<FONT color="green">080</FONT>            catch (Exception e) {<a name="line.80"></a>
<FONT color="green">081</FONT>                System.err.println("Unable to load properties from " + propertyURL);<a name="line.81"></a>
<FONT color="green">082</FONT>            }<a name="line.82"></a>
<FONT color="green">083</FONT>            return p;<a name="line.83"></a>
<FONT color="green">084</FONT>        }<a name="line.84"></a>
<FONT color="green">085</FONT>    <a name="line.85"></a>
<FONT color="green">086</FONT>        /**<a name="line.86"></a>
<FONT color="green">087</FONT>         * Runs the generator, using the 'generator.properties' file for configuration info.<a name="line.87"></a>
<FONT color="green">088</FONT>         * <a name="line.88"></a>
<FONT color="green">089</FONT>         * @param args  command line arguments.<a name="line.89"></a>
<FONT color="green">090</FONT>         * <a name="line.90"></a>
<FONT color="green">091</FONT>         * @throws Exception if something goes wrong!<a name="line.91"></a>
<FONT color="green">092</FONT>         */<a name="line.92"></a>
<FONT color="green">093</FONT>        public static void main(final String[] args) throws Exception {<a name="line.93"></a>
<FONT color="green">094</FONT>    <a name="line.94"></a>
<FONT color="green">095</FONT>            Log.getInstance().addTarget(new PrintStreamLogTarget());<a name="line.95"></a>
<FONT color="green">096</FONT>            <a name="line.96"></a>
<FONT color="green">097</FONT>            URL propertyURL = ObjectUtilities.getResourceRelative<a name="line.97"></a>
<FONT color="green">098</FONT>                    ("generator.properties", DescriptionGenerator.class);<a name="line.98"></a>
<FONT color="green">099</FONT>            if (args.length &gt; 0) {<a name="line.99"></a>
<FONT color="green">100</FONT>                final File f = new File(args[0]);<a name="line.100"></a>
<FONT color="green">101</FONT>                propertyURL = f.toURL();<a name="line.101"></a>
<FONT color="green">102</FONT>            }<a name="line.102"></a>
<FONT color="green">103</FONT>            final Properties p = loadProperties(propertyURL);<a name="line.103"></a>
<FONT color="green">104</FONT>    <a name="line.104"></a>
<FONT color="green">105</FONT>            final String handlerSource = p.getProperty("attributedefinition");<a name="line.105"></a>
<FONT color="green">106</FONT>            if (handlerSource != null) {<a name="line.106"></a>
<FONT color="green">107</FONT>                final Properties handlers = loadProperties(new URL(propertyURL, handlerSource));<a name="line.107"></a>
<FONT color="green">108</FONT>                ModelBuilder.getInstance().addAttributeHandlers(handlers);<a name="line.108"></a>
<FONT color="green">109</FONT>            }<a name="line.109"></a>
<FONT color="green">110</FONT>    <a name="line.110"></a>
<FONT color="green">111</FONT>            final String source = p.getProperty("sourcedirectory", ".");<a name="line.111"></a>
<FONT color="green">112</FONT>            final String target = p.getProperty("targetfile", "model.xml");<a name="line.112"></a>
<FONT color="green">113</FONT>            DescriptionModel model = null;<a name="line.113"></a>
<FONT color="green">114</FONT>            try {<a name="line.114"></a>
<FONT color="green">115</FONT>                model = new DefaultModelReader().load(target);<a name="line.115"></a>
<FONT color="green">116</FONT>            }<a name="line.116"></a>
<FONT color="green">117</FONT>            catch (Exception e) {<a name="line.117"></a>
<FONT color="green">118</FONT>                Log.debug("Unable to load default model. Ignoring...");<a name="line.118"></a>
<FONT color="green">119</FONT>            }<a name="line.119"></a>
<FONT color="green">120</FONT>    //        Log.debug (model.getModelComments());<a name="line.120"></a>
<FONT color="green">121</FONT>            model = generate(source, p, model);<a name="line.121"></a>
<FONT color="green">122</FONT>            model.prune();<a name="line.122"></a>
<FONT color="green">123</FONT>            writeMultiFile(target, model);<a name="line.123"></a>
<FONT color="green">124</FONT>            System.exit(0);<a name="line.124"></a>
<FONT color="green">125</FONT>        }<a name="line.125"></a>
<FONT color="green">126</FONT>    <a name="line.126"></a>
<FONT color="green">127</FONT>        /**<a name="line.127"></a>
<FONT color="green">128</FONT>         * Generates a {@link DescriptionModel} from the specified source.<a name="line.128"></a>
<FONT color="green">129</FONT>         * <a name="line.129"></a>
<FONT color="green">130</FONT>         * @param source  the source directory.<a name="line.130"></a>
<FONT color="green">131</FONT>         * @param configuration  the configuration properties.<a name="line.131"></a>
<FONT color="green">132</FONT>         * @param model  the model (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.132"></a>
<FONT color="green">133</FONT>         * <a name="line.133"></a>
<FONT color="green">134</FONT>         * @return A class description model.<a name="line.134"></a>
<FONT color="green">135</FONT>         */<a name="line.135"></a>
<FONT color="green">136</FONT>        public static DescriptionModel generate(final String source,<a name="line.136"></a>
<FONT color="green">137</FONT>                                                final Properties configuration,<a name="line.137"></a>
<FONT color="green">138</FONT>                                                final DescriptionModel model) {<a name="line.138"></a>
<FONT color="green">139</FONT>            <a name="line.139"></a>
<FONT color="green">140</FONT>            final JavaSourceCollector jsc = new JavaSourceCollector(new File(source));<a name="line.140"></a>
<FONT color="green">141</FONT>    <a name="line.141"></a>
<FONT color="green">142</FONT>            final Iterator it = configuration.keySet().iterator();<a name="line.142"></a>
<FONT color="green">143</FONT>            while (it.hasNext()) {<a name="line.143"></a>
<FONT color="green">144</FONT>                final String pName = (String) it.next();<a name="line.144"></a>
<FONT color="green">145</FONT>                if (pName.startsWith("ignore.baseclass.")) {<a name="line.145"></a>
<FONT color="green">146</FONT>                    jsc.addIgnoredBaseClass(configuration.getProperty(pName));<a name="line.146"></a>
<FONT color="green">147</FONT>                }<a name="line.147"></a>
<FONT color="green">148</FONT>                else if (pName.startsWith("ignore.package.")) {<a name="line.148"></a>
<FONT color="green">149</FONT>                    jsc.addIgnoredPackage(configuration.getProperty(pName));<a name="line.149"></a>
<FONT color="green">150</FONT>                }<a name="line.150"></a>
<FONT color="green">151</FONT>            }<a name="line.151"></a>
<FONT color="green">152</FONT>    <a name="line.152"></a>
<FONT color="green">153</FONT>            jsc.collectFiles();<a name="line.153"></a>
<FONT color="green">154</FONT>            return ModelBuilder.getInstance().buildModel(jsc, model);<a name="line.154"></a>
<FONT color="green">155</FONT>        }<a name="line.155"></a>
<FONT color="green">156</FONT>    <a name="line.156"></a>
<FONT color="green">157</FONT>        /**<a name="line.157"></a>
<FONT color="green">158</FONT>         * Writes the class description model to a single file.<a name="line.158"></a>
<FONT color="green">159</FONT>         * <a name="line.159"></a>
<FONT color="green">160</FONT>         * @param target  the target file name.<a name="line.160"></a>
<FONT color="green">161</FONT>         * @param model  the class description model.<a name="line.161"></a>
<FONT color="green">162</FONT>         * <a name="line.162"></a>
<FONT color="green">163</FONT>         * @throws IOException if there is an I/O problem.<a name="line.163"></a>
<FONT color="green">164</FONT>         */<a name="line.164"></a>
<FONT color="green">165</FONT>        public static void writeSingleFile(final String target, final DescriptionModel model) throws IOException {<a name="line.165"></a>
<FONT color="green">166</FONT>            Log.debug ("Writing ...");<a name="line.166"></a>
<FONT color="green">167</FONT>            final ModelWriter writer = new ModelWriter();<a name="line.167"></a>
<FONT color="green">168</FONT>            writer.setModel(model);<a name="line.168"></a>
<FONT color="green">169</FONT>            final Writer w = new BufferedWriter(new FileWriter(target));<a name="line.169"></a>
<FONT color="green">170</FONT>            writer.write(w);<a name="line.170"></a>
<FONT color="green">171</FONT>            w.close();<a name="line.171"></a>
<FONT color="green">172</FONT>        }<a name="line.172"></a>
<FONT color="green">173</FONT>    <a name="line.173"></a>
<FONT color="green">174</FONT>        /**<a name="line.174"></a>
<FONT color="green">175</FONT>         * Writes the class description model to multiple files.<a name="line.175"></a>
<FONT color="green">176</FONT>         * <a name="line.176"></a>
<FONT color="green">177</FONT>         * @param target  the target file name.<a name="line.177"></a>
<FONT color="green">178</FONT>         * @param model  the class description model.<a name="line.178"></a>
<FONT color="green">179</FONT>         * <a name="line.179"></a>
<FONT color="green">180</FONT>         * @throws IOException if there is an I/O problem.<a name="line.180"></a>
<FONT color="green">181</FONT>         */<a name="line.181"></a>
<FONT color="green">182</FONT>        public static void writeMultiFile(final String target, final DescriptionModel model) throws IOException {<a name="line.182"></a>
<FONT color="green">183</FONT>            Log.debug ("Writing multiple files ...");<a name="line.183"></a>
<FONT color="green">184</FONT>            final SplittingModelWriter writer = new SplittingModelWriter();<a name="line.184"></a>
<FONT color="green">185</FONT>            writer.setModel(model);<a name="line.185"></a>
<FONT color="green">186</FONT>            writer.write(target);<a name="line.186"></a>
<FONT color="green">187</FONT>        }<a name="line.187"></a>
<FONT color="green">188</FONT>        <a name="line.188"></a>
<FONT color="green">189</FONT>    }<a name="line.189"></a>




























































</PRE>
</BODY>
</HTML>
