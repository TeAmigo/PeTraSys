<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ========================================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JCommon : a free general purpose class library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ========================================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     * <a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jcommon/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it <a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by <a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or <a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but <a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY <a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public <a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, <a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.  <a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc. <a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     * <a name="line.26"></a>
<FONT color="green">027</FONT>     * -------------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * PaintUtilities.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * -------------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C) Copyright 2003-2005, by Object Refinery Limited.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  David Gilbert (for Object Refinery Limited);<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   -;<a name="line.33"></a>
<FONT color="green">034</FONT>     *<a name="line.34"></a>
<FONT color="green">035</FONT>     * $Id: PaintUtilities.java,v 1.10 2007/11/02 17:50:37 taqua Exp $<a name="line.35"></a>
<FONT color="green">036</FONT>     *<a name="line.36"></a>
<FONT color="green">037</FONT>     * Changes<a name="line.37"></a>
<FONT color="green">038</FONT>     * -------<a name="line.38"></a>
<FONT color="green">039</FONT>     * 13-Nov-2003 : Version 1 (DG);<a name="line.39"></a>
<FONT color="green">040</FONT>     * 04-Oct-2004 : Renamed PaintUtils --&gt; PaintUtilities (DG);<a name="line.40"></a>
<FONT color="green">041</FONT>     * 23-Feb-2005 : Rewrote equal() method with less indenting required (DG);<a name="line.41"></a>
<FONT color="green">042</FONT>     *<a name="line.42"></a>
<FONT color="green">043</FONT>     */<a name="line.43"></a>
<FONT color="green">044</FONT>    <a name="line.44"></a>
<FONT color="green">045</FONT>    package org.jfree.util;<a name="line.45"></a>
<FONT color="green">046</FONT>    <a name="line.46"></a>
<FONT color="green">047</FONT>    import java.awt.Color;<a name="line.47"></a>
<FONT color="green">048</FONT>    import java.awt.GradientPaint;<a name="line.48"></a>
<FONT color="green">049</FONT>    import java.awt.Paint;<a name="line.49"></a>
<FONT color="green">050</FONT>    import java.lang.reflect.Field;<a name="line.50"></a>
<FONT color="green">051</FONT>    import java.lang.reflect.Modifier;<a name="line.51"></a>
<FONT color="green">052</FONT>    <a name="line.52"></a>
<FONT color="green">053</FONT>    /**<a name="line.53"></a>
<FONT color="green">054</FONT>     * Utility code that relates to &lt;code&gt;Paint&lt;/code&gt; objects.<a name="line.54"></a>
<FONT color="green">055</FONT>     *<a name="line.55"></a>
<FONT color="green">056</FONT>     * @author David Gilbert<a name="line.56"></a>
<FONT color="green">057</FONT>     */<a name="line.57"></a>
<FONT color="green">058</FONT>    public class PaintUtilities {<a name="line.58"></a>
<FONT color="green">059</FONT>    <a name="line.59"></a>
<FONT color="green">060</FONT>        /**<a name="line.60"></a>
<FONT color="green">061</FONT>         * Private constructor prevents object creation.<a name="line.61"></a>
<FONT color="green">062</FONT>         */<a name="line.62"></a>
<FONT color="green">063</FONT>        private PaintUtilities() {<a name="line.63"></a>
<FONT color="green">064</FONT>        }<a name="line.64"></a>
<FONT color="green">065</FONT>    <a name="line.65"></a>
<FONT color="green">066</FONT>        /**<a name="line.66"></a>
<FONT color="green">067</FONT>         * Returns &lt;code&gt;true&lt;/code&gt; if the two &lt;code&gt;Paint&lt;/code&gt; objects are equal <a name="line.67"></a>
<FONT color="green">068</FONT>         * OR both &lt;code&gt;null&lt;/code&gt;.  This method handles<a name="line.68"></a>
<FONT color="green">069</FONT>         * &lt;code&gt;GradientPaint&lt;/code&gt; as a special case.<a name="line.69"></a>
<FONT color="green">070</FONT>         *<a name="line.70"></a>
<FONT color="green">071</FONT>         * @param p1  paint 1 (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.71"></a>
<FONT color="green">072</FONT>         * @param p2  paint 2 (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.72"></a>
<FONT color="green">073</FONT>         *<a name="line.73"></a>
<FONT color="green">074</FONT>         * @return A boolean.<a name="line.74"></a>
<FONT color="green">075</FONT>         */<a name="line.75"></a>
<FONT color="green">076</FONT>        public static boolean equal(final Paint p1, final Paint p2) {<a name="line.76"></a>
<FONT color="green">077</FONT>    <a name="line.77"></a>
<FONT color="green">078</FONT>            // handle cases where either or both arguments are null<a name="line.78"></a>
<FONT color="green">079</FONT>            if (p1 == null) {<a name="line.79"></a>
<FONT color="green">080</FONT>                return (p2 == null);   <a name="line.80"></a>
<FONT color="green">081</FONT>            }<a name="line.81"></a>
<FONT color="green">082</FONT>            if (p2 == null) {<a name="line.82"></a>
<FONT color="green">083</FONT>                return false;   <a name="line.83"></a>
<FONT color="green">084</FONT>            }<a name="line.84"></a>
<FONT color="green">085</FONT>            <a name="line.85"></a>
<FONT color="green">086</FONT>            boolean result = false;<a name="line.86"></a>
<FONT color="green">087</FONT>            // handle GradientPaint as a special case...<a name="line.87"></a>
<FONT color="green">088</FONT>            if (p1 instanceof GradientPaint &amp;&amp; p2 instanceof GradientPaint) {<a name="line.88"></a>
<FONT color="green">089</FONT>                final GradientPaint gp1 = (GradientPaint) p1;<a name="line.89"></a>
<FONT color="green">090</FONT>                final GradientPaint gp2 = (GradientPaint) p2;<a name="line.90"></a>
<FONT color="green">091</FONT>                result = gp1.getColor1().equals(gp2.getColor1()) <a name="line.91"></a>
<FONT color="green">092</FONT>                    &amp;&amp; gp1.getColor2().equals(gp2.getColor2())<a name="line.92"></a>
<FONT color="green">093</FONT>                    &amp;&amp; gp1.getPoint1().equals(gp2.getPoint1())    <a name="line.93"></a>
<FONT color="green">094</FONT>                    &amp;&amp; gp1.getPoint2().equals(gp2.getPoint2())<a name="line.94"></a>
<FONT color="green">095</FONT>                    &amp;&amp; gp1.isCyclic() == gp2.isCyclic()<a name="line.95"></a>
<FONT color="green">096</FONT>                    &amp;&amp; gp1.getTransparency() == gp1.getTransparency(); <a name="line.96"></a>
<FONT color="green">097</FONT>            }<a name="line.97"></a>
<FONT color="green">098</FONT>            else {<a name="line.98"></a>
<FONT color="green">099</FONT>                result = p1.equals(p2);<a name="line.99"></a>
<FONT color="green">100</FONT>            }<a name="line.100"></a>
<FONT color="green">101</FONT>            return result;<a name="line.101"></a>
<FONT color="green">102</FONT>    <a name="line.102"></a>
<FONT color="green">103</FONT>        }<a name="line.103"></a>
<FONT color="green">104</FONT>    <a name="line.104"></a>
<FONT color="green">105</FONT>        /**<a name="line.105"></a>
<FONT color="green">106</FONT>         * Converts a color into a string. If the color is equal to one of the<a name="line.106"></a>
<FONT color="green">107</FONT>         * defined constant colors, that name is returned instead. Otherwise the<a name="line.107"></a>
<FONT color="green">108</FONT>         * color is returned as hex-string.<a name="line.108"></a>
<FONT color="green">109</FONT>         *<a name="line.109"></a>
<FONT color="green">110</FONT>         * @param c the color.<a name="line.110"></a>
<FONT color="green">111</FONT>         * @return the string for this color.<a name="line.111"></a>
<FONT color="green">112</FONT>         */<a name="line.112"></a>
<FONT color="green">113</FONT>        public static String colorToString (final Color c)<a name="line.113"></a>
<FONT color="green">114</FONT>        {<a name="line.114"></a>
<FONT color="green">115</FONT>          try {<a name="line.115"></a>
<FONT color="green">116</FONT>              final Field[] fields = Color.class.getFields();<a name="line.116"></a>
<FONT color="green">117</FONT>              for (int i = 0; i &lt; fields.length; i++) {<a name="line.117"></a>
<FONT color="green">118</FONT>                  final Field f = fields[i];<a name="line.118"></a>
<FONT color="green">119</FONT>                  if (Modifier.isPublic(f.getModifiers())<a name="line.119"></a>
<FONT color="green">120</FONT>                      &amp;&amp; Modifier.isFinal(f.getModifiers())<a name="line.120"></a>
<FONT color="green">121</FONT>                      &amp;&amp; Modifier.isStatic(f.getModifiers())) {<a name="line.121"></a>
<FONT color="green">122</FONT>                      final String name = f.getName();<a name="line.122"></a>
<FONT color="green">123</FONT>                      final Object oColor = f.get(null);<a name="line.123"></a>
<FONT color="green">124</FONT>                      if (oColor instanceof Color) {<a name="line.124"></a>
<FONT color="green">125</FONT>                          if (c.equals(oColor)) {<a name="line.125"></a>
<FONT color="green">126</FONT>                              return name;<a name="line.126"></a>
<FONT color="green">127</FONT>                          }<a name="line.127"></a>
<FONT color="green">128</FONT>                      }<a name="line.128"></a>
<FONT color="green">129</FONT>                  }<a name="line.129"></a>
<FONT color="green">130</FONT>              }<a name="line.130"></a>
<FONT color="green">131</FONT>          }<a name="line.131"></a>
<FONT color="green">132</FONT>          catch (Exception e) {<a name="line.132"></a>
<FONT color="green">133</FONT>              //<a name="line.133"></a>
<FONT color="green">134</FONT>          }<a name="line.134"></a>
<FONT color="green">135</FONT>    <a name="line.135"></a>
<FONT color="green">136</FONT>          // no defined constant color, so this must be a user defined color<a name="line.136"></a>
<FONT color="green">137</FONT>          final String color = Integer.toHexString(c.getRGB() &amp; 0x00ffffff);<a name="line.137"></a>
<FONT color="green">138</FONT>          final StringBuffer retval = new StringBuffer(7);<a name="line.138"></a>
<FONT color="green">139</FONT>          retval.append("#");<a name="line.139"></a>
<FONT color="green">140</FONT>    <a name="line.140"></a>
<FONT color="green">141</FONT>          final int fillUp = 6 - color.length();<a name="line.141"></a>
<FONT color="green">142</FONT>          for (int i = 0; i &lt; fillUp; i++) {<a name="line.142"></a>
<FONT color="green">143</FONT>              retval.append("0");<a name="line.143"></a>
<FONT color="green">144</FONT>          }<a name="line.144"></a>
<FONT color="green">145</FONT>    <a name="line.145"></a>
<FONT color="green">146</FONT>          retval.append(color);<a name="line.146"></a>
<FONT color="green">147</FONT>          return retval.toString();<a name="line.147"></a>
<FONT color="green">148</FONT>        }<a name="line.148"></a>
<FONT color="green">149</FONT>    <a name="line.149"></a>
<FONT color="green">150</FONT>        /**<a name="line.150"></a>
<FONT color="green">151</FONT>         * Converts a given string into a color.<a name="line.151"></a>
<FONT color="green">152</FONT>         *<a name="line.152"></a>
<FONT color="green">153</FONT>         * @param value the string, either a name or a hex-string.<a name="line.153"></a>
<FONT color="green">154</FONT>         * @return the color.<a name="line.154"></a>
<FONT color="green">155</FONT>         */<a name="line.155"></a>
<FONT color="green">156</FONT>        public static Color stringToColor (final String value)<a name="line.156"></a>
<FONT color="green">157</FONT>        {<a name="line.157"></a>
<FONT color="green">158</FONT>          if (value == null) {<a name="line.158"></a>
<FONT color="green">159</FONT>              return Color.black;<a name="line.159"></a>
<FONT color="green">160</FONT>          }<a name="line.160"></a>
<FONT color="green">161</FONT>          try {<a name="line.161"></a>
<FONT color="green">162</FONT>              // get color by hex or octal value<a name="line.162"></a>
<FONT color="green">163</FONT>              return Color.decode(value);<a name="line.163"></a>
<FONT color="green">164</FONT>          }<a name="line.164"></a>
<FONT color="green">165</FONT>          catch (NumberFormatException nfe) {<a name="line.165"></a>
<FONT color="green">166</FONT>              // if we can't decode lets try to get it by name<a name="line.166"></a>
<FONT color="green">167</FONT>              try {<a name="line.167"></a>
<FONT color="green">168</FONT>                  // try to get a color by name using reflection<a name="line.168"></a>
<FONT color="green">169</FONT>                  final Field f = Color.class.getField(value);<a name="line.169"></a>
<FONT color="green">170</FONT>    <a name="line.170"></a>
<FONT color="green">171</FONT>                  return (Color) f.get(null);<a name="line.171"></a>
<FONT color="green">172</FONT>              }<a name="line.172"></a>
<FONT color="green">173</FONT>              catch (Exception ce) {<a name="line.173"></a>
<FONT color="green">174</FONT>                  Log.info("No such Color : " + value);<a name="line.174"></a>
<FONT color="green">175</FONT>                  // if we can't get any color return black<a name="line.175"></a>
<FONT color="green">176</FONT>                  return Color.black;<a name="line.176"></a>
<FONT color="green">177</FONT>              }<a name="line.177"></a>
<FONT color="green">178</FONT>          }<a name="line.178"></a>
<FONT color="green">179</FONT>        }<a name="line.179"></a>
<FONT color="green">180</FONT>    }<a name="line.180"></a>




























































</PRE>
</BODY>
</HTML>
