<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ========================================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JCommon : a free general purpose class library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ========================================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     * <a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jcommon/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it <a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by <a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or <a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but <a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY <a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public <a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, <a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.  <a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc. <a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     * <a name="line.26"></a>
<FONT color="green">027</FONT>     * -------------------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * PrintStreamLogTarget.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * -------------------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C)opyright 2003-2005, by Thomas Morgner and Contributors.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  Thomas Morgner;<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   David Gilbert (for Object Refinery Limited);<a name="line.33"></a>
<FONT color="green">034</FONT>     *<a name="line.34"></a>
<FONT color="green">035</FONT>     * $Id: PrintStreamLogTarget.java,v 1.6 2005/10/18 13:24:19 mungady Exp $<a name="line.35"></a>
<FONT color="green">036</FONT>     *<a name="line.36"></a>
<FONT color="green">037</FONT>     * Changes <a name="line.37"></a>
<FONT color="green">038</FONT>     * -------<a name="line.38"></a>
<FONT color="green">039</FONT>     * 02-Dec-2003 : Initial version<a name="line.39"></a>
<FONT color="green">040</FONT>     * 11-Feb-2004 : Added missing Javadocs (DG);<a name="line.40"></a>
<FONT color="green">041</FONT>     * <a name="line.41"></a>
<FONT color="green">042</FONT>     */<a name="line.42"></a>
<FONT color="green">043</FONT>    <a name="line.43"></a>
<FONT color="green">044</FONT>    package org.jfree.util;<a name="line.44"></a>
<FONT color="green">045</FONT>    <a name="line.45"></a>
<FONT color="green">046</FONT>    import java.io.PrintStream;<a name="line.46"></a>
<FONT color="green">047</FONT>    import java.io.Serializable;<a name="line.47"></a>
<FONT color="green">048</FONT>    <a name="line.48"></a>
<FONT color="green">049</FONT>    /**<a name="line.49"></a>
<FONT color="green">050</FONT>     * A log target that sends output to a {@link PrintStream}.<a name="line.50"></a>
<FONT color="green">051</FONT>     *<a name="line.51"></a>
<FONT color="green">052</FONT>     * @author Thomas Morgner<a name="line.52"></a>
<FONT color="green">053</FONT>     */<a name="line.53"></a>
<FONT color="green">054</FONT>    public class PrintStreamLogTarget implements LogTarget, Serializable {<a name="line.54"></a>
<FONT color="green">055</FONT>    <a name="line.55"></a>
<FONT color="green">056</FONT>      /** For serialization. */<a name="line.56"></a>
<FONT color="green">057</FONT>      private static final long serialVersionUID = 6510564403264504688L;<a name="line.57"></a>
<FONT color="green">058</FONT>    <a name="line.58"></a>
<FONT color="green">059</FONT>      /** The printstream we use .. */<a name="line.59"></a>
<FONT color="green">060</FONT>      private PrintStream printStream;<a name="line.60"></a>
<FONT color="green">061</FONT>    <a name="line.61"></a>
<FONT color="green">062</FONT>      /**<a name="line.62"></a>
<FONT color="green">063</FONT>       * The default constructor. Initializes this target with the system.out <a name="line.63"></a>
<FONT color="green">064</FONT>       * stream.<a name="line.64"></a>
<FONT color="green">065</FONT>       * &lt;p&gt;<a name="line.65"></a>
<FONT color="green">066</FONT>       * All {@link org.jfree.util.LogTarget} implementations need a default <a name="line.66"></a>
<FONT color="green">067</FONT>       * constructor.<a name="line.67"></a>
<FONT color="green">068</FONT>       */<a name="line.68"></a>
<FONT color="green">069</FONT>      public PrintStreamLogTarget() {<a name="line.69"></a>
<FONT color="green">070</FONT>        this (System.out);<a name="line.70"></a>
<FONT color="green">071</FONT>      }<a name="line.71"></a>
<FONT color="green">072</FONT>    <a name="line.72"></a>
<FONT color="green">073</FONT>      /**<a name="line.73"></a>
<FONT color="green">074</FONT>       * The default constructor. Initializes this target with the given stream.<a name="line.74"></a>
<FONT color="green">075</FONT>       * &lt;p&gt;<a name="line.75"></a>
<FONT color="green">076</FONT>       * @param printStream the print stream that is used to write the content.<a name="line.76"></a>
<FONT color="green">077</FONT>       */<a name="line.77"></a>
<FONT color="green">078</FONT>      public PrintStreamLogTarget(final PrintStream printStream) {<a name="line.78"></a>
<FONT color="green">079</FONT>        if (printStream == null) {<a name="line.79"></a>
<FONT color="green">080</FONT>          throw new NullPointerException();<a name="line.80"></a>
<FONT color="green">081</FONT>        }<a name="line.81"></a>
<FONT color="green">082</FONT>        this.printStream = printStream;<a name="line.82"></a>
<FONT color="green">083</FONT>      }<a name="line.83"></a>
<FONT color="green">084</FONT>    <a name="line.84"></a>
<FONT color="green">085</FONT>      /**<a name="line.85"></a>
<FONT color="green">086</FONT>       * Logs a message to the main log stream. All attached logStreams will also<a name="line.86"></a>
<FONT color="green">087</FONT>       * receive this message. If the given log-level is higher than the given <a name="line.87"></a>
<FONT color="green">088</FONT>       * debug-level in the main config file, no logging will be done.<a name="line.88"></a>
<FONT color="green">089</FONT>       *<a name="line.89"></a>
<FONT color="green">090</FONT>       * @param level log level of the message.<a name="line.90"></a>
<FONT color="green">091</FONT>       * @param message text to be logged.<a name="line.91"></a>
<FONT color="green">092</FONT>       */<a name="line.92"></a>
<FONT color="green">093</FONT>      public void log(int level, final Object message) {<a name="line.93"></a>
<FONT color="green">094</FONT>        if (level &gt; 3) {<a name="line.94"></a>
<FONT color="green">095</FONT>          level = 3;<a name="line.95"></a>
<FONT color="green">096</FONT>        }<a name="line.96"></a>
<FONT color="green">097</FONT>        this.printStream.print(LEVELS[level]);<a name="line.97"></a>
<FONT color="green">098</FONT>        this.printStream.println(message);<a name="line.98"></a>
<FONT color="green">099</FONT>        if (level &lt; 3) {<a name="line.99"></a>
<FONT color="green">100</FONT>          System.out.flush();<a name="line.100"></a>
<FONT color="green">101</FONT>        }<a name="line.101"></a>
<FONT color="green">102</FONT>      }<a name="line.102"></a>
<FONT color="green">103</FONT>    <a name="line.103"></a>
<FONT color="green">104</FONT>      /**<a name="line.104"></a>
<FONT color="green">105</FONT>       * logs an message to the main-log stream. All attached logStreams will also<a name="line.105"></a>
<FONT color="green">106</FONT>       * receive this message. If the given log-level is higher than the given <a name="line.106"></a>
<FONT color="green">107</FONT>       * debug-level in the main config file, no logging will be done.<a name="line.107"></a>
<FONT color="green">108</FONT>       *<a name="line.108"></a>
<FONT color="green">109</FONT>       * The exception's stacktrace will be appended to the log-stream<a name="line.109"></a>
<FONT color="green">110</FONT>       *<a name="line.110"></a>
<FONT color="green">111</FONT>       * @param level log level of the message.<a name="line.111"></a>
<FONT color="green">112</FONT>       * @param message text to be logged.<a name="line.112"></a>
<FONT color="green">113</FONT>       * @param e the exception, which should be logged.<a name="line.113"></a>
<FONT color="green">114</FONT>       */<a name="line.114"></a>
<FONT color="green">115</FONT>      public void log(int level, final Object message, final Exception e) {<a name="line.115"></a>
<FONT color="green">116</FONT>        if (level &gt; 3) {<a name="line.116"></a>
<FONT color="green">117</FONT>          level = 3;<a name="line.117"></a>
<FONT color="green">118</FONT>        }<a name="line.118"></a>
<FONT color="green">119</FONT>        this.printStream.print(LEVELS[level]);<a name="line.119"></a>
<FONT color="green">120</FONT>        this.printStream.println(message);<a name="line.120"></a>
<FONT color="green">121</FONT>        e.printStackTrace(this.printStream);<a name="line.121"></a>
<FONT color="green">122</FONT>        if (level &lt; 3) {<a name="line.122"></a>
<FONT color="green">123</FONT>          System.out.flush();<a name="line.123"></a>
<FONT color="green">124</FONT>        }<a name="line.124"></a>
<FONT color="green">125</FONT>      }<a name="line.125"></a>
<FONT color="green">126</FONT>    }<a name="line.126"></a>




























































</PRE>
</BODY>
</HTML>
