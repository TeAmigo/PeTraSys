<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ========================================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JCommon : a free general purpose class library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ========================================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     *<a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jcommon/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it<a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by<a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or<a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but<a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY<a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public<a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,<a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.<a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc.<a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     *<a name="line.26"></a>
<FONT color="green">027</FONT>     * --------------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * SerialUtilities.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * --------------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C) Copyright 2000-2005, by Object Refinery Limited.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  David Gilbert (for Object Refinery Limited);<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   Arik Levin;<a name="line.33"></a>
<FONT color="green">034</FONT>     *<a name="line.34"></a>
<FONT color="green">035</FONT>     * $Id: SerialUtilities.java,v 1.14 2008/06/02 06:58:28 mungady Exp $<a name="line.35"></a>
<FONT color="green">036</FONT>     *<a name="line.36"></a>
<FONT color="green">037</FONT>     * Changes<a name="line.37"></a>
<FONT color="green">038</FONT>     * -------<a name="line.38"></a>
<FONT color="green">039</FONT>     * 25-Mar-2003 : Version 1 (DG);<a name="line.39"></a>
<FONT color="green">040</FONT>     * 18-Sep-2003 : Added capability to serialize GradientPaint (DG);<a name="line.40"></a>
<FONT color="green">041</FONT>     * 26-Apr-2004 : Added read/writePoint2D() methods (DG);<a name="line.41"></a>
<FONT color="green">042</FONT>     * 22-Feb-2005 : Added support for Arc2D - see patch 1147035 by Arik Levin (DG);<a name="line.42"></a>
<FONT color="green">043</FONT>     * 29-Jul-2005 : Added support for AttributedString (DG);<a name="line.43"></a>
<FONT color="green">044</FONT>     *<a name="line.44"></a>
<FONT color="green">045</FONT>     */<a name="line.45"></a>
<FONT color="green">046</FONT>    <a name="line.46"></a>
<FONT color="green">047</FONT>    package org.jfree.io;<a name="line.47"></a>
<FONT color="green">048</FONT>    <a name="line.48"></a>
<FONT color="green">049</FONT>    import java.awt.BasicStroke;<a name="line.49"></a>
<FONT color="green">050</FONT>    import java.awt.Color;<a name="line.50"></a>
<FONT color="green">051</FONT>    import java.awt.GradientPaint;<a name="line.51"></a>
<FONT color="green">052</FONT>    import java.awt.Paint;<a name="line.52"></a>
<FONT color="green">053</FONT>    import java.awt.Shape;<a name="line.53"></a>
<FONT color="green">054</FONT>    import java.awt.Stroke;<a name="line.54"></a>
<FONT color="green">055</FONT>    import java.awt.geom.Arc2D;<a name="line.55"></a>
<FONT color="green">056</FONT>    import java.awt.geom.Ellipse2D;<a name="line.56"></a>
<FONT color="green">057</FONT>    import java.awt.geom.GeneralPath;<a name="line.57"></a>
<FONT color="green">058</FONT>    import java.awt.geom.Line2D;<a name="line.58"></a>
<FONT color="green">059</FONT>    import java.awt.geom.PathIterator;<a name="line.59"></a>
<FONT color="green">060</FONT>    import java.awt.geom.Point2D;<a name="line.60"></a>
<FONT color="green">061</FONT>    import java.awt.geom.Rectangle2D;<a name="line.61"></a>
<FONT color="green">062</FONT>    import java.io.IOException;<a name="line.62"></a>
<FONT color="green">063</FONT>    import java.io.ObjectInputStream;<a name="line.63"></a>
<FONT color="green">064</FONT>    import java.io.ObjectOutputStream;<a name="line.64"></a>
<FONT color="green">065</FONT>    import java.io.Serializable;<a name="line.65"></a>
<FONT color="green">066</FONT>    import java.text.AttributedCharacterIterator;<a name="line.66"></a>
<FONT color="green">067</FONT>    import java.text.AttributedString;<a name="line.67"></a>
<FONT color="green">068</FONT>    import java.text.CharacterIterator;<a name="line.68"></a>
<FONT color="green">069</FONT>    import java.util.HashMap;<a name="line.69"></a>
<FONT color="green">070</FONT>    import java.util.Map;<a name="line.70"></a>
<FONT color="green">071</FONT>    <a name="line.71"></a>
<FONT color="green">072</FONT>    /**<a name="line.72"></a>
<FONT color="green">073</FONT>     * A class containing useful utility methods relating to serialization.<a name="line.73"></a>
<FONT color="green">074</FONT>     *<a name="line.74"></a>
<FONT color="green">075</FONT>     * @author David Gilbert<a name="line.75"></a>
<FONT color="green">076</FONT>     */<a name="line.76"></a>
<FONT color="green">077</FONT>    public class SerialUtilities {<a name="line.77"></a>
<FONT color="green">078</FONT>    <a name="line.78"></a>
<FONT color="green">079</FONT>        /**<a name="line.79"></a>
<FONT color="green">080</FONT>         * Private constructor prevents object creation.<a name="line.80"></a>
<FONT color="green">081</FONT>         */<a name="line.81"></a>
<FONT color="green">082</FONT>        private SerialUtilities() {<a name="line.82"></a>
<FONT color="green">083</FONT>        }<a name="line.83"></a>
<FONT color="green">084</FONT>    <a name="line.84"></a>
<FONT color="green">085</FONT>        /**<a name="line.85"></a>
<FONT color="green">086</FONT>         * Returns &lt;code&gt;true&lt;/code&gt; if a class implements &lt;code&gt;Serializable&lt;/code&gt;<a name="line.86"></a>
<FONT color="green">087</FONT>         * and &lt;code&gt;false&lt;/code&gt; otherwise.<a name="line.87"></a>
<FONT color="green">088</FONT>         *<a name="line.88"></a>
<FONT color="green">089</FONT>         * @param c  the class.<a name="line.89"></a>
<FONT color="green">090</FONT>         *<a name="line.90"></a>
<FONT color="green">091</FONT>         * @return A boolean.<a name="line.91"></a>
<FONT color="green">092</FONT>         */<a name="line.92"></a>
<FONT color="green">093</FONT>        public static boolean isSerializable(final Class c) {<a name="line.93"></a>
<FONT color="green">094</FONT>            /**<a name="line.94"></a>
<FONT color="green">095</FONT>            final Class[] interfaces = c.getInterfaces();<a name="line.95"></a>
<FONT color="green">096</FONT>            for (int i = 0; i &lt; interfaces.length; i++) {<a name="line.96"></a>
<FONT color="green">097</FONT>                if (interfaces[i].equals(Serializable.class)) {<a name="line.97"></a>
<FONT color="green">098</FONT>                    return true;<a name="line.98"></a>
<FONT color="green">099</FONT>                }<a name="line.99"></a>
<FONT color="green">100</FONT>            }<a name="line.100"></a>
<FONT color="green">101</FONT>            Class cc = c.getSuperclass();<a name="line.101"></a>
<FONT color="green">102</FONT>            if (cc != null) {<a name="line.102"></a>
<FONT color="green">103</FONT>                return isSerializable(cc);<a name="line.103"></a>
<FONT color="green">104</FONT>            }<a name="line.104"></a>
<FONT color="green">105</FONT>             */<a name="line.105"></a>
<FONT color="green">106</FONT>            return (Serializable.class.isAssignableFrom(c));<a name="line.106"></a>
<FONT color="green">107</FONT>        }<a name="line.107"></a>
<FONT color="green">108</FONT>    <a name="line.108"></a>
<FONT color="green">109</FONT>        /**<a name="line.109"></a>
<FONT color="green">110</FONT>         * Reads a &lt;code&gt;Paint&lt;/code&gt; object that has been serialised by the<a name="line.110"></a>
<FONT color="green">111</FONT>         * {@link SerialUtilities#writePaint(Paint, ObjectOutputStream)} method.<a name="line.111"></a>
<FONT color="green">112</FONT>         *<a name="line.112"></a>
<FONT color="green">113</FONT>         * @param stream  the input stream (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.113"></a>
<FONT color="green">114</FONT>         *<a name="line.114"></a>
<FONT color="green">115</FONT>         * @return The paint object (possibly &lt;code&gt;null&lt;/code&gt;).<a name="line.115"></a>
<FONT color="green">116</FONT>         *<a name="line.116"></a>
<FONT color="green">117</FONT>         * @throws IOException  if there is an I/O problem.<a name="line.117"></a>
<FONT color="green">118</FONT>         * @throws ClassNotFoundException  if there is a problem loading a class.<a name="line.118"></a>
<FONT color="green">119</FONT>         */<a name="line.119"></a>
<FONT color="green">120</FONT>        public static Paint readPaint(final ObjectInputStream stream)<a name="line.120"></a>
<FONT color="green">121</FONT>            throws IOException, ClassNotFoundException {<a name="line.121"></a>
<FONT color="green">122</FONT>    <a name="line.122"></a>
<FONT color="green">123</FONT>            if (stream == null) {<a name="line.123"></a>
<FONT color="green">124</FONT>                throw new IllegalArgumentException("Null 'stream' argument.");<a name="line.124"></a>
<FONT color="green">125</FONT>            }<a name="line.125"></a>
<FONT color="green">126</FONT>            Paint result = null;<a name="line.126"></a>
<FONT color="green">127</FONT>            final boolean isNull = stream.readBoolean();<a name="line.127"></a>
<FONT color="green">128</FONT>            if (!isNull) {<a name="line.128"></a>
<FONT color="green">129</FONT>                final Class c = (Class) stream.readObject();<a name="line.129"></a>
<FONT color="green">130</FONT>                if (isSerializable(c)) {<a name="line.130"></a>
<FONT color="green">131</FONT>                    result = (Paint) stream.readObject();<a name="line.131"></a>
<FONT color="green">132</FONT>                }<a name="line.132"></a>
<FONT color="green">133</FONT>                else if (c.equals(GradientPaint.class)) {<a name="line.133"></a>
<FONT color="green">134</FONT>                    final float x1 = stream.readFloat();<a name="line.134"></a>
<FONT color="green">135</FONT>                    final float y1 = stream.readFloat();<a name="line.135"></a>
<FONT color="green">136</FONT>                    final Color c1 = (Color) stream.readObject();<a name="line.136"></a>
<FONT color="green">137</FONT>                    final float x2 = stream.readFloat();<a name="line.137"></a>
<FONT color="green">138</FONT>                    final float y2 = stream.readFloat();<a name="line.138"></a>
<FONT color="green">139</FONT>                    final Color c2 = (Color) stream.readObject();<a name="line.139"></a>
<FONT color="green">140</FONT>                    final boolean isCyclic = stream.readBoolean();<a name="line.140"></a>
<FONT color="green">141</FONT>                    result = new GradientPaint(x1, y1, c1, x2, y2, c2, isCyclic);<a name="line.141"></a>
<FONT color="green">142</FONT>                }<a name="line.142"></a>
<FONT color="green">143</FONT>            }<a name="line.143"></a>
<FONT color="green">144</FONT>            return result;<a name="line.144"></a>
<FONT color="green">145</FONT>    <a name="line.145"></a>
<FONT color="green">146</FONT>        }<a name="line.146"></a>
<FONT color="green">147</FONT>    <a name="line.147"></a>
<FONT color="green">148</FONT>        /**<a name="line.148"></a>
<FONT color="green">149</FONT>         * Serialises a &lt;code&gt;Paint&lt;/code&gt; object.<a name="line.149"></a>
<FONT color="green">150</FONT>         *<a name="line.150"></a>
<FONT color="green">151</FONT>         * @param paint  the paint object (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.151"></a>
<FONT color="green">152</FONT>         * @param stream  the output stream (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.152"></a>
<FONT color="green">153</FONT>         *<a name="line.153"></a>
<FONT color="green">154</FONT>         * @throws IOException if there is an I/O error.<a name="line.154"></a>
<FONT color="green">155</FONT>         */<a name="line.155"></a>
<FONT color="green">156</FONT>        public static void writePaint(final Paint paint,<a name="line.156"></a>
<FONT color="green">157</FONT>                                      final ObjectOutputStream stream)<a name="line.157"></a>
<FONT color="green">158</FONT>            throws IOException {<a name="line.158"></a>
<FONT color="green">159</FONT>    <a name="line.159"></a>
<FONT color="green">160</FONT>            if (stream == null) {<a name="line.160"></a>
<FONT color="green">161</FONT>                throw new IllegalArgumentException("Null 'stream' argument.");<a name="line.161"></a>
<FONT color="green">162</FONT>            }<a name="line.162"></a>
<FONT color="green">163</FONT>            if (paint != null) {<a name="line.163"></a>
<FONT color="green">164</FONT>                stream.writeBoolean(false);<a name="line.164"></a>
<FONT color="green">165</FONT>                stream.writeObject(paint.getClass());<a name="line.165"></a>
<FONT color="green">166</FONT>                if (paint instanceof Serializable) {<a name="line.166"></a>
<FONT color="green">167</FONT>                    stream.writeObject(paint);<a name="line.167"></a>
<FONT color="green">168</FONT>                }<a name="line.168"></a>
<FONT color="green">169</FONT>                else if (paint instanceof GradientPaint) {<a name="line.169"></a>
<FONT color="green">170</FONT>                    final GradientPaint gp = (GradientPaint) paint;<a name="line.170"></a>
<FONT color="green">171</FONT>                    stream.writeFloat((float) gp.getPoint1().getX());<a name="line.171"></a>
<FONT color="green">172</FONT>                    stream.writeFloat((float) gp.getPoint1().getY());<a name="line.172"></a>
<FONT color="green">173</FONT>                    stream.writeObject(gp.getColor1());<a name="line.173"></a>
<FONT color="green">174</FONT>                    stream.writeFloat((float) gp.getPoint2().getX());<a name="line.174"></a>
<FONT color="green">175</FONT>                    stream.writeFloat((float) gp.getPoint2().getY());<a name="line.175"></a>
<FONT color="green">176</FONT>                    stream.writeObject(gp.getColor2());<a name="line.176"></a>
<FONT color="green">177</FONT>                    stream.writeBoolean(gp.isCyclic());<a name="line.177"></a>
<FONT color="green">178</FONT>                }<a name="line.178"></a>
<FONT color="green">179</FONT>            }<a name="line.179"></a>
<FONT color="green">180</FONT>            else {<a name="line.180"></a>
<FONT color="green">181</FONT>                stream.writeBoolean(true);<a name="line.181"></a>
<FONT color="green">182</FONT>            }<a name="line.182"></a>
<FONT color="green">183</FONT>    <a name="line.183"></a>
<FONT color="green">184</FONT>        }<a name="line.184"></a>
<FONT color="green">185</FONT>    <a name="line.185"></a>
<FONT color="green">186</FONT>        /**<a name="line.186"></a>
<FONT color="green">187</FONT>         * Reads a &lt;code&gt;Stroke&lt;/code&gt; object that has been serialised by the<a name="line.187"></a>
<FONT color="green">188</FONT>         * {@link SerialUtilities#writeStroke(Stroke, ObjectOutputStream)} method.<a name="line.188"></a>
<FONT color="green">189</FONT>         *<a name="line.189"></a>
<FONT color="green">190</FONT>         * @param stream  the input stream (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.190"></a>
<FONT color="green">191</FONT>         *<a name="line.191"></a>
<FONT color="green">192</FONT>         * @return The stroke object (possibly &lt;code&gt;null&lt;/code&gt;).<a name="line.192"></a>
<FONT color="green">193</FONT>         *<a name="line.193"></a>
<FONT color="green">194</FONT>         * @throws IOException  if there is an I/O problem.<a name="line.194"></a>
<FONT color="green">195</FONT>         * @throws ClassNotFoundException  if there is a problem loading a class.<a name="line.195"></a>
<FONT color="green">196</FONT>         */<a name="line.196"></a>
<FONT color="green">197</FONT>        public static Stroke readStroke(final ObjectInputStream stream)<a name="line.197"></a>
<FONT color="green">198</FONT>            throws IOException, ClassNotFoundException {<a name="line.198"></a>
<FONT color="green">199</FONT>    <a name="line.199"></a>
<FONT color="green">200</FONT>            if (stream == null) {<a name="line.200"></a>
<FONT color="green">201</FONT>                throw new IllegalArgumentException("Null 'stream' argument.");<a name="line.201"></a>
<FONT color="green">202</FONT>            }<a name="line.202"></a>
<FONT color="green">203</FONT>            Stroke result = null;<a name="line.203"></a>
<FONT color="green">204</FONT>            final boolean isNull = stream.readBoolean();<a name="line.204"></a>
<FONT color="green">205</FONT>            if (!isNull) {<a name="line.205"></a>
<FONT color="green">206</FONT>                final Class c = (Class) stream.readObject();<a name="line.206"></a>
<FONT color="green">207</FONT>                if (c.equals(BasicStroke.class)) {<a name="line.207"></a>
<FONT color="green">208</FONT>                    final float width = stream.readFloat();<a name="line.208"></a>
<FONT color="green">209</FONT>                    final int cap = stream.readInt();<a name="line.209"></a>
<FONT color="green">210</FONT>                    final int join = stream.readInt();<a name="line.210"></a>
<FONT color="green">211</FONT>                    final float miterLimit = stream.readFloat();<a name="line.211"></a>
<FONT color="green">212</FONT>                    final float[] dash = (float[]) stream.readObject();<a name="line.212"></a>
<FONT color="green">213</FONT>                    final float dashPhase = stream.readFloat();<a name="line.213"></a>
<FONT color="green">214</FONT>                    result = new BasicStroke(<a name="line.214"></a>
<FONT color="green">215</FONT>                        width, cap, join, miterLimit, dash, dashPhase<a name="line.215"></a>
<FONT color="green">216</FONT>                    );<a name="line.216"></a>
<FONT color="green">217</FONT>                }<a name="line.217"></a>
<FONT color="green">218</FONT>                else {<a name="line.218"></a>
<FONT color="green">219</FONT>                    result = (Stroke) stream.readObject();<a name="line.219"></a>
<FONT color="green">220</FONT>                }<a name="line.220"></a>
<FONT color="green">221</FONT>            }<a name="line.221"></a>
<FONT color="green">222</FONT>            return result;<a name="line.222"></a>
<FONT color="green">223</FONT>    <a name="line.223"></a>
<FONT color="green">224</FONT>        }<a name="line.224"></a>
<FONT color="green">225</FONT>    <a name="line.225"></a>
<FONT color="green">226</FONT>        /**<a name="line.226"></a>
<FONT color="green">227</FONT>         * Serialises a &lt;code&gt;Stroke&lt;/code&gt; object.  This code handles the<a name="line.227"></a>
<FONT color="green">228</FONT>         * &lt;code&gt;BasicStroke&lt;/code&gt; class which is the only &lt;code&gt;Stroke&lt;/code&gt;<a name="line.228"></a>
<FONT color="green">229</FONT>         * implementation provided by the JDK (and isn't directly<a name="line.229"></a>
<FONT color="green">230</FONT>         * &lt;code&gt;Serializable&lt;/code&gt;).<a name="line.230"></a>
<FONT color="green">231</FONT>         *<a name="line.231"></a>
<FONT color="green">232</FONT>         * @param stroke  the stroke object (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.232"></a>
<FONT color="green">233</FONT>         * @param stream  the output stream (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.233"></a>
<FONT color="green">234</FONT>         *<a name="line.234"></a>
<FONT color="green">235</FONT>         * @throws IOException if there is an I/O error.<a name="line.235"></a>
<FONT color="green">236</FONT>         */<a name="line.236"></a>
<FONT color="green">237</FONT>        public static void writeStroke(final Stroke stroke,<a name="line.237"></a>
<FONT color="green">238</FONT>                                       final ObjectOutputStream stream)<a name="line.238"></a>
<FONT color="green">239</FONT>            throws IOException {<a name="line.239"></a>
<FONT color="green">240</FONT>    <a name="line.240"></a>
<FONT color="green">241</FONT>            if (stream == null) {<a name="line.241"></a>
<FONT color="green">242</FONT>                throw new IllegalArgumentException("Null 'stream' argument.");<a name="line.242"></a>
<FONT color="green">243</FONT>            }<a name="line.243"></a>
<FONT color="green">244</FONT>            if (stroke != null) {<a name="line.244"></a>
<FONT color="green">245</FONT>                stream.writeBoolean(false);<a name="line.245"></a>
<FONT color="green">246</FONT>                if (stroke instanceof BasicStroke) {<a name="line.246"></a>
<FONT color="green">247</FONT>                    final BasicStroke s = (BasicStroke) stroke;<a name="line.247"></a>
<FONT color="green">248</FONT>                    stream.writeObject(BasicStroke.class);<a name="line.248"></a>
<FONT color="green">249</FONT>                    stream.writeFloat(s.getLineWidth());<a name="line.249"></a>
<FONT color="green">250</FONT>                    stream.writeInt(s.getEndCap());<a name="line.250"></a>
<FONT color="green">251</FONT>                    stream.writeInt(s.getLineJoin());<a name="line.251"></a>
<FONT color="green">252</FONT>                    stream.writeFloat(s.getMiterLimit());<a name="line.252"></a>
<FONT color="green">253</FONT>                    stream.writeObject(s.getDashArray());<a name="line.253"></a>
<FONT color="green">254</FONT>                    stream.writeFloat(s.getDashPhase());<a name="line.254"></a>
<FONT color="green">255</FONT>                }<a name="line.255"></a>
<FONT color="green">256</FONT>                else {<a name="line.256"></a>
<FONT color="green">257</FONT>                    stream.writeObject(stroke.getClass());<a name="line.257"></a>
<FONT color="green">258</FONT>                    stream.writeObject(stroke);<a name="line.258"></a>
<FONT color="green">259</FONT>                }<a name="line.259"></a>
<FONT color="green">260</FONT>            }<a name="line.260"></a>
<FONT color="green">261</FONT>            else {<a name="line.261"></a>
<FONT color="green">262</FONT>                stream.writeBoolean(true);<a name="line.262"></a>
<FONT color="green">263</FONT>            }<a name="line.263"></a>
<FONT color="green">264</FONT>        }<a name="line.264"></a>
<FONT color="green">265</FONT>    <a name="line.265"></a>
<FONT color="green">266</FONT>        /**<a name="line.266"></a>
<FONT color="green">267</FONT>         * Reads a &lt;code&gt;Shape&lt;/code&gt; object that has been serialised by the<a name="line.267"></a>
<FONT color="green">268</FONT>         * {@link #writeShape(Shape, ObjectOutputStream)} method.<a name="line.268"></a>
<FONT color="green">269</FONT>         *<a name="line.269"></a>
<FONT color="green">270</FONT>         * @param stream  the input stream (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.270"></a>
<FONT color="green">271</FONT>         *<a name="line.271"></a>
<FONT color="green">272</FONT>         * @return The shape object (possibly &lt;code&gt;null&lt;/code&gt;).<a name="line.272"></a>
<FONT color="green">273</FONT>         *<a name="line.273"></a>
<FONT color="green">274</FONT>         * @throws IOException  if there is an I/O problem.<a name="line.274"></a>
<FONT color="green">275</FONT>         * @throws ClassNotFoundException  if there is a problem loading a class.<a name="line.275"></a>
<FONT color="green">276</FONT>         */<a name="line.276"></a>
<FONT color="green">277</FONT>        public static Shape readShape(final ObjectInputStream stream)<a name="line.277"></a>
<FONT color="green">278</FONT>            throws IOException, ClassNotFoundException {<a name="line.278"></a>
<FONT color="green">279</FONT>    <a name="line.279"></a>
<FONT color="green">280</FONT>            if (stream == null) {<a name="line.280"></a>
<FONT color="green">281</FONT>                throw new IllegalArgumentException("Null 'stream' argument.");<a name="line.281"></a>
<FONT color="green">282</FONT>            }<a name="line.282"></a>
<FONT color="green">283</FONT>            Shape result = null;<a name="line.283"></a>
<FONT color="green">284</FONT>            final boolean isNull = stream.readBoolean();<a name="line.284"></a>
<FONT color="green">285</FONT>            if (!isNull) {<a name="line.285"></a>
<FONT color="green">286</FONT>                final Class c = (Class) stream.readObject();<a name="line.286"></a>
<FONT color="green">287</FONT>                if (c.equals(Line2D.class)) {<a name="line.287"></a>
<FONT color="green">288</FONT>                    final double x1 = stream.readDouble();<a name="line.288"></a>
<FONT color="green">289</FONT>                    final double y1 = stream.readDouble();<a name="line.289"></a>
<FONT color="green">290</FONT>                    final double x2 = stream.readDouble();<a name="line.290"></a>
<FONT color="green">291</FONT>                    final double y2 = stream.readDouble();<a name="line.291"></a>
<FONT color="green">292</FONT>                    result = new Line2D.Double(x1, y1, x2, y2);<a name="line.292"></a>
<FONT color="green">293</FONT>                }<a name="line.293"></a>
<FONT color="green">294</FONT>                else if (c.equals(Rectangle2D.class)) {<a name="line.294"></a>
<FONT color="green">295</FONT>                    final double x = stream.readDouble();<a name="line.295"></a>
<FONT color="green">296</FONT>                    final double y = stream.readDouble();<a name="line.296"></a>
<FONT color="green">297</FONT>                    final double w = stream.readDouble();<a name="line.297"></a>
<FONT color="green">298</FONT>                    final double h = stream.readDouble();<a name="line.298"></a>
<FONT color="green">299</FONT>                    result = new Rectangle2D.Double(x, y, w, h);<a name="line.299"></a>
<FONT color="green">300</FONT>                }<a name="line.300"></a>
<FONT color="green">301</FONT>                else if (c.equals(Ellipse2D.class)) {<a name="line.301"></a>
<FONT color="green">302</FONT>                    final double x = stream.readDouble();<a name="line.302"></a>
<FONT color="green">303</FONT>                    final double y = stream.readDouble();<a name="line.303"></a>
<FONT color="green">304</FONT>                    final double w = stream.readDouble();<a name="line.304"></a>
<FONT color="green">305</FONT>                    final double h = stream.readDouble();<a name="line.305"></a>
<FONT color="green">306</FONT>                    result = new Ellipse2D.Double(x, y, w, h);<a name="line.306"></a>
<FONT color="green">307</FONT>                }<a name="line.307"></a>
<FONT color="green">308</FONT>                else if (c.equals(Arc2D.class)) {<a name="line.308"></a>
<FONT color="green">309</FONT>                    final double x = stream.readDouble();<a name="line.309"></a>
<FONT color="green">310</FONT>                    final double y = stream.readDouble();<a name="line.310"></a>
<FONT color="green">311</FONT>                    final double w = stream.readDouble();<a name="line.311"></a>
<FONT color="green">312</FONT>                    final double h = stream.readDouble();<a name="line.312"></a>
<FONT color="green">313</FONT>                    final double as = stream.readDouble(); // Angle Start<a name="line.313"></a>
<FONT color="green">314</FONT>                    final double ae = stream.readDouble(); // Angle Extent<a name="line.314"></a>
<FONT color="green">315</FONT>                    final int at = stream.readInt();       // Arc type<a name="line.315"></a>
<FONT color="green">316</FONT>                    result = new Arc2D.Double(x, y, w, h, as, ae, at);<a name="line.316"></a>
<FONT color="green">317</FONT>                }<a name="line.317"></a>
<FONT color="green">318</FONT>                else if (c.equals(GeneralPath.class)) {<a name="line.318"></a>
<FONT color="green">319</FONT>                    final GeneralPath gp = new GeneralPath();<a name="line.319"></a>
<FONT color="green">320</FONT>                    final float[] args = new float[6];<a name="line.320"></a>
<FONT color="green">321</FONT>                    boolean hasNext = stream.readBoolean();<a name="line.321"></a>
<FONT color="green">322</FONT>                    while (!hasNext) {<a name="line.322"></a>
<FONT color="green">323</FONT>                        final int type = stream.readInt();<a name="line.323"></a>
<FONT color="green">324</FONT>                        for (int i = 0; i &lt; 6; i++) {<a name="line.324"></a>
<FONT color="green">325</FONT>                            args[i] = stream.readFloat();<a name="line.325"></a>
<FONT color="green">326</FONT>                        }<a name="line.326"></a>
<FONT color="green">327</FONT>                        switch (type) {<a name="line.327"></a>
<FONT color="green">328</FONT>                            case PathIterator.SEG_MOVETO :<a name="line.328"></a>
<FONT color="green">329</FONT>                                gp.moveTo(args[0], args[1]);<a name="line.329"></a>
<FONT color="green">330</FONT>                                break;<a name="line.330"></a>
<FONT color="green">331</FONT>                            case PathIterator.SEG_LINETO :<a name="line.331"></a>
<FONT color="green">332</FONT>                                gp.lineTo(args[0], args[1]);<a name="line.332"></a>
<FONT color="green">333</FONT>                                break;<a name="line.333"></a>
<FONT color="green">334</FONT>                            case PathIterator.SEG_CUBICTO :<a name="line.334"></a>
<FONT color="green">335</FONT>                                gp.curveTo(args[0], args[1], args[2],<a name="line.335"></a>
<FONT color="green">336</FONT>                                        args[3], args[4], args[5]);<a name="line.336"></a>
<FONT color="green">337</FONT>                                break;<a name="line.337"></a>
<FONT color="green">338</FONT>                            case PathIterator.SEG_QUADTO :<a name="line.338"></a>
<FONT color="green">339</FONT>                                gp.quadTo(args[0], args[1], args[2], args[3]);<a name="line.339"></a>
<FONT color="green">340</FONT>                                break;<a name="line.340"></a>
<FONT color="green">341</FONT>                            case PathIterator.SEG_CLOSE :<a name="line.341"></a>
<FONT color="green">342</FONT>                                gp.closePath();<a name="line.342"></a>
<FONT color="green">343</FONT>                                break;<a name="line.343"></a>
<FONT color="green">344</FONT>                            default :<a name="line.344"></a>
<FONT color="green">345</FONT>                                throw new RuntimeException(<a name="line.345"></a>
<FONT color="green">346</FONT>                                        "JFreeChart - No path exists");<a name="line.346"></a>
<FONT color="green">347</FONT>                        }<a name="line.347"></a>
<FONT color="green">348</FONT>                        gp.setWindingRule(stream.readInt());<a name="line.348"></a>
<FONT color="green">349</FONT>                        hasNext = stream.readBoolean();<a name="line.349"></a>
<FONT color="green">350</FONT>                    }<a name="line.350"></a>
<FONT color="green">351</FONT>                    result = gp;<a name="line.351"></a>
<FONT color="green">352</FONT>                }<a name="line.352"></a>
<FONT color="green">353</FONT>                else {<a name="line.353"></a>
<FONT color="green">354</FONT>                    result = (Shape) stream.readObject();<a name="line.354"></a>
<FONT color="green">355</FONT>                }<a name="line.355"></a>
<FONT color="green">356</FONT>            }<a name="line.356"></a>
<FONT color="green">357</FONT>            return result;<a name="line.357"></a>
<FONT color="green">358</FONT>    <a name="line.358"></a>
<FONT color="green">359</FONT>        }<a name="line.359"></a>
<FONT color="green">360</FONT>    <a name="line.360"></a>
<FONT color="green">361</FONT>        /**<a name="line.361"></a>
<FONT color="green">362</FONT>         * Serialises a &lt;code&gt;Shape&lt;/code&gt; object.<a name="line.362"></a>
<FONT color="green">363</FONT>         *<a name="line.363"></a>
<FONT color="green">364</FONT>         * @param shape  the shape object (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.364"></a>
<FONT color="green">365</FONT>         * @param stream  the output stream (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.365"></a>
<FONT color="green">366</FONT>         *<a name="line.366"></a>
<FONT color="green">367</FONT>         * @throws IOException if there is an I/O error.<a name="line.367"></a>
<FONT color="green">368</FONT>         */<a name="line.368"></a>
<FONT color="green">369</FONT>        public static void writeShape(final Shape shape,<a name="line.369"></a>
<FONT color="green">370</FONT>                                      final ObjectOutputStream stream)<a name="line.370"></a>
<FONT color="green">371</FONT>            throws IOException {<a name="line.371"></a>
<FONT color="green">372</FONT>    <a name="line.372"></a>
<FONT color="green">373</FONT>            if (stream == null) {<a name="line.373"></a>
<FONT color="green">374</FONT>                throw new IllegalArgumentException("Null 'stream' argument.");<a name="line.374"></a>
<FONT color="green">375</FONT>            }<a name="line.375"></a>
<FONT color="green">376</FONT>            if (shape != null) {<a name="line.376"></a>
<FONT color="green">377</FONT>                stream.writeBoolean(false);<a name="line.377"></a>
<FONT color="green">378</FONT>                if (shape instanceof Line2D) {<a name="line.378"></a>
<FONT color="green">379</FONT>                    final Line2D line = (Line2D) shape;<a name="line.379"></a>
<FONT color="green">380</FONT>                    stream.writeObject(Line2D.class);<a name="line.380"></a>
<FONT color="green">381</FONT>                    stream.writeDouble(line.getX1());<a name="line.381"></a>
<FONT color="green">382</FONT>                    stream.writeDouble(line.getY1());<a name="line.382"></a>
<FONT color="green">383</FONT>                    stream.writeDouble(line.getX2());<a name="line.383"></a>
<FONT color="green">384</FONT>                    stream.writeDouble(line.getY2());<a name="line.384"></a>
<FONT color="green">385</FONT>                }<a name="line.385"></a>
<FONT color="green">386</FONT>                else if (shape instanceof Rectangle2D) {<a name="line.386"></a>
<FONT color="green">387</FONT>                    final Rectangle2D rectangle = (Rectangle2D) shape;<a name="line.387"></a>
<FONT color="green">388</FONT>                    stream.writeObject(Rectangle2D.class);<a name="line.388"></a>
<FONT color="green">389</FONT>                    stream.writeDouble(rectangle.getX());<a name="line.389"></a>
<FONT color="green">390</FONT>                    stream.writeDouble(rectangle.getY());<a name="line.390"></a>
<FONT color="green">391</FONT>                    stream.writeDouble(rectangle.getWidth());<a name="line.391"></a>
<FONT color="green">392</FONT>                    stream.writeDouble(rectangle.getHeight());<a name="line.392"></a>
<FONT color="green">393</FONT>                }<a name="line.393"></a>
<FONT color="green">394</FONT>                else if (shape instanceof Ellipse2D) {<a name="line.394"></a>
<FONT color="green">395</FONT>                    final Ellipse2D ellipse = (Ellipse2D) shape;<a name="line.395"></a>
<FONT color="green">396</FONT>                    stream.writeObject(Ellipse2D.class);<a name="line.396"></a>
<FONT color="green">397</FONT>                    stream.writeDouble(ellipse.getX());<a name="line.397"></a>
<FONT color="green">398</FONT>                    stream.writeDouble(ellipse.getY());<a name="line.398"></a>
<FONT color="green">399</FONT>                    stream.writeDouble(ellipse.getWidth());<a name="line.399"></a>
<FONT color="green">400</FONT>                    stream.writeDouble(ellipse.getHeight());<a name="line.400"></a>
<FONT color="green">401</FONT>                }<a name="line.401"></a>
<FONT color="green">402</FONT>                else if (shape instanceof Arc2D) {<a name="line.402"></a>
<FONT color="green">403</FONT>                    final Arc2D arc = (Arc2D) shape;<a name="line.403"></a>
<FONT color="green">404</FONT>                    stream.writeObject(Arc2D.class);<a name="line.404"></a>
<FONT color="green">405</FONT>                    stream.writeDouble(arc.getX());<a name="line.405"></a>
<FONT color="green">406</FONT>                    stream.writeDouble(arc.getY());<a name="line.406"></a>
<FONT color="green">407</FONT>                    stream.writeDouble(arc.getWidth());<a name="line.407"></a>
<FONT color="green">408</FONT>                    stream.writeDouble(arc.getHeight());<a name="line.408"></a>
<FONT color="green">409</FONT>                    stream.writeDouble(arc.getAngleStart());<a name="line.409"></a>
<FONT color="green">410</FONT>                    stream.writeDouble(arc.getAngleExtent());<a name="line.410"></a>
<FONT color="green">411</FONT>                    stream.writeInt(arc.getArcType());<a name="line.411"></a>
<FONT color="green">412</FONT>                }<a name="line.412"></a>
<FONT color="green">413</FONT>                else if (shape instanceof GeneralPath) {<a name="line.413"></a>
<FONT color="green">414</FONT>                    stream.writeObject(GeneralPath.class);<a name="line.414"></a>
<FONT color="green">415</FONT>                    final PathIterator pi = shape.getPathIterator(null);<a name="line.415"></a>
<FONT color="green">416</FONT>                    final float[] args = new float[6];<a name="line.416"></a>
<FONT color="green">417</FONT>                    stream.writeBoolean(pi.isDone());<a name="line.417"></a>
<FONT color="green">418</FONT>                    while (!pi.isDone()) {<a name="line.418"></a>
<FONT color="green">419</FONT>                        final int type = pi.currentSegment(args);<a name="line.419"></a>
<FONT color="green">420</FONT>                        stream.writeInt(type);<a name="line.420"></a>
<FONT color="green">421</FONT>                        // TODO: could write this to only stream the values<a name="line.421"></a>
<FONT color="green">422</FONT>                        // required for the segment type<a name="line.422"></a>
<FONT color="green">423</FONT>                        for (int i = 0; i &lt; 6; i++) {<a name="line.423"></a>
<FONT color="green">424</FONT>                            stream.writeFloat(args[i]);<a name="line.424"></a>
<FONT color="green">425</FONT>                        }<a name="line.425"></a>
<FONT color="green">426</FONT>                        stream.writeInt(pi.getWindingRule());<a name="line.426"></a>
<FONT color="green">427</FONT>                        pi.next();<a name="line.427"></a>
<FONT color="green">428</FONT>                        stream.writeBoolean(pi.isDone());<a name="line.428"></a>
<FONT color="green">429</FONT>                    }<a name="line.429"></a>
<FONT color="green">430</FONT>                }<a name="line.430"></a>
<FONT color="green">431</FONT>                else {<a name="line.431"></a>
<FONT color="green">432</FONT>                    stream.writeObject(shape.getClass());<a name="line.432"></a>
<FONT color="green">433</FONT>                    stream.writeObject(shape);<a name="line.433"></a>
<FONT color="green">434</FONT>                }<a name="line.434"></a>
<FONT color="green">435</FONT>            }<a name="line.435"></a>
<FONT color="green">436</FONT>            else {<a name="line.436"></a>
<FONT color="green">437</FONT>                stream.writeBoolean(true);<a name="line.437"></a>
<FONT color="green">438</FONT>            }<a name="line.438"></a>
<FONT color="green">439</FONT>        }<a name="line.439"></a>
<FONT color="green">440</FONT>    <a name="line.440"></a>
<FONT color="green">441</FONT>        /**<a name="line.441"></a>
<FONT color="green">442</FONT>         * Reads a &lt;code&gt;Point2D&lt;/code&gt; object that has been serialised by the<a name="line.442"></a>
<FONT color="green">443</FONT>         * {@link #writePoint2D(Point2D, ObjectOutputStream)} method.<a name="line.443"></a>
<FONT color="green">444</FONT>         *<a name="line.444"></a>
<FONT color="green">445</FONT>         * @param stream  the input stream (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.445"></a>
<FONT color="green">446</FONT>         *<a name="line.446"></a>
<FONT color="green">447</FONT>         * @return The point object (possibly &lt;code&gt;null&lt;/code&gt;).<a name="line.447"></a>
<FONT color="green">448</FONT>         *<a name="line.448"></a>
<FONT color="green">449</FONT>         * @throws IOException  if there is an I/O problem.<a name="line.449"></a>
<FONT color="green">450</FONT>         */<a name="line.450"></a>
<FONT color="green">451</FONT>        public static Point2D readPoint2D(final ObjectInputStream stream)<a name="line.451"></a>
<FONT color="green">452</FONT>            throws IOException {<a name="line.452"></a>
<FONT color="green">453</FONT>    <a name="line.453"></a>
<FONT color="green">454</FONT>            if (stream == null) {<a name="line.454"></a>
<FONT color="green">455</FONT>                throw new IllegalArgumentException("Null 'stream' argument.");<a name="line.455"></a>
<FONT color="green">456</FONT>            }<a name="line.456"></a>
<FONT color="green">457</FONT>            Point2D result = null;<a name="line.457"></a>
<FONT color="green">458</FONT>            final boolean isNull = stream.readBoolean();<a name="line.458"></a>
<FONT color="green">459</FONT>            if (!isNull) {<a name="line.459"></a>
<FONT color="green">460</FONT>                final double x = stream.readDouble();<a name="line.460"></a>
<FONT color="green">461</FONT>                final double y = stream.readDouble();<a name="line.461"></a>
<FONT color="green">462</FONT>                result = new Point2D.Double(x, y);<a name="line.462"></a>
<FONT color="green">463</FONT>            }<a name="line.463"></a>
<FONT color="green">464</FONT>            return result;<a name="line.464"></a>
<FONT color="green">465</FONT>    <a name="line.465"></a>
<FONT color="green">466</FONT>        }<a name="line.466"></a>
<FONT color="green">467</FONT>    <a name="line.467"></a>
<FONT color="green">468</FONT>        /**<a name="line.468"></a>
<FONT color="green">469</FONT>         * Serialises a &lt;code&gt;Point2D&lt;/code&gt; object.<a name="line.469"></a>
<FONT color="green">470</FONT>         *<a name="line.470"></a>
<FONT color="green">471</FONT>         * @param p  the point object (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.471"></a>
<FONT color="green">472</FONT>         * @param stream  the output stream (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.472"></a>
<FONT color="green">473</FONT>         *<a name="line.473"></a>
<FONT color="green">474</FONT>         * @throws IOException if there is an I/O error.<a name="line.474"></a>
<FONT color="green">475</FONT>         */<a name="line.475"></a>
<FONT color="green">476</FONT>        public static void writePoint2D(final Point2D p,<a name="line.476"></a>
<FONT color="green">477</FONT>                                        final ObjectOutputStream stream)<a name="line.477"></a>
<FONT color="green">478</FONT>            throws IOException {<a name="line.478"></a>
<FONT color="green">479</FONT>    <a name="line.479"></a>
<FONT color="green">480</FONT>            if (stream == null) {<a name="line.480"></a>
<FONT color="green">481</FONT>                throw new IllegalArgumentException("Null 'stream' argument.");<a name="line.481"></a>
<FONT color="green">482</FONT>            }<a name="line.482"></a>
<FONT color="green">483</FONT>            if (p != null) {<a name="line.483"></a>
<FONT color="green">484</FONT>                stream.writeBoolean(false);<a name="line.484"></a>
<FONT color="green">485</FONT>                stream.writeDouble(p.getX());<a name="line.485"></a>
<FONT color="green">486</FONT>                stream.writeDouble(p.getY());<a name="line.486"></a>
<FONT color="green">487</FONT>            }<a name="line.487"></a>
<FONT color="green">488</FONT>            else {<a name="line.488"></a>
<FONT color="green">489</FONT>                stream.writeBoolean(true);<a name="line.489"></a>
<FONT color="green">490</FONT>            }<a name="line.490"></a>
<FONT color="green">491</FONT>        }<a name="line.491"></a>
<FONT color="green">492</FONT>    <a name="line.492"></a>
<FONT color="green">493</FONT>        /**<a name="line.493"></a>
<FONT color="green">494</FONT>         * Reads a &lt;code&gt;AttributedString&lt;/code&gt; object that has been serialised by<a name="line.494"></a>
<FONT color="green">495</FONT>         * the {@link SerialUtilities#writeAttributedString(AttributedString,<a name="line.495"></a>
<FONT color="green">496</FONT>         * ObjectOutputStream)} method.<a name="line.496"></a>
<FONT color="green">497</FONT>         *<a name="line.497"></a>
<FONT color="green">498</FONT>         * @param stream  the input stream (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.498"></a>
<FONT color="green">499</FONT>         *<a name="line.499"></a>
<FONT color="green">500</FONT>         * @return The attributed string object (possibly &lt;code&gt;null&lt;/code&gt;).<a name="line.500"></a>
<FONT color="green">501</FONT>         *<a name="line.501"></a>
<FONT color="green">502</FONT>         * @throws IOException  if there is an I/O problem.<a name="line.502"></a>
<FONT color="green">503</FONT>         * @throws ClassNotFoundException  if there is a problem loading a class.<a name="line.503"></a>
<FONT color="green">504</FONT>         */<a name="line.504"></a>
<FONT color="green">505</FONT>        public static AttributedString readAttributedString(<a name="line.505"></a>
<FONT color="green">506</FONT>                ObjectInputStream stream)<a name="line.506"></a>
<FONT color="green">507</FONT>                throws IOException, ClassNotFoundException {<a name="line.507"></a>
<FONT color="green">508</FONT>    <a name="line.508"></a>
<FONT color="green">509</FONT>            if (stream == null) {<a name="line.509"></a>
<FONT color="green">510</FONT>                throw new IllegalArgumentException("Null 'stream' argument.");<a name="line.510"></a>
<FONT color="green">511</FONT>            }<a name="line.511"></a>
<FONT color="green">512</FONT>            AttributedString result = null;<a name="line.512"></a>
<FONT color="green">513</FONT>            final boolean isNull = stream.readBoolean();<a name="line.513"></a>
<FONT color="green">514</FONT>            if (!isNull) {<a name="line.514"></a>
<FONT color="green">515</FONT>                // read string and attributes then create result<a name="line.515"></a>
<FONT color="green">516</FONT>                String plainStr = (String) stream.readObject();<a name="line.516"></a>
<FONT color="green">517</FONT>                result = new AttributedString(plainStr);<a name="line.517"></a>
<FONT color="green">518</FONT>                char c = stream.readChar();<a name="line.518"></a>
<FONT color="green">519</FONT>                int start = 0;<a name="line.519"></a>
<FONT color="green">520</FONT>                while (c != CharacterIterator.DONE) {<a name="line.520"></a>
<FONT color="green">521</FONT>                    int limit = stream.readInt();<a name="line.521"></a>
<FONT color="green">522</FONT>                    Map atts = (Map) stream.readObject();<a name="line.522"></a>
<FONT color="green">523</FONT>                    result.addAttributes(atts, start, limit);<a name="line.523"></a>
<FONT color="green">524</FONT>                    start = limit;<a name="line.524"></a>
<FONT color="green">525</FONT>                    c = stream.readChar();<a name="line.525"></a>
<FONT color="green">526</FONT>                }<a name="line.526"></a>
<FONT color="green">527</FONT>            }<a name="line.527"></a>
<FONT color="green">528</FONT>            return result;<a name="line.528"></a>
<FONT color="green">529</FONT>        }<a name="line.529"></a>
<FONT color="green">530</FONT>    <a name="line.530"></a>
<FONT color="green">531</FONT>        /**<a name="line.531"></a>
<FONT color="green">532</FONT>         * Serialises an &lt;code&gt;AttributedString&lt;/code&gt; object.<a name="line.532"></a>
<FONT color="green">533</FONT>         *<a name="line.533"></a>
<FONT color="green">534</FONT>         * @param as  the attributed string object (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.534"></a>
<FONT color="green">535</FONT>         * @param stream  the output stream (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.535"></a>
<FONT color="green">536</FONT>         *<a name="line.536"></a>
<FONT color="green">537</FONT>         * @throws IOException if there is an I/O error.<a name="line.537"></a>
<FONT color="green">538</FONT>         */<a name="line.538"></a>
<FONT color="green">539</FONT>        public static void writeAttributedString(AttributedString as,<a name="line.539"></a>
<FONT color="green">540</FONT>                ObjectOutputStream stream) throws IOException {<a name="line.540"></a>
<FONT color="green">541</FONT>    <a name="line.541"></a>
<FONT color="green">542</FONT>            if (stream == null) {<a name="line.542"></a>
<FONT color="green">543</FONT>                throw new IllegalArgumentException("Null 'stream' argument.");<a name="line.543"></a>
<FONT color="green">544</FONT>            }<a name="line.544"></a>
<FONT color="green">545</FONT>            if (as != null) {<a name="line.545"></a>
<FONT color="green">546</FONT>                stream.writeBoolean(false);<a name="line.546"></a>
<FONT color="green">547</FONT>                AttributedCharacterIterator aci = as.getIterator();<a name="line.547"></a>
<FONT color="green">548</FONT>                // build a plain string from aci<a name="line.548"></a>
<FONT color="green">549</FONT>                // then write the string<a name="line.549"></a>
<FONT color="green">550</FONT>                StringBuffer plainStr = new StringBuffer();<a name="line.550"></a>
<FONT color="green">551</FONT>                char current = aci.first();<a name="line.551"></a>
<FONT color="green">552</FONT>                while (current != CharacterIterator.DONE) {<a name="line.552"></a>
<FONT color="green">553</FONT>                    plainStr = plainStr.append(current);<a name="line.553"></a>
<FONT color="green">554</FONT>                    current = aci.next();<a name="line.554"></a>
<FONT color="green">555</FONT>                }<a name="line.555"></a>
<FONT color="green">556</FONT>                stream.writeObject(plainStr.toString());<a name="line.556"></a>
<FONT color="green">557</FONT>    <a name="line.557"></a>
<FONT color="green">558</FONT>                // then write the attributes and limits for each run<a name="line.558"></a>
<FONT color="green">559</FONT>                current = aci.first();<a name="line.559"></a>
<FONT color="green">560</FONT>                int begin = aci.getBeginIndex();<a name="line.560"></a>
<FONT color="green">561</FONT>                while (current != CharacterIterator.DONE) {<a name="line.561"></a>
<FONT color="green">562</FONT>                    // write the current character - when the reader sees that this<a name="line.562"></a>
<FONT color="green">563</FONT>                    // is not CharacterIterator.DONE, it will know to read the<a name="line.563"></a>
<FONT color="green">564</FONT>                    // run limits and attributes<a name="line.564"></a>
<FONT color="green">565</FONT>                    stream.writeChar(current);<a name="line.565"></a>
<FONT color="green">566</FONT>    <a name="line.566"></a>
<FONT color="green">567</FONT>                    // now write the limit, adjusted as if beginIndex is zero<a name="line.567"></a>
<FONT color="green">568</FONT>                    int limit = aci.getRunLimit();<a name="line.568"></a>
<FONT color="green">569</FONT>                    stream.writeInt(limit - begin);<a name="line.569"></a>
<FONT color="green">570</FONT>    <a name="line.570"></a>
<FONT color="green">571</FONT>                    // now write the attribute set<a name="line.571"></a>
<FONT color="green">572</FONT>                    Map atts = new HashMap(aci.getAttributes());<a name="line.572"></a>
<FONT color="green">573</FONT>                    stream.writeObject(atts);<a name="line.573"></a>
<FONT color="green">574</FONT>                    current = aci.setIndex(limit);<a name="line.574"></a>
<FONT color="green">575</FONT>                }<a name="line.575"></a>
<FONT color="green">576</FONT>                // write a character that signals to the reader that all runs<a name="line.576"></a>
<FONT color="green">577</FONT>                // are done...<a name="line.577"></a>
<FONT color="green">578</FONT>                stream.writeChar(CharacterIterator.DONE);<a name="line.578"></a>
<FONT color="green">579</FONT>            }<a name="line.579"></a>
<FONT color="green">580</FONT>            else {<a name="line.580"></a>
<FONT color="green">581</FONT>                // write a flag that indicates a null<a name="line.581"></a>
<FONT color="green">582</FONT>                stream.writeBoolean(true);<a name="line.582"></a>
<FONT color="green">583</FONT>            }<a name="line.583"></a>
<FONT color="green">584</FONT>    <a name="line.584"></a>
<FONT color="green">585</FONT>        }<a name="line.585"></a>
<FONT color="green">586</FONT>    <a name="line.586"></a>
<FONT color="green">587</FONT>    }<a name="line.587"></a>
<FONT color="green">588</FONT>    <a name="line.588"></a>




























































</PRE>
</BODY>
</HTML>
