<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ===========================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JFreeChart : a free chart library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ===========================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     *<a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jfreechart/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it<a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by<a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or<a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but<a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY<a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public<a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,<a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.<a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc.<a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     *<a name="line.26"></a>
<FONT color="green">027</FONT>     * --------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * PiePlot3D.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * --------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C) Copyright 2000-2008, by Object Refinery and Contributors.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  Tomer Peretz;<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   Richard Atkinson;<a name="line.33"></a>
<FONT color="green">034</FONT>     *                   David Gilbert (for Object Refinery Limited);<a name="line.34"></a>
<FONT color="green">035</FONT>     *                   Xun Kang;<a name="line.35"></a>
<FONT color="green">036</FONT>     *                   Christian W. Zuckschwerdt;<a name="line.36"></a>
<FONT color="green">037</FONT>     *                   Arnaud Lelievre;<a name="line.37"></a>
<FONT color="green">038</FONT>     *                   Dave Crane;<a name="line.38"></a>
<FONT color="green">039</FONT>     *<a name="line.39"></a>
<FONT color="green">040</FONT>     * Changes<a name="line.40"></a>
<FONT color="green">041</FONT>     * -------<a name="line.41"></a>
<FONT color="green">042</FONT>     * 21-Jun-2002 : Version 1;<a name="line.42"></a>
<FONT color="green">043</FONT>     * 31-Jul-2002 : Modified to use startAngle and direction, drawing modified so<a name="line.43"></a>
<FONT color="green">044</FONT>     *               that charts render with foreground alpha &lt; 1.0 (DG);<a name="line.44"></a>
<FONT color="green">045</FONT>     * 05-Aug-2002 : Small modification to draw method to support URLs for HTML<a name="line.45"></a>
<FONT color="green">046</FONT>     *               image maps (RA);<a name="line.46"></a>
<FONT color="green">047</FONT>     * 26-Sep-2002 : Fixed errors reported by Checkstyle (DG);<a name="line.47"></a>
<FONT color="green">048</FONT>     * 18-Oct-2002 : Added drawing bug fix sent in by Xun Kang, and made a couple<a name="line.48"></a>
<FONT color="green">049</FONT>     *               of other related fixes (DG);<a name="line.49"></a>
<FONT color="green">050</FONT>     * 30-Oct-2002 : Changed the PieDataset interface. Fixed another drawing<a name="line.50"></a>
<FONT color="green">051</FONT>     *               bug (DG);<a name="line.51"></a>
<FONT color="green">052</FONT>     * 12-Nov-2002 : Fixed null pointer exception for zero or negative values (DG);<a name="line.52"></a>
<FONT color="green">053</FONT>     * 07-Mar-2003 : Modified to pass pieIndex on to PieSectionEntity (DG);<a name="line.53"></a>
<FONT color="green">054</FONT>     * 21-Mar-2003 : Added workaround for bug id 620031 (DG);<a name="line.54"></a>
<FONT color="green">055</FONT>     * 26-Mar-2003 : Implemented Serializable (DG);<a name="line.55"></a>
<FONT color="green">056</FONT>     * 30-Jul-2003 : Modified entity constructor (CZ);<a name="line.56"></a>
<FONT color="green">057</FONT>     * 29-Aug-2003 : Small changes for API updates in PiePlot class (DG);<a name="line.57"></a>
<FONT color="green">058</FONT>     * 02-Sep-2003 : Fixed bug where the 'no data' message is not displayed (DG);<a name="line.58"></a>
<FONT color="green">059</FONT>     * 08-Sep-2003 : Added internationalization via use of properties<a name="line.59"></a>
<FONT color="green">060</FONT>     *               resourceBundle (RFE 690236) (AL);<a name="line.60"></a>
<FONT color="green">061</FONT>     * 29-Oct-2003 : Added workaround for font alignment in PDF output (DG);<a name="line.61"></a>
<FONT color="green">062</FONT>     * 20-Nov-2003 : Fixed bug 845289 (sides not showing) (DG);<a name="line.62"></a>
<FONT color="green">063</FONT>     * 25-Nov-2003 : Added patch (845095) to fix outline paint issues (DG);<a name="line.63"></a>
<FONT color="green">064</FONT>     * 10-Mar-2004 : Numerous changes to enhance labelling (DG);<a name="line.64"></a>
<FONT color="green">065</FONT>     * 31-Mar-2004 : Adjusted plot area when label generator is null (DG);<a name="line.65"></a>
<FONT color="green">066</FONT>     * 08-Apr-2004 : Added flag to PiePlot class to control the treatment of null<a name="line.66"></a>
<FONT color="green">067</FONT>     *               values (DG);<a name="line.67"></a>
<FONT color="green">068</FONT>     *               Added pieIndex to PieSectionEntity (DG);<a name="line.68"></a>
<FONT color="green">069</FONT>     * 15-Nov-2004 : Removed creation of default tool tip generator (DG);<a name="line.69"></a>
<FONT color="green">070</FONT>     * 16-Jun-2005 : Added default constructor (DG);<a name="line.70"></a>
<FONT color="green">071</FONT>     * ------------- JFREECHART 1.0.x ---------------------------------------------<a name="line.71"></a>
<FONT color="green">072</FONT>     * 27-Sep-2006 : Updated draw() method for new lookup methods (DG);<a name="line.72"></a>
<FONT color="green">073</FONT>     * 22-Mar-2007 : Added equals() override (DG);<a name="line.73"></a>
<FONT color="green">074</FONT>     * 18-Jun-2007 : Added handling for simple label option (DG);<a name="line.74"></a>
<FONT color="green">075</FONT>     * 04-Oct-2007 : Added option to darken sides of plot - thanks to Alex Moots<a name="line.75"></a>
<FONT color="green">076</FONT>     *               (see patch 1805262) (DG);<a name="line.76"></a>
<FONT color="green">077</FONT>     * 21-Nov-2007 : Changed default depth factor, fixed labelling bugs and added<a name="line.77"></a>
<FONT color="green">078</FONT>     *               debug code - see debug flags in PiePlot class (DG);<a name="line.78"></a>
<FONT color="green">079</FONT>     * 20-Mar-2008 : Fixed bug 1920854 - multiple redraws of the section<a name="line.79"></a>
<FONT color="green">080</FONT>     *               labels (DG);<a name="line.80"></a>
<FONT color="green">081</FONT>     *<a name="line.81"></a>
<FONT color="green">082</FONT>     */<a name="line.82"></a>
<FONT color="green">083</FONT>    <a name="line.83"></a>
<FONT color="green">084</FONT>    package org.jfree.chart.plot;<a name="line.84"></a>
<FONT color="green">085</FONT>    <a name="line.85"></a>
<FONT color="green">086</FONT>    import java.awt.AlphaComposite;<a name="line.86"></a>
<FONT color="green">087</FONT>    import java.awt.Color;<a name="line.87"></a>
<FONT color="green">088</FONT>    import java.awt.Composite;<a name="line.88"></a>
<FONT color="green">089</FONT>    import java.awt.Font;<a name="line.89"></a>
<FONT color="green">090</FONT>    import java.awt.FontMetrics;<a name="line.90"></a>
<FONT color="green">091</FONT>    import java.awt.Graphics2D;<a name="line.91"></a>
<FONT color="green">092</FONT>    import java.awt.Paint;<a name="line.92"></a>
<FONT color="green">093</FONT>    import java.awt.Polygon;<a name="line.93"></a>
<FONT color="green">094</FONT>    import java.awt.Shape;<a name="line.94"></a>
<FONT color="green">095</FONT>    import java.awt.Stroke;<a name="line.95"></a>
<FONT color="green">096</FONT>    import java.awt.geom.Arc2D;<a name="line.96"></a>
<FONT color="green">097</FONT>    import java.awt.geom.Area;<a name="line.97"></a>
<FONT color="green">098</FONT>    import java.awt.geom.Ellipse2D;<a name="line.98"></a>
<FONT color="green">099</FONT>    import java.awt.geom.Point2D;<a name="line.99"></a>
<FONT color="green">100</FONT>    import java.awt.geom.Rectangle2D;<a name="line.100"></a>
<FONT color="green">101</FONT>    import java.io.Serializable;<a name="line.101"></a>
<FONT color="green">102</FONT>    import java.util.ArrayList;<a name="line.102"></a>
<FONT color="green">103</FONT>    import java.util.Iterator;<a name="line.103"></a>
<FONT color="green">104</FONT>    import java.util.List;<a name="line.104"></a>
<FONT color="green">105</FONT>    <a name="line.105"></a>
<FONT color="green">106</FONT>    import org.jfree.chart.entity.EntityCollection;<a name="line.106"></a>
<FONT color="green">107</FONT>    import org.jfree.chart.entity.PieSectionEntity;<a name="line.107"></a>
<FONT color="green">108</FONT>    import org.jfree.chart.event.PlotChangeEvent;<a name="line.108"></a>
<FONT color="green">109</FONT>    import org.jfree.chart.labels.PieToolTipGenerator;<a name="line.109"></a>
<FONT color="green">110</FONT>    import org.jfree.data.general.DatasetUtilities;<a name="line.110"></a>
<FONT color="green">111</FONT>    import org.jfree.data.general.PieDataset;<a name="line.111"></a>
<FONT color="green">112</FONT>    import org.jfree.ui.RectangleInsets;<a name="line.112"></a>
<FONT color="green">113</FONT>    <a name="line.113"></a>
<FONT color="green">114</FONT>    /**<a name="line.114"></a>
<FONT color="green">115</FONT>     * A plot that displays data in the form of a 3D pie chart, using data from<a name="line.115"></a>
<FONT color="green">116</FONT>     * any class that implements the {@link PieDataset} interface.<a name="line.116"></a>
<FONT color="green">117</FONT>     * &lt;P&gt;<a name="line.117"></a>
<FONT color="green">118</FONT>     * Although this class extends {@link PiePlot}, it does not currently support<a name="line.118"></a>
<FONT color="green">119</FONT>     * exploded sections.<a name="line.119"></a>
<FONT color="green">120</FONT>     */<a name="line.120"></a>
<FONT color="green">121</FONT>    public class PiePlot3D extends PiePlot implements Serializable {<a name="line.121"></a>
<FONT color="green">122</FONT>    <a name="line.122"></a>
<FONT color="green">123</FONT>        /** For serialization. */<a name="line.123"></a>
<FONT color="green">124</FONT>        private static final long serialVersionUID = 3408984188945161432L;<a name="line.124"></a>
<FONT color="green">125</FONT>    <a name="line.125"></a>
<FONT color="green">126</FONT>        /** The factor of the depth of the pie from the plot height */<a name="line.126"></a>
<FONT color="green">127</FONT>        private double depthFactor = 0.12;<a name="line.127"></a>
<FONT color="green">128</FONT>    <a name="line.128"></a>
<FONT color="green">129</FONT>        /**<a name="line.129"></a>
<FONT color="green">130</FONT>         * A flag that controls whether or not the sides of the pie chart<a name="line.130"></a>
<FONT color="green">131</FONT>         * are rendered using a darker colour.<a name="line.131"></a>
<FONT color="green">132</FONT>         *<a name="line.132"></a>
<FONT color="green">133</FONT>         *  @since 1.0.7.<a name="line.133"></a>
<FONT color="green">134</FONT>         */<a name="line.134"></a>
<FONT color="green">135</FONT>        private boolean darkerSides = false;  // default preserves previous<a name="line.135"></a>
<FONT color="green">136</FONT>                                              // behaviour<a name="line.136"></a>
<FONT color="green">137</FONT>    <a name="line.137"></a>
<FONT color="green">138</FONT>        /**<a name="line.138"></a>
<FONT color="green">139</FONT>         * Creates a new instance with no dataset.<a name="line.139"></a>
<FONT color="green">140</FONT>         */<a name="line.140"></a>
<FONT color="green">141</FONT>        public PiePlot3D() {<a name="line.141"></a>
<FONT color="green">142</FONT>            this(null);<a name="line.142"></a>
<FONT color="green">143</FONT>        }<a name="line.143"></a>
<FONT color="green">144</FONT>    <a name="line.144"></a>
<FONT color="green">145</FONT>        /**<a name="line.145"></a>
<FONT color="green">146</FONT>         * Creates a pie chart with a three dimensional effect using the specified<a name="line.146"></a>
<FONT color="green">147</FONT>         * dataset.<a name="line.147"></a>
<FONT color="green">148</FONT>         *<a name="line.148"></a>
<FONT color="green">149</FONT>         * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.149"></a>
<FONT color="green">150</FONT>         */<a name="line.150"></a>
<FONT color="green">151</FONT>        public PiePlot3D(PieDataset dataset) {<a name="line.151"></a>
<FONT color="green">152</FONT>            super(dataset);<a name="line.152"></a>
<FONT color="green">153</FONT>            setCircular(false, false);<a name="line.153"></a>
<FONT color="green">154</FONT>        }<a name="line.154"></a>
<FONT color="green">155</FONT>    <a name="line.155"></a>
<FONT color="green">156</FONT>        /**<a name="line.156"></a>
<FONT color="green">157</FONT>         * Returns the depth factor for the chart.<a name="line.157"></a>
<FONT color="green">158</FONT>         *<a name="line.158"></a>
<FONT color="green">159</FONT>         * @return The depth factor.<a name="line.159"></a>
<FONT color="green">160</FONT>         *<a name="line.160"></a>
<FONT color="green">161</FONT>         * @see #setDepthFactor(double)<a name="line.161"></a>
<FONT color="green">162</FONT>         */<a name="line.162"></a>
<FONT color="green">163</FONT>        public double getDepthFactor() {<a name="line.163"></a>
<FONT color="green">164</FONT>            return this.depthFactor;<a name="line.164"></a>
<FONT color="green">165</FONT>        }<a name="line.165"></a>
<FONT color="green">166</FONT>    <a name="line.166"></a>
<FONT color="green">167</FONT>        /**<a name="line.167"></a>
<FONT color="green">168</FONT>         * Sets the pie depth as a percentage of the height of the plot area, and<a name="line.168"></a>
<FONT color="green">169</FONT>         * sends a {@link PlotChangeEvent} to all registered listeners.<a name="line.169"></a>
<FONT color="green">170</FONT>         *<a name="line.170"></a>
<FONT color="green">171</FONT>         * @param factor  the depth factor (for example, 0.20 is twenty percent).<a name="line.171"></a>
<FONT color="green">172</FONT>         *<a name="line.172"></a>
<FONT color="green">173</FONT>         * @see #getDepthFactor()<a name="line.173"></a>
<FONT color="green">174</FONT>         */<a name="line.174"></a>
<FONT color="green">175</FONT>        public void setDepthFactor(double factor) {<a name="line.175"></a>
<FONT color="green">176</FONT>            this.depthFactor = factor;<a name="line.176"></a>
<FONT color="green">177</FONT>            fireChangeEvent();<a name="line.177"></a>
<FONT color="green">178</FONT>        }<a name="line.178"></a>
<FONT color="green">179</FONT>    <a name="line.179"></a>
<FONT color="green">180</FONT>        /**<a name="line.180"></a>
<FONT color="green">181</FONT>         * Returns a flag that controls whether or not the sides of the pie chart<a name="line.181"></a>
<FONT color="green">182</FONT>         * are rendered using a darker colour.  This is only applied if the<a name="line.182"></a>
<FONT color="green">183</FONT>         * section colour is an instance of {@link java.awt.Color}.<a name="line.183"></a>
<FONT color="green">184</FONT>         *<a name="line.184"></a>
<FONT color="green">185</FONT>         * @return A boolean.<a name="line.185"></a>
<FONT color="green">186</FONT>         *<a name="line.186"></a>
<FONT color="green">187</FONT>         * @see #setDarkerSides(boolean)<a name="line.187"></a>
<FONT color="green">188</FONT>         *<a name="line.188"></a>
<FONT color="green">189</FONT>         * @since 1.0.7<a name="line.189"></a>
<FONT color="green">190</FONT>         */<a name="line.190"></a>
<FONT color="green">191</FONT>        public boolean getDarkerSides() {<a name="line.191"></a>
<FONT color="green">192</FONT>            return this.darkerSides;<a name="line.192"></a>
<FONT color="green">193</FONT>        }<a name="line.193"></a>
<FONT color="green">194</FONT>    <a name="line.194"></a>
<FONT color="green">195</FONT>        /**<a name="line.195"></a>
<FONT color="green">196</FONT>         * Sets a flag that controls whether or not the sides of the pie chart<a name="line.196"></a>
<FONT color="green">197</FONT>         * are rendered using a darker colour, and sends a {@link PlotChangeEvent}<a name="line.197"></a>
<FONT color="green">198</FONT>         * to all registered listeners.  This is only applied if the<a name="line.198"></a>
<FONT color="green">199</FONT>         * section colour is an instance of {@link java.awt.Color}.<a name="line.199"></a>
<FONT color="green">200</FONT>         *<a name="line.200"></a>
<FONT color="green">201</FONT>         * @param darker true to darken the sides, false to use the default<a name="line.201"></a>
<FONT color="green">202</FONT>         *         behaviour.<a name="line.202"></a>
<FONT color="green">203</FONT>         *<a name="line.203"></a>
<FONT color="green">204</FONT>         * @see #getDarkerSides()<a name="line.204"></a>
<FONT color="green">205</FONT>         *<a name="line.205"></a>
<FONT color="green">206</FONT>         * @since 1.0.7.<a name="line.206"></a>
<FONT color="green">207</FONT>         */<a name="line.207"></a>
<FONT color="green">208</FONT>        public void setDarkerSides(boolean darker) {<a name="line.208"></a>
<FONT color="green">209</FONT>            this.darkerSides = darker;<a name="line.209"></a>
<FONT color="green">210</FONT>            fireChangeEvent();<a name="line.210"></a>
<FONT color="green">211</FONT>        }<a name="line.211"></a>
<FONT color="green">212</FONT>    <a name="line.212"></a>
<FONT color="green">213</FONT>        /**<a name="line.213"></a>
<FONT color="green">214</FONT>         * Draws the plot on a Java 2D graphics device (such as the screen or a<a name="line.214"></a>
<FONT color="green">215</FONT>         * printer).  This method is called by the<a name="line.215"></a>
<FONT color="green">216</FONT>         * {@link org.jfree.chart.JFreeChart} class, you don't normally need<a name="line.216"></a>
<FONT color="green">217</FONT>         * to call it yourself.<a name="line.217"></a>
<FONT color="green">218</FONT>         *<a name="line.218"></a>
<FONT color="green">219</FONT>         * @param g2  the graphics device.<a name="line.219"></a>
<FONT color="green">220</FONT>         * @param plotArea  the area within which the plot should be drawn.<a name="line.220"></a>
<FONT color="green">221</FONT>         * @param anchor  the anchor point.<a name="line.221"></a>
<FONT color="green">222</FONT>         * @param parentState  the state from the parent plot, if there is one.<a name="line.222"></a>
<FONT color="green">223</FONT>         * @param info  collects info about the drawing<a name="line.223"></a>
<FONT color="green">224</FONT>         *              (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.224"></a>
<FONT color="green">225</FONT>         */<a name="line.225"></a>
<FONT color="green">226</FONT>        public void draw(Graphics2D g2, Rectangle2D plotArea, Point2D anchor,<a name="line.226"></a>
<FONT color="green">227</FONT>                         PlotState parentState,<a name="line.227"></a>
<FONT color="green">228</FONT>                         PlotRenderingInfo info) {<a name="line.228"></a>
<FONT color="green">229</FONT>    <a name="line.229"></a>
<FONT color="green">230</FONT>            // adjust for insets...<a name="line.230"></a>
<FONT color="green">231</FONT>            RectangleInsets insets = getInsets();<a name="line.231"></a>
<FONT color="green">232</FONT>            insets.trim(plotArea);<a name="line.232"></a>
<FONT color="green">233</FONT>    <a name="line.233"></a>
<FONT color="green">234</FONT>            Rectangle2D originalPlotArea = (Rectangle2D) plotArea.clone();<a name="line.234"></a>
<FONT color="green">235</FONT>            if (info != null) {<a name="line.235"></a>
<FONT color="green">236</FONT>                info.setPlotArea(plotArea);<a name="line.236"></a>
<FONT color="green">237</FONT>                info.setDataArea(plotArea);<a name="line.237"></a>
<FONT color="green">238</FONT>            }<a name="line.238"></a>
<FONT color="green">239</FONT>    <a name="line.239"></a>
<FONT color="green">240</FONT>            drawBackground(g2, plotArea);<a name="line.240"></a>
<FONT color="green">241</FONT>    <a name="line.241"></a>
<FONT color="green">242</FONT>            Shape savedClip = g2.getClip();<a name="line.242"></a>
<FONT color="green">243</FONT>            g2.clip(plotArea);<a name="line.243"></a>
<FONT color="green">244</FONT>    <a name="line.244"></a>
<FONT color="green">245</FONT>            // adjust the plot area by the interior spacing value<a name="line.245"></a>
<FONT color="green">246</FONT>            double gapPercent = getInteriorGap();<a name="line.246"></a>
<FONT color="green">247</FONT>            double labelPercent = 0.0;<a name="line.247"></a>
<FONT color="green">248</FONT>            if (getLabelGenerator() != null) {<a name="line.248"></a>
<FONT color="green">249</FONT>                labelPercent = getLabelGap() + getMaximumLabelWidth();<a name="line.249"></a>
<FONT color="green">250</FONT>            }<a name="line.250"></a>
<FONT color="green">251</FONT>            double gapHorizontal = plotArea.getWidth() * (gapPercent<a name="line.251"></a>
<FONT color="green">252</FONT>                    + labelPercent) * 2.0;<a name="line.252"></a>
<FONT color="green">253</FONT>            double gapVertical = plotArea.getHeight() * gapPercent * 2.0;<a name="line.253"></a>
<FONT color="green">254</FONT>    <a name="line.254"></a>
<FONT color="green">255</FONT>            if (DEBUG_DRAW_INTERIOR) {<a name="line.255"></a>
<FONT color="green">256</FONT>                double hGap = plotArea.getWidth() * getInteriorGap();<a name="line.256"></a>
<FONT color="green">257</FONT>                double vGap = plotArea.getHeight() * getInteriorGap();<a name="line.257"></a>
<FONT color="green">258</FONT>                double igx1 = plotArea.getX() + hGap;<a name="line.258"></a>
<FONT color="green">259</FONT>                double igx2 = plotArea.getMaxX() - hGap;<a name="line.259"></a>
<FONT color="green">260</FONT>                double igy1 = plotArea.getY() + vGap;<a name="line.260"></a>
<FONT color="green">261</FONT>                double igy2 = plotArea.getMaxY() - vGap;<a name="line.261"></a>
<FONT color="green">262</FONT>                g2.setPaint(Color.lightGray);<a name="line.262"></a>
<FONT color="green">263</FONT>                g2.draw(new Rectangle2D.Double(igx1, igy1, igx2 - igx1,<a name="line.263"></a>
<FONT color="green">264</FONT>                        igy2 - igy1));<a name="line.264"></a>
<FONT color="green">265</FONT>            }<a name="line.265"></a>
<FONT color="green">266</FONT>    <a name="line.266"></a>
<FONT color="green">267</FONT>            double linkX = plotArea.getX() + gapHorizontal / 2;<a name="line.267"></a>
<FONT color="green">268</FONT>            double linkY = plotArea.getY() + gapVertical / 2;<a name="line.268"></a>
<FONT color="green">269</FONT>            double linkW = plotArea.getWidth() - gapHorizontal;<a name="line.269"></a>
<FONT color="green">270</FONT>            double linkH = plotArea.getHeight() - gapVertical;<a name="line.270"></a>
<FONT color="green">271</FONT>    <a name="line.271"></a>
<FONT color="green">272</FONT>            // make the link area a square if the pie chart is to be circular...<a name="line.272"></a>
<FONT color="green">273</FONT>            if (isCircular()) { // is circular?<a name="line.273"></a>
<FONT color="green">274</FONT>                double min = Math.min(linkW, linkH) / 2;<a name="line.274"></a>
<FONT color="green">275</FONT>                linkX = (linkX + linkX + linkW) / 2 - min;<a name="line.275"></a>
<FONT color="green">276</FONT>                linkY = (linkY + linkY + linkH) / 2 - min;<a name="line.276"></a>
<FONT color="green">277</FONT>                linkW = 2 * min;<a name="line.277"></a>
<FONT color="green">278</FONT>                linkH = 2 * min;<a name="line.278"></a>
<FONT color="green">279</FONT>            }<a name="line.279"></a>
<FONT color="green">280</FONT>    <a name="line.280"></a>
<FONT color="green">281</FONT>            PiePlotState state = initialise(g2, plotArea, this, null, info);<a name="line.281"></a>
<FONT color="green">282</FONT>    <a name="line.282"></a>
<FONT color="green">283</FONT>            // the link area defines the dog leg points for the linking lines to<a name="line.283"></a>
<FONT color="green">284</FONT>            // the labels<a name="line.284"></a>
<FONT color="green">285</FONT>            Rectangle2D linkAreaXX = new Rectangle2D.Double(linkX, linkY, linkW,<a name="line.285"></a>
<FONT color="green">286</FONT>                    linkH * (1 - this.depthFactor));<a name="line.286"></a>
<FONT color="green">287</FONT>            state.setLinkArea(linkAreaXX);<a name="line.287"></a>
<FONT color="green">288</FONT>    <a name="line.288"></a>
<FONT color="green">289</FONT>            if (DEBUG_DRAW_LINK_AREA) {<a name="line.289"></a>
<FONT color="green">290</FONT>                g2.setPaint(Color.blue);<a name="line.290"></a>
<FONT color="green">291</FONT>                g2.draw(linkAreaXX);<a name="line.291"></a>
<FONT color="green">292</FONT>                g2.setPaint(Color.yellow);<a name="line.292"></a>
<FONT color="green">293</FONT>                g2.draw(new Ellipse2D.Double(linkAreaXX.getX(), linkAreaXX.getY(),<a name="line.293"></a>
<FONT color="green">294</FONT>                        linkAreaXX.getWidth(), linkAreaXX.getHeight()));<a name="line.294"></a>
<FONT color="green">295</FONT>            }<a name="line.295"></a>
<FONT color="green">296</FONT>    <a name="line.296"></a>
<FONT color="green">297</FONT>            // the explode area defines the max circle/ellipse for the exploded pie<a name="line.297"></a>
<FONT color="green">298</FONT>            // sections.<a name="line.298"></a>
<FONT color="green">299</FONT>            // it is defined by shrinking the linkArea by the linkMargin factor.<a name="line.299"></a>
<FONT color="green">300</FONT>            double hh = linkW * getLabelLinkMargin();<a name="line.300"></a>
<FONT color="green">301</FONT>            double vv = linkH * getLabelLinkMargin();<a name="line.301"></a>
<FONT color="green">302</FONT>            Rectangle2D explodeArea = new Rectangle2D.Double(linkX + hh / 2.0,<a name="line.302"></a>
<FONT color="green">303</FONT>                    linkY + vv / 2.0, linkW - hh, linkH - vv);<a name="line.303"></a>
<FONT color="green">304</FONT>    <a name="line.304"></a>
<FONT color="green">305</FONT>            state.setExplodedPieArea(explodeArea);<a name="line.305"></a>
<FONT color="green">306</FONT>    <a name="line.306"></a>
<FONT color="green">307</FONT>            // the pie area defines the circle/ellipse for regular pie sections.<a name="line.307"></a>
<FONT color="green">308</FONT>            // it is defined by shrinking the explodeArea by the explodeMargin<a name="line.308"></a>
<FONT color="green">309</FONT>            // factor.<a name="line.309"></a>
<FONT color="green">310</FONT>            double maximumExplodePercent = getMaximumExplodePercent();<a name="line.310"></a>
<FONT color="green">311</FONT>            double percent = maximumExplodePercent / (1.0 + maximumExplodePercent);<a name="line.311"></a>
<FONT color="green">312</FONT>    <a name="line.312"></a>
<FONT color="green">313</FONT>            double h1 = explodeArea.getWidth() * percent;<a name="line.313"></a>
<FONT color="green">314</FONT>            double v1 = explodeArea.getHeight() * percent;<a name="line.314"></a>
<FONT color="green">315</FONT>            Rectangle2D pieArea = new Rectangle2D.Double(explodeArea.getX()<a name="line.315"></a>
<FONT color="green">316</FONT>                    + h1 / 2.0, explodeArea.getY() + v1 / 2.0,<a name="line.316"></a>
<FONT color="green">317</FONT>                    explodeArea.getWidth() - h1, explodeArea.getHeight() - v1);<a name="line.317"></a>
<FONT color="green">318</FONT>    <a name="line.318"></a>
<FONT color="green">319</FONT>            // the link area defines the dog-leg point for the linking lines to<a name="line.319"></a>
<FONT color="green">320</FONT>            // the labels<a name="line.320"></a>
<FONT color="green">321</FONT>            int depth = (int) (pieArea.getHeight() * this.depthFactor);<a name="line.321"></a>
<FONT color="green">322</FONT>            Rectangle2D linkArea = new Rectangle2D.Double(linkX, linkY, linkW,<a name="line.322"></a>
<FONT color="green">323</FONT>                    linkH - depth);<a name="line.323"></a>
<FONT color="green">324</FONT>            state.setLinkArea(linkArea);<a name="line.324"></a>
<FONT color="green">325</FONT>    <a name="line.325"></a>
<FONT color="green">326</FONT>            state.setPieArea(pieArea);<a name="line.326"></a>
<FONT color="green">327</FONT>            state.setPieCenterX(pieArea.getCenterX());<a name="line.327"></a>
<FONT color="green">328</FONT>            state.setPieCenterY(pieArea.getCenterY() - depth / 2.0);<a name="line.328"></a>
<FONT color="green">329</FONT>            state.setPieWRadius(pieArea.getWidth() / 2.0);<a name="line.329"></a>
<FONT color="green">330</FONT>            state.setPieHRadius((pieArea.getHeight() - depth) / 2.0);<a name="line.330"></a>
<FONT color="green">331</FONT>    <a name="line.331"></a>
<FONT color="green">332</FONT>            // get the data source - return if null;<a name="line.332"></a>
<FONT color="green">333</FONT>            PieDataset dataset = getDataset();<a name="line.333"></a>
<FONT color="green">334</FONT>            if (DatasetUtilities.isEmptyOrNull(getDataset())) {<a name="line.334"></a>
<FONT color="green">335</FONT>                drawNoDataMessage(g2, plotArea);<a name="line.335"></a>
<FONT color="green">336</FONT>                g2.setClip(savedClip);<a name="line.336"></a>
<FONT color="green">337</FONT>                drawOutline(g2, plotArea);<a name="line.337"></a>
<FONT color="green">338</FONT>                return;<a name="line.338"></a>
<FONT color="green">339</FONT>            }<a name="line.339"></a>
<FONT color="green">340</FONT>    <a name="line.340"></a>
<FONT color="green">341</FONT>            // if too any elements<a name="line.341"></a>
<FONT color="green">342</FONT>            if (dataset.getKeys().size() &gt; plotArea.getWidth()) {<a name="line.342"></a>
<FONT color="green">343</FONT>                String text = "Too many elements";<a name="line.343"></a>
<FONT color="green">344</FONT>                Font sfont = new Font("dialog", Font.BOLD, 10);<a name="line.344"></a>
<FONT color="green">345</FONT>                g2.setFont(sfont);<a name="line.345"></a>
<FONT color="green">346</FONT>                FontMetrics fm = g2.getFontMetrics(sfont);<a name="line.346"></a>
<FONT color="green">347</FONT>                int stringWidth = fm.stringWidth(text);<a name="line.347"></a>
<FONT color="green">348</FONT>    <a name="line.348"></a>
<FONT color="green">349</FONT>                g2.drawString(text, (int) (plotArea.getX() + (plotArea.getWidth()<a name="line.349"></a>
<FONT color="green">350</FONT>                        - stringWidth) / 2), (int) (plotArea.getY()<a name="line.350"></a>
<FONT color="green">351</FONT>                        + (plotArea.getHeight() / 2)));<a name="line.351"></a>
<FONT color="green">352</FONT>                return;<a name="line.352"></a>
<FONT color="green">353</FONT>            }<a name="line.353"></a>
<FONT color="green">354</FONT>            // if we are drawing a perfect circle, we need to readjust the top left<a name="line.354"></a>
<FONT color="green">355</FONT>            // coordinates of the drawing area for the arcs to arrive at this<a name="line.355"></a>
<FONT color="green">356</FONT>            // effect.<a name="line.356"></a>
<FONT color="green">357</FONT>            if (isCircular()) {<a name="line.357"></a>
<FONT color="green">358</FONT>                double min = Math.min(plotArea.getWidth(),<a name="line.358"></a>
<FONT color="green">359</FONT>                        plotArea.getHeight()) / 2;<a name="line.359"></a>
<FONT color="green">360</FONT>                plotArea = new Rectangle2D.Double(plotArea.getCenterX() - min,<a name="line.360"></a>
<FONT color="green">361</FONT>                        plotArea.getCenterY() - min, 2 * min, 2 * min);<a name="line.361"></a>
<FONT color="green">362</FONT>            }<a name="line.362"></a>
<FONT color="green">363</FONT>            // get a list of keys...<a name="line.363"></a>
<FONT color="green">364</FONT>            List sectionKeys = dataset.getKeys();<a name="line.364"></a>
<FONT color="green">365</FONT>    <a name="line.365"></a>
<FONT color="green">366</FONT>            if (sectionKeys.size() == 0) {<a name="line.366"></a>
<FONT color="green">367</FONT>                return;<a name="line.367"></a>
<FONT color="green">368</FONT>            }<a name="line.368"></a>
<FONT color="green">369</FONT>    <a name="line.369"></a>
<FONT color="green">370</FONT>            // establish the coordinates of the top left corner of the drawing area<a name="line.370"></a>
<FONT color="green">371</FONT>            double arcX = pieArea.getX();<a name="line.371"></a>
<FONT color="green">372</FONT>            double arcY = pieArea.getY();<a name="line.372"></a>
<FONT color="green">373</FONT>    <a name="line.373"></a>
<FONT color="green">374</FONT>            //g2.clip(clipArea);<a name="line.374"></a>
<FONT color="green">375</FONT>            Composite originalComposite = g2.getComposite();<a name="line.375"></a>
<FONT color="green">376</FONT>            g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,<a name="line.376"></a>
<FONT color="green">377</FONT>                    getForegroundAlpha()));<a name="line.377"></a>
<FONT color="green">378</FONT>    <a name="line.378"></a>
<FONT color="green">379</FONT>            double totalValue = DatasetUtilities.calculatePieDatasetTotal(dataset);<a name="line.379"></a>
<FONT color="green">380</FONT>            double runningTotal = 0;<a name="line.380"></a>
<FONT color="green">381</FONT>            if (depth &lt; 0) {<a name="line.381"></a>
<FONT color="green">382</FONT>                return;  // if depth is negative don't draw anything<a name="line.382"></a>
<FONT color="green">383</FONT>            }<a name="line.383"></a>
<FONT color="green">384</FONT>    <a name="line.384"></a>
<FONT color="green">385</FONT>            ArrayList arcList = new ArrayList();<a name="line.385"></a>
<FONT color="green">386</FONT>            Arc2D.Double arc;<a name="line.386"></a>
<FONT color="green">387</FONT>            Paint paint;<a name="line.387"></a>
<FONT color="green">388</FONT>            Paint outlinePaint;<a name="line.388"></a>
<FONT color="green">389</FONT>            Stroke outlineStroke;<a name="line.389"></a>
<FONT color="green">390</FONT>    <a name="line.390"></a>
<FONT color="green">391</FONT>            Iterator iterator = sectionKeys.iterator();<a name="line.391"></a>
<FONT color="green">392</FONT>            while (iterator.hasNext()) {<a name="line.392"></a>
<FONT color="green">393</FONT>    <a name="line.393"></a>
<FONT color="green">394</FONT>                Comparable currentKey = (Comparable) iterator.next();<a name="line.394"></a>
<FONT color="green">395</FONT>                Number dataValue = dataset.getValue(currentKey);<a name="line.395"></a>
<FONT color="green">396</FONT>                if (dataValue == null) {<a name="line.396"></a>
<FONT color="green">397</FONT>                    arcList.add(null);<a name="line.397"></a>
<FONT color="green">398</FONT>                    continue;<a name="line.398"></a>
<FONT color="green">399</FONT>                }<a name="line.399"></a>
<FONT color="green">400</FONT>                double value = dataValue.doubleValue();<a name="line.400"></a>
<FONT color="green">401</FONT>                if (value &lt;= 0) {<a name="line.401"></a>
<FONT color="green">402</FONT>                    arcList.add(null);<a name="line.402"></a>
<FONT color="green">403</FONT>                    continue;<a name="line.403"></a>
<FONT color="green">404</FONT>                }<a name="line.404"></a>
<FONT color="green">405</FONT>                double startAngle = getStartAngle();<a name="line.405"></a>
<FONT color="green">406</FONT>                double direction = getDirection().getFactor();<a name="line.406"></a>
<FONT color="green">407</FONT>                double angle1 = startAngle + (direction * (runningTotal * 360))<a name="line.407"></a>
<FONT color="green">408</FONT>                        / totalValue;<a name="line.408"></a>
<FONT color="green">409</FONT>                double angle2 = startAngle + (direction * (runningTotal + value)<a name="line.409"></a>
<FONT color="green">410</FONT>                        * 360) / totalValue;<a name="line.410"></a>
<FONT color="green">411</FONT>                if (Math.abs(angle2 - angle1) &gt; getMinimumArcAngleToDraw()) {<a name="line.411"></a>
<FONT color="green">412</FONT>                    arcList.add(new Arc2D.Double(arcX, arcY + depth,<a name="line.412"></a>
<FONT color="green">413</FONT>                            pieArea.getWidth(), pieArea.getHeight() - depth,<a name="line.413"></a>
<FONT color="green">414</FONT>                            angle1, angle2 - angle1, Arc2D.PIE));<a name="line.414"></a>
<FONT color="green">415</FONT>                }<a name="line.415"></a>
<FONT color="green">416</FONT>                else {<a name="line.416"></a>
<FONT color="green">417</FONT>                    arcList.add(null);<a name="line.417"></a>
<FONT color="green">418</FONT>                }<a name="line.418"></a>
<FONT color="green">419</FONT>                runningTotal += value;<a name="line.419"></a>
<FONT color="green">420</FONT>            }<a name="line.420"></a>
<FONT color="green">421</FONT>    <a name="line.421"></a>
<FONT color="green">422</FONT>            Shape oldClip = g2.getClip();<a name="line.422"></a>
<FONT color="green">423</FONT>    <a name="line.423"></a>
<FONT color="green">424</FONT>            Ellipse2D top = new Ellipse2D.Double(pieArea.getX(), pieArea.getY(),<a name="line.424"></a>
<FONT color="green">425</FONT>                    pieArea.getWidth(), pieArea.getHeight() - depth);<a name="line.425"></a>
<FONT color="green">426</FONT>    <a name="line.426"></a>
<FONT color="green">427</FONT>            Ellipse2D bottom = new Ellipse2D.Double(pieArea.getX(), pieArea.getY()<a name="line.427"></a>
<FONT color="green">428</FONT>                    + depth, pieArea.getWidth(), pieArea.getHeight() - depth);<a name="line.428"></a>
<FONT color="green">429</FONT>    <a name="line.429"></a>
<FONT color="green">430</FONT>            Rectangle2D lower = new Rectangle2D.Double(top.getX(),<a name="line.430"></a>
<FONT color="green">431</FONT>                    top.getCenterY(), pieArea.getWidth(), bottom.getMaxY()<a name="line.431"></a>
<FONT color="green">432</FONT>                    - top.getCenterY());<a name="line.432"></a>
<FONT color="green">433</FONT>    <a name="line.433"></a>
<FONT color="green">434</FONT>            Rectangle2D upper = new Rectangle2D.Double(pieArea.getX(), top.getY(),<a name="line.434"></a>
<FONT color="green">435</FONT>                    pieArea.getWidth(), bottom.getCenterY() - top.getY());<a name="line.435"></a>
<FONT color="green">436</FONT>    <a name="line.436"></a>
<FONT color="green">437</FONT>            Area a = new Area(top);<a name="line.437"></a>
<FONT color="green">438</FONT>            a.add(new Area(lower));<a name="line.438"></a>
<FONT color="green">439</FONT>            Area b = new Area(bottom);<a name="line.439"></a>
<FONT color="green">440</FONT>            b.add(new Area(upper));<a name="line.440"></a>
<FONT color="green">441</FONT>            Area pie = new Area(a);<a name="line.441"></a>
<FONT color="green">442</FONT>            pie.intersect(b);<a name="line.442"></a>
<FONT color="green">443</FONT>    <a name="line.443"></a>
<FONT color="green">444</FONT>            Area front = new Area(pie);<a name="line.444"></a>
<FONT color="green">445</FONT>            front.subtract(new Area(top));<a name="line.445"></a>
<FONT color="green">446</FONT>    <a name="line.446"></a>
<FONT color="green">447</FONT>            Area back = new Area(pie);<a name="line.447"></a>
<FONT color="green">448</FONT>            back.subtract(new Area(bottom));<a name="line.448"></a>
<FONT color="green">449</FONT>    <a name="line.449"></a>
<FONT color="green">450</FONT>            // draw the bottom circle<a name="line.450"></a>
<FONT color="green">451</FONT>            int[] xs;<a name="line.451"></a>
<FONT color="green">452</FONT>            int[] ys;<a name="line.452"></a>
<FONT color="green">453</FONT>            arc = new Arc2D.Double(arcX, arcY + depth, pieArea.getWidth(),<a name="line.453"></a>
<FONT color="green">454</FONT>                    pieArea.getHeight() - depth, 0, 360, Arc2D.PIE);<a name="line.454"></a>
<FONT color="green">455</FONT>    <a name="line.455"></a>
<FONT color="green">456</FONT>            int categoryCount = arcList.size();<a name="line.456"></a>
<FONT color="green">457</FONT>            for (int categoryIndex = 0; categoryIndex &lt; categoryCount;<a name="line.457"></a>
<FONT color="green">458</FONT>                     categoryIndex++) {<a name="line.458"></a>
<FONT color="green">459</FONT>                arc = (Arc2D.Double) arcList.get(categoryIndex);<a name="line.459"></a>
<FONT color="green">460</FONT>                if (arc == null) {<a name="line.460"></a>
<FONT color="green">461</FONT>                    continue;<a name="line.461"></a>
<FONT color="green">462</FONT>                }<a name="line.462"></a>
<FONT color="green">463</FONT>                Comparable key = getSectionKey(categoryIndex);<a name="line.463"></a>
<FONT color="green">464</FONT>                paint = lookupSectionPaint(key);<a name="line.464"></a>
<FONT color="green">465</FONT>                outlinePaint = lookupSectionOutlinePaint(key);<a name="line.465"></a>
<FONT color="green">466</FONT>                outlineStroke = lookupSectionOutlineStroke(key);<a name="line.466"></a>
<FONT color="green">467</FONT>                g2.setPaint(paint);<a name="line.467"></a>
<FONT color="green">468</FONT>                g2.fill(arc);<a name="line.468"></a>
<FONT color="green">469</FONT>                g2.setPaint(outlinePaint);<a name="line.469"></a>
<FONT color="green">470</FONT>                g2.setStroke(outlineStroke);<a name="line.470"></a>
<FONT color="green">471</FONT>                g2.draw(arc);<a name="line.471"></a>
<FONT color="green">472</FONT>                g2.setPaint(paint);<a name="line.472"></a>
<FONT color="green">473</FONT>    <a name="line.473"></a>
<FONT color="green">474</FONT>                Point2D p1 = arc.getStartPoint();<a name="line.474"></a>
<FONT color="green">475</FONT>    <a name="line.475"></a>
<FONT color="green">476</FONT>                // draw the height<a name="line.476"></a>
<FONT color="green">477</FONT>                xs = new int[] {(int) arc.getCenterX(), (int) arc.getCenterX(),<a name="line.477"></a>
<FONT color="green">478</FONT>                        (int) p1.getX(), (int) p1.getX()};<a name="line.478"></a>
<FONT color="green">479</FONT>                ys = new int[] {(int) arc.getCenterY(), (int) arc.getCenterY()<a name="line.479"></a>
<FONT color="green">480</FONT>                        - depth, (int) p1.getY() - depth, (int) p1.getY()};<a name="line.480"></a>
<FONT color="green">481</FONT>                Polygon polygon = new Polygon(xs, ys, 4);<a name="line.481"></a>
<FONT color="green">482</FONT>                g2.setPaint(java.awt.Color.lightGray);<a name="line.482"></a>
<FONT color="green">483</FONT>                g2.fill(polygon);<a name="line.483"></a>
<FONT color="green">484</FONT>                g2.setPaint(outlinePaint);<a name="line.484"></a>
<FONT color="green">485</FONT>                g2.setStroke(outlineStroke);<a name="line.485"></a>
<FONT color="green">486</FONT>                g2.draw(polygon);<a name="line.486"></a>
<FONT color="green">487</FONT>                g2.setPaint(paint);<a name="line.487"></a>
<FONT color="green">488</FONT>    <a name="line.488"></a>
<FONT color="green">489</FONT>            }<a name="line.489"></a>
<FONT color="green">490</FONT>    <a name="line.490"></a>
<FONT color="green">491</FONT>            g2.setPaint(Color.gray);<a name="line.491"></a>
<FONT color="green">492</FONT>            g2.fill(back);<a name="line.492"></a>
<FONT color="green">493</FONT>            g2.fill(front);<a name="line.493"></a>
<FONT color="green">494</FONT>    <a name="line.494"></a>
<FONT color="green">495</FONT>            // cycle through once drawing only the sides at the back...<a name="line.495"></a>
<FONT color="green">496</FONT>            int cat = 0;<a name="line.496"></a>
<FONT color="green">497</FONT>            iterator = arcList.iterator();<a name="line.497"></a>
<FONT color="green">498</FONT>            while (iterator.hasNext()) {<a name="line.498"></a>
<FONT color="green">499</FONT>                Arc2D segment = (Arc2D) iterator.next();<a name="line.499"></a>
<FONT color="green">500</FONT>                if (segment != null) {<a name="line.500"></a>
<FONT color="green">501</FONT>                    Comparable key = getSectionKey(cat);<a name="line.501"></a>
<FONT color="green">502</FONT>                    paint = lookupSectionPaint(key);<a name="line.502"></a>
<FONT color="green">503</FONT>                    outlinePaint = lookupSectionOutlinePaint(key);<a name="line.503"></a>
<FONT color="green">504</FONT>                    outlineStroke = lookupSectionOutlineStroke(key);<a name="line.504"></a>
<FONT color="green">505</FONT>                    drawSide(g2, pieArea, segment, front, back, paint,<a name="line.505"></a>
<FONT color="green">506</FONT>                            outlinePaint, outlineStroke, false, true);<a name="line.506"></a>
<FONT color="green">507</FONT>                }<a name="line.507"></a>
<FONT color="green">508</FONT>                cat++;<a name="line.508"></a>
<FONT color="green">509</FONT>            }<a name="line.509"></a>
<FONT color="green">510</FONT>    <a name="line.510"></a>
<FONT color="green">511</FONT>            // cycle through again drawing only the sides at the front...<a name="line.511"></a>
<FONT color="green">512</FONT>            cat = 0;<a name="line.512"></a>
<FONT color="green">513</FONT>            iterator = arcList.iterator();<a name="line.513"></a>
<FONT color="green">514</FONT>            while (iterator.hasNext()) {<a name="line.514"></a>
<FONT color="green">515</FONT>                Arc2D segment = (Arc2D) iterator.next();<a name="line.515"></a>
<FONT color="green">516</FONT>                if (segment != null) {<a name="line.516"></a>
<FONT color="green">517</FONT>                    Comparable key = getSectionKey(cat);<a name="line.517"></a>
<FONT color="green">518</FONT>                    paint = lookupSectionPaint(key);<a name="line.518"></a>
<FONT color="green">519</FONT>                    outlinePaint = lookupSectionOutlinePaint(key);<a name="line.519"></a>
<FONT color="green">520</FONT>                    outlineStroke = lookupSectionOutlineStroke(key);<a name="line.520"></a>
<FONT color="green">521</FONT>                    drawSide(g2, pieArea, segment, front, back, paint,<a name="line.521"></a>
<FONT color="green">522</FONT>                            outlinePaint, outlineStroke, true, false);<a name="line.522"></a>
<FONT color="green">523</FONT>                }<a name="line.523"></a>
<FONT color="green">524</FONT>                cat++;<a name="line.524"></a>
<FONT color="green">525</FONT>            }<a name="line.525"></a>
<FONT color="green">526</FONT>    <a name="line.526"></a>
<FONT color="green">527</FONT>            g2.setClip(oldClip);<a name="line.527"></a>
<FONT color="green">528</FONT>    <a name="line.528"></a>
<FONT color="green">529</FONT>            // draw the sections at the top of the pie (and set up tooltips)...<a name="line.529"></a>
<FONT color="green">530</FONT>            Arc2D upperArc;<a name="line.530"></a>
<FONT color="green">531</FONT>            for (int sectionIndex = 0; sectionIndex &lt; categoryCount;<a name="line.531"></a>
<FONT color="green">532</FONT>                     sectionIndex++) {<a name="line.532"></a>
<FONT color="green">533</FONT>                arc = (Arc2D.Double) arcList.get(sectionIndex);<a name="line.533"></a>
<FONT color="green">534</FONT>                if (arc == null) {<a name="line.534"></a>
<FONT color="green">535</FONT>                    continue;<a name="line.535"></a>
<FONT color="green">536</FONT>                }<a name="line.536"></a>
<FONT color="green">537</FONT>                upperArc = new Arc2D.Double(arcX, arcY, pieArea.getWidth(),<a name="line.537"></a>
<FONT color="green">538</FONT>                        pieArea.getHeight() - depth, arc.getAngleStart(),<a name="line.538"></a>
<FONT color="green">539</FONT>                        arc.getAngleExtent(), Arc2D.PIE);<a name="line.539"></a>
<FONT color="green">540</FONT>    <a name="line.540"></a>
<FONT color="green">541</FONT>                Comparable currentKey = (Comparable) sectionKeys.get(sectionIndex);<a name="line.541"></a>
<FONT color="green">542</FONT>                paint = lookupSectionPaint(currentKey, true);<a name="line.542"></a>
<FONT color="green">543</FONT>                outlinePaint = lookupSectionOutlinePaint(currentKey);<a name="line.543"></a>
<FONT color="green">544</FONT>                outlineStroke = lookupSectionOutlineStroke(currentKey);<a name="line.544"></a>
<FONT color="green">545</FONT>                g2.setPaint(paint);<a name="line.545"></a>
<FONT color="green">546</FONT>                g2.fill(upperArc);<a name="line.546"></a>
<FONT color="green">547</FONT>                g2.setStroke(outlineStroke);<a name="line.547"></a>
<FONT color="green">548</FONT>                g2.setPaint(outlinePaint);<a name="line.548"></a>
<FONT color="green">549</FONT>                g2.draw(upperArc);<a name="line.549"></a>
<FONT color="green">550</FONT>    <a name="line.550"></a>
<FONT color="green">551</FONT>               // add a tooltip for the section...<a name="line.551"></a>
<FONT color="green">552</FONT>                if (info != null) {<a name="line.552"></a>
<FONT color="green">553</FONT>                    EntityCollection entities<a name="line.553"></a>
<FONT color="green">554</FONT>                            = info.getOwner().getEntityCollection();<a name="line.554"></a>
<FONT color="green">555</FONT>                    if (entities != null) {<a name="line.555"></a>
<FONT color="green">556</FONT>                        String tip = null;<a name="line.556"></a>
<FONT color="green">557</FONT>                        PieToolTipGenerator tipster = getToolTipGenerator();<a name="line.557"></a>
<FONT color="green">558</FONT>                        if (tipster != null) {<a name="line.558"></a>
<FONT color="green">559</FONT>                            // @mgs: using the method's return value was missing<a name="line.559"></a>
<FONT color="green">560</FONT>                            tip = tipster.generateToolTip(dataset, currentKey);<a name="line.560"></a>
<FONT color="green">561</FONT>                        }<a name="line.561"></a>
<FONT color="green">562</FONT>                        String url = null;<a name="line.562"></a>
<FONT color="green">563</FONT>                        if (getURLGenerator() != null) {<a name="line.563"></a>
<FONT color="green">564</FONT>                            url = getURLGenerator().generateURL(dataset, currentKey,<a name="line.564"></a>
<FONT color="green">565</FONT>                                    getPieIndex());<a name="line.565"></a>
<FONT color="green">566</FONT>                        }<a name="line.566"></a>
<FONT color="green">567</FONT>                        PieSectionEntity entity = new PieSectionEntity(<a name="line.567"></a>
<FONT color="green">568</FONT>                                upperArc, dataset, getPieIndex(), sectionIndex,<a name="line.568"></a>
<FONT color="green">569</FONT>                                currentKey, tip, url);<a name="line.569"></a>
<FONT color="green">570</FONT>                        entities.add(entity);<a name="line.570"></a>
<FONT color="green">571</FONT>                    }<a name="line.571"></a>
<FONT color="green">572</FONT>                }<a name="line.572"></a>
<FONT color="green">573</FONT>            }<a name="line.573"></a>
<FONT color="green">574</FONT>    <a name="line.574"></a>
<FONT color="green">575</FONT>            List keys = dataset.getKeys();<a name="line.575"></a>
<FONT color="green">576</FONT>            Rectangle2D adjustedPlotArea = new Rectangle2D.Double(<a name="line.576"></a>
<FONT color="green">577</FONT>                    originalPlotArea.getX(), originalPlotArea.getY(),<a name="line.577"></a>
<FONT color="green">578</FONT>                    originalPlotArea.getWidth(), originalPlotArea.getHeight()<a name="line.578"></a>
<FONT color="green">579</FONT>                    - depth);<a name="line.579"></a>
<FONT color="green">580</FONT>            if (getSimpleLabels()) {<a name="line.580"></a>
<FONT color="green">581</FONT>                drawSimpleLabels(g2, keys, totalValue, adjustedPlotArea,<a name="line.581"></a>
<FONT color="green">582</FONT>                        linkArea, state);<a name="line.582"></a>
<FONT color="green">583</FONT>            }<a name="line.583"></a>
<FONT color="green">584</FONT>            else {<a name="line.584"></a>
<FONT color="green">585</FONT>                drawLabels(g2, keys, totalValue, adjustedPlotArea, linkArea,<a name="line.585"></a>
<FONT color="green">586</FONT>                        state);<a name="line.586"></a>
<FONT color="green">587</FONT>            }<a name="line.587"></a>
<FONT color="green">588</FONT>    <a name="line.588"></a>
<FONT color="green">589</FONT>            g2.setClip(savedClip);<a name="line.589"></a>
<FONT color="green">590</FONT>            g2.setComposite(originalComposite);<a name="line.590"></a>
<FONT color="green">591</FONT>            drawOutline(g2, originalPlotArea);<a name="line.591"></a>
<FONT color="green">592</FONT>    <a name="line.592"></a>
<FONT color="green">593</FONT>        }<a name="line.593"></a>
<FONT color="green">594</FONT>    <a name="line.594"></a>
<FONT color="green">595</FONT>        /**<a name="line.595"></a>
<FONT color="green">596</FONT>         * Draws the side of a pie section.<a name="line.596"></a>
<FONT color="green">597</FONT>         *<a name="line.597"></a>
<FONT color="green">598</FONT>         * @param g2  the graphics device.<a name="line.598"></a>
<FONT color="green">599</FONT>         * @param plotArea  the plot area.<a name="line.599"></a>
<FONT color="green">600</FONT>         * @param arc  the arc.<a name="line.600"></a>
<FONT color="green">601</FONT>         * @param front  the front of the pie.<a name="line.601"></a>
<FONT color="green">602</FONT>         * @param back  the back of the pie.<a name="line.602"></a>
<FONT color="green">603</FONT>         * @param paint  the color.<a name="line.603"></a>
<FONT color="green">604</FONT>         * @param outlinePaint  the outline paint.<a name="line.604"></a>
<FONT color="green">605</FONT>         * @param outlineStroke  the outline stroke.<a name="line.605"></a>
<FONT color="green">606</FONT>         * @param drawFront  draw the front?<a name="line.606"></a>
<FONT color="green">607</FONT>         * @param drawBack  draw the back?<a name="line.607"></a>
<FONT color="green">608</FONT>         */<a name="line.608"></a>
<FONT color="green">609</FONT>        protected void drawSide(Graphics2D g2,<a name="line.609"></a>
<FONT color="green">610</FONT>                                Rectangle2D plotArea,<a name="line.610"></a>
<FONT color="green">611</FONT>                                Arc2D arc,<a name="line.611"></a>
<FONT color="green">612</FONT>                                Area front,<a name="line.612"></a>
<FONT color="green">613</FONT>                                Area back,<a name="line.613"></a>
<FONT color="green">614</FONT>                                Paint paint,<a name="line.614"></a>
<FONT color="green">615</FONT>                                Paint outlinePaint,<a name="line.615"></a>
<FONT color="green">616</FONT>                                Stroke outlineStroke,<a name="line.616"></a>
<FONT color="green">617</FONT>                                boolean drawFront,<a name="line.617"></a>
<FONT color="green">618</FONT>                                boolean drawBack) {<a name="line.618"></a>
<FONT color="green">619</FONT>    <a name="line.619"></a>
<FONT color="green">620</FONT>            if (getDarkerSides()) {<a name="line.620"></a>
<FONT color="green">621</FONT>                if (paint instanceof Color) {<a name="line.621"></a>
<FONT color="green">622</FONT>                    Color c = (Color) paint;<a name="line.622"></a>
<FONT color="green">623</FONT>                    c = c.darker();<a name="line.623"></a>
<FONT color="green">624</FONT>                    paint = c;<a name="line.624"></a>
<FONT color="green">625</FONT>                }<a name="line.625"></a>
<FONT color="green">626</FONT>            }<a name="line.626"></a>
<FONT color="green">627</FONT>    <a name="line.627"></a>
<FONT color="green">628</FONT>            double start = arc.getAngleStart();<a name="line.628"></a>
<FONT color="green">629</FONT>            double extent = arc.getAngleExtent();<a name="line.629"></a>
<FONT color="green">630</FONT>            double end = start + extent;<a name="line.630"></a>
<FONT color="green">631</FONT>    <a name="line.631"></a>
<FONT color="green">632</FONT>            g2.setStroke(outlineStroke);<a name="line.632"></a>
<FONT color="green">633</FONT>    <a name="line.633"></a>
<FONT color="green">634</FONT>            // for CLOCKWISE charts, the extent will be negative...<a name="line.634"></a>
<FONT color="green">635</FONT>            if (extent &lt; 0.0) {<a name="line.635"></a>
<FONT color="green">636</FONT>    <a name="line.636"></a>
<FONT color="green">637</FONT>                if (isAngleAtFront(start)) {  // start at front<a name="line.637"></a>
<FONT color="green">638</FONT>    <a name="line.638"></a>
<FONT color="green">639</FONT>                    if (!isAngleAtBack(end)) {<a name="line.639"></a>
<FONT color="green">640</FONT>    <a name="line.640"></a>
<FONT color="green">641</FONT>                        if (extent &gt; -180.0) {  // the segment is entirely at the<a name="line.641"></a>
<FONT color="green">642</FONT>                                                // front of the chart<a name="line.642"></a>
<FONT color="green">643</FONT>                            if (drawFront) {<a name="line.643"></a>
<FONT color="green">644</FONT>                                Area side = new Area(new Rectangle2D.Double(<a name="line.644"></a>
<FONT color="green">645</FONT>                                        arc.getEndPoint().getX(), plotArea.getY(),<a name="line.645"></a>
<FONT color="green">646</FONT>                                        arc.getStartPoint().getX()<a name="line.646"></a>
<FONT color="green">647</FONT>                                        - arc.getEndPoint().getX(),<a name="line.647"></a>
<FONT color="green">648</FONT>                                        plotArea.getHeight()));<a name="line.648"></a>
<FONT color="green">649</FONT>                                side.intersect(front);<a name="line.649"></a>
<FONT color="green">650</FONT>                                g2.setPaint(paint);<a name="line.650"></a>
<FONT color="green">651</FONT>                                g2.fill(side);<a name="line.651"></a>
<FONT color="green">652</FONT>                                g2.setPaint(outlinePaint);<a name="line.652"></a>
<FONT color="green">653</FONT>                                g2.draw(side);<a name="line.653"></a>
<FONT color="green">654</FONT>                            }<a name="line.654"></a>
<FONT color="green">655</FONT>                        }<a name="line.655"></a>
<FONT color="green">656</FONT>                        else {  // the segment starts at the front, and wraps all<a name="line.656"></a>
<FONT color="green">657</FONT>                                // the way around<a name="line.657"></a>
<FONT color="green">658</FONT>                                // the back and finishes at the front again<a name="line.658"></a>
<FONT color="green">659</FONT>                            Area side1 = new Area(new Rectangle2D.Double(<a name="line.659"></a>
<FONT color="green">660</FONT>                                    plotArea.getX(), plotArea.getY(),<a name="line.660"></a>
<FONT color="green">661</FONT>                                    arc.getStartPoint().getX() - plotArea.getX(),<a name="line.661"></a>
<FONT color="green">662</FONT>                                    plotArea.getHeight()));<a name="line.662"></a>
<FONT color="green">663</FONT>                            side1.intersect(front);<a name="line.663"></a>
<FONT color="green">664</FONT>    <a name="line.664"></a>
<FONT color="green">665</FONT>                            Area side2 = new Area(new Rectangle2D.Double(<a name="line.665"></a>
<FONT color="green">666</FONT>                                    arc.getEndPoint().getX(), plotArea.getY(),<a name="line.666"></a>
<FONT color="green">667</FONT>                                    plotArea.getMaxX() - arc.getEndPoint().getX(),<a name="line.667"></a>
<FONT color="green">668</FONT>                                    plotArea.getHeight()));<a name="line.668"></a>
<FONT color="green">669</FONT>    <a name="line.669"></a>
<FONT color="green">670</FONT>                            side2.intersect(front);<a name="line.670"></a>
<FONT color="green">671</FONT>                            g2.setPaint(paint);<a name="line.671"></a>
<FONT color="green">672</FONT>                            if (drawFront) {<a name="line.672"></a>
<FONT color="green">673</FONT>                                g2.fill(side1);<a name="line.673"></a>
<FONT color="green">674</FONT>                                g2.fill(side2);<a name="line.674"></a>
<FONT color="green">675</FONT>                            }<a name="line.675"></a>
<FONT color="green">676</FONT>    <a name="line.676"></a>
<FONT color="green">677</FONT>                            if (drawBack) {<a name="line.677"></a>
<FONT color="green">678</FONT>                                g2.fill(back);<a name="line.678"></a>
<FONT color="green">679</FONT>                            }<a name="line.679"></a>
<FONT color="green">680</FONT>    <a name="line.680"></a>
<FONT color="green">681</FONT>                            g2.setPaint(outlinePaint);<a name="line.681"></a>
<FONT color="green">682</FONT>                            if (drawFront) {<a name="line.682"></a>
<FONT color="green">683</FONT>                                g2.draw(side1);<a name="line.683"></a>
<FONT color="green">684</FONT>                                g2.draw(side2);<a name="line.684"></a>
<FONT color="green">685</FONT>                            }<a name="line.685"></a>
<FONT color="green">686</FONT>    <a name="line.686"></a>
<FONT color="green">687</FONT>                            if (drawBack) {<a name="line.687"></a>
<FONT color="green">688</FONT>                                g2.draw(back);<a name="line.688"></a>
<FONT color="green">689</FONT>                            }<a name="line.689"></a>
<FONT color="green">690</FONT>    <a name="line.690"></a>
<FONT color="green">691</FONT>                        }<a name="line.691"></a>
<FONT color="green">692</FONT>                    }<a name="line.692"></a>
<FONT color="green">693</FONT>                    else {  // starts at the front, finishes at the back (going<a name="line.693"></a>
<FONT color="green">694</FONT>                            // around the left side)<a name="line.694"></a>
<FONT color="green">695</FONT>    <a name="line.695"></a>
<FONT color="green">696</FONT>                        if (drawBack) {<a name="line.696"></a>
<FONT color="green">697</FONT>                            Area side2 = new Area(new Rectangle2D.Double(<a name="line.697"></a>
<FONT color="green">698</FONT>                                    plotArea.getX(), plotArea.getY(),<a name="line.698"></a>
<FONT color="green">699</FONT>                                    arc.getEndPoint().getX() - plotArea.getX(),<a name="line.699"></a>
<FONT color="green">700</FONT>                                    plotArea.getHeight()));<a name="line.700"></a>
<FONT color="green">701</FONT>                            side2.intersect(back);<a name="line.701"></a>
<FONT color="green">702</FONT>                            g2.setPaint(paint);<a name="line.702"></a>
<FONT color="green">703</FONT>                            g2.fill(side2);<a name="line.703"></a>
<FONT color="green">704</FONT>                            g2.setPaint(outlinePaint);<a name="line.704"></a>
<FONT color="green">705</FONT>                            g2.draw(side2);<a name="line.705"></a>
<FONT color="green">706</FONT>                        }<a name="line.706"></a>
<FONT color="green">707</FONT>    <a name="line.707"></a>
<FONT color="green">708</FONT>                        if (drawFront) {<a name="line.708"></a>
<FONT color="green">709</FONT>                            Area side1 = new Area(new Rectangle2D.Double(<a name="line.709"></a>
<FONT color="green">710</FONT>                                    plotArea.getX(), plotArea.getY(),<a name="line.710"></a>
<FONT color="green">711</FONT>                                    arc.getStartPoint().getX() - plotArea.getX(),<a name="line.711"></a>
<FONT color="green">712</FONT>                                    plotArea.getHeight()));<a name="line.712"></a>
<FONT color="green">713</FONT>                            side1.intersect(front);<a name="line.713"></a>
<FONT color="green">714</FONT>                            g2.setPaint(paint);<a name="line.714"></a>
<FONT color="green">715</FONT>                            g2.fill(side1);<a name="line.715"></a>
<FONT color="green">716</FONT>                            g2.setPaint(outlinePaint);<a name="line.716"></a>
<FONT color="green">717</FONT>                            g2.draw(side1);<a name="line.717"></a>
<FONT color="green">718</FONT>                        }<a name="line.718"></a>
<FONT color="green">719</FONT>                    }<a name="line.719"></a>
<FONT color="green">720</FONT>                }<a name="line.720"></a>
<FONT color="green">721</FONT>                else {  // the segment starts at the back (still extending<a name="line.721"></a>
<FONT color="green">722</FONT>                        // CLOCKWISE)<a name="line.722"></a>
<FONT color="green">723</FONT>    <a name="line.723"></a>
<FONT color="green">724</FONT>                    if (!isAngleAtFront(end)) {<a name="line.724"></a>
<FONT color="green">725</FONT>                        if (extent &gt; -180.0) {  // whole segment stays at the back<a name="line.725"></a>
<FONT color="green">726</FONT>                            if (drawBack) {<a name="line.726"></a>
<FONT color="green">727</FONT>                                Area side = new Area(new Rectangle2D.Double(<a name="line.727"></a>
<FONT color="green">728</FONT>                                        arc.getStartPoint().getX(), plotArea.getY(),<a name="line.728"></a>
<FONT color="green">729</FONT>                                        arc.getEndPoint().getX()<a name="line.729"></a>
<FONT color="green">730</FONT>                                        - arc.getStartPoint().getX(),<a name="line.730"></a>
<FONT color="green">731</FONT>                                        plotArea.getHeight()));<a name="line.731"></a>
<FONT color="green">732</FONT>                                side.intersect(back);<a name="line.732"></a>
<FONT color="green">733</FONT>                                g2.setPaint(paint);<a name="line.733"></a>
<FONT color="green">734</FONT>                                g2.fill(side);<a name="line.734"></a>
<FONT color="green">735</FONT>                                g2.setPaint(outlinePaint);<a name="line.735"></a>
<FONT color="green">736</FONT>                                g2.draw(side);<a name="line.736"></a>
<FONT color="green">737</FONT>                            }<a name="line.737"></a>
<FONT color="green">738</FONT>                        }<a name="line.738"></a>
<FONT color="green">739</FONT>                        else {  // starts at the back, wraps around front, and<a name="line.739"></a>
<FONT color="green">740</FONT>                                // finishes at back again<a name="line.740"></a>
<FONT color="green">741</FONT>                            Area side1 = new Area(new Rectangle2D.Double(<a name="line.741"></a>
<FONT color="green">742</FONT>                                    arc.getStartPoint().getX(), plotArea.getY(),<a name="line.742"></a>
<FONT color="green">743</FONT>                                    plotArea.getMaxX() - arc.getStartPoint().getX(),<a name="line.743"></a>
<FONT color="green">744</FONT>                                    plotArea.getHeight()));<a name="line.744"></a>
<FONT color="green">745</FONT>                            side1.intersect(back);<a name="line.745"></a>
<FONT color="green">746</FONT>    <a name="line.746"></a>
<FONT color="green">747</FONT>                            Area side2 = new Area(new Rectangle2D.Double(<a name="line.747"></a>
<FONT color="green">748</FONT>                                    plotArea.getX(), plotArea.getY(),<a name="line.748"></a>
<FONT color="green">749</FONT>                                    arc.getEndPoint().getX() - plotArea.getX(),<a name="line.749"></a>
<FONT color="green">750</FONT>                                    plotArea.getHeight()));<a name="line.750"></a>
<FONT color="green">751</FONT>    <a name="line.751"></a>
<FONT color="green">752</FONT>                            side2.intersect(back);<a name="line.752"></a>
<FONT color="green">753</FONT>    <a name="line.753"></a>
<FONT color="green">754</FONT>                            g2.setPaint(paint);<a name="line.754"></a>
<FONT color="green">755</FONT>                            if (drawBack) {<a name="line.755"></a>
<FONT color="green">756</FONT>                                g2.fill(side1);<a name="line.756"></a>
<FONT color="green">757</FONT>                                g2.fill(side2);<a name="line.757"></a>
<FONT color="green">758</FONT>                            }<a name="line.758"></a>
<FONT color="green">759</FONT>    <a name="line.759"></a>
<FONT color="green">760</FONT>                            if (drawFront) {<a name="line.760"></a>
<FONT color="green">761</FONT>                                g2.fill(front);<a name="line.761"></a>
<FONT color="green">762</FONT>                            }<a name="line.762"></a>
<FONT color="green">763</FONT>    <a name="line.763"></a>
<FONT color="green">764</FONT>                            g2.setPaint(outlinePaint);<a name="line.764"></a>
<FONT color="green">765</FONT>                            if (drawBack) {<a name="line.765"></a>
<FONT color="green">766</FONT>                                g2.draw(side1);<a name="line.766"></a>
<FONT color="green">767</FONT>                                g2.draw(side2);<a name="line.767"></a>
<FONT color="green">768</FONT>                            }<a name="line.768"></a>
<FONT color="green">769</FONT>    <a name="line.769"></a>
<FONT color="green">770</FONT>                            if (drawFront) {<a name="line.770"></a>
<FONT color="green">771</FONT>                                g2.draw(front);<a name="line.771"></a>
<FONT color="green">772</FONT>                            }<a name="line.772"></a>
<FONT color="green">773</FONT>    <a name="line.773"></a>
<FONT color="green">774</FONT>                        }<a name="line.774"></a>
<FONT color="green">775</FONT>                    }<a name="line.775"></a>
<FONT color="green">776</FONT>                    else {  // starts at back, finishes at front (CLOCKWISE)<a name="line.776"></a>
<FONT color="green">777</FONT>    <a name="line.777"></a>
<FONT color="green">778</FONT>                        if (drawBack) {<a name="line.778"></a>
<FONT color="green">779</FONT>                            Area side1 = new Area(new Rectangle2D.Double(<a name="line.779"></a>
<FONT color="green">780</FONT>                                    arc.getStartPoint().getX(), plotArea.getY(),<a name="line.780"></a>
<FONT color="green">781</FONT>                                    plotArea.getMaxX() - arc.getStartPoint().getX(),<a name="line.781"></a>
<FONT color="green">782</FONT>                                    plotArea.getHeight()));<a name="line.782"></a>
<FONT color="green">783</FONT>                            side1.intersect(back);<a name="line.783"></a>
<FONT color="green">784</FONT>                            g2.setPaint(paint);<a name="line.784"></a>
<FONT color="green">785</FONT>                            g2.fill(side1);<a name="line.785"></a>
<FONT color="green">786</FONT>                            g2.setPaint(outlinePaint);<a name="line.786"></a>
<FONT color="green">787</FONT>                            g2.draw(side1);<a name="line.787"></a>
<FONT color="green">788</FONT>                        }<a name="line.788"></a>
<FONT color="green">789</FONT>    <a name="line.789"></a>
<FONT color="green">790</FONT>                        if (drawFront) {<a name="line.790"></a>
<FONT color="green">791</FONT>                            Area side2 = new Area(new Rectangle2D.Double(<a name="line.791"></a>
<FONT color="green">792</FONT>                                    arc.getEndPoint().getX(), plotArea.getY(),<a name="line.792"></a>
<FONT color="green">793</FONT>                                    plotArea.getMaxX() - arc.getEndPoint().getX(),<a name="line.793"></a>
<FONT color="green">794</FONT>                                    plotArea.getHeight()));<a name="line.794"></a>
<FONT color="green">795</FONT>                            side2.intersect(front);<a name="line.795"></a>
<FONT color="green">796</FONT>                            g2.setPaint(paint);<a name="line.796"></a>
<FONT color="green">797</FONT>                            g2.fill(side2);<a name="line.797"></a>
<FONT color="green">798</FONT>                            g2.setPaint(outlinePaint);<a name="line.798"></a>
<FONT color="green">799</FONT>                            g2.draw(side2);<a name="line.799"></a>
<FONT color="green">800</FONT>                        }<a name="line.800"></a>
<FONT color="green">801</FONT>    <a name="line.801"></a>
<FONT color="green">802</FONT>                    }<a name="line.802"></a>
<FONT color="green">803</FONT>                }<a name="line.803"></a>
<FONT color="green">804</FONT>            }<a name="line.804"></a>
<FONT color="green">805</FONT>            else if (extent &gt; 0.0) {  // the pie sections are arranged ANTICLOCKWISE<a name="line.805"></a>
<FONT color="green">806</FONT>    <a name="line.806"></a>
<FONT color="green">807</FONT>                if (isAngleAtFront(start)) {  // segment starts at the front<a name="line.807"></a>
<FONT color="green">808</FONT>    <a name="line.808"></a>
<FONT color="green">809</FONT>                    if (!isAngleAtBack(end)) {  // and finishes at the front<a name="line.809"></a>
<FONT color="green">810</FONT>    <a name="line.810"></a>
<FONT color="green">811</FONT>                        if (extent &lt; 180.0) {  // segment only occupies the front<a name="line.811"></a>
<FONT color="green">812</FONT>                            if (drawFront) {<a name="line.812"></a>
<FONT color="green">813</FONT>                                Area side = new Area(new Rectangle2D.Double(<a name="line.813"></a>
<FONT color="green">814</FONT>                                        arc.getStartPoint().getX(), plotArea.getY(),<a name="line.814"></a>
<FONT color="green">815</FONT>                                        arc.getEndPoint().getX()<a name="line.815"></a>
<FONT color="green">816</FONT>                                        - arc.getStartPoint().getX(),<a name="line.816"></a>
<FONT color="green">817</FONT>                                        plotArea.getHeight()));<a name="line.817"></a>
<FONT color="green">818</FONT>                                side.intersect(front);<a name="line.818"></a>
<FONT color="green">819</FONT>                                g2.setPaint(paint);<a name="line.819"></a>
<FONT color="green">820</FONT>                                g2.fill(side);<a name="line.820"></a>
<FONT color="green">821</FONT>                                g2.setPaint(outlinePaint);<a name="line.821"></a>
<FONT color="green">822</FONT>                                g2.draw(side);<a name="line.822"></a>
<FONT color="green">823</FONT>                            }<a name="line.823"></a>
<FONT color="green">824</FONT>                        }<a name="line.824"></a>
<FONT color="green">825</FONT>                        else {  // segments wraps right around the back...<a name="line.825"></a>
<FONT color="green">826</FONT>                            Area side1 = new Area(new Rectangle2D.Double(<a name="line.826"></a>
<FONT color="green">827</FONT>                                    arc.getStartPoint().getX(), plotArea.getY(),<a name="line.827"></a>
<FONT color="green">828</FONT>                                    plotArea.getMaxX() - arc.getStartPoint().getX(),<a name="line.828"></a>
<FONT color="green">829</FONT>                                    plotArea.getHeight()));<a name="line.829"></a>
<FONT color="green">830</FONT>                            side1.intersect(front);<a name="line.830"></a>
<FONT color="green">831</FONT>    <a name="line.831"></a>
<FONT color="green">832</FONT>                            Area side2 = new Area(new Rectangle2D.Double(<a name="line.832"></a>
<FONT color="green">833</FONT>                                    plotArea.getX(), plotArea.getY(),<a name="line.833"></a>
<FONT color="green">834</FONT>                                    arc.getEndPoint().getX() - plotArea.getX(),<a name="line.834"></a>
<FONT color="green">835</FONT>                                    plotArea.getHeight()));<a name="line.835"></a>
<FONT color="green">836</FONT>                            side2.intersect(front);<a name="line.836"></a>
<FONT color="green">837</FONT>    <a name="line.837"></a>
<FONT color="green">838</FONT>                            g2.setPaint(paint);<a name="line.838"></a>
<FONT color="green">839</FONT>                            if (drawFront) {<a name="line.839"></a>
<FONT color="green">840</FONT>                                g2.fill(side1);<a name="line.840"></a>
<FONT color="green">841</FONT>                                g2.fill(side2);<a name="line.841"></a>
<FONT color="green">842</FONT>                            }<a name="line.842"></a>
<FONT color="green">843</FONT>    <a name="line.843"></a>
<FONT color="green">844</FONT>                            if (drawBack) {<a name="line.844"></a>
<FONT color="green">845</FONT>                                g2.fill(back);<a name="line.845"></a>
<FONT color="green">846</FONT>                            }<a name="line.846"></a>
<FONT color="green">847</FONT>    <a name="line.847"></a>
<FONT color="green">848</FONT>                            g2.setPaint(outlinePaint);<a name="line.848"></a>
<FONT color="green">849</FONT>                            if (drawFront) {<a name="line.849"></a>
<FONT color="green">850</FONT>                                g2.draw(side1);<a name="line.850"></a>
<FONT color="green">851</FONT>                                g2.draw(side2);<a name="line.851"></a>
<FONT color="green">852</FONT>                            }<a name="line.852"></a>
<FONT color="green">853</FONT>    <a name="line.853"></a>
<FONT color="green">854</FONT>                            if (drawBack) {<a name="line.854"></a>
<FONT color="green">855</FONT>                                g2.draw(back);<a name="line.855"></a>
<FONT color="green">856</FONT>                            }<a name="line.856"></a>
<FONT color="green">857</FONT>    <a name="line.857"></a>
<FONT color="green">858</FONT>                        }<a name="line.858"></a>
<FONT color="green">859</FONT>                    }<a name="line.859"></a>
<FONT color="green">860</FONT>                    else {  // segments starts at front and finishes at back...<a name="line.860"></a>
<FONT color="green">861</FONT>                        if (drawBack) {<a name="line.861"></a>
<FONT color="green">862</FONT>                            Area side2 = new Area(new Rectangle2D.Double(<a name="line.862"></a>
<FONT color="green">863</FONT>                                    arc.getEndPoint().getX(), plotArea.getY(),<a name="line.863"></a>
<FONT color="green">864</FONT>                                    plotArea.getMaxX() - arc.getEndPoint().getX(),<a name="line.864"></a>
<FONT color="green">865</FONT>                                    plotArea.getHeight()));<a name="line.865"></a>
<FONT color="green">866</FONT>                            side2.intersect(back);<a name="line.866"></a>
<FONT color="green">867</FONT>                            g2.setPaint(paint);<a name="line.867"></a>
<FONT color="green">868</FONT>                            g2.fill(side2);<a name="line.868"></a>
<FONT color="green">869</FONT>                            g2.setPaint(outlinePaint);<a name="line.869"></a>
<FONT color="green">870</FONT>                            g2.draw(side2);<a name="line.870"></a>
<FONT color="green">871</FONT>                        }<a name="line.871"></a>
<FONT color="green">872</FONT>    <a name="line.872"></a>
<FONT color="green">873</FONT>                        if (drawFront) {<a name="line.873"></a>
<FONT color="green">874</FONT>                            Area side1 = new Area(new Rectangle2D.Double(<a name="line.874"></a>
<FONT color="green">875</FONT>                                    arc.getStartPoint().getX(), plotArea.getY(),<a name="line.875"></a>
<FONT color="green">876</FONT>                                    plotArea.getMaxX() - arc.getStartPoint().getX(),<a name="line.876"></a>
<FONT color="green">877</FONT>                                    plotArea.getHeight()));<a name="line.877"></a>
<FONT color="green">878</FONT>                            side1.intersect(front);<a name="line.878"></a>
<FONT color="green">879</FONT>                            g2.setPaint(paint);<a name="line.879"></a>
<FONT color="green">880</FONT>                            g2.fill(side1);<a name="line.880"></a>
<FONT color="green">881</FONT>                            g2.setPaint(outlinePaint);<a name="line.881"></a>
<FONT color="green">882</FONT>                            g2.draw(side1);<a name="line.882"></a>
<FONT color="green">883</FONT>                        }<a name="line.883"></a>
<FONT color="green">884</FONT>                    }<a name="line.884"></a>
<FONT color="green">885</FONT>                }<a name="line.885"></a>
<FONT color="green">886</FONT>                else {  // segment starts at back<a name="line.886"></a>
<FONT color="green">887</FONT>    <a name="line.887"></a>
<FONT color="green">888</FONT>                    if (!isAngleAtFront(end)) {<a name="line.888"></a>
<FONT color="green">889</FONT>                        if (extent &lt; 180.0) {  // and finishes at back<a name="line.889"></a>
<FONT color="green">890</FONT>                            if (drawBack) {<a name="line.890"></a>
<FONT color="green">891</FONT>                                Area side = new Area(new Rectangle2D.Double(<a name="line.891"></a>
<FONT color="green">892</FONT>                                        arc.getEndPoint().getX(), plotArea.getY(),<a name="line.892"></a>
<FONT color="green">893</FONT>                                        arc.getStartPoint().getX()<a name="line.893"></a>
<FONT color="green">894</FONT>                                        - arc.getEndPoint().getX(),<a name="line.894"></a>
<FONT color="green">895</FONT>                                        plotArea.getHeight()));<a name="line.895"></a>
<FONT color="green">896</FONT>                                side.intersect(back);<a name="line.896"></a>
<FONT color="green">897</FONT>                                g2.setPaint(paint);<a name="line.897"></a>
<FONT color="green">898</FONT>                                g2.fill(side);<a name="line.898"></a>
<FONT color="green">899</FONT>                                g2.setPaint(outlinePaint);<a name="line.899"></a>
<FONT color="green">900</FONT>                                g2.draw(side);<a name="line.900"></a>
<FONT color="green">901</FONT>                            }<a name="line.901"></a>
<FONT color="green">902</FONT>                        }<a name="line.902"></a>
<FONT color="green">903</FONT>                        else {  // starts at back and wraps right around to the<a name="line.903"></a>
<FONT color="green">904</FONT>                                // back again<a name="line.904"></a>
<FONT color="green">905</FONT>                            Area side1 = new Area(new Rectangle2D.Double(<a name="line.905"></a>
<FONT color="green">906</FONT>                                    arc.getStartPoint().getX(), plotArea.getY(),<a name="line.906"></a>
<FONT color="green">907</FONT>                                    plotArea.getX() - arc.getStartPoint().getX(),<a name="line.907"></a>
<FONT color="green">908</FONT>                                    plotArea.getHeight()));<a name="line.908"></a>
<FONT color="green">909</FONT>                            side1.intersect(back);<a name="line.909"></a>
<FONT color="green">910</FONT>    <a name="line.910"></a>
<FONT color="green">911</FONT>                            Area side2 = new Area(new Rectangle2D.Double(<a name="line.911"></a>
<FONT color="green">912</FONT>                                    arc.getEndPoint().getX(), plotArea.getY(),<a name="line.912"></a>
<FONT color="green">913</FONT>                                    plotArea.getMaxX() - arc.getEndPoint().getX(),<a name="line.913"></a>
<FONT color="green">914</FONT>                                    plotArea.getHeight()));<a name="line.914"></a>
<FONT color="green">915</FONT>                            side2.intersect(back);<a name="line.915"></a>
<FONT color="green">916</FONT>    <a name="line.916"></a>
<FONT color="green">917</FONT>                            g2.setPaint(paint);<a name="line.917"></a>
<FONT color="green">918</FONT>                            if (drawBack) {<a name="line.918"></a>
<FONT color="green">919</FONT>                                g2.fill(side1);<a name="line.919"></a>
<FONT color="green">920</FONT>                                g2.fill(side2);<a name="line.920"></a>
<FONT color="green">921</FONT>                            }<a name="line.921"></a>
<FONT color="green">922</FONT>    <a name="line.922"></a>
<FONT color="green">923</FONT>                            if (drawFront) {<a name="line.923"></a>
<FONT color="green">924</FONT>                                g2.fill(front);<a name="line.924"></a>
<FONT color="green">925</FONT>                            }<a name="line.925"></a>
<FONT color="green">926</FONT>    <a name="line.926"></a>
<FONT color="green">927</FONT>                            g2.setPaint(outlinePaint);<a name="line.927"></a>
<FONT color="green">928</FONT>                            if (drawBack) {<a name="line.928"></a>
<FONT color="green">929</FONT>                                g2.draw(side1);<a name="line.929"></a>
<FONT color="green">930</FONT>                                g2.draw(side2);<a name="line.930"></a>
<FONT color="green">931</FONT>                            }<a name="line.931"></a>
<FONT color="green">932</FONT>    <a name="line.932"></a>
<FONT color="green">933</FONT>                            if (drawFront) {<a name="line.933"></a>
<FONT color="green">934</FONT>                                g2.draw(front);<a name="line.934"></a>
<FONT color="green">935</FONT>                            }<a name="line.935"></a>
<FONT color="green">936</FONT>    <a name="line.936"></a>
<FONT color="green">937</FONT>                        }<a name="line.937"></a>
<FONT color="green">938</FONT>                    }<a name="line.938"></a>
<FONT color="green">939</FONT>                    else {  // starts at the back and finishes at the front<a name="line.939"></a>
<FONT color="green">940</FONT>                            // (wrapping the left side)<a name="line.940"></a>
<FONT color="green">941</FONT>                        if (drawBack) {<a name="line.941"></a>
<FONT color="green">942</FONT>                            Area side1 = new Area(new Rectangle2D.Double(<a name="line.942"></a>
<FONT color="green">943</FONT>                                    plotArea.getX(), plotArea.getY(),<a name="line.943"></a>
<FONT color="green">944</FONT>                                    arc.getStartPoint().getX() - plotArea.getX(),<a name="line.944"></a>
<FONT color="green">945</FONT>                                    plotArea.getHeight()));<a name="line.945"></a>
<FONT color="green">946</FONT>                            side1.intersect(back);<a name="line.946"></a>
<FONT color="green">947</FONT>                            g2.setPaint(paint);<a name="line.947"></a>
<FONT color="green">948</FONT>                            g2.fill(side1);<a name="line.948"></a>
<FONT color="green">949</FONT>                            g2.setPaint(outlinePaint);<a name="line.949"></a>
<FONT color="green">950</FONT>                            g2.draw(side1);<a name="line.950"></a>
<FONT color="green">951</FONT>                        }<a name="line.951"></a>
<FONT color="green">952</FONT>    <a name="line.952"></a>
<FONT color="green">953</FONT>                        if (drawFront) {<a name="line.953"></a>
<FONT color="green">954</FONT>                            Area side2 = new Area(new Rectangle2D.Double(<a name="line.954"></a>
<FONT color="green">955</FONT>                                    plotArea.getX(), plotArea.getY(),<a name="line.955"></a>
<FONT color="green">956</FONT>                                    arc.getEndPoint().getX() - plotArea.getX(),<a name="line.956"></a>
<FONT color="green">957</FONT>                                    plotArea.getHeight()));<a name="line.957"></a>
<FONT color="green">958</FONT>                            side2.intersect(front);<a name="line.958"></a>
<FONT color="green">959</FONT>                            g2.setPaint(paint);<a name="line.959"></a>
<FONT color="green">960</FONT>                            g2.fill(side2);<a name="line.960"></a>
<FONT color="green">961</FONT>                            g2.setPaint(outlinePaint);<a name="line.961"></a>
<FONT color="green">962</FONT>                            g2.draw(side2);<a name="line.962"></a>
<FONT color="green">963</FONT>                        }<a name="line.963"></a>
<FONT color="green">964</FONT>                    }<a name="line.964"></a>
<FONT color="green">965</FONT>                }<a name="line.965"></a>
<FONT color="green">966</FONT>    <a name="line.966"></a>
<FONT color="green">967</FONT>            }<a name="line.967"></a>
<FONT color="green">968</FONT>    <a name="line.968"></a>
<FONT color="green">969</FONT>        }<a name="line.969"></a>
<FONT color="green">970</FONT>    <a name="line.970"></a>
<FONT color="green">971</FONT>        /**<a name="line.971"></a>
<FONT color="green">972</FONT>         * Returns a short string describing the type of plot.<a name="line.972"></a>
<FONT color="green">973</FONT>         *<a name="line.973"></a>
<FONT color="green">974</FONT>         * @return &lt;i&gt;Pie 3D Plot&lt;/i&gt;.<a name="line.974"></a>
<FONT color="green">975</FONT>         */<a name="line.975"></a>
<FONT color="green">976</FONT>        public String getPlotType() {<a name="line.976"></a>
<FONT color="green">977</FONT>            return localizationResources.getString("Pie_3D_Plot");<a name="line.977"></a>
<FONT color="green">978</FONT>        }<a name="line.978"></a>
<FONT color="green">979</FONT>    <a name="line.979"></a>
<FONT color="green">980</FONT>        /**<a name="line.980"></a>
<FONT color="green">981</FONT>         * A utility method that returns true if the angle represents a point at<a name="line.981"></a>
<FONT color="green">982</FONT>         * the front of the 3D pie chart.  0 - 180 degrees is the back, 180 - 360<a name="line.982"></a>
<FONT color="green">983</FONT>         * is the front.<a name="line.983"></a>
<FONT color="green">984</FONT>         *<a name="line.984"></a>
<FONT color="green">985</FONT>         * @param angle  the angle.<a name="line.985"></a>
<FONT color="green">986</FONT>         *<a name="line.986"></a>
<FONT color="green">987</FONT>         * @return A boolean.<a name="line.987"></a>
<FONT color="green">988</FONT>         */<a name="line.988"></a>
<FONT color="green">989</FONT>        private boolean isAngleAtFront(double angle) {<a name="line.989"></a>
<FONT color="green">990</FONT>            return (Math.sin(Math.toRadians(angle)) &lt; 0.0);<a name="line.990"></a>
<FONT color="green">991</FONT>        }<a name="line.991"></a>
<FONT color="green">992</FONT>    <a name="line.992"></a>
<FONT color="green">993</FONT>        /**<a name="line.993"></a>
<FONT color="green">994</FONT>         * A utility method that returns true if the angle represents a point at<a name="line.994"></a>
<FONT color="green">995</FONT>         * the back of the 3D pie chart.  0 - 180 degrees is the back, 180 - 360<a name="line.995"></a>
<FONT color="green">996</FONT>         * is the front.<a name="line.996"></a>
<FONT color="green">997</FONT>         *<a name="line.997"></a>
<FONT color="green">998</FONT>         * @param angle  the angle.<a name="line.998"></a>
<FONT color="green">999</FONT>         *<a name="line.999"></a>
<FONT color="green">1000</FONT>         * @return &lt;code&gt;true&lt;/code&gt; if the angle is at the back of the pie.<a name="line.1000"></a>
<FONT color="green">1001</FONT>         */<a name="line.1001"></a>
<FONT color="green">1002</FONT>        private boolean isAngleAtBack(double angle) {<a name="line.1002"></a>
<FONT color="green">1003</FONT>            return (Math.sin(Math.toRadians(angle)) &gt; 0.0);<a name="line.1003"></a>
<FONT color="green">1004</FONT>        }<a name="line.1004"></a>
<FONT color="green">1005</FONT>    <a name="line.1005"></a>
<FONT color="green">1006</FONT>        /**<a name="line.1006"></a>
<FONT color="green">1007</FONT>         * Tests this plot for equality with an arbitrary object.<a name="line.1007"></a>
<FONT color="green">1008</FONT>         *<a name="line.1008"></a>
<FONT color="green">1009</FONT>         * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.1009"></a>
<FONT color="green">1010</FONT>         *<a name="line.1010"></a>
<FONT color="green">1011</FONT>         * @return A boolean.<a name="line.1011"></a>
<FONT color="green">1012</FONT>         */<a name="line.1012"></a>
<FONT color="green">1013</FONT>        public boolean equals(Object obj) {<a name="line.1013"></a>
<FONT color="green">1014</FONT>            if (obj == this) {<a name="line.1014"></a>
<FONT color="green">1015</FONT>                return true;<a name="line.1015"></a>
<FONT color="green">1016</FONT>            }<a name="line.1016"></a>
<FONT color="green">1017</FONT>            if (!(obj instanceof PiePlot3D)) {<a name="line.1017"></a>
<FONT color="green">1018</FONT>                return false;<a name="line.1018"></a>
<FONT color="green">1019</FONT>            }<a name="line.1019"></a>
<FONT color="green">1020</FONT>            PiePlot3D that = (PiePlot3D) obj;<a name="line.1020"></a>
<FONT color="green">1021</FONT>            if (this.depthFactor != that.depthFactor) {<a name="line.1021"></a>
<FONT color="green">1022</FONT>                return false;<a name="line.1022"></a>
<FONT color="green">1023</FONT>            }<a name="line.1023"></a>
<FONT color="green">1024</FONT>            if (this.darkerSides != that.darkerSides) {<a name="line.1024"></a>
<FONT color="green">1025</FONT>                return false;<a name="line.1025"></a>
<FONT color="green">1026</FONT>            }<a name="line.1026"></a>
<FONT color="green">1027</FONT>            return super.equals(obj);<a name="line.1027"></a>
<FONT color="green">1028</FONT>        }<a name="line.1028"></a>
<FONT color="green">1029</FONT>    <a name="line.1029"></a>
<FONT color="green">1030</FONT>    }<a name="line.1030"></a>




























































</PRE>
</BODY>
</HTML>
