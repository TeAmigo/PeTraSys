<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ===========================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JFreeChart : a free chart library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ===========================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     *<a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jfreechart/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it<a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by<a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or<a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but<a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY<a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public<a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,<a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.<a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc.<a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     *<a name="line.26"></a>
<FONT color="green">027</FONT>     * ------------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * SpiderWebPlot.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * ------------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C) Copyright 2005-2008, by Heaps of Flavour Pty Ltd and Contributors.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Company Info:  http://www.i4-talent.com<a name="line.32"></a>
<FONT color="green">033</FONT>     *<a name="line.33"></a>
<FONT color="green">034</FONT>     * Original Author:  Don Elliott;<a name="line.34"></a>
<FONT color="green">035</FONT>     * Contributor(s):   David Gilbert (for Object Refinery Limited);<a name="line.35"></a>
<FONT color="green">036</FONT>     *                   Nina Jeliazkova;<a name="line.36"></a>
<FONT color="green">037</FONT>     *<a name="line.37"></a>
<FONT color="green">038</FONT>     * Changes<a name="line.38"></a>
<FONT color="green">039</FONT>     * -------<a name="line.39"></a>
<FONT color="green">040</FONT>     * 28-Jan-2005 : First cut - missing a few features - still to do:<a name="line.40"></a>
<FONT color="green">041</FONT>     *                           - needs tooltips/URL/label generator functions<a name="line.41"></a>
<FONT color="green">042</FONT>     *                           - ticks on axes / background grid?<a name="line.42"></a>
<FONT color="green">043</FONT>     * 31-Jan-2005 : Renamed SpiderWebPlot, added label generator support, and<a name="line.43"></a>
<FONT color="green">044</FONT>     *               reformatted for consistency with other source files in<a name="line.44"></a>
<FONT color="green">045</FONT>     *               JFreeChart (DG);<a name="line.45"></a>
<FONT color="green">046</FONT>     * 20-Apr-2005 : Renamed CategoryLabelGenerator<a name="line.46"></a>
<FONT color="green">047</FONT>     *               --&gt; CategoryItemLabelGenerator (DG);<a name="line.47"></a>
<FONT color="green">048</FONT>     * 05-May-2005 : Updated draw() method parameters (DG);<a name="line.48"></a>
<FONT color="green">049</FONT>     * 10-Jun-2005 : Added equals() method and fixed serialization (DG);<a name="line.49"></a>
<FONT color="green">050</FONT>     * 16-Jun-2005 : Added default constructor and get/setDataset()<a name="line.50"></a>
<FONT color="green">051</FONT>     *               methods (DG);<a name="line.51"></a>
<FONT color="green">052</FONT>     * ------------- JFREECHART 1.0.x ---------------------------------------------<a name="line.52"></a>
<FONT color="green">053</FONT>     * 05-Apr-2006 : Fixed bug preventing the display of zero values - see patch<a name="line.53"></a>
<FONT color="green">054</FONT>     *               1462727 (DG);<a name="line.54"></a>
<FONT color="green">055</FONT>     * 05-Apr-2006 : Added support for mouse clicks, tool tips and URLs - see patch<a name="line.55"></a>
<FONT color="green">056</FONT>     *               1463455 (DG);<a name="line.56"></a>
<FONT color="green">057</FONT>     * 01-Jun-2006 : Fix bug 1493199, NullPointerException when drawing with null<a name="line.57"></a>
<FONT color="green">058</FONT>     *               info (DG);<a name="line.58"></a>
<FONT color="green">059</FONT>     * 05-Feb-2007 : Added attributes for axis stroke and paint, while fixing<a name="line.59"></a>
<FONT color="green">060</FONT>     *               bug 1651277, and implemented clone() properly (DG);<a name="line.60"></a>
<FONT color="green">061</FONT>     * 06-Feb-2007 : Changed getPlotValue() to protected, as suggested in bug<a name="line.61"></a>
<FONT color="green">062</FONT>     *               1605202 (DG);<a name="line.62"></a>
<FONT color="green">063</FONT>     * 05-Mar-2007 : Restore clip region correctly (see bug 1667750) (DG);<a name="line.63"></a>
<FONT color="green">064</FONT>     * 18-May-2007 : Set dataset for LegendItem (DG);<a name="line.64"></a>
<FONT color="green">065</FONT>     * 02-Jun-2008 : Fixed bug with chart entities using TableOrder.BY_COLUMN (DG);<a name="line.65"></a>
<FONT color="green">066</FONT>     * 02-Jun-2008 : Fixed bug with null dataset (DG);<a name="line.66"></a>
<FONT color="green">067</FONT>     *<a name="line.67"></a>
<FONT color="green">068</FONT>     */<a name="line.68"></a>
<FONT color="green">069</FONT>    <a name="line.69"></a>
<FONT color="green">070</FONT>    package org.jfree.chart.plot;<a name="line.70"></a>
<FONT color="green">071</FONT>    <a name="line.71"></a>
<FONT color="green">072</FONT>    import java.awt.AlphaComposite;<a name="line.72"></a>
<FONT color="green">073</FONT>    import java.awt.BasicStroke;<a name="line.73"></a>
<FONT color="green">074</FONT>    import java.awt.Color;<a name="line.74"></a>
<FONT color="green">075</FONT>    import java.awt.Composite;<a name="line.75"></a>
<FONT color="green">076</FONT>    import java.awt.Font;<a name="line.76"></a>
<FONT color="green">077</FONT>    import java.awt.Graphics2D;<a name="line.77"></a>
<FONT color="green">078</FONT>    import java.awt.Paint;<a name="line.78"></a>
<FONT color="green">079</FONT>    import java.awt.Polygon;<a name="line.79"></a>
<FONT color="green">080</FONT>    import java.awt.Rectangle;<a name="line.80"></a>
<FONT color="green">081</FONT>    import java.awt.Shape;<a name="line.81"></a>
<FONT color="green">082</FONT>    import java.awt.Stroke;<a name="line.82"></a>
<FONT color="green">083</FONT>    import java.awt.font.FontRenderContext;<a name="line.83"></a>
<FONT color="green">084</FONT>    import java.awt.font.LineMetrics;<a name="line.84"></a>
<FONT color="green">085</FONT>    import java.awt.geom.Arc2D;<a name="line.85"></a>
<FONT color="green">086</FONT>    import java.awt.geom.Ellipse2D;<a name="line.86"></a>
<FONT color="green">087</FONT>    import java.awt.geom.Line2D;<a name="line.87"></a>
<FONT color="green">088</FONT>    import java.awt.geom.Point2D;<a name="line.88"></a>
<FONT color="green">089</FONT>    import java.awt.geom.Rectangle2D;<a name="line.89"></a>
<FONT color="green">090</FONT>    import java.io.IOException;<a name="line.90"></a>
<FONT color="green">091</FONT>    import java.io.ObjectInputStream;<a name="line.91"></a>
<FONT color="green">092</FONT>    import java.io.ObjectOutputStream;<a name="line.92"></a>
<FONT color="green">093</FONT>    import java.io.Serializable;<a name="line.93"></a>
<FONT color="green">094</FONT>    import java.util.Iterator;<a name="line.94"></a>
<FONT color="green">095</FONT>    import java.util.List;<a name="line.95"></a>
<FONT color="green">096</FONT>    <a name="line.96"></a>
<FONT color="green">097</FONT>    import org.jfree.chart.LegendItem;<a name="line.97"></a>
<FONT color="green">098</FONT>    import org.jfree.chart.LegendItemCollection;<a name="line.98"></a>
<FONT color="green">099</FONT>    import org.jfree.chart.entity.CategoryItemEntity;<a name="line.99"></a>
<FONT color="green">100</FONT>    import org.jfree.chart.entity.EntityCollection;<a name="line.100"></a>
<FONT color="green">101</FONT>    import org.jfree.chart.event.PlotChangeEvent;<a name="line.101"></a>
<FONT color="green">102</FONT>    import org.jfree.chart.labels.CategoryItemLabelGenerator;<a name="line.102"></a>
<FONT color="green">103</FONT>    import org.jfree.chart.labels.CategoryToolTipGenerator;<a name="line.103"></a>
<FONT color="green">104</FONT>    import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;<a name="line.104"></a>
<FONT color="green">105</FONT>    import org.jfree.chart.urls.CategoryURLGenerator;<a name="line.105"></a>
<FONT color="green">106</FONT>    import org.jfree.data.category.CategoryDataset;<a name="line.106"></a>
<FONT color="green">107</FONT>    import org.jfree.data.general.DatasetChangeEvent;<a name="line.107"></a>
<FONT color="green">108</FONT>    import org.jfree.data.general.DatasetUtilities;<a name="line.108"></a>
<FONT color="green">109</FONT>    import org.jfree.io.SerialUtilities;<a name="line.109"></a>
<FONT color="green">110</FONT>    import org.jfree.ui.RectangleInsets;<a name="line.110"></a>
<FONT color="green">111</FONT>    import org.jfree.util.ObjectUtilities;<a name="line.111"></a>
<FONT color="green">112</FONT>    import org.jfree.util.PaintList;<a name="line.112"></a>
<FONT color="green">113</FONT>    import org.jfree.util.PaintUtilities;<a name="line.113"></a>
<FONT color="green">114</FONT>    import org.jfree.util.Rotation;<a name="line.114"></a>
<FONT color="green">115</FONT>    import org.jfree.util.ShapeUtilities;<a name="line.115"></a>
<FONT color="green">116</FONT>    import org.jfree.util.StrokeList;<a name="line.116"></a>
<FONT color="green">117</FONT>    import org.jfree.util.TableOrder;<a name="line.117"></a>
<FONT color="green">118</FONT>    <a name="line.118"></a>
<FONT color="green">119</FONT>    /**<a name="line.119"></a>
<FONT color="green">120</FONT>     * A plot that displays data from a {@link CategoryDataset} in the form of a<a name="line.120"></a>
<FONT color="green">121</FONT>     * "spider web".  Multiple series can be plotted on the same axis to allow<a name="line.121"></a>
<FONT color="green">122</FONT>     * easy comparison.  This plot doesn't support negative values at present.<a name="line.122"></a>
<FONT color="green">123</FONT>     */<a name="line.123"></a>
<FONT color="green">124</FONT>    public class SpiderWebPlot extends Plot implements Cloneable, Serializable {<a name="line.124"></a>
<FONT color="green">125</FONT>    <a name="line.125"></a>
<FONT color="green">126</FONT>        /** For serialization. */<a name="line.126"></a>
<FONT color="green">127</FONT>        private static final long serialVersionUID = -5376340422031599463L;<a name="line.127"></a>
<FONT color="green">128</FONT>    <a name="line.128"></a>
<FONT color="green">129</FONT>        /** The default head radius percent (currently 1%). */<a name="line.129"></a>
<FONT color="green">130</FONT>        public static final double DEFAULT_HEAD = 0.01;<a name="line.130"></a>
<FONT color="green">131</FONT>    <a name="line.131"></a>
<FONT color="green">132</FONT>        /** The default axis label gap (currently 10%). */<a name="line.132"></a>
<FONT color="green">133</FONT>        public static final double DEFAULT_AXIS_LABEL_GAP = 0.10;<a name="line.133"></a>
<FONT color="green">134</FONT>    <a name="line.134"></a>
<FONT color="green">135</FONT>        /** The default interior gap. */<a name="line.135"></a>
<FONT color="green">136</FONT>        public static final double DEFAULT_INTERIOR_GAP = 0.25;<a name="line.136"></a>
<FONT color="green">137</FONT>    <a name="line.137"></a>
<FONT color="green">138</FONT>        /** The maximum interior gap (currently 40%). */<a name="line.138"></a>
<FONT color="green">139</FONT>        public static final double MAX_INTERIOR_GAP = 0.40;<a name="line.139"></a>
<FONT color="green">140</FONT>    <a name="line.140"></a>
<FONT color="green">141</FONT>        /** The default starting angle for the radar chart axes. */<a name="line.141"></a>
<FONT color="green">142</FONT>        public static final double DEFAULT_START_ANGLE = 90.0;<a name="line.142"></a>
<FONT color="green">143</FONT>    <a name="line.143"></a>
<FONT color="green">144</FONT>        /** The default series label font. */<a name="line.144"></a>
<FONT color="green">145</FONT>        public static final Font DEFAULT_LABEL_FONT = new Font("SansSerif",<a name="line.145"></a>
<FONT color="green">146</FONT>                Font.PLAIN, 10);<a name="line.146"></a>
<FONT color="green">147</FONT>    <a name="line.147"></a>
<FONT color="green">148</FONT>        /** The default series label paint. */<a name="line.148"></a>
<FONT color="green">149</FONT>        public static final Paint  DEFAULT_LABEL_PAINT = Color.black;<a name="line.149"></a>
<FONT color="green">150</FONT>    <a name="line.150"></a>
<FONT color="green">151</FONT>        /** The default series label background paint. */<a name="line.151"></a>
<FONT color="green">152</FONT>        public static final Paint  DEFAULT_LABEL_BACKGROUND_PAINT<a name="line.152"></a>
<FONT color="green">153</FONT>                = new Color(255, 255, 192);<a name="line.153"></a>
<FONT color="green">154</FONT>    <a name="line.154"></a>
<FONT color="green">155</FONT>        /** The default series label outline paint. */<a name="line.155"></a>
<FONT color="green">156</FONT>        public static final Paint  DEFAULT_LABEL_OUTLINE_PAINT = Color.black;<a name="line.156"></a>
<FONT color="green">157</FONT>    <a name="line.157"></a>
<FONT color="green">158</FONT>        /** The default series label outline stroke. */<a name="line.158"></a>
<FONT color="green">159</FONT>        public static final Stroke DEFAULT_LABEL_OUTLINE_STROKE<a name="line.159"></a>
<FONT color="green">160</FONT>                = new BasicStroke(0.5f);<a name="line.160"></a>
<FONT color="green">161</FONT>    <a name="line.161"></a>
<FONT color="green">162</FONT>        /** The default series label shadow paint. */<a name="line.162"></a>
<FONT color="green">163</FONT>        public static final Paint  DEFAULT_LABEL_SHADOW_PAINT = Color.lightGray;<a name="line.163"></a>
<FONT color="green">164</FONT>    <a name="line.164"></a>
<FONT color="green">165</FONT>        /**<a name="line.165"></a>
<FONT color="green">166</FONT>         * The default maximum value plotted - forces the plot to evaluate<a name="line.166"></a>
<FONT color="green">167</FONT>         *  the maximum from the data passed in<a name="line.167"></a>
<FONT color="green">168</FONT>         */<a name="line.168"></a>
<FONT color="green">169</FONT>        public static final double DEFAULT_MAX_VALUE = -1.0;<a name="line.169"></a>
<FONT color="green">170</FONT>    <a name="line.170"></a>
<FONT color="green">171</FONT>        /** The head radius as a percentage of the available drawing area. */<a name="line.171"></a>
<FONT color="green">172</FONT>        protected double headPercent;<a name="line.172"></a>
<FONT color="green">173</FONT>    <a name="line.173"></a>
<FONT color="green">174</FONT>        /** The space left around the outside of the plot as a percentage. */<a name="line.174"></a>
<FONT color="green">175</FONT>        private double interiorGap;<a name="line.175"></a>
<FONT color="green">176</FONT>    <a name="line.176"></a>
<FONT color="green">177</FONT>        /** The gap between the labels and the axes as a %age of the radius. */<a name="line.177"></a>
<FONT color="green">178</FONT>        private double axisLabelGap;<a name="line.178"></a>
<FONT color="green">179</FONT>    <a name="line.179"></a>
<FONT color="green">180</FONT>        /**<a name="line.180"></a>
<FONT color="green">181</FONT>         * The paint used to draw the axis lines.<a name="line.181"></a>
<FONT color="green">182</FONT>         *<a name="line.182"></a>
<FONT color="green">183</FONT>         * @since 1.0.4<a name="line.183"></a>
<FONT color="green">184</FONT>         */<a name="line.184"></a>
<FONT color="green">185</FONT>        private transient Paint axisLinePaint;<a name="line.185"></a>
<FONT color="green">186</FONT>    <a name="line.186"></a>
<FONT color="green">187</FONT>        /**<a name="line.187"></a>
<FONT color="green">188</FONT>         * The stroke used to draw the axis lines.<a name="line.188"></a>
<FONT color="green">189</FONT>         *<a name="line.189"></a>
<FONT color="green">190</FONT>         * @since 1.0.4<a name="line.190"></a>
<FONT color="green">191</FONT>         */<a name="line.191"></a>
<FONT color="green">192</FONT>        private transient Stroke axisLineStroke;<a name="line.192"></a>
<FONT color="green">193</FONT>    <a name="line.193"></a>
<FONT color="green">194</FONT>        /** The dataset. */<a name="line.194"></a>
<FONT color="green">195</FONT>        private CategoryDataset dataset;<a name="line.195"></a>
<FONT color="green">196</FONT>    <a name="line.196"></a>
<FONT color="green">197</FONT>        /** The maximum value we are plotting against on each category axis */<a name="line.197"></a>
<FONT color="green">198</FONT>        private double maxValue;<a name="line.198"></a>
<FONT color="green">199</FONT>    <a name="line.199"></a>
<FONT color="green">200</FONT>        /**<a name="line.200"></a>
<FONT color="green">201</FONT>         * The data extract order (BY_ROW or BY_COLUMN). This denotes whether<a name="line.201"></a>
<FONT color="green">202</FONT>         * the data series are stored in rows (in which case the category names are<a name="line.202"></a>
<FONT color="green">203</FONT>         * derived from the column keys) or in columns (in which case the category<a name="line.203"></a>
<FONT color="green">204</FONT>         * names are derived from the row keys).<a name="line.204"></a>
<FONT color="green">205</FONT>         */<a name="line.205"></a>
<FONT color="green">206</FONT>        private TableOrder dataExtractOrder;<a name="line.206"></a>
<FONT color="green">207</FONT>    <a name="line.207"></a>
<FONT color="green">208</FONT>        /** The starting angle. */<a name="line.208"></a>
<FONT color="green">209</FONT>        private double startAngle;<a name="line.209"></a>
<FONT color="green">210</FONT>    <a name="line.210"></a>
<FONT color="green">211</FONT>        /** The direction for drawing the radar axis &amp; plots. */<a name="line.211"></a>
<FONT color="green">212</FONT>        private Rotation direction;<a name="line.212"></a>
<FONT color="green">213</FONT>    <a name="line.213"></a>
<FONT color="green">214</FONT>        /** The legend item shape. */<a name="line.214"></a>
<FONT color="green">215</FONT>        private transient Shape legendItemShape;<a name="line.215"></a>
<FONT color="green">216</FONT>    <a name="line.216"></a>
<FONT color="green">217</FONT>        /** The paint for ALL series (overrides list). */<a name="line.217"></a>
<FONT color="green">218</FONT>        private transient Paint seriesPaint;<a name="line.218"></a>
<FONT color="green">219</FONT>    <a name="line.219"></a>
<FONT color="green">220</FONT>        /** The series paint list. */<a name="line.220"></a>
<FONT color="green">221</FONT>        private PaintList seriesPaintList;<a name="line.221"></a>
<FONT color="green">222</FONT>    <a name="line.222"></a>
<FONT color="green">223</FONT>        /** The base series paint (fallback). */<a name="line.223"></a>
<FONT color="green">224</FONT>        private transient Paint baseSeriesPaint;<a name="line.224"></a>
<FONT color="green">225</FONT>    <a name="line.225"></a>
<FONT color="green">226</FONT>        /** The outline paint for ALL series (overrides list). */<a name="line.226"></a>
<FONT color="green">227</FONT>        private transient Paint seriesOutlinePaint;<a name="line.227"></a>
<FONT color="green">228</FONT>    <a name="line.228"></a>
<FONT color="green">229</FONT>        /** The series outline paint list. */<a name="line.229"></a>
<FONT color="green">230</FONT>        private PaintList seriesOutlinePaintList;<a name="line.230"></a>
<FONT color="green">231</FONT>    <a name="line.231"></a>
<FONT color="green">232</FONT>        /** The base series outline paint (fallback). */<a name="line.232"></a>
<FONT color="green">233</FONT>        private transient Paint baseSeriesOutlinePaint;<a name="line.233"></a>
<FONT color="green">234</FONT>    <a name="line.234"></a>
<FONT color="green">235</FONT>        /** The outline stroke for ALL series (overrides list). */<a name="line.235"></a>
<FONT color="green">236</FONT>        private transient Stroke seriesOutlineStroke;<a name="line.236"></a>
<FONT color="green">237</FONT>    <a name="line.237"></a>
<FONT color="green">238</FONT>        /** The series outline stroke list. */<a name="line.238"></a>
<FONT color="green">239</FONT>        private StrokeList seriesOutlineStrokeList;<a name="line.239"></a>
<FONT color="green">240</FONT>    <a name="line.240"></a>
<FONT color="green">241</FONT>        /** The base series outline stroke (fallback). */<a name="line.241"></a>
<FONT color="green">242</FONT>        private transient Stroke baseSeriesOutlineStroke;<a name="line.242"></a>
<FONT color="green">243</FONT>    <a name="line.243"></a>
<FONT color="green">244</FONT>        /** The font used to display the category labels. */<a name="line.244"></a>
<FONT color="green">245</FONT>        private Font labelFont;<a name="line.245"></a>
<FONT color="green">246</FONT>    <a name="line.246"></a>
<FONT color="green">247</FONT>        /** The color used to draw the category labels. */<a name="line.247"></a>
<FONT color="green">248</FONT>        private transient Paint labelPaint;<a name="line.248"></a>
<FONT color="green">249</FONT>    <a name="line.249"></a>
<FONT color="green">250</FONT>        /** The label generator. */<a name="line.250"></a>
<FONT color="green">251</FONT>        private CategoryItemLabelGenerator labelGenerator;<a name="line.251"></a>
<FONT color="green">252</FONT>    <a name="line.252"></a>
<FONT color="green">253</FONT>        /** controls if the web polygons are filled or not */<a name="line.253"></a>
<FONT color="green">254</FONT>        private boolean webFilled = true;<a name="line.254"></a>
<FONT color="green">255</FONT>    <a name="line.255"></a>
<FONT color="green">256</FONT>        /** A tooltip generator for the plot (&lt;code&gt;null&lt;/code&gt; permitted). */<a name="line.256"></a>
<FONT color="green">257</FONT>        private CategoryToolTipGenerator toolTipGenerator;<a name="line.257"></a>
<FONT color="green">258</FONT>    <a name="line.258"></a>
<FONT color="green">259</FONT>        /** A URL generator for the plot (&lt;code&gt;null&lt;/code&gt; permitted). */<a name="line.259"></a>
<FONT color="green">260</FONT>        private CategoryURLGenerator urlGenerator;<a name="line.260"></a>
<FONT color="green">261</FONT>    <a name="line.261"></a>
<FONT color="green">262</FONT>        /**<a name="line.262"></a>
<FONT color="green">263</FONT>         * Creates a default plot with no dataset.<a name="line.263"></a>
<FONT color="green">264</FONT>         */<a name="line.264"></a>
<FONT color="green">265</FONT>        public SpiderWebPlot() {<a name="line.265"></a>
<FONT color="green">266</FONT>            this(null);<a name="line.266"></a>
<FONT color="green">267</FONT>        }<a name="line.267"></a>
<FONT color="green">268</FONT>    <a name="line.268"></a>
<FONT color="green">269</FONT>        /**<a name="line.269"></a>
<FONT color="green">270</FONT>         * Creates a new spider web plot with the given dataset, with each row<a name="line.270"></a>
<FONT color="green">271</FONT>         * representing a series.<a name="line.271"></a>
<FONT color="green">272</FONT>         *<a name="line.272"></a>
<FONT color="green">273</FONT>         * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.273"></a>
<FONT color="green">274</FONT>         */<a name="line.274"></a>
<FONT color="green">275</FONT>        public SpiderWebPlot(CategoryDataset dataset) {<a name="line.275"></a>
<FONT color="green">276</FONT>            this(dataset, TableOrder.BY_ROW);<a name="line.276"></a>
<FONT color="green">277</FONT>        }<a name="line.277"></a>
<FONT color="green">278</FONT>    <a name="line.278"></a>
<FONT color="green">279</FONT>        /**<a name="line.279"></a>
<FONT color="green">280</FONT>         * Creates a new spider web plot with the given dataset.<a name="line.280"></a>
<FONT color="green">281</FONT>         *<a name="line.281"></a>
<FONT color="green">282</FONT>         * @param dataset  the dataset.<a name="line.282"></a>
<FONT color="green">283</FONT>         * @param extract  controls how data is extracted ({@link TableOrder#BY_ROW}<a name="line.283"></a>
<FONT color="green">284</FONT>         *                 or {@link TableOrder#BY_COLUMN}).<a name="line.284"></a>
<FONT color="green">285</FONT>         */<a name="line.285"></a>
<FONT color="green">286</FONT>        public SpiderWebPlot(CategoryDataset dataset, TableOrder extract) {<a name="line.286"></a>
<FONT color="green">287</FONT>            super();<a name="line.287"></a>
<FONT color="green">288</FONT>            if (extract == null) {<a name="line.288"></a>
<FONT color="green">289</FONT>                throw new IllegalArgumentException("Null 'extract' argument.");<a name="line.289"></a>
<FONT color="green">290</FONT>            }<a name="line.290"></a>
<FONT color="green">291</FONT>            this.dataset = dataset;<a name="line.291"></a>
<FONT color="green">292</FONT>            if (dataset != null) {<a name="line.292"></a>
<FONT color="green">293</FONT>                dataset.addChangeListener(this);<a name="line.293"></a>
<FONT color="green">294</FONT>            }<a name="line.294"></a>
<FONT color="green">295</FONT>    <a name="line.295"></a>
<FONT color="green">296</FONT>            this.dataExtractOrder = extract;<a name="line.296"></a>
<FONT color="green">297</FONT>            this.headPercent = DEFAULT_HEAD;<a name="line.297"></a>
<FONT color="green">298</FONT>            this.axisLabelGap = DEFAULT_AXIS_LABEL_GAP;<a name="line.298"></a>
<FONT color="green">299</FONT>            this.axisLinePaint = Color.black;<a name="line.299"></a>
<FONT color="green">300</FONT>            this.axisLineStroke = new BasicStroke(1.0f);<a name="line.300"></a>
<FONT color="green">301</FONT>    <a name="line.301"></a>
<FONT color="green">302</FONT>            this.interiorGap = DEFAULT_INTERIOR_GAP;<a name="line.302"></a>
<FONT color="green">303</FONT>            this.startAngle = DEFAULT_START_ANGLE;<a name="line.303"></a>
<FONT color="green">304</FONT>            this.direction = Rotation.CLOCKWISE;<a name="line.304"></a>
<FONT color="green">305</FONT>            this.maxValue = DEFAULT_MAX_VALUE;<a name="line.305"></a>
<FONT color="green">306</FONT>    <a name="line.306"></a>
<FONT color="green">307</FONT>            this.seriesPaint = null;<a name="line.307"></a>
<FONT color="green">308</FONT>            this.seriesPaintList = new PaintList();<a name="line.308"></a>
<FONT color="green">309</FONT>            this.baseSeriesPaint = null;<a name="line.309"></a>
<FONT color="green">310</FONT>    <a name="line.310"></a>
<FONT color="green">311</FONT>            this.seriesOutlinePaint = null;<a name="line.311"></a>
<FONT color="green">312</FONT>            this.seriesOutlinePaintList = new PaintList();<a name="line.312"></a>
<FONT color="green">313</FONT>            this.baseSeriesOutlinePaint = DEFAULT_OUTLINE_PAINT;<a name="line.313"></a>
<FONT color="green">314</FONT>    <a name="line.314"></a>
<FONT color="green">315</FONT>            this.seriesOutlineStroke = null;<a name="line.315"></a>
<FONT color="green">316</FONT>            this.seriesOutlineStrokeList = new StrokeList();<a name="line.316"></a>
<FONT color="green">317</FONT>            this.baseSeriesOutlineStroke = DEFAULT_OUTLINE_STROKE;<a name="line.317"></a>
<FONT color="green">318</FONT>    <a name="line.318"></a>
<FONT color="green">319</FONT>            this.labelFont = DEFAULT_LABEL_FONT;<a name="line.319"></a>
<FONT color="green">320</FONT>            this.labelPaint = DEFAULT_LABEL_PAINT;<a name="line.320"></a>
<FONT color="green">321</FONT>            this.labelGenerator = new StandardCategoryItemLabelGenerator();<a name="line.321"></a>
<FONT color="green">322</FONT>    <a name="line.322"></a>
<FONT color="green">323</FONT>            this.legendItemShape = DEFAULT_LEGEND_ITEM_CIRCLE;<a name="line.323"></a>
<FONT color="green">324</FONT>        }<a name="line.324"></a>
<FONT color="green">325</FONT>    <a name="line.325"></a>
<FONT color="green">326</FONT>        /**<a name="line.326"></a>
<FONT color="green">327</FONT>         * Returns a short string describing the type of plot.<a name="line.327"></a>
<FONT color="green">328</FONT>         *<a name="line.328"></a>
<FONT color="green">329</FONT>         * @return The plot type.<a name="line.329"></a>
<FONT color="green">330</FONT>         */<a name="line.330"></a>
<FONT color="green">331</FONT>        public String getPlotType() {<a name="line.331"></a>
<FONT color="green">332</FONT>            // return localizationResources.getString("Radar_Plot");<a name="line.332"></a>
<FONT color="green">333</FONT>            return ("Spider Web Plot");<a name="line.333"></a>
<FONT color="green">334</FONT>        }<a name="line.334"></a>
<FONT color="green">335</FONT>    <a name="line.335"></a>
<FONT color="green">336</FONT>        /**<a name="line.336"></a>
<FONT color="green">337</FONT>         * Returns the dataset.<a name="line.337"></a>
<FONT color="green">338</FONT>         *<a name="line.338"></a>
<FONT color="green">339</FONT>         * @return The dataset (possibly &lt;code&gt;null&lt;/code&gt;).<a name="line.339"></a>
<FONT color="green">340</FONT>         *<a name="line.340"></a>
<FONT color="green">341</FONT>         * @see #setDataset(CategoryDataset)<a name="line.341"></a>
<FONT color="green">342</FONT>         */<a name="line.342"></a>
<FONT color="green">343</FONT>        public CategoryDataset getDataset() {<a name="line.343"></a>
<FONT color="green">344</FONT>            return this.dataset;<a name="line.344"></a>
<FONT color="green">345</FONT>        }<a name="line.345"></a>
<FONT color="green">346</FONT>    <a name="line.346"></a>
<FONT color="green">347</FONT>        /**<a name="line.347"></a>
<FONT color="green">348</FONT>         * Sets the dataset used by the plot and sends a {@link PlotChangeEvent}<a name="line.348"></a>
<FONT color="green">349</FONT>         * to all registered listeners.<a name="line.349"></a>
<FONT color="green">350</FONT>         *<a name="line.350"></a>
<FONT color="green">351</FONT>         * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.351"></a>
<FONT color="green">352</FONT>         *<a name="line.352"></a>
<FONT color="green">353</FONT>         * @see #getDataset()<a name="line.353"></a>
<FONT color="green">354</FONT>         */<a name="line.354"></a>
<FONT color="green">355</FONT>        public void setDataset(CategoryDataset dataset) {<a name="line.355"></a>
<FONT color="green">356</FONT>            // if there is an existing dataset, remove the plot from the list of<a name="line.356"></a>
<FONT color="green">357</FONT>            // change listeners...<a name="line.357"></a>
<FONT color="green">358</FONT>            if (this.dataset != null) {<a name="line.358"></a>
<FONT color="green">359</FONT>                this.dataset.removeChangeListener(this);<a name="line.359"></a>
<FONT color="green">360</FONT>            }<a name="line.360"></a>
<FONT color="green">361</FONT>    <a name="line.361"></a>
<FONT color="green">362</FONT>            // set the new dataset, and register the chart as a change listener...<a name="line.362"></a>
<FONT color="green">363</FONT>            this.dataset = dataset;<a name="line.363"></a>
<FONT color="green">364</FONT>            if (dataset != null) {<a name="line.364"></a>
<FONT color="green">365</FONT>                setDatasetGroup(dataset.getGroup());<a name="line.365"></a>
<FONT color="green">366</FONT>                dataset.addChangeListener(this);<a name="line.366"></a>
<FONT color="green">367</FONT>            }<a name="line.367"></a>
<FONT color="green">368</FONT>    <a name="line.368"></a>
<FONT color="green">369</FONT>            // send a dataset change event to self to trigger plot change event<a name="line.369"></a>
<FONT color="green">370</FONT>            datasetChanged(new DatasetChangeEvent(this, dataset));<a name="line.370"></a>
<FONT color="green">371</FONT>        }<a name="line.371"></a>
<FONT color="green">372</FONT>    <a name="line.372"></a>
<FONT color="green">373</FONT>        /**<a name="line.373"></a>
<FONT color="green">374</FONT>         * Method to determine if the web chart is to be filled.<a name="line.374"></a>
<FONT color="green">375</FONT>         *<a name="line.375"></a>
<FONT color="green">376</FONT>         * @return A boolean.<a name="line.376"></a>
<FONT color="green">377</FONT>         *<a name="line.377"></a>
<FONT color="green">378</FONT>         * @see #setWebFilled(boolean)<a name="line.378"></a>
<FONT color="green">379</FONT>         */<a name="line.379"></a>
<FONT color="green">380</FONT>        public boolean isWebFilled() {<a name="line.380"></a>
<FONT color="green">381</FONT>            return this.webFilled;<a name="line.381"></a>
<FONT color="green">382</FONT>        }<a name="line.382"></a>
<FONT color="green">383</FONT>    <a name="line.383"></a>
<FONT color="green">384</FONT>        /**<a name="line.384"></a>
<FONT color="green">385</FONT>         * Sets the webFilled flag and sends a {@link PlotChangeEvent} to all<a name="line.385"></a>
<FONT color="green">386</FONT>         * registered listeners.<a name="line.386"></a>
<FONT color="green">387</FONT>         *<a name="line.387"></a>
<FONT color="green">388</FONT>         * @param flag  the flag.<a name="line.388"></a>
<FONT color="green">389</FONT>         *<a name="line.389"></a>
<FONT color="green">390</FONT>         * @see #isWebFilled()<a name="line.390"></a>
<FONT color="green">391</FONT>         */<a name="line.391"></a>
<FONT color="green">392</FONT>        public void setWebFilled(boolean flag) {<a name="line.392"></a>
<FONT color="green">393</FONT>            this.webFilled = flag;<a name="line.393"></a>
<FONT color="green">394</FONT>            fireChangeEvent();<a name="line.394"></a>
<FONT color="green">395</FONT>        }<a name="line.395"></a>
<FONT color="green">396</FONT>    <a name="line.396"></a>
<FONT color="green">397</FONT>        /**<a name="line.397"></a>
<FONT color="green">398</FONT>         * Returns the data extract order (by row or by column).<a name="line.398"></a>
<FONT color="green">399</FONT>         *<a name="line.399"></a>
<FONT color="green">400</FONT>         * @return The data extract order (never &lt;code&gt;null&lt;/code&gt;).<a name="line.400"></a>
<FONT color="green">401</FONT>         *<a name="line.401"></a>
<FONT color="green">402</FONT>         * @see #setDataExtractOrder(TableOrder)<a name="line.402"></a>
<FONT color="green">403</FONT>         */<a name="line.403"></a>
<FONT color="green">404</FONT>        public TableOrder getDataExtractOrder() {<a name="line.404"></a>
<FONT color="green">405</FONT>            return this.dataExtractOrder;<a name="line.405"></a>
<FONT color="green">406</FONT>        }<a name="line.406"></a>
<FONT color="green">407</FONT>    <a name="line.407"></a>
<FONT color="green">408</FONT>        /**<a name="line.408"></a>
<FONT color="green">409</FONT>         * Sets the data extract order (by row or by column) and sends a<a name="line.409"></a>
<FONT color="green">410</FONT>         * {@link PlotChangeEvent}to all registered listeners.<a name="line.410"></a>
<FONT color="green">411</FONT>         *<a name="line.411"></a>
<FONT color="green">412</FONT>         * @param order the order (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.412"></a>
<FONT color="green">413</FONT>         *<a name="line.413"></a>
<FONT color="green">414</FONT>         * @throws IllegalArgumentException if &lt;code&gt;order&lt;/code&gt; is<a name="line.414"></a>
<FONT color="green">415</FONT>         *     &lt;code&gt;null&lt;/code&gt;.<a name="line.415"></a>
<FONT color="green">416</FONT>         *<a name="line.416"></a>
<FONT color="green">417</FONT>         * @see #getDataExtractOrder()<a name="line.417"></a>
<FONT color="green">418</FONT>         */<a name="line.418"></a>
<FONT color="green">419</FONT>        public void setDataExtractOrder(TableOrder order) {<a name="line.419"></a>
<FONT color="green">420</FONT>            if (order == null) {<a name="line.420"></a>
<FONT color="green">421</FONT>                throw new IllegalArgumentException("Null 'order' argument");<a name="line.421"></a>
<FONT color="green">422</FONT>            }<a name="line.422"></a>
<FONT color="green">423</FONT>            this.dataExtractOrder = order;<a name="line.423"></a>
<FONT color="green">424</FONT>            fireChangeEvent();<a name="line.424"></a>
<FONT color="green">425</FONT>        }<a name="line.425"></a>
<FONT color="green">426</FONT>    <a name="line.426"></a>
<FONT color="green">427</FONT>        /**<a name="line.427"></a>
<FONT color="green">428</FONT>         * Returns the head percent.<a name="line.428"></a>
<FONT color="green">429</FONT>         *<a name="line.429"></a>
<FONT color="green">430</FONT>         * @return The head percent.<a name="line.430"></a>
<FONT color="green">431</FONT>         *<a name="line.431"></a>
<FONT color="green">432</FONT>         * @see #setHeadPercent(double)<a name="line.432"></a>
<FONT color="green">433</FONT>         */<a name="line.433"></a>
<FONT color="green">434</FONT>        public double getHeadPercent() {<a name="line.434"></a>
<FONT color="green">435</FONT>            return this.headPercent;<a name="line.435"></a>
<FONT color="green">436</FONT>        }<a name="line.436"></a>
<FONT color="green">437</FONT>    <a name="line.437"></a>
<FONT color="green">438</FONT>        /**<a name="line.438"></a>
<FONT color="green">439</FONT>         * Sets the head percent and sends a {@link PlotChangeEvent} to all<a name="line.439"></a>
<FONT color="green">440</FONT>         * registered listeners.<a name="line.440"></a>
<FONT color="green">441</FONT>         *<a name="line.441"></a>
<FONT color="green">442</FONT>         * @param percent  the percent.<a name="line.442"></a>
<FONT color="green">443</FONT>         *<a name="line.443"></a>
<FONT color="green">444</FONT>         * @see #getHeadPercent()<a name="line.444"></a>
<FONT color="green">445</FONT>         */<a name="line.445"></a>
<FONT color="green">446</FONT>        public void setHeadPercent(double percent) {<a name="line.446"></a>
<FONT color="green">447</FONT>            this.headPercent = percent;<a name="line.447"></a>
<FONT color="green">448</FONT>            fireChangeEvent();<a name="line.448"></a>
<FONT color="green">449</FONT>        }<a name="line.449"></a>
<FONT color="green">450</FONT>    <a name="line.450"></a>
<FONT color="green">451</FONT>        /**<a name="line.451"></a>
<FONT color="green">452</FONT>         * Returns the start angle for the first radar axis.<a name="line.452"></a>
<FONT color="green">453</FONT>         * &lt;BR&gt;<a name="line.453"></a>
<FONT color="green">454</FONT>         * This is measured in degrees starting from 3 o'clock (Java Arc2D default)<a name="line.454"></a>
<FONT color="green">455</FONT>         * and measuring anti-clockwise.<a name="line.455"></a>
<FONT color="green">456</FONT>         *<a name="line.456"></a>
<FONT color="green">457</FONT>         * @return The start angle.<a name="line.457"></a>
<FONT color="green">458</FONT>         *<a name="line.458"></a>
<FONT color="green">459</FONT>         * @see #setStartAngle(double)<a name="line.459"></a>
<FONT color="green">460</FONT>         */<a name="line.460"></a>
<FONT color="green">461</FONT>        public double getStartAngle() {<a name="line.461"></a>
<FONT color="green">462</FONT>            return this.startAngle;<a name="line.462"></a>
<FONT color="green">463</FONT>        }<a name="line.463"></a>
<FONT color="green">464</FONT>    <a name="line.464"></a>
<FONT color="green">465</FONT>        /**<a name="line.465"></a>
<FONT color="green">466</FONT>         * Sets the starting angle and sends a {@link PlotChangeEvent} to all<a name="line.466"></a>
<FONT color="green">467</FONT>         * registered listeners.<a name="line.467"></a>
<FONT color="green">468</FONT>         * &lt;P&gt;<a name="line.468"></a>
<FONT color="green">469</FONT>         * The initial default value is 90 degrees, which corresponds to 12 o'clock.<a name="line.469"></a>
<FONT color="green">470</FONT>         * A value of zero corresponds to 3 o'clock... this is the encoding used by<a name="line.470"></a>
<FONT color="green">471</FONT>         * Java's Arc2D class.<a name="line.471"></a>
<FONT color="green">472</FONT>         *<a name="line.472"></a>
<FONT color="green">473</FONT>         * @param angle  the angle (in degrees).<a name="line.473"></a>
<FONT color="green">474</FONT>         *<a name="line.474"></a>
<FONT color="green">475</FONT>         * @see #getStartAngle()<a name="line.475"></a>
<FONT color="green">476</FONT>         */<a name="line.476"></a>
<FONT color="green">477</FONT>        public void setStartAngle(double angle) {<a name="line.477"></a>
<FONT color="green">478</FONT>            this.startAngle = angle;<a name="line.478"></a>
<FONT color="green">479</FONT>            fireChangeEvent();<a name="line.479"></a>
<FONT color="green">480</FONT>        }<a name="line.480"></a>
<FONT color="green">481</FONT>    <a name="line.481"></a>
<FONT color="green">482</FONT>        /**<a name="line.482"></a>
<FONT color="green">483</FONT>         * Returns the maximum value any category axis can take.<a name="line.483"></a>
<FONT color="green">484</FONT>         *<a name="line.484"></a>
<FONT color="green">485</FONT>         * @return The maximum value.<a name="line.485"></a>
<FONT color="green">486</FONT>         *<a name="line.486"></a>
<FONT color="green">487</FONT>         * @see #setMaxValue(double)<a name="line.487"></a>
<FONT color="green">488</FONT>         */<a name="line.488"></a>
<FONT color="green">489</FONT>        public double getMaxValue() {<a name="line.489"></a>
<FONT color="green">490</FONT>            return this.maxValue;<a name="line.490"></a>
<FONT color="green">491</FONT>        }<a name="line.491"></a>
<FONT color="green">492</FONT>    <a name="line.492"></a>
<FONT color="green">493</FONT>        /**<a name="line.493"></a>
<FONT color="green">494</FONT>         * Sets the maximum value any category axis can take and sends<a name="line.494"></a>
<FONT color="green">495</FONT>         * a {@link PlotChangeEvent} to all registered listeners.<a name="line.495"></a>
<FONT color="green">496</FONT>         *<a name="line.496"></a>
<FONT color="green">497</FONT>         * @param value  the maximum value.<a name="line.497"></a>
<FONT color="green">498</FONT>         *<a name="line.498"></a>
<FONT color="green">499</FONT>         * @see #getMaxValue()<a name="line.499"></a>
<FONT color="green">500</FONT>         */<a name="line.500"></a>
<FONT color="green">501</FONT>        public void setMaxValue(double value) {<a name="line.501"></a>
<FONT color="green">502</FONT>            this.maxValue = value;<a name="line.502"></a>
<FONT color="green">503</FONT>            fireChangeEvent();<a name="line.503"></a>
<FONT color="green">504</FONT>        }<a name="line.504"></a>
<FONT color="green">505</FONT>    <a name="line.505"></a>
<FONT color="green">506</FONT>        /**<a name="line.506"></a>
<FONT color="green">507</FONT>         * Returns the direction in which the radar axes are drawn<a name="line.507"></a>
<FONT color="green">508</FONT>         * (clockwise or anti-clockwise).<a name="line.508"></a>
<FONT color="green">509</FONT>         *<a name="line.509"></a>
<FONT color="green">510</FONT>         * @return The direction (never &lt;code&gt;null&lt;/code&gt;).<a name="line.510"></a>
<FONT color="green">511</FONT>         *<a name="line.511"></a>
<FONT color="green">512</FONT>         * @see #setDirection(Rotation)<a name="line.512"></a>
<FONT color="green">513</FONT>         */<a name="line.513"></a>
<FONT color="green">514</FONT>        public Rotation getDirection() {<a name="line.514"></a>
<FONT color="green">515</FONT>            return this.direction;<a name="line.515"></a>
<FONT color="green">516</FONT>        }<a name="line.516"></a>
<FONT color="green">517</FONT>    <a name="line.517"></a>
<FONT color="green">518</FONT>        /**<a name="line.518"></a>
<FONT color="green">519</FONT>         * Sets the direction in which the radar axes are drawn and sends a<a name="line.519"></a>
<FONT color="green">520</FONT>         * {@link PlotChangeEvent} to all registered listeners.<a name="line.520"></a>
<FONT color="green">521</FONT>         *<a name="line.521"></a>
<FONT color="green">522</FONT>         * @param direction  the direction (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.522"></a>
<FONT color="green">523</FONT>         *<a name="line.523"></a>
<FONT color="green">524</FONT>         * @see #getDirection()<a name="line.524"></a>
<FONT color="green">525</FONT>         */<a name="line.525"></a>
<FONT color="green">526</FONT>        public void setDirection(Rotation direction) {<a name="line.526"></a>
<FONT color="green">527</FONT>            if (direction == null) {<a name="line.527"></a>
<FONT color="green">528</FONT>                throw new IllegalArgumentException("Null 'direction' argument.");<a name="line.528"></a>
<FONT color="green">529</FONT>            }<a name="line.529"></a>
<FONT color="green">530</FONT>            this.direction = direction;<a name="line.530"></a>
<FONT color="green">531</FONT>            fireChangeEvent();<a name="line.531"></a>
<FONT color="green">532</FONT>        }<a name="line.532"></a>
<FONT color="green">533</FONT>    <a name="line.533"></a>
<FONT color="green">534</FONT>        /**<a name="line.534"></a>
<FONT color="green">535</FONT>         * Returns the interior gap, measured as a percentage of the available<a name="line.535"></a>
<FONT color="green">536</FONT>         * drawing space.<a name="line.536"></a>
<FONT color="green">537</FONT>         *<a name="line.537"></a>
<FONT color="green">538</FONT>         * @return The gap (as a percentage of the available drawing space).<a name="line.538"></a>
<FONT color="green">539</FONT>         *<a name="line.539"></a>
<FONT color="green">540</FONT>         * @see #setInteriorGap(double)<a name="line.540"></a>
<FONT color="green">541</FONT>         */<a name="line.541"></a>
<FONT color="green">542</FONT>        public double getInteriorGap() {<a name="line.542"></a>
<FONT color="green">543</FONT>            return this.interiorGap;<a name="line.543"></a>
<FONT color="green">544</FONT>        }<a name="line.544"></a>
<FONT color="green">545</FONT>    <a name="line.545"></a>
<FONT color="green">546</FONT>        /**<a name="line.546"></a>
<FONT color="green">547</FONT>         * Sets the interior gap and sends a {@link PlotChangeEvent} to all<a name="line.547"></a>
<FONT color="green">548</FONT>         * registered listeners. This controls the space between the edges of the<a name="line.548"></a>
<FONT color="green">549</FONT>         * plot and the plot area itself (the region where the axis labels appear).<a name="line.549"></a>
<FONT color="green">550</FONT>         *<a name="line.550"></a>
<FONT color="green">551</FONT>         * @param percent  the gap (as a percentage of the available drawing space).<a name="line.551"></a>
<FONT color="green">552</FONT>         *<a name="line.552"></a>
<FONT color="green">553</FONT>         * @see #getInteriorGap()<a name="line.553"></a>
<FONT color="green">554</FONT>         */<a name="line.554"></a>
<FONT color="green">555</FONT>        public void setInteriorGap(double percent) {<a name="line.555"></a>
<FONT color="green">556</FONT>            if ((percent &lt; 0.0) || (percent &gt; MAX_INTERIOR_GAP)) {<a name="line.556"></a>
<FONT color="green">557</FONT>                throw new IllegalArgumentException(<a name="line.557"></a>
<FONT color="green">558</FONT>                        "Percentage outside valid range.");<a name="line.558"></a>
<FONT color="green">559</FONT>            }<a name="line.559"></a>
<FONT color="green">560</FONT>            if (this.interiorGap != percent) {<a name="line.560"></a>
<FONT color="green">561</FONT>                this.interiorGap = percent;<a name="line.561"></a>
<FONT color="green">562</FONT>                fireChangeEvent();<a name="line.562"></a>
<FONT color="green">563</FONT>            }<a name="line.563"></a>
<FONT color="green">564</FONT>        }<a name="line.564"></a>
<FONT color="green">565</FONT>    <a name="line.565"></a>
<FONT color="green">566</FONT>        /**<a name="line.566"></a>
<FONT color="green">567</FONT>         * Returns the axis label gap.<a name="line.567"></a>
<FONT color="green">568</FONT>         *<a name="line.568"></a>
<FONT color="green">569</FONT>         * @return The axis label gap.<a name="line.569"></a>
<FONT color="green">570</FONT>         *<a name="line.570"></a>
<FONT color="green">571</FONT>         * @see #setAxisLabelGap(double)<a name="line.571"></a>
<FONT color="green">572</FONT>         */<a name="line.572"></a>
<FONT color="green">573</FONT>        public double getAxisLabelGap() {<a name="line.573"></a>
<FONT color="green">574</FONT>            return this.axisLabelGap;<a name="line.574"></a>
<FONT color="green">575</FONT>        }<a name="line.575"></a>
<FONT color="green">576</FONT>    <a name="line.576"></a>
<FONT color="green">577</FONT>        /**<a name="line.577"></a>
<FONT color="green">578</FONT>         * Sets the axis label gap and sends a {@link PlotChangeEvent} to all<a name="line.578"></a>
<FONT color="green">579</FONT>         * registered listeners.<a name="line.579"></a>
<FONT color="green">580</FONT>         *<a name="line.580"></a>
<FONT color="green">581</FONT>         * @param gap  the gap.<a name="line.581"></a>
<FONT color="green">582</FONT>         *<a name="line.582"></a>
<FONT color="green">583</FONT>         * @see #getAxisLabelGap()<a name="line.583"></a>
<FONT color="green">584</FONT>         */<a name="line.584"></a>
<FONT color="green">585</FONT>        public void setAxisLabelGap(double gap) {<a name="line.585"></a>
<FONT color="green">586</FONT>            this.axisLabelGap = gap;<a name="line.586"></a>
<FONT color="green">587</FONT>            fireChangeEvent();<a name="line.587"></a>
<FONT color="green">588</FONT>        }<a name="line.588"></a>
<FONT color="green">589</FONT>    <a name="line.589"></a>
<FONT color="green">590</FONT>        /**<a name="line.590"></a>
<FONT color="green">591</FONT>         * Returns the paint used to draw the axis lines.<a name="line.591"></a>
<FONT color="green">592</FONT>         *<a name="line.592"></a>
<FONT color="green">593</FONT>         * @return The paint used to draw the axis lines (never &lt;code&gt;null&lt;/code&gt;).<a name="line.593"></a>
<FONT color="green">594</FONT>         *<a name="line.594"></a>
<FONT color="green">595</FONT>         * @see #setAxisLinePaint(Paint)<a name="line.595"></a>
<FONT color="green">596</FONT>         * @see #getAxisLineStroke()<a name="line.596"></a>
<FONT color="green">597</FONT>         * @since 1.0.4<a name="line.597"></a>
<FONT color="green">598</FONT>         */<a name="line.598"></a>
<FONT color="green">599</FONT>        public Paint getAxisLinePaint() {<a name="line.599"></a>
<FONT color="green">600</FONT>            return this.axisLinePaint;<a name="line.600"></a>
<FONT color="green">601</FONT>        }<a name="line.601"></a>
<FONT color="green">602</FONT>    <a name="line.602"></a>
<FONT color="green">603</FONT>        /**<a name="line.603"></a>
<FONT color="green">604</FONT>         * Sets the paint used to draw the axis lines and sends a<a name="line.604"></a>
<FONT color="green">605</FONT>         * {@link PlotChangeEvent} to all registered listeners.<a name="line.605"></a>
<FONT color="green">606</FONT>         *<a name="line.606"></a>
<FONT color="green">607</FONT>         * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.607"></a>
<FONT color="green">608</FONT>         *<a name="line.608"></a>
<FONT color="green">609</FONT>         * @see #getAxisLinePaint()<a name="line.609"></a>
<FONT color="green">610</FONT>         * @since 1.0.4<a name="line.610"></a>
<FONT color="green">611</FONT>         */<a name="line.611"></a>
<FONT color="green">612</FONT>        public void setAxisLinePaint(Paint paint) {<a name="line.612"></a>
<FONT color="green">613</FONT>            if (paint == null) {<a name="line.613"></a>
<FONT color="green">614</FONT>                throw new IllegalArgumentException("Null 'paint' argument.");<a name="line.614"></a>
<FONT color="green">615</FONT>            }<a name="line.615"></a>
<FONT color="green">616</FONT>            this.axisLinePaint = paint;<a name="line.616"></a>
<FONT color="green">617</FONT>            fireChangeEvent();<a name="line.617"></a>
<FONT color="green">618</FONT>        }<a name="line.618"></a>
<FONT color="green">619</FONT>    <a name="line.619"></a>
<FONT color="green">620</FONT>        /**<a name="line.620"></a>
<FONT color="green">621</FONT>         * Returns the stroke used to draw the axis lines.<a name="line.621"></a>
<FONT color="green">622</FONT>         *<a name="line.622"></a>
<FONT color="green">623</FONT>         * @return The stroke used to draw the axis lines (never &lt;code&gt;null&lt;/code&gt;).<a name="line.623"></a>
<FONT color="green">624</FONT>         *<a name="line.624"></a>
<FONT color="green">625</FONT>         * @see #setAxisLineStroke(Stroke)<a name="line.625"></a>
<FONT color="green">626</FONT>         * @see #getAxisLinePaint()<a name="line.626"></a>
<FONT color="green">627</FONT>         * @since 1.0.4<a name="line.627"></a>
<FONT color="green">628</FONT>         */<a name="line.628"></a>
<FONT color="green">629</FONT>        public Stroke getAxisLineStroke() {<a name="line.629"></a>
<FONT color="green">630</FONT>            return this.axisLineStroke;<a name="line.630"></a>
<FONT color="green">631</FONT>        }<a name="line.631"></a>
<FONT color="green">632</FONT>    <a name="line.632"></a>
<FONT color="green">633</FONT>        /**<a name="line.633"></a>
<FONT color="green">634</FONT>         * Sets the stroke used to draw the axis lines and sends a<a name="line.634"></a>
<FONT color="green">635</FONT>         * {@link PlotChangeEvent} to all registered listeners.<a name="line.635"></a>
<FONT color="green">636</FONT>         *<a name="line.636"></a>
<FONT color="green">637</FONT>         * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.637"></a>
<FONT color="green">638</FONT>         *<a name="line.638"></a>
<FONT color="green">639</FONT>         * @see #getAxisLineStroke()<a name="line.639"></a>
<FONT color="green">640</FONT>         * @since 1.0.4<a name="line.640"></a>
<FONT color="green">641</FONT>         */<a name="line.641"></a>
<FONT color="green">642</FONT>        public void setAxisLineStroke(Stroke stroke) {<a name="line.642"></a>
<FONT color="green">643</FONT>            if (stroke == null) {<a name="line.643"></a>
<FONT color="green">644</FONT>                throw new IllegalArgumentException("Null 'stroke' argument.");<a name="line.644"></a>
<FONT color="green">645</FONT>            }<a name="line.645"></a>
<FONT color="green">646</FONT>            this.axisLineStroke = stroke;<a name="line.646"></a>
<FONT color="green">647</FONT>            fireChangeEvent();<a name="line.647"></a>
<FONT color="green">648</FONT>        }<a name="line.648"></a>
<FONT color="green">649</FONT>    <a name="line.649"></a>
<FONT color="green">650</FONT>        //// SERIES PAINT /////////////////////////<a name="line.650"></a>
<FONT color="green">651</FONT>    <a name="line.651"></a>
<FONT color="green">652</FONT>        /**<a name="line.652"></a>
<FONT color="green">653</FONT>         * Returns the paint for ALL series in the plot.<a name="line.653"></a>
<FONT color="green">654</FONT>         *<a name="line.654"></a>
<FONT color="green">655</FONT>         * @return The paint (possibly &lt;code&gt;null&lt;/code&gt;).<a name="line.655"></a>
<FONT color="green">656</FONT>         *<a name="line.656"></a>
<FONT color="green">657</FONT>         * @see #setSeriesPaint(Paint)<a name="line.657"></a>
<FONT color="green">658</FONT>         */<a name="line.658"></a>
<FONT color="green">659</FONT>        public Paint getSeriesPaint() {<a name="line.659"></a>
<FONT color="green">660</FONT>            return this.seriesPaint;<a name="line.660"></a>
<FONT color="green">661</FONT>        }<a name="line.661"></a>
<FONT color="green">662</FONT>    <a name="line.662"></a>
<FONT color="green">663</FONT>        /**<a name="line.663"></a>
<FONT color="green">664</FONT>         * Sets the paint for ALL series in the plot. If this is set to&lt;/code&gt; null<a name="line.664"></a>
<FONT color="green">665</FONT>         * &lt;/code&gt;, then a list of paints is used instead (to allow different colors<a name="line.665"></a>
<FONT color="green">666</FONT>         * to be used for each series of the radar group).<a name="line.666"></a>
<FONT color="green">667</FONT>         *<a name="line.667"></a>
<FONT color="green">668</FONT>         * @param paint the paint (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.668"></a>
<FONT color="green">669</FONT>         *<a name="line.669"></a>
<FONT color="green">670</FONT>         * @see #getSeriesPaint()<a name="line.670"></a>
<FONT color="green">671</FONT>         */<a name="line.671"></a>
<FONT color="green">672</FONT>        public void setSeriesPaint(Paint paint) {<a name="line.672"></a>
<FONT color="green">673</FONT>            this.seriesPaint = paint;<a name="line.673"></a>
<FONT color="green">674</FONT>            fireChangeEvent();<a name="line.674"></a>
<FONT color="green">675</FONT>        }<a name="line.675"></a>
<FONT color="green">676</FONT>    <a name="line.676"></a>
<FONT color="green">677</FONT>        /**<a name="line.677"></a>
<FONT color="green">678</FONT>         * Returns the paint for the specified series.<a name="line.678"></a>
<FONT color="green">679</FONT>         *<a name="line.679"></a>
<FONT color="green">680</FONT>         * @param series  the series index (zero-based).<a name="line.680"></a>
<FONT color="green">681</FONT>         *<a name="line.681"></a>
<FONT color="green">682</FONT>         * @return The paint (never &lt;code&gt;null&lt;/code&gt;).<a name="line.682"></a>
<FONT color="green">683</FONT>         *<a name="line.683"></a>
<FONT color="green">684</FONT>         * @see #setSeriesPaint(int, Paint)<a name="line.684"></a>
<FONT color="green">685</FONT>         */<a name="line.685"></a>
<FONT color="green">686</FONT>        public Paint getSeriesPaint(int series) {<a name="line.686"></a>
<FONT color="green">687</FONT>    <a name="line.687"></a>
<FONT color="green">688</FONT>            // return the override, if there is one...<a name="line.688"></a>
<FONT color="green">689</FONT>            if (this.seriesPaint != null) {<a name="line.689"></a>
<FONT color="green">690</FONT>                return this.seriesPaint;<a name="line.690"></a>
<FONT color="green">691</FONT>            }<a name="line.691"></a>
<FONT color="green">692</FONT>    <a name="line.692"></a>
<FONT color="green">693</FONT>            // otherwise look up the paint list<a name="line.693"></a>
<FONT color="green">694</FONT>            Paint result = this.seriesPaintList.getPaint(series);<a name="line.694"></a>
<FONT color="green">695</FONT>            if (result == null) {<a name="line.695"></a>
<FONT color="green">696</FONT>                DrawingSupplier supplier = getDrawingSupplier();<a name="line.696"></a>
<FONT color="green">697</FONT>                if (supplier != null) {<a name="line.697"></a>
<FONT color="green">698</FONT>                    Paint p = supplier.getNextPaint();<a name="line.698"></a>
<FONT color="green">699</FONT>                    this.seriesPaintList.setPaint(series, p);<a name="line.699"></a>
<FONT color="green">700</FONT>                    result = p;<a name="line.700"></a>
<FONT color="green">701</FONT>                }<a name="line.701"></a>
<FONT color="green">702</FONT>                else {<a name="line.702"></a>
<FONT color="green">703</FONT>                    result = this.baseSeriesPaint;<a name="line.703"></a>
<FONT color="green">704</FONT>                }<a name="line.704"></a>
<FONT color="green">705</FONT>            }<a name="line.705"></a>
<FONT color="green">706</FONT>            return result;<a name="line.706"></a>
<FONT color="green">707</FONT>    <a name="line.707"></a>
<FONT color="green">708</FONT>        }<a name="line.708"></a>
<FONT color="green">709</FONT>    <a name="line.709"></a>
<FONT color="green">710</FONT>        /**<a name="line.710"></a>
<FONT color="green">711</FONT>         * Sets the paint used to fill a series of the radar and sends a<a name="line.711"></a>
<FONT color="green">712</FONT>         * {@link PlotChangeEvent} to all registered listeners.<a name="line.712"></a>
<FONT color="green">713</FONT>         *<a name="line.713"></a>
<FONT color="green">714</FONT>         * @param series  the series index (zero-based).<a name="line.714"></a>
<FONT color="green">715</FONT>         * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.715"></a>
<FONT color="green">716</FONT>         *<a name="line.716"></a>
<FONT color="green">717</FONT>         * @see #getSeriesPaint(int)<a name="line.717"></a>
<FONT color="green">718</FONT>         */<a name="line.718"></a>
<FONT color="green">719</FONT>        public void setSeriesPaint(int series, Paint paint) {<a name="line.719"></a>
<FONT color="green">720</FONT>            this.seriesPaintList.setPaint(series, paint);<a name="line.720"></a>
<FONT color="green">721</FONT>            fireChangeEvent();<a name="line.721"></a>
<FONT color="green">722</FONT>        }<a name="line.722"></a>
<FONT color="green">723</FONT>    <a name="line.723"></a>
<FONT color="green">724</FONT>        /**<a name="line.724"></a>
<FONT color="green">725</FONT>         * Returns the base series paint. This is used when no other paint is<a name="line.725"></a>
<FONT color="green">726</FONT>         * available.<a name="line.726"></a>
<FONT color="green">727</FONT>         *<a name="line.727"></a>
<FONT color="green">728</FONT>         * @return The paint (never &lt;code&gt;null&lt;/code&gt;).<a name="line.728"></a>
<FONT color="green">729</FONT>         *<a name="line.729"></a>
<FONT color="green">730</FONT>         * @see #setBaseSeriesPaint(Paint)<a name="line.730"></a>
<FONT color="green">731</FONT>         */<a name="line.731"></a>
<FONT color="green">732</FONT>        public Paint getBaseSeriesPaint() {<a name="line.732"></a>
<FONT color="green">733</FONT>          return this.baseSeriesPaint;<a name="line.733"></a>
<FONT color="green">734</FONT>        }<a name="line.734"></a>
<FONT color="green">735</FONT>    <a name="line.735"></a>
<FONT color="green">736</FONT>        /**<a name="line.736"></a>
<FONT color="green">737</FONT>         * Sets the base series paint.<a name="line.737"></a>
<FONT color="green">738</FONT>         *<a name="line.738"></a>
<FONT color="green">739</FONT>         * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.739"></a>
<FONT color="green">740</FONT>         *<a name="line.740"></a>
<FONT color="green">741</FONT>         * @see #getBaseSeriesPaint()<a name="line.741"></a>
<FONT color="green">742</FONT>         */<a name="line.742"></a>
<FONT color="green">743</FONT>        public void setBaseSeriesPaint(Paint paint) {<a name="line.743"></a>
<FONT color="green">744</FONT>            if (paint == null) {<a name="line.744"></a>
<FONT color="green">745</FONT>                throw new IllegalArgumentException("Null 'paint' argument.");<a name="line.745"></a>
<FONT color="green">746</FONT>            }<a name="line.746"></a>
<FONT color="green">747</FONT>            this.baseSeriesPaint = paint;<a name="line.747"></a>
<FONT color="green">748</FONT>            fireChangeEvent();<a name="line.748"></a>
<FONT color="green">749</FONT>        }<a name="line.749"></a>
<FONT color="green">750</FONT>    <a name="line.750"></a>
<FONT color="green">751</FONT>        //// SERIES OUTLINE PAINT ////////////////////////////<a name="line.751"></a>
<FONT color="green">752</FONT>    <a name="line.752"></a>
<FONT color="green">753</FONT>        /**<a name="line.753"></a>
<FONT color="green">754</FONT>         * Returns the outline paint for ALL series in the plot.<a name="line.754"></a>
<FONT color="green">755</FONT>         *<a name="line.755"></a>
<FONT color="green">756</FONT>         * @return The paint (possibly &lt;code&gt;null&lt;/code&gt;).<a name="line.756"></a>
<FONT color="green">757</FONT>         */<a name="line.757"></a>
<FONT color="green">758</FONT>        public Paint getSeriesOutlinePaint() {<a name="line.758"></a>
<FONT color="green">759</FONT>            return this.seriesOutlinePaint;<a name="line.759"></a>
<FONT color="green">760</FONT>        }<a name="line.760"></a>
<FONT color="green">761</FONT>    <a name="line.761"></a>
<FONT color="green">762</FONT>        /**<a name="line.762"></a>
<FONT color="green">763</FONT>         * Sets the outline paint for ALL series in the plot. If this is set to<a name="line.763"></a>
<FONT color="green">764</FONT>         * &lt;/code&gt; null&lt;/code&gt;, then a list of paints is used instead (to allow<a name="line.764"></a>
<FONT color="green">765</FONT>         * different colors to be used for each series).<a name="line.765"></a>
<FONT color="green">766</FONT>         *<a name="line.766"></a>
<FONT color="green">767</FONT>         * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.767"></a>
<FONT color="green">768</FONT>         */<a name="line.768"></a>
<FONT color="green">769</FONT>        public void setSeriesOutlinePaint(Paint paint) {<a name="line.769"></a>
<FONT color="green">770</FONT>            this.seriesOutlinePaint = paint;<a name="line.770"></a>
<FONT color="green">771</FONT>            fireChangeEvent();<a name="line.771"></a>
<FONT color="green">772</FONT>        }<a name="line.772"></a>
<FONT color="green">773</FONT>    <a name="line.773"></a>
<FONT color="green">774</FONT>        /**<a name="line.774"></a>
<FONT color="green">775</FONT>         * Returns the paint for the specified series.<a name="line.775"></a>
<FONT color="green">776</FONT>         *<a name="line.776"></a>
<FONT color="green">777</FONT>         * @param series  the series index (zero-based).<a name="line.777"></a>
<FONT color="green">778</FONT>         *<a name="line.778"></a>
<FONT color="green">779</FONT>         * @return The paint (never &lt;code&gt;null&lt;/code&gt;).<a name="line.779"></a>
<FONT color="green">780</FONT>         */<a name="line.780"></a>
<FONT color="green">781</FONT>        public Paint getSeriesOutlinePaint(int series) {<a name="line.781"></a>
<FONT color="green">782</FONT>            // return the override, if there is one...<a name="line.782"></a>
<FONT color="green">783</FONT>            if (this.seriesOutlinePaint != null) {<a name="line.783"></a>
<FONT color="green">784</FONT>                return this.seriesOutlinePaint;<a name="line.784"></a>
<FONT color="green">785</FONT>            }<a name="line.785"></a>
<FONT color="green">786</FONT>            // otherwise look up the paint list<a name="line.786"></a>
<FONT color="green">787</FONT>            Paint result = this.seriesOutlinePaintList.getPaint(series);<a name="line.787"></a>
<FONT color="green">788</FONT>            if (result == null) {<a name="line.788"></a>
<FONT color="green">789</FONT>                result = this.baseSeriesOutlinePaint;<a name="line.789"></a>
<FONT color="green">790</FONT>            }<a name="line.790"></a>
<FONT color="green">791</FONT>            return result;<a name="line.791"></a>
<FONT color="green">792</FONT>        }<a name="line.792"></a>
<FONT color="green">793</FONT>    <a name="line.793"></a>
<FONT color="green">794</FONT>        /**<a name="line.794"></a>
<FONT color="green">795</FONT>         * Sets the paint used to fill a series of the radar and sends a<a name="line.795"></a>
<FONT color="green">796</FONT>         * {@link PlotChangeEvent} to all registered listeners.<a name="line.796"></a>
<FONT color="green">797</FONT>         *<a name="line.797"></a>
<FONT color="green">798</FONT>         * @param series  the series index (zero-based).<a name="line.798"></a>
<FONT color="green">799</FONT>         * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.799"></a>
<FONT color="green">800</FONT>         */<a name="line.800"></a>
<FONT color="green">801</FONT>        public void setSeriesOutlinePaint(int series, Paint paint) {<a name="line.801"></a>
<FONT color="green">802</FONT>            this.seriesOutlinePaintList.setPaint(series, paint);<a name="line.802"></a>
<FONT color="green">803</FONT>            fireChangeEvent();<a name="line.803"></a>
<FONT color="green">804</FONT>        }<a name="line.804"></a>
<FONT color="green">805</FONT>    <a name="line.805"></a>
<FONT color="green">806</FONT>        /**<a name="line.806"></a>
<FONT color="green">807</FONT>         * Returns the base series paint. This is used when no other paint is<a name="line.807"></a>
<FONT color="green">808</FONT>         * available.<a name="line.808"></a>
<FONT color="green">809</FONT>         *<a name="line.809"></a>
<FONT color="green">810</FONT>         * @return The paint (never &lt;code&gt;null&lt;/code&gt;).<a name="line.810"></a>
<FONT color="green">811</FONT>         */<a name="line.811"></a>
<FONT color="green">812</FONT>        public Paint getBaseSeriesOutlinePaint() {<a name="line.812"></a>
<FONT color="green">813</FONT>            return this.baseSeriesOutlinePaint;<a name="line.813"></a>
<FONT color="green">814</FONT>        }<a name="line.814"></a>
<FONT color="green">815</FONT>    <a name="line.815"></a>
<FONT color="green">816</FONT>        /**<a name="line.816"></a>
<FONT color="green">817</FONT>         * Sets the base series paint.<a name="line.817"></a>
<FONT color="green">818</FONT>         *<a name="line.818"></a>
<FONT color="green">819</FONT>         * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.819"></a>
<FONT color="green">820</FONT>         */<a name="line.820"></a>
<FONT color="green">821</FONT>        public void setBaseSeriesOutlinePaint(Paint paint) {<a name="line.821"></a>
<FONT color="green">822</FONT>            if (paint == null) {<a name="line.822"></a>
<FONT color="green">823</FONT>                throw new IllegalArgumentException("Null 'paint' argument.");<a name="line.823"></a>
<FONT color="green">824</FONT>            }<a name="line.824"></a>
<FONT color="green">825</FONT>            this.baseSeriesOutlinePaint = paint;<a name="line.825"></a>
<FONT color="green">826</FONT>            fireChangeEvent();<a name="line.826"></a>
<FONT color="green">827</FONT>        }<a name="line.827"></a>
<FONT color="green">828</FONT>    <a name="line.828"></a>
<FONT color="green">829</FONT>        //// SERIES OUTLINE STROKE /////////////////////<a name="line.829"></a>
<FONT color="green">830</FONT>    <a name="line.830"></a>
<FONT color="green">831</FONT>        /**<a name="line.831"></a>
<FONT color="green">832</FONT>         * Returns the outline stroke for ALL series in the plot.<a name="line.832"></a>
<FONT color="green">833</FONT>         *<a name="line.833"></a>
<FONT color="green">834</FONT>         * @return The stroke (possibly &lt;code&gt;null&lt;/code&gt;).<a name="line.834"></a>
<FONT color="green">835</FONT>         */<a name="line.835"></a>
<FONT color="green">836</FONT>        public Stroke getSeriesOutlineStroke() {<a name="line.836"></a>
<FONT color="green">837</FONT>            return this.seriesOutlineStroke;<a name="line.837"></a>
<FONT color="green">838</FONT>        }<a name="line.838"></a>
<FONT color="green">839</FONT>    <a name="line.839"></a>
<FONT color="green">840</FONT>        /**<a name="line.840"></a>
<FONT color="green">841</FONT>         * Sets the outline stroke for ALL series in the plot. If this is set to<a name="line.841"></a>
<FONT color="green">842</FONT>         * &lt;/code&gt; null&lt;/code&gt;, then a list of paints is used instead (to allow<a name="line.842"></a>
<FONT color="green">843</FONT>         * different colors to be used for each series).<a name="line.843"></a>
<FONT color="green">844</FONT>         *<a name="line.844"></a>
<FONT color="green">845</FONT>         * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.845"></a>
<FONT color="green">846</FONT>         */<a name="line.846"></a>
<FONT color="green">847</FONT>        public void setSeriesOutlineStroke(Stroke stroke) {<a name="line.847"></a>
<FONT color="green">848</FONT>            this.seriesOutlineStroke = stroke;<a name="line.848"></a>
<FONT color="green">849</FONT>            fireChangeEvent();<a name="line.849"></a>
<FONT color="green">850</FONT>        }<a name="line.850"></a>
<FONT color="green">851</FONT>    <a name="line.851"></a>
<FONT color="green">852</FONT>        /**<a name="line.852"></a>
<FONT color="green">853</FONT>         * Returns the stroke for the specified series.<a name="line.853"></a>
<FONT color="green">854</FONT>         *<a name="line.854"></a>
<FONT color="green">855</FONT>         * @param series  the series index (zero-based).<a name="line.855"></a>
<FONT color="green">856</FONT>         *<a name="line.856"></a>
<FONT color="green">857</FONT>         * @return The stroke (never &lt;code&gt;null&lt;/code&gt;).<a name="line.857"></a>
<FONT color="green">858</FONT>         */<a name="line.858"></a>
<FONT color="green">859</FONT>        public Stroke getSeriesOutlineStroke(int series) {<a name="line.859"></a>
<FONT color="green">860</FONT>    <a name="line.860"></a>
<FONT color="green">861</FONT>            // return the override, if there is one...<a name="line.861"></a>
<FONT color="green">862</FONT>            if (this.seriesOutlineStroke != null) {<a name="line.862"></a>
<FONT color="green">863</FONT>                return this.seriesOutlineStroke;<a name="line.863"></a>
<FONT color="green">864</FONT>            }<a name="line.864"></a>
<FONT color="green">865</FONT>    <a name="line.865"></a>
<FONT color="green">866</FONT>            // otherwise look up the paint list<a name="line.866"></a>
<FONT color="green">867</FONT>            Stroke result = this.seriesOutlineStrokeList.getStroke(series);<a name="line.867"></a>
<FONT color="green">868</FONT>            if (result == null) {<a name="line.868"></a>
<FONT color="green">869</FONT>                result = this.baseSeriesOutlineStroke;<a name="line.869"></a>
<FONT color="green">870</FONT>            }<a name="line.870"></a>
<FONT color="green">871</FONT>            return result;<a name="line.871"></a>
<FONT color="green">872</FONT>    <a name="line.872"></a>
<FONT color="green">873</FONT>        }<a name="line.873"></a>
<FONT color="green">874</FONT>    <a name="line.874"></a>
<FONT color="green">875</FONT>        /**<a name="line.875"></a>
<FONT color="green">876</FONT>         * Sets the stroke used to fill a series of the radar and sends a<a name="line.876"></a>
<FONT color="green">877</FONT>         * {@link PlotChangeEvent} to all registered listeners.<a name="line.877"></a>
<FONT color="green">878</FONT>         *<a name="line.878"></a>
<FONT color="green">879</FONT>         * @param series  the series index (zero-based).<a name="line.879"></a>
<FONT color="green">880</FONT>         * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.880"></a>
<FONT color="green">881</FONT>         */<a name="line.881"></a>
<FONT color="green">882</FONT>        public void setSeriesOutlineStroke(int series, Stroke stroke) {<a name="line.882"></a>
<FONT color="green">883</FONT>            this.seriesOutlineStrokeList.setStroke(series, stroke);<a name="line.883"></a>
<FONT color="green">884</FONT>            fireChangeEvent();<a name="line.884"></a>
<FONT color="green">885</FONT>        }<a name="line.885"></a>
<FONT color="green">886</FONT>    <a name="line.886"></a>
<FONT color="green">887</FONT>        /**<a name="line.887"></a>
<FONT color="green">888</FONT>         * Returns the base series stroke. This is used when no other stroke is<a name="line.888"></a>
<FONT color="green">889</FONT>         * available.<a name="line.889"></a>
<FONT color="green">890</FONT>         *<a name="line.890"></a>
<FONT color="green">891</FONT>         * @return The stroke (never &lt;code&gt;null&lt;/code&gt;).<a name="line.891"></a>
<FONT color="green">892</FONT>         */<a name="line.892"></a>
<FONT color="green">893</FONT>        public Stroke getBaseSeriesOutlineStroke() {<a name="line.893"></a>
<FONT color="green">894</FONT>            return this.baseSeriesOutlineStroke;<a name="line.894"></a>
<FONT color="green">895</FONT>        }<a name="line.895"></a>
<FONT color="green">896</FONT>    <a name="line.896"></a>
<FONT color="green">897</FONT>        /**<a name="line.897"></a>
<FONT color="green">898</FONT>         * Sets the base series stroke.<a name="line.898"></a>
<FONT color="green">899</FONT>         *<a name="line.899"></a>
<FONT color="green">900</FONT>         * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.900"></a>
<FONT color="green">901</FONT>         */<a name="line.901"></a>
<FONT color="green">902</FONT>        public void setBaseSeriesOutlineStroke(Stroke stroke) {<a name="line.902"></a>
<FONT color="green">903</FONT>            if (stroke == null) {<a name="line.903"></a>
<FONT color="green">904</FONT>                throw new IllegalArgumentException("Null 'stroke' argument.");<a name="line.904"></a>
<FONT color="green">905</FONT>            }<a name="line.905"></a>
<FONT color="green">906</FONT>            this.baseSeriesOutlineStroke = stroke;<a name="line.906"></a>
<FONT color="green">907</FONT>            fireChangeEvent();<a name="line.907"></a>
<FONT color="green">908</FONT>        }<a name="line.908"></a>
<FONT color="green">909</FONT>    <a name="line.909"></a>
<FONT color="green">910</FONT>        /**<a name="line.910"></a>
<FONT color="green">911</FONT>         * Returns the shape used for legend items.<a name="line.911"></a>
<FONT color="green">912</FONT>         *<a name="line.912"></a>
<FONT color="green">913</FONT>         * @return The shape (never &lt;code&gt;null&lt;/code&gt;).<a name="line.913"></a>
<FONT color="green">914</FONT>         *<a name="line.914"></a>
<FONT color="green">915</FONT>         * @see #setLegendItemShape(Shape)<a name="line.915"></a>
<FONT color="green">916</FONT>         */<a name="line.916"></a>
<FONT color="green">917</FONT>        public Shape getLegendItemShape() {<a name="line.917"></a>
<FONT color="green">918</FONT>            return this.legendItemShape;<a name="line.918"></a>
<FONT color="green">919</FONT>        }<a name="line.919"></a>
<FONT color="green">920</FONT>    <a name="line.920"></a>
<FONT color="green">921</FONT>        /**<a name="line.921"></a>
<FONT color="green">922</FONT>         * Sets the shape used for legend items and sends a {@link PlotChangeEvent}<a name="line.922"></a>
<FONT color="green">923</FONT>         * to all registered listeners.<a name="line.923"></a>
<FONT color="green">924</FONT>         *<a name="line.924"></a>
<FONT color="green">925</FONT>         * @param shape  the shape (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.925"></a>
<FONT color="green">926</FONT>         *<a name="line.926"></a>
<FONT color="green">927</FONT>         * @see #getLegendItemShape()<a name="line.927"></a>
<FONT color="green">928</FONT>         */<a name="line.928"></a>
<FONT color="green">929</FONT>        public void setLegendItemShape(Shape shape) {<a name="line.929"></a>
<FONT color="green">930</FONT>            if (shape == null) {<a name="line.930"></a>
<FONT color="green">931</FONT>                throw new IllegalArgumentException("Null 'shape' argument.");<a name="line.931"></a>
<FONT color="green">932</FONT>            }<a name="line.932"></a>
<FONT color="green">933</FONT>            this.legendItemShape = shape;<a name="line.933"></a>
<FONT color="green">934</FONT>            fireChangeEvent();<a name="line.934"></a>
<FONT color="green">935</FONT>        }<a name="line.935"></a>
<FONT color="green">936</FONT>    <a name="line.936"></a>
<FONT color="green">937</FONT>        /**<a name="line.937"></a>
<FONT color="green">938</FONT>         * Returns the series label font.<a name="line.938"></a>
<FONT color="green">939</FONT>         *<a name="line.939"></a>
<FONT color="green">940</FONT>         * @return The font (never &lt;code&gt;null&lt;/code&gt;).<a name="line.940"></a>
<FONT color="green">941</FONT>         *<a name="line.941"></a>
<FONT color="green">942</FONT>         * @see #setLabelFont(Font)<a name="line.942"></a>
<FONT color="green">943</FONT>         */<a name="line.943"></a>
<FONT color="green">944</FONT>        public Font getLabelFont() {<a name="line.944"></a>
<FONT color="green">945</FONT>            return this.labelFont;<a name="line.945"></a>
<FONT color="green">946</FONT>        }<a name="line.946"></a>
<FONT color="green">947</FONT>    <a name="line.947"></a>
<FONT color="green">948</FONT>        /**<a name="line.948"></a>
<FONT color="green">949</FONT>         * Sets the series label font and sends a {@link PlotChangeEvent} to all<a name="line.949"></a>
<FONT color="green">950</FONT>         * registered listeners.<a name="line.950"></a>
<FONT color="green">951</FONT>         *<a name="line.951"></a>
<FONT color="green">952</FONT>         * @param font  the font (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.952"></a>
<FONT color="green">953</FONT>         *<a name="line.953"></a>
<FONT color="green">954</FONT>         * @see #getLabelFont()<a name="line.954"></a>
<FONT color="green">955</FONT>         */<a name="line.955"></a>
<FONT color="green">956</FONT>        public void setLabelFont(Font font) {<a name="line.956"></a>
<FONT color="green">957</FONT>            if (font == null) {<a name="line.957"></a>
<FONT color="green">958</FONT>                throw new IllegalArgumentException("Null 'font' argument.");<a name="line.958"></a>
<FONT color="green">959</FONT>            }<a name="line.959"></a>
<FONT color="green">960</FONT>            this.labelFont = font;<a name="line.960"></a>
<FONT color="green">961</FONT>            fireChangeEvent();<a name="line.961"></a>
<FONT color="green">962</FONT>        }<a name="line.962"></a>
<FONT color="green">963</FONT>    <a name="line.963"></a>
<FONT color="green">964</FONT>        /**<a name="line.964"></a>
<FONT color="green">965</FONT>         * Returns the series label paint.<a name="line.965"></a>
<FONT color="green">966</FONT>         *<a name="line.966"></a>
<FONT color="green">967</FONT>         * @return The paint (never &lt;code&gt;null&lt;/code&gt;).<a name="line.967"></a>
<FONT color="green">968</FONT>         *<a name="line.968"></a>
<FONT color="green">969</FONT>         * @see #setLabelPaint(Paint)<a name="line.969"></a>
<FONT color="green">970</FONT>         */<a name="line.970"></a>
<FONT color="green">971</FONT>        public Paint getLabelPaint() {<a name="line.971"></a>
<FONT color="green">972</FONT>            return this.labelPaint;<a name="line.972"></a>
<FONT color="green">973</FONT>        }<a name="line.973"></a>
<FONT color="green">974</FONT>    <a name="line.974"></a>
<FONT color="green">975</FONT>        /**<a name="line.975"></a>
<FONT color="green">976</FONT>         * Sets the series label paint and sends a {@link PlotChangeEvent} to all<a name="line.976"></a>
<FONT color="green">977</FONT>         * registered listeners.<a name="line.977"></a>
<FONT color="green">978</FONT>         *<a name="line.978"></a>
<FONT color="green">979</FONT>         * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.979"></a>
<FONT color="green">980</FONT>         *<a name="line.980"></a>
<FONT color="green">981</FONT>         * @see #getLabelPaint()<a name="line.981"></a>
<FONT color="green">982</FONT>         */<a name="line.982"></a>
<FONT color="green">983</FONT>        public void setLabelPaint(Paint paint) {<a name="line.983"></a>
<FONT color="green">984</FONT>            if (paint == null) {<a name="line.984"></a>
<FONT color="green">985</FONT>                throw new IllegalArgumentException("Null 'paint' argument.");<a name="line.985"></a>
<FONT color="green">986</FONT>            }<a name="line.986"></a>
<FONT color="green">987</FONT>            this.labelPaint = paint;<a name="line.987"></a>
<FONT color="green">988</FONT>            fireChangeEvent();<a name="line.988"></a>
<FONT color="green">989</FONT>        }<a name="line.989"></a>
<FONT color="green">990</FONT>    <a name="line.990"></a>
<FONT color="green">991</FONT>        /**<a name="line.991"></a>
<FONT color="green">992</FONT>         * Returns the label generator.<a name="line.992"></a>
<FONT color="green">993</FONT>         *<a name="line.993"></a>
<FONT color="green">994</FONT>         * @return The label generator (never &lt;code&gt;null&lt;/code&gt;).<a name="line.994"></a>
<FONT color="green">995</FONT>         *<a name="line.995"></a>
<FONT color="green">996</FONT>         * @see #setLabelGenerator(CategoryItemLabelGenerator)<a name="line.996"></a>
<FONT color="green">997</FONT>         */<a name="line.997"></a>
<FONT color="green">998</FONT>        public CategoryItemLabelGenerator getLabelGenerator() {<a name="line.998"></a>
<FONT color="green">999</FONT>            return this.labelGenerator;<a name="line.999"></a>
<FONT color="green">1000</FONT>        }<a name="line.1000"></a>
<FONT color="green">1001</FONT>    <a name="line.1001"></a>
<FONT color="green">1002</FONT>        /**<a name="line.1002"></a>
<FONT color="green">1003</FONT>         * Sets the label generator and sends a {@link PlotChangeEvent} to all<a name="line.1003"></a>
<FONT color="green">1004</FONT>         * registered listeners.<a name="line.1004"></a>
<FONT color="green">1005</FONT>         *<a name="line.1005"></a>
<FONT color="green">1006</FONT>         * @param generator  the generator (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.1006"></a>
<FONT color="green">1007</FONT>         *<a name="line.1007"></a>
<FONT color="green">1008</FONT>         * @see #getLabelGenerator()<a name="line.1008"></a>
<FONT color="green">1009</FONT>         */<a name="line.1009"></a>
<FONT color="green">1010</FONT>        public void setLabelGenerator(CategoryItemLabelGenerator generator) {<a name="line.1010"></a>
<FONT color="green">1011</FONT>            if (generator == null) {<a name="line.1011"></a>
<FONT color="green">1012</FONT>                throw new IllegalArgumentException("Null 'generator' argument.");<a name="line.1012"></a>
<FONT color="green">1013</FONT>            }<a name="line.1013"></a>
<FONT color="green">1014</FONT>            this.labelGenerator = generator;<a name="line.1014"></a>
<FONT color="green">1015</FONT>        }<a name="line.1015"></a>
<FONT color="green">1016</FONT>    <a name="line.1016"></a>
<FONT color="green">1017</FONT>        /**<a name="line.1017"></a>
<FONT color="green">1018</FONT>         * Returns the tool tip generator for the plot.<a name="line.1018"></a>
<FONT color="green">1019</FONT>         *<a name="line.1019"></a>
<FONT color="green">1020</FONT>         * @return The tool tip generator (possibly &lt;code&gt;null&lt;/code&gt;).<a name="line.1020"></a>
<FONT color="green">1021</FONT>         *<a name="line.1021"></a>
<FONT color="green">1022</FONT>         * @see #setToolTipGenerator(CategoryToolTipGenerator)<a name="line.1022"></a>
<FONT color="green">1023</FONT>         *<a name="line.1023"></a>
<FONT color="green">1024</FONT>         * @since 1.0.2<a name="line.1024"></a>
<FONT color="green">1025</FONT>         */<a name="line.1025"></a>
<FONT color="green">1026</FONT>        public CategoryToolTipGenerator getToolTipGenerator() {<a name="line.1026"></a>
<FONT color="green">1027</FONT>            return this.toolTipGenerator;<a name="line.1027"></a>
<FONT color="green">1028</FONT>        }<a name="line.1028"></a>
<FONT color="green">1029</FONT>    <a name="line.1029"></a>
<FONT color="green">1030</FONT>        /**<a name="line.1030"></a>
<FONT color="green">1031</FONT>         * Sets the tool tip generator for the plot and sends a<a name="line.1031"></a>
<FONT color="green">1032</FONT>         * {@link PlotChangeEvent} to all registered listeners.<a name="line.1032"></a>
<FONT color="green">1033</FONT>         *<a name="line.1033"></a>
<FONT color="green">1034</FONT>         * @param generator  the generator (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.1034"></a>
<FONT color="green">1035</FONT>         *<a name="line.1035"></a>
<FONT color="green">1036</FONT>         * @see #getToolTipGenerator()<a name="line.1036"></a>
<FONT color="green">1037</FONT>         *<a name="line.1037"></a>
<FONT color="green">1038</FONT>         * @since 1.0.2<a name="line.1038"></a>
<FONT color="green">1039</FONT>         */<a name="line.1039"></a>
<FONT color="green">1040</FONT>        public void setToolTipGenerator(CategoryToolTipGenerator generator) {<a name="line.1040"></a>
<FONT color="green">1041</FONT>            this.toolTipGenerator = generator;<a name="line.1041"></a>
<FONT color="green">1042</FONT>            fireChangeEvent();<a name="line.1042"></a>
<FONT color="green">1043</FONT>        }<a name="line.1043"></a>
<FONT color="green">1044</FONT>    <a name="line.1044"></a>
<FONT color="green">1045</FONT>        /**<a name="line.1045"></a>
<FONT color="green">1046</FONT>         * Returns the URL generator for the plot.<a name="line.1046"></a>
<FONT color="green">1047</FONT>         *<a name="line.1047"></a>
<FONT color="green">1048</FONT>         * @return The URL generator (possibly &lt;code&gt;null&lt;/code&gt;).<a name="line.1048"></a>
<FONT color="green">1049</FONT>         *<a name="line.1049"></a>
<FONT color="green">1050</FONT>         * @see #setURLGenerator(CategoryURLGenerator)<a name="line.1050"></a>
<FONT color="green">1051</FONT>         *<a name="line.1051"></a>
<FONT color="green">1052</FONT>         * @since 1.0.2<a name="line.1052"></a>
<FONT color="green">1053</FONT>         */<a name="line.1053"></a>
<FONT color="green">1054</FONT>        public CategoryURLGenerator getURLGenerator() {<a name="line.1054"></a>
<FONT color="green">1055</FONT>            return this.urlGenerator;<a name="line.1055"></a>
<FONT color="green">1056</FONT>        }<a name="line.1056"></a>
<FONT color="green">1057</FONT>    <a name="line.1057"></a>
<FONT color="green">1058</FONT>        /**<a name="line.1058"></a>
<FONT color="green">1059</FONT>         * Sets the URL generator for the plot and sends a<a name="line.1059"></a>
<FONT color="green">1060</FONT>         * {@link PlotChangeEvent} to all registered listeners.<a name="line.1060"></a>
<FONT color="green">1061</FONT>         *<a name="line.1061"></a>
<FONT color="green">1062</FONT>         * @param generator  the generator (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.1062"></a>
<FONT color="green">1063</FONT>         *<a name="line.1063"></a>
<FONT color="green">1064</FONT>         * @see #getURLGenerator()<a name="line.1064"></a>
<FONT color="green">1065</FONT>         *<a name="line.1065"></a>
<FONT color="green">1066</FONT>         * @since 1.0.2<a name="line.1066"></a>
<FONT color="green">1067</FONT>         */<a name="line.1067"></a>
<FONT color="green">1068</FONT>        public void setURLGenerator(CategoryURLGenerator generator) {<a name="line.1068"></a>
<FONT color="green">1069</FONT>            this.urlGenerator = generator;<a name="line.1069"></a>
<FONT color="green">1070</FONT>            fireChangeEvent();<a name="line.1070"></a>
<FONT color="green">1071</FONT>        }<a name="line.1071"></a>
<FONT color="green">1072</FONT>    <a name="line.1072"></a>
<FONT color="green">1073</FONT>        /**<a name="line.1073"></a>
<FONT color="green">1074</FONT>         * Returns a collection of legend items for the radar chart.<a name="line.1074"></a>
<FONT color="green">1075</FONT>         *<a name="line.1075"></a>
<FONT color="green">1076</FONT>         * @return The legend items.<a name="line.1076"></a>
<FONT color="green">1077</FONT>         */<a name="line.1077"></a>
<FONT color="green">1078</FONT>        public LegendItemCollection getLegendItems() {<a name="line.1078"></a>
<FONT color="green">1079</FONT>            LegendItemCollection result = new LegendItemCollection();<a name="line.1079"></a>
<FONT color="green">1080</FONT>            if (getDataset() == null) {<a name="line.1080"></a>
<FONT color="green">1081</FONT>                return result;<a name="line.1081"></a>
<FONT color="green">1082</FONT>            }<a name="line.1082"></a>
<FONT color="green">1083</FONT>    <a name="line.1083"></a>
<FONT color="green">1084</FONT>            List keys = null;<a name="line.1084"></a>
<FONT color="green">1085</FONT>            if (this.dataExtractOrder == TableOrder.BY_ROW) {<a name="line.1085"></a>
<FONT color="green">1086</FONT>                keys = this.dataset.getRowKeys();<a name="line.1086"></a>
<FONT color="green">1087</FONT>            }<a name="line.1087"></a>
<FONT color="green">1088</FONT>            else if (this.dataExtractOrder == TableOrder.BY_COLUMN) {<a name="line.1088"></a>
<FONT color="green">1089</FONT>                keys = this.dataset.getColumnKeys();<a name="line.1089"></a>
<FONT color="green">1090</FONT>            }<a name="line.1090"></a>
<FONT color="green">1091</FONT>    <a name="line.1091"></a>
<FONT color="green">1092</FONT>            if (keys != null) {<a name="line.1092"></a>
<FONT color="green">1093</FONT>                int series = 0;<a name="line.1093"></a>
<FONT color="green">1094</FONT>                Iterator iterator = keys.iterator();<a name="line.1094"></a>
<FONT color="green">1095</FONT>                Shape shape = getLegendItemShape();<a name="line.1095"></a>
<FONT color="green">1096</FONT>    <a name="line.1096"></a>
<FONT color="green">1097</FONT>                while (iterator.hasNext()) {<a name="line.1097"></a>
<FONT color="green">1098</FONT>                    String label = iterator.next().toString();<a name="line.1098"></a>
<FONT color="green">1099</FONT>                    String description = label;<a name="line.1099"></a>
<FONT color="green">1100</FONT>    <a name="line.1100"></a>
<FONT color="green">1101</FONT>                    Paint paint = getSeriesPaint(series);<a name="line.1101"></a>
<FONT color="green">1102</FONT>                    Paint outlinePaint = getSeriesOutlinePaint(series);<a name="line.1102"></a>
<FONT color="green">1103</FONT>                    Stroke stroke = getSeriesOutlineStroke(series);<a name="line.1103"></a>
<FONT color="green">1104</FONT>                    LegendItem item = new LegendItem(label, description,<a name="line.1104"></a>
<FONT color="green">1105</FONT>                            null, null, shape, paint, stroke, outlinePaint);<a name="line.1105"></a>
<FONT color="green">1106</FONT>                    item.setDataset(getDataset());<a name="line.1106"></a>
<FONT color="green">1107</FONT>                    result.add(item);<a name="line.1107"></a>
<FONT color="green">1108</FONT>                    series++;<a name="line.1108"></a>
<FONT color="green">1109</FONT>                }<a name="line.1109"></a>
<FONT color="green">1110</FONT>            }<a name="line.1110"></a>
<FONT color="green">1111</FONT>    <a name="line.1111"></a>
<FONT color="green">1112</FONT>            return result;<a name="line.1112"></a>
<FONT color="green">1113</FONT>        }<a name="line.1113"></a>
<FONT color="green">1114</FONT>    <a name="line.1114"></a>
<FONT color="green">1115</FONT>        /**<a name="line.1115"></a>
<FONT color="green">1116</FONT>         * Returns a cartesian point from a polar angle, length and bounding box<a name="line.1116"></a>
<FONT color="green">1117</FONT>         *<a name="line.1117"></a>
<FONT color="green">1118</FONT>         * @param bounds  the area inside which the point needs to be.<a name="line.1118"></a>
<FONT color="green">1119</FONT>         * @param angle  the polar angle, in degrees.<a name="line.1119"></a>
<FONT color="green">1120</FONT>         * @param length  the relative length. Given in percent of maximum extend.<a name="line.1120"></a>
<FONT color="green">1121</FONT>         *<a name="line.1121"></a>
<FONT color="green">1122</FONT>         * @return The cartesian point.<a name="line.1122"></a>
<FONT color="green">1123</FONT>         */<a name="line.1123"></a>
<FONT color="green">1124</FONT>        protected Point2D getWebPoint(Rectangle2D bounds,<a name="line.1124"></a>
<FONT color="green">1125</FONT>                                      double angle, double length) {<a name="line.1125"></a>
<FONT color="green">1126</FONT>    <a name="line.1126"></a>
<FONT color="green">1127</FONT>            double angrad = Math.toRadians(angle);<a name="line.1127"></a>
<FONT color="green">1128</FONT>            double x = Math.cos(angrad) * length * bounds.getWidth() / 2;<a name="line.1128"></a>
<FONT color="green">1129</FONT>            double y = -Math.sin(angrad) * length * bounds.getHeight() / 2;<a name="line.1129"></a>
<FONT color="green">1130</FONT>    <a name="line.1130"></a>
<FONT color="green">1131</FONT>            return new Point2D.Double(bounds.getX() + x + bounds.getWidth() / 2,<a name="line.1131"></a>
<FONT color="green">1132</FONT>                    bounds.getY() + y + bounds.getHeight() / 2);<a name="line.1132"></a>
<FONT color="green">1133</FONT>        }<a name="line.1133"></a>
<FONT color="green">1134</FONT>    <a name="line.1134"></a>
<FONT color="green">1135</FONT>        /**<a name="line.1135"></a>
<FONT color="green">1136</FONT>         * Draws the plot on a Java 2D graphics device (such as the screen or a<a name="line.1136"></a>
<FONT color="green">1137</FONT>         * printer).<a name="line.1137"></a>
<FONT color="green">1138</FONT>         *<a name="line.1138"></a>
<FONT color="green">1139</FONT>         * @param g2  the graphics device.<a name="line.1139"></a>
<FONT color="green">1140</FONT>         * @param area  the area within which the plot should be drawn.<a name="line.1140"></a>
<FONT color="green">1141</FONT>         * @param anchor  the anchor point (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.1141"></a>
<FONT color="green">1142</FONT>         * @param parentState  the state from the parent plot, if there is one.<a name="line.1142"></a>
<FONT color="green">1143</FONT>         * @param info  collects info about the drawing.<a name="line.1143"></a>
<FONT color="green">1144</FONT>         */<a name="line.1144"></a>
<FONT color="green">1145</FONT>        public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,<a name="line.1145"></a>
<FONT color="green">1146</FONT>                PlotState parentState, PlotRenderingInfo info) {<a name="line.1146"></a>
<FONT color="green">1147</FONT>    <a name="line.1147"></a>
<FONT color="green">1148</FONT>            // adjust for insets...<a name="line.1148"></a>
<FONT color="green">1149</FONT>            RectangleInsets insets = getInsets();<a name="line.1149"></a>
<FONT color="green">1150</FONT>            insets.trim(area);<a name="line.1150"></a>
<FONT color="green">1151</FONT>    <a name="line.1151"></a>
<FONT color="green">1152</FONT>            if (info != null) {<a name="line.1152"></a>
<FONT color="green">1153</FONT>                info.setPlotArea(area);<a name="line.1153"></a>
<FONT color="green">1154</FONT>                info.setDataArea(area);<a name="line.1154"></a>
<FONT color="green">1155</FONT>            }<a name="line.1155"></a>
<FONT color="green">1156</FONT>    <a name="line.1156"></a>
<FONT color="green">1157</FONT>            drawBackground(g2, area);<a name="line.1157"></a>
<FONT color="green">1158</FONT>            drawOutline(g2, area);<a name="line.1158"></a>
<FONT color="green">1159</FONT>    <a name="line.1159"></a>
<FONT color="green">1160</FONT>            Shape savedClip = g2.getClip();<a name="line.1160"></a>
<FONT color="green">1161</FONT>    <a name="line.1161"></a>
<FONT color="green">1162</FONT>            g2.clip(area);<a name="line.1162"></a>
<FONT color="green">1163</FONT>            Composite originalComposite = g2.getComposite();<a name="line.1163"></a>
<FONT color="green">1164</FONT>            g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,<a name="line.1164"></a>
<FONT color="green">1165</FONT>                    getForegroundAlpha()));<a name="line.1165"></a>
<FONT color="green">1166</FONT>    <a name="line.1166"></a>
<FONT color="green">1167</FONT>            if (!DatasetUtilities.isEmptyOrNull(this.dataset)) {<a name="line.1167"></a>
<FONT color="green">1168</FONT>                int seriesCount = 0, catCount = 0;<a name="line.1168"></a>
<FONT color="green">1169</FONT>    <a name="line.1169"></a>
<FONT color="green">1170</FONT>                if (this.dataExtractOrder == TableOrder.BY_ROW) {<a name="line.1170"></a>
<FONT color="green">1171</FONT>                    seriesCount = this.dataset.getRowCount();<a name="line.1171"></a>
<FONT color="green">1172</FONT>                    catCount = this.dataset.getColumnCount();<a name="line.1172"></a>
<FONT color="green">1173</FONT>                }<a name="line.1173"></a>
<FONT color="green">1174</FONT>                else {<a name="line.1174"></a>
<FONT color="green">1175</FONT>                    seriesCount = this.dataset.getColumnCount();<a name="line.1175"></a>
<FONT color="green">1176</FONT>                    catCount = this.dataset.getRowCount();<a name="line.1176"></a>
<FONT color="green">1177</FONT>                }<a name="line.1177"></a>
<FONT color="green">1178</FONT>    <a name="line.1178"></a>
<FONT color="green">1179</FONT>                // ensure we have a maximum value to use on the axes<a name="line.1179"></a>
<FONT color="green">1180</FONT>                if (this.maxValue == DEFAULT_MAX_VALUE)<a name="line.1180"></a>
<FONT color="green">1181</FONT>                    calculateMaxValue(seriesCount, catCount);<a name="line.1181"></a>
<FONT color="green">1182</FONT>    <a name="line.1182"></a>
<FONT color="green">1183</FONT>                // Next, setup the plot area<a name="line.1183"></a>
<FONT color="green">1184</FONT>    <a name="line.1184"></a>
<FONT color="green">1185</FONT>                // adjust the plot area by the interior spacing value<a name="line.1185"></a>
<FONT color="green">1186</FONT>    <a name="line.1186"></a>
<FONT color="green">1187</FONT>                double gapHorizontal = area.getWidth() * getInteriorGap();<a name="line.1187"></a>
<FONT color="green">1188</FONT>                double gapVertical = area.getHeight() * getInteriorGap();<a name="line.1188"></a>
<FONT color="green">1189</FONT>    <a name="line.1189"></a>
<FONT color="green">1190</FONT>                double X = area.getX() + gapHorizontal / 2;<a name="line.1190"></a>
<FONT color="green">1191</FONT>                double Y = area.getY() + gapVertical / 2;<a name="line.1191"></a>
<FONT color="green">1192</FONT>                double W = area.getWidth() - gapHorizontal;<a name="line.1192"></a>
<FONT color="green">1193</FONT>                double H = area.getHeight() - gapVertical;<a name="line.1193"></a>
<FONT color="green">1194</FONT>    <a name="line.1194"></a>
<FONT color="green">1195</FONT>                double headW = area.getWidth() * this.headPercent;<a name="line.1195"></a>
<FONT color="green">1196</FONT>                double headH = area.getHeight() * this.headPercent;<a name="line.1196"></a>
<FONT color="green">1197</FONT>    <a name="line.1197"></a>
<FONT color="green">1198</FONT>                // make the chart area a square<a name="line.1198"></a>
<FONT color="green">1199</FONT>                double min = Math.min(W, H) / 2;<a name="line.1199"></a>
<FONT color="green">1200</FONT>                X = (X + X + W) / 2 - min;<a name="line.1200"></a>
<FONT color="green">1201</FONT>                Y = (Y + Y + H) / 2 - min;<a name="line.1201"></a>
<FONT color="green">1202</FONT>                W = 2 * min;<a name="line.1202"></a>
<FONT color="green">1203</FONT>                H = 2 * min;<a name="line.1203"></a>
<FONT color="green">1204</FONT>    <a name="line.1204"></a>
<FONT color="green">1205</FONT>                Point2D  centre = new Point2D.Double(X + W / 2, Y + H / 2);<a name="line.1205"></a>
<FONT color="green">1206</FONT>                Rectangle2D radarArea = new Rectangle2D.Double(X, Y, W, H);<a name="line.1206"></a>
<FONT color="green">1207</FONT>    <a name="line.1207"></a>
<FONT color="green">1208</FONT>                // draw the axis and category label<a name="line.1208"></a>
<FONT color="green">1209</FONT>                for (int cat = 0; cat &lt; catCount; cat++) {<a name="line.1209"></a>
<FONT color="green">1210</FONT>                    double angle = getStartAngle()<a name="line.1210"></a>
<FONT color="green">1211</FONT>                            + (getDirection().getFactor() * cat * 360 / catCount);<a name="line.1211"></a>
<FONT color="green">1212</FONT>    <a name="line.1212"></a>
<FONT color="green">1213</FONT>                    Point2D endPoint = getWebPoint(radarArea, angle, 1);<a name="line.1213"></a>
<FONT color="green">1214</FONT>                                                         // 1 = end of axis<a name="line.1214"></a>
<FONT color="green">1215</FONT>                    Line2D  line = new Line2D.Double(centre, endPoint);<a name="line.1215"></a>
<FONT color="green">1216</FONT>                    g2.setPaint(this.axisLinePaint);<a name="line.1216"></a>
<FONT color="green">1217</FONT>                    g2.setStroke(this.axisLineStroke);<a name="line.1217"></a>
<FONT color="green">1218</FONT>                    g2.draw(line);<a name="line.1218"></a>
<FONT color="green">1219</FONT>                    drawLabel(g2, radarArea, 0.0, cat, angle, 360.0 / catCount);<a name="line.1219"></a>
<FONT color="green">1220</FONT>                }<a name="line.1220"></a>
<FONT color="green">1221</FONT>    <a name="line.1221"></a>
<FONT color="green">1222</FONT>                // Now actually plot each of the series polygons..<a name="line.1222"></a>
<FONT color="green">1223</FONT>                for (int series = 0; series &lt; seriesCount; series++) {<a name="line.1223"></a>
<FONT color="green">1224</FONT>                    drawRadarPoly(g2, radarArea, centre, info, series, catCount,<a name="line.1224"></a>
<FONT color="green">1225</FONT>                            headH, headW);<a name="line.1225"></a>
<FONT color="green">1226</FONT>                }<a name="line.1226"></a>
<FONT color="green">1227</FONT>            }<a name="line.1227"></a>
<FONT color="green">1228</FONT>            else {<a name="line.1228"></a>
<FONT color="green">1229</FONT>                drawNoDataMessage(g2, area);<a name="line.1229"></a>
<FONT color="green">1230</FONT>            }<a name="line.1230"></a>
<FONT color="green">1231</FONT>            g2.setClip(savedClip);<a name="line.1231"></a>
<FONT color="green">1232</FONT>            g2.setComposite(originalComposite);<a name="line.1232"></a>
<FONT color="green">1233</FONT>            drawOutline(g2, area);<a name="line.1233"></a>
<FONT color="green">1234</FONT>        }<a name="line.1234"></a>
<FONT color="green">1235</FONT>    <a name="line.1235"></a>
<FONT color="green">1236</FONT>        /**<a name="line.1236"></a>
<FONT color="green">1237</FONT>         * loop through each of the series to get the maximum value<a name="line.1237"></a>
<FONT color="green">1238</FONT>         * on each category axis<a name="line.1238"></a>
<FONT color="green">1239</FONT>         *<a name="line.1239"></a>
<FONT color="green">1240</FONT>         * @param seriesCount  the number of series<a name="line.1240"></a>
<FONT color="green">1241</FONT>         * @param catCount  the number of categories<a name="line.1241"></a>
<FONT color="green">1242</FONT>         */<a name="line.1242"></a>
<FONT color="green">1243</FONT>        private void calculateMaxValue(int seriesCount, int catCount) {<a name="line.1243"></a>
<FONT color="green">1244</FONT>            double v = 0;<a name="line.1244"></a>
<FONT color="green">1245</FONT>            Number nV = null;<a name="line.1245"></a>
<FONT color="green">1246</FONT>    <a name="line.1246"></a>
<FONT color="green">1247</FONT>            for (int seriesIndex = 0; seriesIndex &lt; seriesCount; seriesIndex++) {<a name="line.1247"></a>
<FONT color="green">1248</FONT>                for (int catIndex = 0; catIndex &lt; catCount; catIndex++) {<a name="line.1248"></a>
<FONT color="green">1249</FONT>                    nV = getPlotValue(seriesIndex, catIndex);<a name="line.1249"></a>
<FONT color="green">1250</FONT>                    if (nV != null) {<a name="line.1250"></a>
<FONT color="green">1251</FONT>                        v = nV.doubleValue();<a name="line.1251"></a>
<FONT color="green">1252</FONT>                        if (v &gt; this.maxValue) {<a name="line.1252"></a>
<FONT color="green">1253</FONT>                            this.maxValue = v;<a name="line.1253"></a>
<FONT color="green">1254</FONT>                        }<a name="line.1254"></a>
<FONT color="green">1255</FONT>                    }<a name="line.1255"></a>
<FONT color="green">1256</FONT>                }<a name="line.1256"></a>
<FONT color="green">1257</FONT>            }<a name="line.1257"></a>
<FONT color="green">1258</FONT>        }<a name="line.1258"></a>
<FONT color="green">1259</FONT>    <a name="line.1259"></a>
<FONT color="green">1260</FONT>        /**<a name="line.1260"></a>
<FONT color="green">1261</FONT>         * Draws a radar plot polygon.<a name="line.1261"></a>
<FONT color="green">1262</FONT>         *<a name="line.1262"></a>
<FONT color="green">1263</FONT>         * @param g2 the graphics device.<a name="line.1263"></a>
<FONT color="green">1264</FONT>         * @param plotArea the area we are plotting in (already adjusted).<a name="line.1264"></a>
<FONT color="green">1265</FONT>         * @param centre the centre point of the radar axes<a name="line.1265"></a>
<FONT color="green">1266</FONT>         * @param info chart rendering info.<a name="line.1266"></a>
<FONT color="green">1267</FONT>         * @param series the series within the dataset we are plotting<a name="line.1267"></a>
<FONT color="green">1268</FONT>         * @param catCount the number of categories per radar plot<a name="line.1268"></a>
<FONT color="green">1269</FONT>         * @param headH the data point height<a name="line.1269"></a>
<FONT color="green">1270</FONT>         * @param headW the data point width<a name="line.1270"></a>
<FONT color="green">1271</FONT>         */<a name="line.1271"></a>
<FONT color="green">1272</FONT>        protected void drawRadarPoly(Graphics2D g2,<a name="line.1272"></a>
<FONT color="green">1273</FONT>                                     Rectangle2D plotArea,<a name="line.1273"></a>
<FONT color="green">1274</FONT>                                     Point2D centre,<a name="line.1274"></a>
<FONT color="green">1275</FONT>                                     PlotRenderingInfo info,<a name="line.1275"></a>
<FONT color="green">1276</FONT>                                     int series, int catCount,<a name="line.1276"></a>
<FONT color="green">1277</FONT>                                     double headH, double headW) {<a name="line.1277"></a>
<FONT color="green">1278</FONT>    <a name="line.1278"></a>
<FONT color="green">1279</FONT>            Polygon polygon = new Polygon();<a name="line.1279"></a>
<FONT color="green">1280</FONT>    <a name="line.1280"></a>
<FONT color="green">1281</FONT>            EntityCollection entities = null;<a name="line.1281"></a>
<FONT color="green">1282</FONT>            if (info != null) {<a name="line.1282"></a>
<FONT color="green">1283</FONT>                entities = info.getOwner().getEntityCollection();<a name="line.1283"></a>
<FONT color="green">1284</FONT>            }<a name="line.1284"></a>
<FONT color="green">1285</FONT>    <a name="line.1285"></a>
<FONT color="green">1286</FONT>            // plot the data...<a name="line.1286"></a>
<FONT color="green">1287</FONT>            for (int cat = 0; cat &lt; catCount; cat++) {<a name="line.1287"></a>
<FONT color="green">1288</FONT>    <a name="line.1288"></a>
<FONT color="green">1289</FONT>                Number dataValue = getPlotValue(series, cat);<a name="line.1289"></a>
<FONT color="green">1290</FONT>    <a name="line.1290"></a>
<FONT color="green">1291</FONT>                if (dataValue != null) {<a name="line.1291"></a>
<FONT color="green">1292</FONT>                    double value = dataValue.doubleValue();<a name="line.1292"></a>
<FONT color="green">1293</FONT>    <a name="line.1293"></a>
<FONT color="green">1294</FONT>                    if (value &gt;= 0) { // draw the polygon series...<a name="line.1294"></a>
<FONT color="green">1295</FONT>    <a name="line.1295"></a>
<FONT color="green">1296</FONT>                        // Finds our starting angle from the centre for this axis<a name="line.1296"></a>
<FONT color="green">1297</FONT>    <a name="line.1297"></a>
<FONT color="green">1298</FONT>                        double angle = getStartAngle()<a name="line.1298"></a>
<FONT color="green">1299</FONT>                            + (getDirection().getFactor() * cat * 360 / catCount);<a name="line.1299"></a>
<FONT color="green">1300</FONT>    <a name="line.1300"></a>
<FONT color="green">1301</FONT>                        // The following angle calc will ensure there isn't a top<a name="line.1301"></a>
<FONT color="green">1302</FONT>                        // vertical axis - this may be useful if you don't want any<a name="line.1302"></a>
<FONT color="green">1303</FONT>                        // given criteria to 'appear' move important than the<a name="line.1303"></a>
<FONT color="green">1304</FONT>                        // others..<a name="line.1304"></a>
<FONT color="green">1305</FONT>                        //  + (getDirection().getFactor()<a name="line.1305"></a>
<FONT color="green">1306</FONT>                        //        * (cat + 0.5) * 360 / catCount);<a name="line.1306"></a>
<FONT color="green">1307</FONT>    <a name="line.1307"></a>
<FONT color="green">1308</FONT>                        // find the point at the appropriate distance end point<a name="line.1308"></a>
<FONT color="green">1309</FONT>                        // along the axis/angle identified above and add it to the<a name="line.1309"></a>
<FONT color="green">1310</FONT>                        // polygon<a name="line.1310"></a>
<FONT color="green">1311</FONT>    <a name="line.1311"></a>
<FONT color="green">1312</FONT>                        Point2D point = getWebPoint(plotArea, angle,<a name="line.1312"></a>
<FONT color="green">1313</FONT>                                value / this.maxValue);<a name="line.1313"></a>
<FONT color="green">1314</FONT>                        polygon.addPoint((int) point.getX(), (int) point.getY());<a name="line.1314"></a>
<FONT color="green">1315</FONT>    <a name="line.1315"></a>
<FONT color="green">1316</FONT>                        // put an elipse at the point being plotted..<a name="line.1316"></a>
<FONT color="green">1317</FONT>    <a name="line.1317"></a>
<FONT color="green">1318</FONT>                        Paint paint = getSeriesPaint(series);<a name="line.1318"></a>
<FONT color="green">1319</FONT>                        Paint outlinePaint = getSeriesOutlinePaint(series);<a name="line.1319"></a>
<FONT color="green">1320</FONT>                        Stroke outlineStroke = getSeriesOutlineStroke(series);<a name="line.1320"></a>
<FONT color="green">1321</FONT>    <a name="line.1321"></a>
<FONT color="green">1322</FONT>                        Ellipse2D head = new Ellipse2D.Double(point.getX()<a name="line.1322"></a>
<FONT color="green">1323</FONT>                                - headW / 2, point.getY() - headH / 2, headW,<a name="line.1323"></a>
<FONT color="green">1324</FONT>                                headH);<a name="line.1324"></a>
<FONT color="green">1325</FONT>                        g2.setPaint(paint);<a name="line.1325"></a>
<FONT color="green">1326</FONT>                        g2.fill(head);<a name="line.1326"></a>
<FONT color="green">1327</FONT>                        g2.setStroke(outlineStroke);<a name="line.1327"></a>
<FONT color="green">1328</FONT>                        g2.setPaint(outlinePaint);<a name="line.1328"></a>
<FONT color="green">1329</FONT>                        g2.draw(head);<a name="line.1329"></a>
<FONT color="green">1330</FONT>    <a name="line.1330"></a>
<FONT color="green">1331</FONT>                        if (entities != null) {<a name="line.1331"></a>
<FONT color="green">1332</FONT>                            int row = 0; int col = 0;<a name="line.1332"></a>
<FONT color="green">1333</FONT>                            if (this.dataExtractOrder == TableOrder.BY_ROW) {<a name="line.1333"></a>
<FONT color="green">1334</FONT>                                row = series;<a name="line.1334"></a>
<FONT color="green">1335</FONT>                                col = cat;<a name="line.1335"></a>
<FONT color="green">1336</FONT>                            }<a name="line.1336"></a>
<FONT color="green">1337</FONT>                            else {<a name="line.1337"></a>
<FONT color="green">1338</FONT>                                row = cat;<a name="line.1338"></a>
<FONT color="green">1339</FONT>                                col = series;<a name="line.1339"></a>
<FONT color="green">1340</FONT>                            }<a name="line.1340"></a>
<FONT color="green">1341</FONT>                            String tip = null;<a name="line.1341"></a>
<FONT color="green">1342</FONT>                            if (this.toolTipGenerator != null) {<a name="line.1342"></a>
<FONT color="green">1343</FONT>                                tip = this.toolTipGenerator.generateToolTip(<a name="line.1343"></a>
<FONT color="green">1344</FONT>                                        this.dataset, row, col);<a name="line.1344"></a>
<FONT color="green">1345</FONT>                            }<a name="line.1345"></a>
<FONT color="green">1346</FONT>    <a name="line.1346"></a>
<FONT color="green">1347</FONT>                            String url = null;<a name="line.1347"></a>
<FONT color="green">1348</FONT>                            if (this.urlGenerator != null) {<a name="line.1348"></a>
<FONT color="green">1349</FONT>                                url = this.urlGenerator.generateURL(this.dataset,<a name="line.1349"></a>
<FONT color="green">1350</FONT>                                       row, col);<a name="line.1350"></a>
<FONT color="green">1351</FONT>                            }<a name="line.1351"></a>
<FONT color="green">1352</FONT>    <a name="line.1352"></a>
<FONT color="green">1353</FONT>                            Shape area = new Rectangle(<a name="line.1353"></a>
<FONT color="green">1354</FONT>                                    (int) (point.getX() - headW),<a name="line.1354"></a>
<FONT color="green">1355</FONT>                                    (int) (point.getY() - headH),<a name="line.1355"></a>
<FONT color="green">1356</FONT>                                    (int) (headW * 2), (int) (headH * 2));<a name="line.1356"></a>
<FONT color="green">1357</FONT>                            CategoryItemEntity entity = new CategoryItemEntity(<a name="line.1357"></a>
<FONT color="green">1358</FONT>                                    area, tip, url, this.dataset,<a name="line.1358"></a>
<FONT color="green">1359</FONT>                                    this.dataset.getRowKey(row),<a name="line.1359"></a>
<FONT color="green">1360</FONT>                                    this.dataset.getColumnKey(col));<a name="line.1360"></a>
<FONT color="green">1361</FONT>                            entities.add(entity);<a name="line.1361"></a>
<FONT color="green">1362</FONT>                        }<a name="line.1362"></a>
<FONT color="green">1363</FONT>    <a name="line.1363"></a>
<FONT color="green">1364</FONT>                    }<a name="line.1364"></a>
<FONT color="green">1365</FONT>                }<a name="line.1365"></a>
<FONT color="green">1366</FONT>            }<a name="line.1366"></a>
<FONT color="green">1367</FONT>            // Plot the polygon<a name="line.1367"></a>
<FONT color="green">1368</FONT>    <a name="line.1368"></a>
<FONT color="green">1369</FONT>            Paint paint = getSeriesPaint(series);<a name="line.1369"></a>
<FONT color="green">1370</FONT>            g2.setPaint(paint);<a name="line.1370"></a>
<FONT color="green">1371</FONT>            g2.setStroke(getSeriesOutlineStroke(series));<a name="line.1371"></a>
<FONT color="green">1372</FONT>            g2.draw(polygon);<a name="line.1372"></a>
<FONT color="green">1373</FONT>    <a name="line.1373"></a>
<FONT color="green">1374</FONT>            // Lastly, fill the web polygon if this is required<a name="line.1374"></a>
<FONT color="green">1375</FONT>    <a name="line.1375"></a>
<FONT color="green">1376</FONT>            if (this.webFilled) {<a name="line.1376"></a>
<FONT color="green">1377</FONT>                g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,<a name="line.1377"></a>
<FONT color="green">1378</FONT>                        0.1f));<a name="line.1378"></a>
<FONT color="green">1379</FONT>                g2.fill(polygon);<a name="line.1379"></a>
<FONT color="green">1380</FONT>                g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,<a name="line.1380"></a>
<FONT color="green">1381</FONT>                        getForegroundAlpha()));<a name="line.1381"></a>
<FONT color="green">1382</FONT>            }<a name="line.1382"></a>
<FONT color="green">1383</FONT>        }<a name="line.1383"></a>
<FONT color="green">1384</FONT>    <a name="line.1384"></a>
<FONT color="green">1385</FONT>        /**<a name="line.1385"></a>
<FONT color="green">1386</FONT>         * Returns the value to be plotted at the interseries of the<a name="line.1386"></a>
<FONT color="green">1387</FONT>         * series and the category.  This allows us to plot<a name="line.1387"></a>
<FONT color="green">1388</FONT>         * &lt;code&gt;BY_ROW&lt;/code&gt; or &lt;code&gt;BY_COLUMN&lt;/code&gt; which basically is just<a name="line.1388"></a>
<FONT color="green">1389</FONT>         * reversing the definition of the categories and data series being<a name="line.1389"></a>
<FONT color="green">1390</FONT>         * plotted.<a name="line.1390"></a>
<FONT color="green">1391</FONT>         *<a name="line.1391"></a>
<FONT color="green">1392</FONT>         * @param series the series to be plotted.<a name="line.1392"></a>
<FONT color="green">1393</FONT>         * @param cat the category within the series to be plotted.<a name="line.1393"></a>
<FONT color="green">1394</FONT>         *<a name="line.1394"></a>
<FONT color="green">1395</FONT>         * @return The value to be plotted (possibly &lt;code&gt;null&lt;/code&gt;).<a name="line.1395"></a>
<FONT color="green">1396</FONT>         *<a name="line.1396"></a>
<FONT color="green">1397</FONT>         * @see #getDataExtractOrder()<a name="line.1397"></a>
<FONT color="green">1398</FONT>         */<a name="line.1398"></a>
<FONT color="green">1399</FONT>        protected Number getPlotValue(int series, int cat) {<a name="line.1399"></a>
<FONT color="green">1400</FONT>            Number value = null;<a name="line.1400"></a>
<FONT color="green">1401</FONT>            if (this.dataExtractOrder == TableOrder.BY_ROW) {<a name="line.1401"></a>
<FONT color="green">1402</FONT>                value = this.dataset.getValue(series, cat);<a name="line.1402"></a>
<FONT color="green">1403</FONT>            }<a name="line.1403"></a>
<FONT color="green">1404</FONT>            else if (this.dataExtractOrder == TableOrder.BY_COLUMN) {<a name="line.1404"></a>
<FONT color="green">1405</FONT>                value = this.dataset.getValue(cat, series);<a name="line.1405"></a>
<FONT color="green">1406</FONT>            }<a name="line.1406"></a>
<FONT color="green">1407</FONT>            return value;<a name="line.1407"></a>
<FONT color="green">1408</FONT>        }<a name="line.1408"></a>
<FONT color="green">1409</FONT>    <a name="line.1409"></a>
<FONT color="green">1410</FONT>        /**<a name="line.1410"></a>
<FONT color="green">1411</FONT>         * Draws the label for one axis.<a name="line.1411"></a>
<FONT color="green">1412</FONT>         *<a name="line.1412"></a>
<FONT color="green">1413</FONT>         * @param g2  the graphics device.<a name="line.1413"></a>
<FONT color="green">1414</FONT>         * @param plotArea  the plot area<a name="line.1414"></a>
<FONT color="green">1415</FONT>         * @param value  the value of the label (ignored).<a name="line.1415"></a>
<FONT color="green">1416</FONT>         * @param cat  the category (zero-based index).<a name="line.1416"></a>
<FONT color="green">1417</FONT>         * @param startAngle  the starting angle.<a name="line.1417"></a>
<FONT color="green">1418</FONT>         * @param extent  the extent of the arc.<a name="line.1418"></a>
<FONT color="green">1419</FONT>         */<a name="line.1419"></a>
<FONT color="green">1420</FONT>        protected void drawLabel(Graphics2D g2, Rectangle2D plotArea, double value,<a name="line.1420"></a>
<FONT color="green">1421</FONT>                                 int cat, double startAngle, double extent) {<a name="line.1421"></a>
<FONT color="green">1422</FONT>            FontRenderContext frc = g2.getFontRenderContext();<a name="line.1422"></a>
<FONT color="green">1423</FONT>    <a name="line.1423"></a>
<FONT color="green">1424</FONT>            String label = null;<a name="line.1424"></a>
<FONT color="green">1425</FONT>            if (this.dataExtractOrder == TableOrder.BY_ROW) {<a name="line.1425"></a>
<FONT color="green">1426</FONT>                // if series are in rows, then the categories are the column keys<a name="line.1426"></a>
<FONT color="green">1427</FONT>                label = this.labelGenerator.generateColumnLabel(this.dataset, cat);<a name="line.1427"></a>
<FONT color="green">1428</FONT>            }<a name="line.1428"></a>
<FONT color="green">1429</FONT>            else {<a name="line.1429"></a>
<FONT color="green">1430</FONT>                // if series are in columns, then the categories are the row keys<a name="line.1430"></a>
<FONT color="green">1431</FONT>                label = this.labelGenerator.generateRowLabel(this.dataset, cat);<a name="line.1431"></a>
<FONT color="green">1432</FONT>            }<a name="line.1432"></a>
<FONT color="green">1433</FONT>    <a name="line.1433"></a>
<FONT color="green">1434</FONT>            Rectangle2D labelBounds = getLabelFont().getStringBounds(label, frc);<a name="line.1434"></a>
<FONT color="green">1435</FONT>            LineMetrics lm = getLabelFont().getLineMetrics(label, frc);<a name="line.1435"></a>
<FONT color="green">1436</FONT>            double ascent = lm.getAscent();<a name="line.1436"></a>
<FONT color="green">1437</FONT>    <a name="line.1437"></a>
<FONT color="green">1438</FONT>            Point2D labelLocation = calculateLabelLocation(labelBounds, ascent,<a name="line.1438"></a>
<FONT color="green">1439</FONT>                    plotArea, startAngle);<a name="line.1439"></a>
<FONT color="green">1440</FONT>    <a name="line.1440"></a>
<FONT color="green">1441</FONT>            Composite saveComposite = g2.getComposite();<a name="line.1441"></a>
<FONT color="green">1442</FONT>    <a name="line.1442"></a>
<FONT color="green">1443</FONT>            g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,<a name="line.1443"></a>
<FONT color="green">1444</FONT>                    1.0f));<a name="line.1444"></a>
<FONT color="green">1445</FONT>            g2.setPaint(getLabelPaint());<a name="line.1445"></a>
<FONT color="green">1446</FONT>            g2.setFont(getLabelFont());<a name="line.1446"></a>
<FONT color="green">1447</FONT>            g2.drawString(label, (float) labelLocation.getX(),<a name="line.1447"></a>
<FONT color="green">1448</FONT>                    (float) labelLocation.getY());<a name="line.1448"></a>
<FONT color="green">1449</FONT>            g2.setComposite(saveComposite);<a name="line.1449"></a>
<FONT color="green">1450</FONT>        }<a name="line.1450"></a>
<FONT color="green">1451</FONT>    <a name="line.1451"></a>
<FONT color="green">1452</FONT>        /**<a name="line.1452"></a>
<FONT color="green">1453</FONT>         * Returns the location for a label<a name="line.1453"></a>
<FONT color="green">1454</FONT>         *<a name="line.1454"></a>
<FONT color="green">1455</FONT>         * @param labelBounds the label bounds.<a name="line.1455"></a>
<FONT color="green">1456</FONT>         * @param ascent the ascent (height of font).<a name="line.1456"></a>
<FONT color="green">1457</FONT>         * @param plotArea the plot area<a name="line.1457"></a>
<FONT color="green">1458</FONT>         * @param startAngle the start angle for the pie series.<a name="line.1458"></a>
<FONT color="green">1459</FONT>         *<a name="line.1459"></a>
<FONT color="green">1460</FONT>         * @return The location for a label.<a name="line.1460"></a>
<FONT color="green">1461</FONT>         */<a name="line.1461"></a>
<FONT color="green">1462</FONT>        protected Point2D calculateLabelLocation(Rectangle2D labelBounds,<a name="line.1462"></a>
<FONT color="green">1463</FONT>                                                 double ascent,<a name="line.1463"></a>
<FONT color="green">1464</FONT>                                                 Rectangle2D plotArea,<a name="line.1464"></a>
<FONT color="green">1465</FONT>                                                 double startAngle)<a name="line.1465"></a>
<FONT color="green">1466</FONT>        {<a name="line.1466"></a>
<FONT color="green">1467</FONT>            Arc2D arc1 = new Arc2D.Double(plotArea, startAngle, 0, Arc2D.OPEN);<a name="line.1467"></a>
<FONT color="green">1468</FONT>            Point2D point1 = arc1.getEndPoint();<a name="line.1468"></a>
<FONT color="green">1469</FONT>    <a name="line.1469"></a>
<FONT color="green">1470</FONT>            double deltaX = -(point1.getX() - plotArea.getCenterX())<a name="line.1470"></a>
<FONT color="green">1471</FONT>                            * this.axisLabelGap;<a name="line.1471"></a>
<FONT color="green">1472</FONT>            double deltaY = -(point1.getY() - plotArea.getCenterY())<a name="line.1472"></a>
<FONT color="green">1473</FONT>                            * this.axisLabelGap;<a name="line.1473"></a>
<FONT color="green">1474</FONT>    <a name="line.1474"></a>
<FONT color="green">1475</FONT>            double labelX = point1.getX() - deltaX;<a name="line.1475"></a>
<FONT color="green">1476</FONT>            double labelY = point1.getY() - deltaY;<a name="line.1476"></a>
<FONT color="green">1477</FONT>    <a name="line.1477"></a>
<FONT color="green">1478</FONT>            if (labelX &lt; plotArea.getCenterX()) {<a name="line.1478"></a>
<FONT color="green">1479</FONT>                labelX -= labelBounds.getWidth();<a name="line.1479"></a>
<FONT color="green">1480</FONT>            }<a name="line.1480"></a>
<FONT color="green">1481</FONT>    <a name="line.1481"></a>
<FONT color="green">1482</FONT>            if (labelX == plotArea.getCenterX()) {<a name="line.1482"></a>
<FONT color="green">1483</FONT>                labelX -= labelBounds.getWidth() / 2;<a name="line.1483"></a>
<FONT color="green">1484</FONT>            }<a name="line.1484"></a>
<FONT color="green">1485</FONT>    <a name="line.1485"></a>
<FONT color="green">1486</FONT>            if (labelY &gt; plotArea.getCenterY()) {<a name="line.1486"></a>
<FONT color="green">1487</FONT>                labelY += ascent;<a name="line.1487"></a>
<FONT color="green">1488</FONT>            }<a name="line.1488"></a>
<FONT color="green">1489</FONT>    <a name="line.1489"></a>
<FONT color="green">1490</FONT>            return new Point2D.Double(labelX, labelY);<a name="line.1490"></a>
<FONT color="green">1491</FONT>        }<a name="line.1491"></a>
<FONT color="green">1492</FONT>    <a name="line.1492"></a>
<FONT color="green">1493</FONT>        /**<a name="line.1493"></a>
<FONT color="green">1494</FONT>         * Tests this plot for equality with an arbitrary object.<a name="line.1494"></a>
<FONT color="green">1495</FONT>         *<a name="line.1495"></a>
<FONT color="green">1496</FONT>         * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.1496"></a>
<FONT color="green">1497</FONT>         *<a name="line.1497"></a>
<FONT color="green">1498</FONT>         * @return A boolean.<a name="line.1498"></a>
<FONT color="green">1499</FONT>         */<a name="line.1499"></a>
<FONT color="green">1500</FONT>        public boolean equals(Object obj) {<a name="line.1500"></a>
<FONT color="green">1501</FONT>            if (obj == this) {<a name="line.1501"></a>
<FONT color="green">1502</FONT>                return true;<a name="line.1502"></a>
<FONT color="green">1503</FONT>            }<a name="line.1503"></a>
<FONT color="green">1504</FONT>            if (!(obj instanceof SpiderWebPlot)) {<a name="line.1504"></a>
<FONT color="green">1505</FONT>                return false;<a name="line.1505"></a>
<FONT color="green">1506</FONT>            }<a name="line.1506"></a>
<FONT color="green">1507</FONT>            if (!super.equals(obj)) {<a name="line.1507"></a>
<FONT color="green">1508</FONT>                return false;<a name="line.1508"></a>
<FONT color="green">1509</FONT>            }<a name="line.1509"></a>
<FONT color="green">1510</FONT>            SpiderWebPlot that = (SpiderWebPlot) obj;<a name="line.1510"></a>
<FONT color="green">1511</FONT>            if (!this.dataExtractOrder.equals(that.dataExtractOrder)) {<a name="line.1511"></a>
<FONT color="green">1512</FONT>                return false;<a name="line.1512"></a>
<FONT color="green">1513</FONT>            }<a name="line.1513"></a>
<FONT color="green">1514</FONT>            if (this.headPercent != that.headPercent) {<a name="line.1514"></a>
<FONT color="green">1515</FONT>                return false;<a name="line.1515"></a>
<FONT color="green">1516</FONT>            }<a name="line.1516"></a>
<FONT color="green">1517</FONT>            if (this.interiorGap != that.interiorGap) {<a name="line.1517"></a>
<FONT color="green">1518</FONT>                return false;<a name="line.1518"></a>
<FONT color="green">1519</FONT>            }<a name="line.1519"></a>
<FONT color="green">1520</FONT>            if (this.startAngle != that.startAngle) {<a name="line.1520"></a>
<FONT color="green">1521</FONT>                return false;<a name="line.1521"></a>
<FONT color="green">1522</FONT>            }<a name="line.1522"></a>
<FONT color="green">1523</FONT>            if (!this.direction.equals(that.direction)) {<a name="line.1523"></a>
<FONT color="green">1524</FONT>                return false;<a name="line.1524"></a>
<FONT color="green">1525</FONT>            }<a name="line.1525"></a>
<FONT color="green">1526</FONT>            if (this.maxValue != that.maxValue) {<a name="line.1526"></a>
<FONT color="green">1527</FONT>                return false;<a name="line.1527"></a>
<FONT color="green">1528</FONT>            }<a name="line.1528"></a>
<FONT color="green">1529</FONT>            if (this.webFilled != that.webFilled) {<a name="line.1529"></a>
<FONT color="green">1530</FONT>                return false;<a name="line.1530"></a>
<FONT color="green">1531</FONT>            }<a name="line.1531"></a>
<FONT color="green">1532</FONT>            if (this.axisLabelGap != that.axisLabelGap) {<a name="line.1532"></a>
<FONT color="green">1533</FONT>                return false;<a name="line.1533"></a>
<FONT color="green">1534</FONT>            }<a name="line.1534"></a>
<FONT color="green">1535</FONT>            if (!PaintUtilities.equal(this.axisLinePaint, that.axisLinePaint)) {<a name="line.1535"></a>
<FONT color="green">1536</FONT>                return false;<a name="line.1536"></a>
<FONT color="green">1537</FONT>            }<a name="line.1537"></a>
<FONT color="green">1538</FONT>            if (!this.axisLineStroke.equals(that.axisLineStroke)) {<a name="line.1538"></a>
<FONT color="green">1539</FONT>                return false;<a name="line.1539"></a>
<FONT color="green">1540</FONT>            }<a name="line.1540"></a>
<FONT color="green">1541</FONT>            if (!ShapeUtilities.equal(this.legendItemShape, that.legendItemShape)) {<a name="line.1541"></a>
<FONT color="green">1542</FONT>                return false;<a name="line.1542"></a>
<FONT color="green">1543</FONT>            }<a name="line.1543"></a>
<FONT color="green">1544</FONT>            if (!PaintUtilities.equal(this.seriesPaint, that.seriesPaint)) {<a name="line.1544"></a>
<FONT color="green">1545</FONT>                return false;<a name="line.1545"></a>
<FONT color="green">1546</FONT>            }<a name="line.1546"></a>
<FONT color="green">1547</FONT>            if (!this.seriesPaintList.equals(that.seriesPaintList)) {<a name="line.1547"></a>
<FONT color="green">1548</FONT>                return false;<a name="line.1548"></a>
<FONT color="green">1549</FONT>            }<a name="line.1549"></a>
<FONT color="green">1550</FONT>            if (!PaintUtilities.equal(this.baseSeriesPaint, that.baseSeriesPaint)) {<a name="line.1550"></a>
<FONT color="green">1551</FONT>                return false;<a name="line.1551"></a>
<FONT color="green">1552</FONT>            }<a name="line.1552"></a>
<FONT color="green">1553</FONT>            if (!PaintUtilities.equal(this.seriesOutlinePaint,<a name="line.1553"></a>
<FONT color="green">1554</FONT>                    that.seriesOutlinePaint)) {<a name="line.1554"></a>
<FONT color="green">1555</FONT>                return false;<a name="line.1555"></a>
<FONT color="green">1556</FONT>            }<a name="line.1556"></a>
<FONT color="green">1557</FONT>            if (!this.seriesOutlinePaintList.equals(that.seriesOutlinePaintList)) {<a name="line.1557"></a>
<FONT color="green">1558</FONT>                return false;<a name="line.1558"></a>
<FONT color="green">1559</FONT>            }<a name="line.1559"></a>
<FONT color="green">1560</FONT>            if (!PaintUtilities.equal(this.baseSeriesOutlinePaint,<a name="line.1560"></a>
<FONT color="green">1561</FONT>                    that.baseSeriesOutlinePaint)) {<a name="line.1561"></a>
<FONT color="green">1562</FONT>                return false;<a name="line.1562"></a>
<FONT color="green">1563</FONT>            }<a name="line.1563"></a>
<FONT color="green">1564</FONT>            if (!ObjectUtilities.equal(this.seriesOutlineStroke,<a name="line.1564"></a>
<FONT color="green">1565</FONT>                    that.seriesOutlineStroke)) {<a name="line.1565"></a>
<FONT color="green">1566</FONT>                return false;<a name="line.1566"></a>
<FONT color="green">1567</FONT>            }<a name="line.1567"></a>
<FONT color="green">1568</FONT>            if (!this.seriesOutlineStrokeList.equals(<a name="line.1568"></a>
<FONT color="green">1569</FONT>                    that.seriesOutlineStrokeList)) {<a name="line.1569"></a>
<FONT color="green">1570</FONT>                return false;<a name="line.1570"></a>
<FONT color="green">1571</FONT>            }<a name="line.1571"></a>
<FONT color="green">1572</FONT>            if (!this.baseSeriesOutlineStroke.equals(<a name="line.1572"></a>
<FONT color="green">1573</FONT>                    that.baseSeriesOutlineStroke)) {<a name="line.1573"></a>
<FONT color="green">1574</FONT>                return false;<a name="line.1574"></a>
<FONT color="green">1575</FONT>            }<a name="line.1575"></a>
<FONT color="green">1576</FONT>            if (!this.labelFont.equals(that.labelFont)) {<a name="line.1576"></a>
<FONT color="green">1577</FONT>                return false;<a name="line.1577"></a>
<FONT color="green">1578</FONT>            }<a name="line.1578"></a>
<FONT color="green">1579</FONT>            if (!PaintUtilities.equal(this.labelPaint, that.labelPaint)) {<a name="line.1579"></a>
<FONT color="green">1580</FONT>                return false;<a name="line.1580"></a>
<FONT color="green">1581</FONT>            }<a name="line.1581"></a>
<FONT color="green">1582</FONT>            if (!this.labelGenerator.equals(that.labelGenerator)) {<a name="line.1582"></a>
<FONT color="green">1583</FONT>                return false;<a name="line.1583"></a>
<FONT color="green">1584</FONT>            }<a name="line.1584"></a>
<FONT color="green">1585</FONT>            if (!ObjectUtilities.equal(this.toolTipGenerator,<a name="line.1585"></a>
<FONT color="green">1586</FONT>                    that.toolTipGenerator)) {<a name="line.1586"></a>
<FONT color="green">1587</FONT>                return false;<a name="line.1587"></a>
<FONT color="green">1588</FONT>            }<a name="line.1588"></a>
<FONT color="green">1589</FONT>            if (!ObjectUtilities.equal(this.urlGenerator,<a name="line.1589"></a>
<FONT color="green">1590</FONT>                    that.urlGenerator)) {<a name="line.1590"></a>
<FONT color="green">1591</FONT>                return false;<a name="line.1591"></a>
<FONT color="green">1592</FONT>            }<a name="line.1592"></a>
<FONT color="green">1593</FONT>            return true;<a name="line.1593"></a>
<FONT color="green">1594</FONT>        }<a name="line.1594"></a>
<FONT color="green">1595</FONT>    <a name="line.1595"></a>
<FONT color="green">1596</FONT>        /**<a name="line.1596"></a>
<FONT color="green">1597</FONT>         * Returns a clone of this plot.<a name="line.1597"></a>
<FONT color="green">1598</FONT>         *<a name="line.1598"></a>
<FONT color="green">1599</FONT>         * @return A clone of this plot.<a name="line.1599"></a>
<FONT color="green">1600</FONT>         *<a name="line.1600"></a>
<FONT color="green">1601</FONT>         * @throws CloneNotSupportedException if the plot cannot be cloned for<a name="line.1601"></a>
<FONT color="green">1602</FONT>         *         any reason.<a name="line.1602"></a>
<FONT color="green">1603</FONT>         */<a name="line.1603"></a>
<FONT color="green">1604</FONT>        public Object clone() throws CloneNotSupportedException {<a name="line.1604"></a>
<FONT color="green">1605</FONT>            SpiderWebPlot clone = (SpiderWebPlot) super.clone();<a name="line.1605"></a>
<FONT color="green">1606</FONT>            clone.legendItemShape = ShapeUtilities.clone(this.legendItemShape);<a name="line.1606"></a>
<FONT color="green">1607</FONT>            clone.seriesPaintList = (PaintList) this.seriesPaintList.clone();<a name="line.1607"></a>
<FONT color="green">1608</FONT>            clone.seriesOutlinePaintList<a name="line.1608"></a>
<FONT color="green">1609</FONT>                    = (PaintList) this.seriesOutlinePaintList.clone();<a name="line.1609"></a>
<FONT color="green">1610</FONT>            clone.seriesOutlineStrokeList<a name="line.1610"></a>
<FONT color="green">1611</FONT>                    = (StrokeList) this.seriesOutlineStrokeList.clone();<a name="line.1611"></a>
<FONT color="green">1612</FONT>            return clone;<a name="line.1612"></a>
<FONT color="green">1613</FONT>        }<a name="line.1613"></a>
<FONT color="green">1614</FONT>    <a name="line.1614"></a>
<FONT color="green">1615</FONT>        /**<a name="line.1615"></a>
<FONT color="green">1616</FONT>         * Provides serialization support.<a name="line.1616"></a>
<FONT color="green">1617</FONT>         *<a name="line.1617"></a>
<FONT color="green">1618</FONT>         * @param stream  the output stream.<a name="line.1618"></a>
<FONT color="green">1619</FONT>         *<a name="line.1619"></a>
<FONT color="green">1620</FONT>         * @throws IOException  if there is an I/O error.<a name="line.1620"></a>
<FONT color="green">1621</FONT>         */<a name="line.1621"></a>
<FONT color="green">1622</FONT>        private void writeObject(ObjectOutputStream stream) throws IOException {<a name="line.1622"></a>
<FONT color="green">1623</FONT>            stream.defaultWriteObject();<a name="line.1623"></a>
<FONT color="green">1624</FONT>    <a name="line.1624"></a>
<FONT color="green">1625</FONT>            SerialUtilities.writeShape(this.legendItemShape, stream);<a name="line.1625"></a>
<FONT color="green">1626</FONT>            SerialUtilities.writePaint(this.seriesPaint, stream);<a name="line.1626"></a>
<FONT color="green">1627</FONT>            SerialUtilities.writePaint(this.baseSeriesPaint, stream);<a name="line.1627"></a>
<FONT color="green">1628</FONT>            SerialUtilities.writePaint(this.seriesOutlinePaint, stream);<a name="line.1628"></a>
<FONT color="green">1629</FONT>            SerialUtilities.writePaint(this.baseSeriesOutlinePaint, stream);<a name="line.1629"></a>
<FONT color="green">1630</FONT>            SerialUtilities.writeStroke(this.seriesOutlineStroke, stream);<a name="line.1630"></a>
<FONT color="green">1631</FONT>            SerialUtilities.writeStroke(this.baseSeriesOutlineStroke, stream);<a name="line.1631"></a>
<FONT color="green">1632</FONT>            SerialUtilities.writePaint(this.labelPaint, stream);<a name="line.1632"></a>
<FONT color="green">1633</FONT>            SerialUtilities.writePaint(this.axisLinePaint, stream);<a name="line.1633"></a>
<FONT color="green">1634</FONT>            SerialUtilities.writeStroke(this.axisLineStroke, stream);<a name="line.1634"></a>
<FONT color="green">1635</FONT>        }<a name="line.1635"></a>
<FONT color="green">1636</FONT>    <a name="line.1636"></a>
<FONT color="green">1637</FONT>        /**<a name="line.1637"></a>
<FONT color="green">1638</FONT>         * Provides serialization support.<a name="line.1638"></a>
<FONT color="green">1639</FONT>         *<a name="line.1639"></a>
<FONT color="green">1640</FONT>         * @param stream  the input stream.<a name="line.1640"></a>
<FONT color="green">1641</FONT>         *<a name="line.1641"></a>
<FONT color="green">1642</FONT>         * @throws IOException  if there is an I/O error.<a name="line.1642"></a>
<FONT color="green">1643</FONT>         * @throws ClassNotFoundException  if there is a classpath problem.<a name="line.1643"></a>
<FONT color="green">1644</FONT>         */<a name="line.1644"></a>
<FONT color="green">1645</FONT>        private void readObject(ObjectInputStream stream) throws IOException,<a name="line.1645"></a>
<FONT color="green">1646</FONT>                ClassNotFoundException {<a name="line.1646"></a>
<FONT color="green">1647</FONT>            stream.defaultReadObject();<a name="line.1647"></a>
<FONT color="green">1648</FONT>    <a name="line.1648"></a>
<FONT color="green">1649</FONT>            this.legendItemShape = SerialUtilities.readShape(stream);<a name="line.1649"></a>
<FONT color="green">1650</FONT>            this.seriesPaint = SerialUtilities.readPaint(stream);<a name="line.1650"></a>
<FONT color="green">1651</FONT>            this.baseSeriesPaint = SerialUtilities.readPaint(stream);<a name="line.1651"></a>
<FONT color="green">1652</FONT>            this.seriesOutlinePaint = SerialUtilities.readPaint(stream);<a name="line.1652"></a>
<FONT color="green">1653</FONT>            this.baseSeriesOutlinePaint = SerialUtilities.readPaint(stream);<a name="line.1653"></a>
<FONT color="green">1654</FONT>            this.seriesOutlineStroke = SerialUtilities.readStroke(stream);<a name="line.1654"></a>
<FONT color="green">1655</FONT>            this.baseSeriesOutlineStroke = SerialUtilities.readStroke(stream);<a name="line.1655"></a>
<FONT color="green">1656</FONT>            this.labelPaint = SerialUtilities.readPaint(stream);<a name="line.1656"></a>
<FONT color="green">1657</FONT>            this.axisLinePaint = SerialUtilities.readPaint(stream);<a name="line.1657"></a>
<FONT color="green">1658</FONT>            this.axisLineStroke = SerialUtilities.readStroke(stream);<a name="line.1658"></a>
<FONT color="green">1659</FONT>            if (this.dataset != null) {<a name="line.1659"></a>
<FONT color="green">1660</FONT>                this.dataset.addChangeListener(this);<a name="line.1660"></a>
<FONT color="green">1661</FONT>            }<a name="line.1661"></a>
<FONT color="green">1662</FONT>        }<a name="line.1662"></a>
<FONT color="green">1663</FONT>    <a name="line.1663"></a>
<FONT color="green">1664</FONT>    }<a name="line.1664"></a>




























































</PRE>
</BODY>
</HTML>
