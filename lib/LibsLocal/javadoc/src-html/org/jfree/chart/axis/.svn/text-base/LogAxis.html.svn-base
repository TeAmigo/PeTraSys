<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ===========================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JFreeChart : a free chart library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ===========================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2009, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     *<a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jfreechart/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it<a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by<a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or<a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but<a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY<a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public<a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,<a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.<a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc.<a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     *<a name="line.26"></a>
<FONT color="green">027</FONT>     * ------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * LogAxis.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * ------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C) Copyright 2006-2009, by Object Refinery Limited and Contributors.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  David Gilbert (for Object Refinery Limited);<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   Andrew Mickish (patch 1868745);<a name="line.33"></a>
<FONT color="green">034</FONT>     *                   Peter Kolb (patches 1934255 and 2603321);<a name="line.34"></a>
<FONT color="green">035</FONT>     *<a name="line.35"></a>
<FONT color="green">036</FONT>     * Changes<a name="line.36"></a>
<FONT color="green">037</FONT>     * -------<a name="line.37"></a>
<FONT color="green">038</FONT>     * 24-Aug-2006 : Version 1 (DG);<a name="line.38"></a>
<FONT color="green">039</FONT>     * 22-Mar-2007 : Use defaultAutoArrange attribute (DG);<a name="line.39"></a>
<FONT color="green">040</FONT>     * 02-Aug-2007 : Fixed zooming bug, added support for margins (DG);<a name="line.40"></a>
<FONT color="green">041</FONT>     * 14-Feb-2008 : Changed default minorTickCount to 9 - see bug report<a name="line.41"></a>
<FONT color="green">042</FONT>     *               1892419 (DG);<a name="line.42"></a>
<FONT color="green">043</FONT>     * 15-Feb-2008 : Applied a variation of patch 1868745 by Andrew Mickish to<a name="line.43"></a>
<FONT color="green">044</FONT>     *               fix a labelling bug when the axis appears at the top or<a name="line.44"></a>
<FONT color="green">045</FONT>     *               right of the chart (DG);<a name="line.45"></a>
<FONT color="green">046</FONT>     * 19-Mar-2008 : Applied patch 1902418 by Andrew Mickish to fix bug in tick<a name="line.46"></a>
<FONT color="green">047</FONT>     *               labels for vertical axis (DG);<a name="line.47"></a>
<FONT color="green">048</FONT>     * 26-Mar-2008 : Changed createTickLabel() method from private to protected -<a name="line.48"></a>
<FONT color="green">049</FONT>     *               see patch 1918209 by Andrew Mickish (DG);<a name="line.49"></a>
<FONT color="green">050</FONT>     * 25-Sep-2008 : Moved minor tick fields up to superclass, see patch 1934255<a name="line.50"></a>
<FONT color="green">051</FONT>     *               by Peter Kolb (DG);<a name="line.51"></a>
<FONT color="green">052</FONT>     * 14-Jan-2009 : Fetch minor ticks from TickUnit, and corrected<a name="line.52"></a>
<FONT color="green">053</FONT>     *               createLogTickUnits() (DG);<a name="line.53"></a>
<FONT color="green">054</FONT>     * 21-Jan-2009 : No need to call setMinorTickCount() in constructor (DG);<a name="line.54"></a>
<FONT color="green">055</FONT>     * 19-Mar-2009 : Added entity support - see patch 2603321 by Peter Kolb (DG);<a name="line.55"></a>
<FONT color="green">056</FONT>     * 30-Mar-2009 : Added pan(double) method (DG);<a name="line.56"></a>
<FONT color="green">057</FONT>     *<a name="line.57"></a>
<FONT color="green">058</FONT>     */<a name="line.58"></a>
<FONT color="green">059</FONT>    <a name="line.59"></a>
<FONT color="green">060</FONT>    package org.jfree.chart.axis;<a name="line.60"></a>
<FONT color="green">061</FONT>    <a name="line.61"></a>
<FONT color="green">062</FONT>    import java.awt.Font;<a name="line.62"></a>
<FONT color="green">063</FONT>    import java.awt.FontMetrics;<a name="line.63"></a>
<FONT color="green">064</FONT>    import java.awt.Graphics2D;<a name="line.64"></a>
<FONT color="green">065</FONT>    import java.awt.font.FontRenderContext;<a name="line.65"></a>
<FONT color="green">066</FONT>    import java.awt.font.LineMetrics;<a name="line.66"></a>
<FONT color="green">067</FONT>    import java.awt.geom.Rectangle2D;<a name="line.67"></a>
<FONT color="green">068</FONT>    import java.text.DecimalFormat;<a name="line.68"></a>
<FONT color="green">069</FONT>    import java.text.NumberFormat;<a name="line.69"></a>
<FONT color="green">070</FONT>    import java.util.ArrayList;<a name="line.70"></a>
<FONT color="green">071</FONT>    import java.util.List;<a name="line.71"></a>
<FONT color="green">072</FONT>    import java.util.Locale;<a name="line.72"></a>
<FONT color="green">073</FONT>    <a name="line.73"></a>
<FONT color="green">074</FONT>    import org.jfree.chart.event.AxisChangeEvent;<a name="line.74"></a>
<FONT color="green">075</FONT>    import org.jfree.chart.plot.Plot;<a name="line.75"></a>
<FONT color="green">076</FONT>    import org.jfree.chart.plot.PlotRenderingInfo;<a name="line.76"></a>
<FONT color="green">077</FONT>    import org.jfree.chart.plot.ValueAxisPlot;<a name="line.77"></a>
<FONT color="green">078</FONT>    import org.jfree.chart.util.LogFormat;<a name="line.78"></a>
<FONT color="green">079</FONT>    import org.jfree.data.Range;<a name="line.79"></a>
<FONT color="green">080</FONT>    import org.jfree.ui.RectangleEdge;<a name="line.80"></a>
<FONT color="green">081</FONT>    import org.jfree.ui.RectangleInsets;<a name="line.81"></a>
<FONT color="green">082</FONT>    import org.jfree.ui.TextAnchor;<a name="line.82"></a>
<FONT color="green">083</FONT>    <a name="line.83"></a>
<FONT color="green">084</FONT>    /**<a name="line.84"></a>
<FONT color="green">085</FONT>     * A numerical axis that uses a logarithmic scale.  The class is an<a name="line.85"></a>
<FONT color="green">086</FONT>     * alternative to the {@link LogarithmicAxis} class.<a name="line.86"></a>
<FONT color="green">087</FONT>     *<a name="line.87"></a>
<FONT color="green">088</FONT>     * @since 1.0.7<a name="line.88"></a>
<FONT color="green">089</FONT>     */<a name="line.89"></a>
<FONT color="green">090</FONT>    public class LogAxis extends ValueAxis {<a name="line.90"></a>
<FONT color="green">091</FONT>    <a name="line.91"></a>
<FONT color="green">092</FONT>        /** The logarithm base. */<a name="line.92"></a>
<FONT color="green">093</FONT>        private double base = 10.0;<a name="line.93"></a>
<FONT color="green">094</FONT>    <a name="line.94"></a>
<FONT color="green">095</FONT>        /** The logarithm of the base value - cached for performance. */<a name="line.95"></a>
<FONT color="green">096</FONT>        private double baseLog = Math.log(10.0);<a name="line.96"></a>
<FONT color="green">097</FONT>    <a name="line.97"></a>
<FONT color="green">098</FONT>        /**  The smallest value permitted on the axis. */<a name="line.98"></a>
<FONT color="green">099</FONT>        private double smallestValue = 1E-100;<a name="line.99"></a>
<FONT color="green">100</FONT>    <a name="line.100"></a>
<FONT color="green">101</FONT>        /** The current tick unit. */<a name="line.101"></a>
<FONT color="green">102</FONT>        private NumberTickUnit tickUnit;<a name="line.102"></a>
<FONT color="green">103</FONT>    <a name="line.103"></a>
<FONT color="green">104</FONT>        /** The override number format. */<a name="line.104"></a>
<FONT color="green">105</FONT>        private NumberFormat numberFormatOverride;<a name="line.105"></a>
<FONT color="green">106</FONT>    <a name="line.106"></a>
<FONT color="green">107</FONT>        /**<a name="line.107"></a>
<FONT color="green">108</FONT>         * Creates a new &lt;code&gt;LogAxis&lt;/code&gt; with no label.<a name="line.108"></a>
<FONT color="green">109</FONT>         */<a name="line.109"></a>
<FONT color="green">110</FONT>        public LogAxis() {<a name="line.110"></a>
<FONT color="green">111</FONT>            this(null);<a name="line.111"></a>
<FONT color="green">112</FONT>        }<a name="line.112"></a>
<FONT color="green">113</FONT>    <a name="line.113"></a>
<FONT color="green">114</FONT>        /**<a name="line.114"></a>
<FONT color="green">115</FONT>         * Creates a new &lt;code&gt;LogAxis&lt;/code&gt; with the given label.<a name="line.115"></a>
<FONT color="green">116</FONT>         *<a name="line.116"></a>
<FONT color="green">117</FONT>         * @param label  the axis label (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.117"></a>
<FONT color="green">118</FONT>         */<a name="line.118"></a>
<FONT color="green">119</FONT>        public LogAxis(String label) {<a name="line.119"></a>
<FONT color="green">120</FONT>            super(label, createLogTickUnits(Locale.getDefault()));<a name="line.120"></a>
<FONT color="green">121</FONT>            setDefaultAutoRange(new Range(0.01, 1.0));<a name="line.121"></a>
<FONT color="green">122</FONT>            this.tickUnit = new NumberTickUnit(1.0, new DecimalFormat("0.#"), 9);<a name="line.122"></a>
<FONT color="green">123</FONT>        }<a name="line.123"></a>
<FONT color="green">124</FONT>    <a name="line.124"></a>
<FONT color="green">125</FONT>        /**<a name="line.125"></a>
<FONT color="green">126</FONT>         * Returns the base for the logarithm calculation.<a name="line.126"></a>
<FONT color="green">127</FONT>         *<a name="line.127"></a>
<FONT color="green">128</FONT>         * @return The base for the logarithm calculation.<a name="line.128"></a>
<FONT color="green">129</FONT>         *<a name="line.129"></a>
<FONT color="green">130</FONT>         * @see #setBase(double)<a name="line.130"></a>
<FONT color="green">131</FONT>         */<a name="line.131"></a>
<FONT color="green">132</FONT>        public double getBase() {<a name="line.132"></a>
<FONT color="green">133</FONT>            return this.base;<a name="line.133"></a>
<FONT color="green">134</FONT>        }<a name="line.134"></a>
<FONT color="green">135</FONT>    <a name="line.135"></a>
<FONT color="green">136</FONT>        /**<a name="line.136"></a>
<FONT color="green">137</FONT>         * Sets the base for the logarithm calculation and sends an<a name="line.137"></a>
<FONT color="green">138</FONT>         * {@link AxisChangeEvent} to all registered listeners.<a name="line.138"></a>
<FONT color="green">139</FONT>         *<a name="line.139"></a>
<FONT color="green">140</FONT>         * @param base  the base value (must be &gt; 1.0).<a name="line.140"></a>
<FONT color="green">141</FONT>         *<a name="line.141"></a>
<FONT color="green">142</FONT>         * @see #getBase()<a name="line.142"></a>
<FONT color="green">143</FONT>         */<a name="line.143"></a>
<FONT color="green">144</FONT>        public void setBase(double base) {<a name="line.144"></a>
<FONT color="green">145</FONT>            if (base &lt;= 1.0) {<a name="line.145"></a>
<FONT color="green">146</FONT>                throw new IllegalArgumentException("Requires 'base' &gt; 1.0.");<a name="line.146"></a>
<FONT color="green">147</FONT>            }<a name="line.147"></a>
<FONT color="green">148</FONT>            this.base = base;<a name="line.148"></a>
<FONT color="green">149</FONT>            this.baseLog = Math.log(base);<a name="line.149"></a>
<FONT color="green">150</FONT>            notifyListeners(new AxisChangeEvent(this));<a name="line.150"></a>
<FONT color="green">151</FONT>        }<a name="line.151"></a>
<FONT color="green">152</FONT>    <a name="line.152"></a>
<FONT color="green">153</FONT>        /**<a name="line.153"></a>
<FONT color="green">154</FONT>         * Returns the smallest value represented by the axis.<a name="line.154"></a>
<FONT color="green">155</FONT>         *<a name="line.155"></a>
<FONT color="green">156</FONT>         * @return The smallest value represented by the axis.<a name="line.156"></a>
<FONT color="green">157</FONT>         *<a name="line.157"></a>
<FONT color="green">158</FONT>         * @see #setSmallestValue(double)<a name="line.158"></a>
<FONT color="green">159</FONT>         */<a name="line.159"></a>
<FONT color="green">160</FONT>        public double getSmallestValue() {<a name="line.160"></a>
<FONT color="green">161</FONT>            return this.smallestValue;<a name="line.161"></a>
<FONT color="green">162</FONT>        }<a name="line.162"></a>
<FONT color="green">163</FONT>    <a name="line.163"></a>
<FONT color="green">164</FONT>        /**<a name="line.164"></a>
<FONT color="green">165</FONT>         * Sets the smallest value represented by the axis and sends an<a name="line.165"></a>
<FONT color="green">166</FONT>         * {@link AxisChangeEvent} to all registered listeners.<a name="line.166"></a>
<FONT color="green">167</FONT>         *<a name="line.167"></a>
<FONT color="green">168</FONT>         * @param value  the value.<a name="line.168"></a>
<FONT color="green">169</FONT>         *<a name="line.169"></a>
<FONT color="green">170</FONT>         * @see #getSmallestValue()<a name="line.170"></a>
<FONT color="green">171</FONT>         */<a name="line.171"></a>
<FONT color="green">172</FONT>        public void setSmallestValue(double value) {<a name="line.172"></a>
<FONT color="green">173</FONT>            if (value &lt;= 0.0) {<a name="line.173"></a>
<FONT color="green">174</FONT>                throw new IllegalArgumentException("Requires 'value' &gt; 0.0.");<a name="line.174"></a>
<FONT color="green">175</FONT>            }<a name="line.175"></a>
<FONT color="green">176</FONT>            this.smallestValue = value;<a name="line.176"></a>
<FONT color="green">177</FONT>            notifyListeners(new AxisChangeEvent(this));<a name="line.177"></a>
<FONT color="green">178</FONT>        }<a name="line.178"></a>
<FONT color="green">179</FONT>    <a name="line.179"></a>
<FONT color="green">180</FONT>        /**<a name="line.180"></a>
<FONT color="green">181</FONT>         * Returns the current tick unit.<a name="line.181"></a>
<FONT color="green">182</FONT>         *<a name="line.182"></a>
<FONT color="green">183</FONT>         * @return The current tick unit.<a name="line.183"></a>
<FONT color="green">184</FONT>         *<a name="line.184"></a>
<FONT color="green">185</FONT>         * @see #setTickUnit(NumberTickUnit)<a name="line.185"></a>
<FONT color="green">186</FONT>         */<a name="line.186"></a>
<FONT color="green">187</FONT>        public NumberTickUnit getTickUnit() {<a name="line.187"></a>
<FONT color="green">188</FONT>            return this.tickUnit;<a name="line.188"></a>
<FONT color="green">189</FONT>        }<a name="line.189"></a>
<FONT color="green">190</FONT>    <a name="line.190"></a>
<FONT color="green">191</FONT>        /**<a name="line.191"></a>
<FONT color="green">192</FONT>         * Sets the tick unit for the axis and sends an {@link AxisChangeEvent} to<a name="line.192"></a>
<FONT color="green">193</FONT>         * all registered listeners.  A side effect of calling this method is that<a name="line.193"></a>
<FONT color="green">194</FONT>         * the "auto-select" feature for tick units is switched off (you can<a name="line.194"></a>
<FONT color="green">195</FONT>         * restore it using the {@link ValueAxis#setAutoTickUnitSelection(boolean)}<a name="line.195"></a>
<FONT color="green">196</FONT>         * method).<a name="line.196"></a>
<FONT color="green">197</FONT>         *<a name="line.197"></a>
<FONT color="green">198</FONT>         * @param unit  the new tick unit (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.198"></a>
<FONT color="green">199</FONT>         *<a name="line.199"></a>
<FONT color="green">200</FONT>         * @see #getTickUnit()<a name="line.200"></a>
<FONT color="green">201</FONT>         */<a name="line.201"></a>
<FONT color="green">202</FONT>        public void setTickUnit(NumberTickUnit unit) {<a name="line.202"></a>
<FONT color="green">203</FONT>            // defer argument checking...<a name="line.203"></a>
<FONT color="green">204</FONT>            setTickUnit(unit, true, true);<a name="line.204"></a>
<FONT color="green">205</FONT>        }<a name="line.205"></a>
<FONT color="green">206</FONT>    <a name="line.206"></a>
<FONT color="green">207</FONT>        /**<a name="line.207"></a>
<FONT color="green">208</FONT>         * Sets the tick unit for the axis and, if requested, sends an<a name="line.208"></a>
<FONT color="green">209</FONT>         * {@link AxisChangeEvent} to all registered listeners.  In addition, an<a name="line.209"></a>
<FONT color="green">210</FONT>         * option is provided to turn off the "auto-select" feature for tick units<a name="line.210"></a>
<FONT color="green">211</FONT>         * (you can restore it using the<a name="line.211"></a>
<FONT color="green">212</FONT>         * {@link ValueAxis#setAutoTickUnitSelection(boolean)} method).<a name="line.212"></a>
<FONT color="green">213</FONT>         *<a name="line.213"></a>
<FONT color="green">214</FONT>         * @param unit  the new tick unit (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.214"></a>
<FONT color="green">215</FONT>         * @param notify  notify listeners?<a name="line.215"></a>
<FONT color="green">216</FONT>         * @param turnOffAutoSelect  turn off the auto-tick selection?<a name="line.216"></a>
<FONT color="green">217</FONT>         *<a name="line.217"></a>
<FONT color="green">218</FONT>         * @see #getTickUnit()<a name="line.218"></a>
<FONT color="green">219</FONT>         */<a name="line.219"></a>
<FONT color="green">220</FONT>        public void setTickUnit(NumberTickUnit unit, boolean notify,<a name="line.220"></a>
<FONT color="green">221</FONT>                                boolean turnOffAutoSelect) {<a name="line.221"></a>
<FONT color="green">222</FONT>    <a name="line.222"></a>
<FONT color="green">223</FONT>            if (unit == null) {<a name="line.223"></a>
<FONT color="green">224</FONT>                throw new IllegalArgumentException("Null 'unit' argument.");<a name="line.224"></a>
<FONT color="green">225</FONT>            }<a name="line.225"></a>
<FONT color="green">226</FONT>            this.tickUnit = unit;<a name="line.226"></a>
<FONT color="green">227</FONT>            if (turnOffAutoSelect) {<a name="line.227"></a>
<FONT color="green">228</FONT>                setAutoTickUnitSelection(false, false);<a name="line.228"></a>
<FONT color="green">229</FONT>            }<a name="line.229"></a>
<FONT color="green">230</FONT>            if (notify) {<a name="line.230"></a>
<FONT color="green">231</FONT>                notifyListeners(new AxisChangeEvent(this));<a name="line.231"></a>
<FONT color="green">232</FONT>            }<a name="line.232"></a>
<FONT color="green">233</FONT>    <a name="line.233"></a>
<FONT color="green">234</FONT>        }<a name="line.234"></a>
<FONT color="green">235</FONT>    <a name="line.235"></a>
<FONT color="green">236</FONT>        /**<a name="line.236"></a>
<FONT color="green">237</FONT>         * Returns the number format override.  If this is non-null, then it will<a name="line.237"></a>
<FONT color="green">238</FONT>         * be used to format the numbers on the axis.<a name="line.238"></a>
<FONT color="green">239</FONT>         *<a name="line.239"></a>
<FONT color="green">240</FONT>         * @return The number formatter (possibly &lt;code&gt;null&lt;/code&gt;).<a name="line.240"></a>
<FONT color="green">241</FONT>         *<a name="line.241"></a>
<FONT color="green">242</FONT>         * @see #setNumberFormatOverride(NumberFormat)<a name="line.242"></a>
<FONT color="green">243</FONT>         */<a name="line.243"></a>
<FONT color="green">244</FONT>        public NumberFormat getNumberFormatOverride() {<a name="line.244"></a>
<FONT color="green">245</FONT>            return this.numberFormatOverride;<a name="line.245"></a>
<FONT color="green">246</FONT>        }<a name="line.246"></a>
<FONT color="green">247</FONT>    <a name="line.247"></a>
<FONT color="green">248</FONT>        /**<a name="line.248"></a>
<FONT color="green">249</FONT>         * Sets the number format override.  If this is non-null, then it will be<a name="line.249"></a>
<FONT color="green">250</FONT>         * used to format the numbers on the axis.<a name="line.250"></a>
<FONT color="green">251</FONT>         *<a name="line.251"></a>
<FONT color="green">252</FONT>         * @param formatter  the number formatter (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.252"></a>
<FONT color="green">253</FONT>         *<a name="line.253"></a>
<FONT color="green">254</FONT>         * @see #getNumberFormatOverride()<a name="line.254"></a>
<FONT color="green">255</FONT>         */<a name="line.255"></a>
<FONT color="green">256</FONT>        public void setNumberFormatOverride(NumberFormat formatter) {<a name="line.256"></a>
<FONT color="green">257</FONT>            this.numberFormatOverride = formatter;<a name="line.257"></a>
<FONT color="green">258</FONT>            notifyListeners(new AxisChangeEvent(this));<a name="line.258"></a>
<FONT color="green">259</FONT>        }<a name="line.259"></a>
<FONT color="green">260</FONT>    <a name="line.260"></a>
<FONT color="green">261</FONT>        /**<a name="line.261"></a>
<FONT color="green">262</FONT>         * Calculates the log of the given value, using the current base.<a name="line.262"></a>
<FONT color="green">263</FONT>         *<a name="line.263"></a>
<FONT color="green">264</FONT>         * @param value  the value.<a name="line.264"></a>
<FONT color="green">265</FONT>         *<a name="line.265"></a>
<FONT color="green">266</FONT>         * @return The log of the given value.<a name="line.266"></a>
<FONT color="green">267</FONT>         *<a name="line.267"></a>
<FONT color="green">268</FONT>         * @see #calculateValue(double)<a name="line.268"></a>
<FONT color="green">269</FONT>         * @see #getBase()<a name="line.269"></a>
<FONT color="green">270</FONT>         */<a name="line.270"></a>
<FONT color="green">271</FONT>        public double calculateLog(double value) {<a name="line.271"></a>
<FONT color="green">272</FONT>            return Math.log(value) / this.baseLog;<a name="line.272"></a>
<FONT color="green">273</FONT>        }<a name="line.273"></a>
<FONT color="green">274</FONT>    <a name="line.274"></a>
<FONT color="green">275</FONT>        /**<a name="line.275"></a>
<FONT color="green">276</FONT>         * Calculates the value from a given log.<a name="line.276"></a>
<FONT color="green">277</FONT>         *<a name="line.277"></a>
<FONT color="green">278</FONT>         * @param log  the log value (must be &gt; 0.0).<a name="line.278"></a>
<FONT color="green">279</FONT>         *<a name="line.279"></a>
<FONT color="green">280</FONT>         * @return The value with the given log.<a name="line.280"></a>
<FONT color="green">281</FONT>         *<a name="line.281"></a>
<FONT color="green">282</FONT>         * @see #calculateLog(double)<a name="line.282"></a>
<FONT color="green">283</FONT>         * @see #getBase()<a name="line.283"></a>
<FONT color="green">284</FONT>         */<a name="line.284"></a>
<FONT color="green">285</FONT>        public double calculateValue(double log) {<a name="line.285"></a>
<FONT color="green">286</FONT>            return Math.pow(this.base, log);<a name="line.286"></a>
<FONT color="green">287</FONT>        }<a name="line.287"></a>
<FONT color="green">288</FONT>    <a name="line.288"></a>
<FONT color="green">289</FONT>        /**<a name="line.289"></a>
<FONT color="green">290</FONT>         * Converts a Java2D coordinate to an axis value, assuming that the<a name="line.290"></a>
<FONT color="green">291</FONT>         * axis covers the specified &lt;code&gt;edge&lt;/code&gt; of the &lt;code&gt;area&lt;/code&gt;.<a name="line.291"></a>
<FONT color="green">292</FONT>         *<a name="line.292"></a>
<FONT color="green">293</FONT>         * @param java2DValue  the Java2D coordinate.<a name="line.293"></a>
<FONT color="green">294</FONT>         * @param area  the area.<a name="line.294"></a>
<FONT color="green">295</FONT>         * @param edge  the edge that the axis belongs to.<a name="line.295"></a>
<FONT color="green">296</FONT>         *<a name="line.296"></a>
<FONT color="green">297</FONT>         * @return A value along the axis scale.<a name="line.297"></a>
<FONT color="green">298</FONT>         */<a name="line.298"></a>
<FONT color="green">299</FONT>        public double java2DToValue(double java2DValue, Rectangle2D area,<a name="line.299"></a>
<FONT color="green">300</FONT>                RectangleEdge edge) {<a name="line.300"></a>
<FONT color="green">301</FONT>    <a name="line.301"></a>
<FONT color="green">302</FONT>            Range range = getRange();<a name="line.302"></a>
<FONT color="green">303</FONT>            double axisMin = calculateLog(range.getLowerBound());<a name="line.303"></a>
<FONT color="green">304</FONT>            double axisMax = calculateLog(range.getUpperBound());<a name="line.304"></a>
<FONT color="green">305</FONT>    <a name="line.305"></a>
<FONT color="green">306</FONT>            double min = 0.0;<a name="line.306"></a>
<FONT color="green">307</FONT>            double max = 0.0;<a name="line.307"></a>
<FONT color="green">308</FONT>            if (RectangleEdge.isTopOrBottom(edge)) {<a name="line.308"></a>
<FONT color="green">309</FONT>                min = area.getX();<a name="line.309"></a>
<FONT color="green">310</FONT>                max = area.getMaxX();<a name="line.310"></a>
<FONT color="green">311</FONT>            }<a name="line.311"></a>
<FONT color="green">312</FONT>            else if (RectangleEdge.isLeftOrRight(edge)) {<a name="line.312"></a>
<FONT color="green">313</FONT>                min = area.getMaxY();<a name="line.313"></a>
<FONT color="green">314</FONT>                max = area.getY();<a name="line.314"></a>
<FONT color="green">315</FONT>            }<a name="line.315"></a>
<FONT color="green">316</FONT>            double log = 0.0;<a name="line.316"></a>
<FONT color="green">317</FONT>            if (isInverted()) {<a name="line.317"></a>
<FONT color="green">318</FONT>                log = axisMax - (java2DValue - min) / (max - min)<a name="line.318"></a>
<FONT color="green">319</FONT>                        * (axisMax - axisMin);<a name="line.319"></a>
<FONT color="green">320</FONT>            }<a name="line.320"></a>
<FONT color="green">321</FONT>            else {<a name="line.321"></a>
<FONT color="green">322</FONT>                log = axisMin + (java2DValue - min) / (max - min)<a name="line.322"></a>
<FONT color="green">323</FONT>                        * (axisMax - axisMin);<a name="line.323"></a>
<FONT color="green">324</FONT>            }<a name="line.324"></a>
<FONT color="green">325</FONT>            return calculateValue(log);<a name="line.325"></a>
<FONT color="green">326</FONT>        }<a name="line.326"></a>
<FONT color="green">327</FONT>    <a name="line.327"></a>
<FONT color="green">328</FONT>        /**<a name="line.328"></a>
<FONT color="green">329</FONT>         * Converts a value on the axis scale to a Java2D coordinate relative to<a name="line.329"></a>
<FONT color="green">330</FONT>         * the given &lt;code&gt;area&lt;/code&gt;, based on the axis running along the<a name="line.330"></a>
<FONT color="green">331</FONT>         * specified &lt;code&gt;edge&lt;/code&gt;.<a name="line.331"></a>
<FONT color="green">332</FONT>         *<a name="line.332"></a>
<FONT color="green">333</FONT>         * @param value  the data value.<a name="line.333"></a>
<FONT color="green">334</FONT>         * @param area  the area.<a name="line.334"></a>
<FONT color="green">335</FONT>         * @param edge  the edge.<a name="line.335"></a>
<FONT color="green">336</FONT>         *<a name="line.336"></a>
<FONT color="green">337</FONT>         * @return The Java2D coordinate corresponding to &lt;code&gt;value&lt;/code&gt;.<a name="line.337"></a>
<FONT color="green">338</FONT>         */<a name="line.338"></a>
<FONT color="green">339</FONT>        public double valueToJava2D(double value, Rectangle2D area,<a name="line.339"></a>
<FONT color="green">340</FONT>                RectangleEdge edge) {<a name="line.340"></a>
<FONT color="green">341</FONT>    <a name="line.341"></a>
<FONT color="green">342</FONT>            Range range = getRange();<a name="line.342"></a>
<FONT color="green">343</FONT>            double axisMin = calculateLog(range.getLowerBound());<a name="line.343"></a>
<FONT color="green">344</FONT>            double axisMax = calculateLog(range.getUpperBound());<a name="line.344"></a>
<FONT color="green">345</FONT>            value = calculateLog(value);<a name="line.345"></a>
<FONT color="green">346</FONT>    <a name="line.346"></a>
<FONT color="green">347</FONT>            double min = 0.0;<a name="line.347"></a>
<FONT color="green">348</FONT>            double max = 0.0;<a name="line.348"></a>
<FONT color="green">349</FONT>            if (RectangleEdge.isTopOrBottom(edge)) {<a name="line.349"></a>
<FONT color="green">350</FONT>                min = area.getX();<a name="line.350"></a>
<FONT color="green">351</FONT>                max = area.getMaxX();<a name="line.351"></a>
<FONT color="green">352</FONT>            }<a name="line.352"></a>
<FONT color="green">353</FONT>            else if (RectangleEdge.isLeftOrRight(edge)) {<a name="line.353"></a>
<FONT color="green">354</FONT>                max = area.getMinY();<a name="line.354"></a>
<FONT color="green">355</FONT>                min = area.getMaxY();<a name="line.355"></a>
<FONT color="green">356</FONT>            }<a name="line.356"></a>
<FONT color="green">357</FONT>            if (isInverted()) {<a name="line.357"></a>
<FONT color="green">358</FONT>                return max<a name="line.358"></a>
<FONT color="green">359</FONT>                       - ((value - axisMin) / (axisMax - axisMin)) * (max - min);<a name="line.359"></a>
<FONT color="green">360</FONT>            }<a name="line.360"></a>
<FONT color="green">361</FONT>            else {<a name="line.361"></a>
<FONT color="green">362</FONT>                return min<a name="line.362"></a>
<FONT color="green">363</FONT>                       + ((value - axisMin) / (axisMax - axisMin)) * (max - min);<a name="line.363"></a>
<FONT color="green">364</FONT>            }<a name="line.364"></a>
<FONT color="green">365</FONT>        }<a name="line.365"></a>
<FONT color="green">366</FONT>    <a name="line.366"></a>
<FONT color="green">367</FONT>        /**<a name="line.367"></a>
<FONT color="green">368</FONT>         * Configures the axis.  This method is typically called when an axis<a name="line.368"></a>
<FONT color="green">369</FONT>         * is assigned to a new plot.<a name="line.369"></a>
<FONT color="green">370</FONT>         */<a name="line.370"></a>
<FONT color="green">371</FONT>        public void configure() {<a name="line.371"></a>
<FONT color="green">372</FONT>            if (isAutoRange()) {<a name="line.372"></a>
<FONT color="green">373</FONT>                autoAdjustRange();<a name="line.373"></a>
<FONT color="green">374</FONT>            }<a name="line.374"></a>
<FONT color="green">375</FONT>        }<a name="line.375"></a>
<FONT color="green">376</FONT>    <a name="line.376"></a>
<FONT color="green">377</FONT>        /**<a name="line.377"></a>
<FONT color="green">378</FONT>         * Adjusts the axis range to match the data range that the axis is<a name="line.378"></a>
<FONT color="green">379</FONT>         * required to display.<a name="line.379"></a>
<FONT color="green">380</FONT>         */<a name="line.380"></a>
<FONT color="green">381</FONT>        protected void autoAdjustRange() {<a name="line.381"></a>
<FONT color="green">382</FONT>            Plot plot = getPlot();<a name="line.382"></a>
<FONT color="green">383</FONT>            if (plot == null) {<a name="line.383"></a>
<FONT color="green">384</FONT>                return;  // no plot, no data<a name="line.384"></a>
<FONT color="green">385</FONT>            }<a name="line.385"></a>
<FONT color="green">386</FONT>    <a name="line.386"></a>
<FONT color="green">387</FONT>            if (plot instanceof ValueAxisPlot) {<a name="line.387"></a>
<FONT color="green">388</FONT>                ValueAxisPlot vap = (ValueAxisPlot) plot;<a name="line.388"></a>
<FONT color="green">389</FONT>    <a name="line.389"></a>
<FONT color="green">390</FONT>                Range r = vap.getDataRange(this);<a name="line.390"></a>
<FONT color="green">391</FONT>                if (r == null) {<a name="line.391"></a>
<FONT color="green">392</FONT>                    r = getDefaultAutoRange();<a name="line.392"></a>
<FONT color="green">393</FONT>                }<a name="line.393"></a>
<FONT color="green">394</FONT>    <a name="line.394"></a>
<FONT color="green">395</FONT>                double upper = r.getUpperBound();<a name="line.395"></a>
<FONT color="green">396</FONT>                double lower = Math.max(r.getLowerBound(), this.smallestValue);<a name="line.396"></a>
<FONT color="green">397</FONT>                double range = upper - lower;<a name="line.397"></a>
<FONT color="green">398</FONT>    <a name="line.398"></a>
<FONT color="green">399</FONT>                // if fixed auto range, then derive lower bound...<a name="line.399"></a>
<FONT color="green">400</FONT>                double fixedAutoRange = getFixedAutoRange();<a name="line.400"></a>
<FONT color="green">401</FONT>                if (fixedAutoRange &gt; 0.0) {<a name="line.401"></a>
<FONT color="green">402</FONT>                    lower = Math.max(upper - fixedAutoRange, this.smallestValue);<a name="line.402"></a>
<FONT color="green">403</FONT>                }<a name="line.403"></a>
<FONT color="green">404</FONT>                else {<a name="line.404"></a>
<FONT color="green">405</FONT>                    // ensure the autorange is at least &lt;minRange&gt; in size...<a name="line.405"></a>
<FONT color="green">406</FONT>                    double minRange = getAutoRangeMinimumSize();<a name="line.406"></a>
<FONT color="green">407</FONT>                    if (range &lt; minRange) {<a name="line.407"></a>
<FONT color="green">408</FONT>                        double expand = (minRange - range) / 2;<a name="line.408"></a>
<FONT color="green">409</FONT>                        upper = upper + expand;<a name="line.409"></a>
<FONT color="green">410</FONT>                        lower = lower - expand;<a name="line.410"></a>
<FONT color="green">411</FONT>                    }<a name="line.411"></a>
<FONT color="green">412</FONT>    <a name="line.412"></a>
<FONT color="green">413</FONT>                    // apply the margins - these should apply to the exponent range<a name="line.413"></a>
<FONT color="green">414</FONT>                    double logUpper = calculateLog(upper);<a name="line.414"></a>
<FONT color="green">415</FONT>                    double logLower = calculateLog(lower);<a name="line.415"></a>
<FONT color="green">416</FONT>                    double logRange = logUpper - logLower;<a name="line.416"></a>
<FONT color="green">417</FONT>                    logUpper = logUpper + getUpperMargin() * logRange;<a name="line.417"></a>
<FONT color="green">418</FONT>                    logLower = logLower - getLowerMargin() * logRange;<a name="line.418"></a>
<FONT color="green">419</FONT>                    upper = calculateValue(logUpper);<a name="line.419"></a>
<FONT color="green">420</FONT>                    lower = calculateValue(logLower);<a name="line.420"></a>
<FONT color="green">421</FONT>                }<a name="line.421"></a>
<FONT color="green">422</FONT>    <a name="line.422"></a>
<FONT color="green">423</FONT>                setRange(new Range(lower, upper), false, false);<a name="line.423"></a>
<FONT color="green">424</FONT>            }<a name="line.424"></a>
<FONT color="green">425</FONT>    <a name="line.425"></a>
<FONT color="green">426</FONT>        }<a name="line.426"></a>
<FONT color="green">427</FONT>    <a name="line.427"></a>
<FONT color="green">428</FONT>        /**<a name="line.428"></a>
<FONT color="green">429</FONT>         * Draws the axis on a Java 2D graphics device (such as the screen or a<a name="line.429"></a>
<FONT color="green">430</FONT>         * printer).<a name="line.430"></a>
<FONT color="green">431</FONT>         *<a name="line.431"></a>
<FONT color="green">432</FONT>         * @param g2  the graphics device (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.432"></a>
<FONT color="green">433</FONT>         * @param cursor  the cursor location (determines where to draw the axis).<a name="line.433"></a>
<FONT color="green">434</FONT>         * @param plotArea  the area within which the axes and plot should be drawn.<a name="line.434"></a>
<FONT color="green">435</FONT>         * @param dataArea  the area within which the data should be drawn.<a name="line.435"></a>
<FONT color="green">436</FONT>         * @param edge  the axis location (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.436"></a>
<FONT color="green">437</FONT>         * @param plotState  collects information about the plot<a name="line.437"></a>
<FONT color="green">438</FONT>         *                   (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.438"></a>
<FONT color="green">439</FONT>         *<a name="line.439"></a>
<FONT color="green">440</FONT>         * @return The axis state (never &lt;code&gt;null&lt;/code&gt;).<a name="line.440"></a>
<FONT color="green">441</FONT>         */<a name="line.441"></a>
<FONT color="green">442</FONT>        public AxisState draw(Graphics2D g2, double cursor, Rectangle2D plotArea,<a name="line.442"></a>
<FONT color="green">443</FONT>                Rectangle2D dataArea, RectangleEdge edge,<a name="line.443"></a>
<FONT color="green">444</FONT>                PlotRenderingInfo plotState) {<a name="line.444"></a>
<FONT color="green">445</FONT>    <a name="line.445"></a>
<FONT color="green">446</FONT>            AxisState state = null;<a name="line.446"></a>
<FONT color="green">447</FONT>            // if the axis is not visible, don't draw it...<a name="line.447"></a>
<FONT color="green">448</FONT>            if (!isVisible()) {<a name="line.448"></a>
<FONT color="green">449</FONT>                state = new AxisState(cursor);<a name="line.449"></a>
<FONT color="green">450</FONT>                // even though the axis is not visible, we need ticks for the<a name="line.450"></a>
<FONT color="green">451</FONT>                // gridlines...<a name="line.451"></a>
<FONT color="green">452</FONT>                List ticks = refreshTicks(g2, state, dataArea, edge);<a name="line.452"></a>
<FONT color="green">453</FONT>                state.setTicks(ticks);<a name="line.453"></a>
<FONT color="green">454</FONT>                return state;<a name="line.454"></a>
<FONT color="green">455</FONT>            }<a name="line.455"></a>
<FONT color="green">456</FONT>            state = drawTickMarksAndLabels(g2, cursor, plotArea, dataArea, edge);<a name="line.456"></a>
<FONT color="green">457</FONT>            state = drawLabel(getLabel(), g2, plotArea, dataArea, edge, state);<a name="line.457"></a>
<FONT color="green">458</FONT>            createAndAddEntity(cursor, state, dataArea, edge, plotState);<a name="line.458"></a>
<FONT color="green">459</FONT>            return state;<a name="line.459"></a>
<FONT color="green">460</FONT>        }<a name="line.460"></a>
<FONT color="green">461</FONT>    <a name="line.461"></a>
<FONT color="green">462</FONT>        /**<a name="line.462"></a>
<FONT color="green">463</FONT>         * Calculates the positions of the tick labels for the axis, storing the<a name="line.463"></a>
<FONT color="green">464</FONT>         * results in the tick label list (ready for drawing).<a name="line.464"></a>
<FONT color="green">465</FONT>         *<a name="line.465"></a>
<FONT color="green">466</FONT>         * @param g2  the graphics device.<a name="line.466"></a>
<FONT color="green">467</FONT>         * @param state  the axis state.<a name="line.467"></a>
<FONT color="green">468</FONT>         * @param dataArea  the area in which the plot should be drawn.<a name="line.468"></a>
<FONT color="green">469</FONT>         * @param edge  the location of the axis.<a name="line.469"></a>
<FONT color="green">470</FONT>         *<a name="line.470"></a>
<FONT color="green">471</FONT>         * @return A list of ticks.<a name="line.471"></a>
<FONT color="green">472</FONT>         *<a name="line.472"></a>
<FONT color="green">473</FONT>         */<a name="line.473"></a>
<FONT color="green">474</FONT>        public List refreshTicks(Graphics2D g2, AxisState state,<a name="line.474"></a>
<FONT color="green">475</FONT>                Rectangle2D dataArea, RectangleEdge edge) {<a name="line.475"></a>
<FONT color="green">476</FONT>    <a name="line.476"></a>
<FONT color="green">477</FONT>            List result = new java.util.ArrayList();<a name="line.477"></a>
<FONT color="green">478</FONT>            if (RectangleEdge.isTopOrBottom(edge)) {<a name="line.478"></a>
<FONT color="green">479</FONT>                result = refreshTicksHorizontal(g2, dataArea, edge);<a name="line.479"></a>
<FONT color="green">480</FONT>            }<a name="line.480"></a>
<FONT color="green">481</FONT>            else if (RectangleEdge.isLeftOrRight(edge)) {<a name="line.481"></a>
<FONT color="green">482</FONT>                result = refreshTicksVertical(g2, dataArea, edge);<a name="line.482"></a>
<FONT color="green">483</FONT>            }<a name="line.483"></a>
<FONT color="green">484</FONT>            return result;<a name="line.484"></a>
<FONT color="green">485</FONT>    <a name="line.485"></a>
<FONT color="green">486</FONT>        }<a name="line.486"></a>
<FONT color="green">487</FONT>    <a name="line.487"></a>
<FONT color="green">488</FONT>        /**<a name="line.488"></a>
<FONT color="green">489</FONT>         * Returns a list of ticks for an axis at the top or bottom of the chart.<a name="line.489"></a>
<FONT color="green">490</FONT>         *<a name="line.490"></a>
<FONT color="green">491</FONT>         * @param g2  the graphics device.<a name="line.491"></a>
<FONT color="green">492</FONT>         * @param dataArea  the data area.<a name="line.492"></a>
<FONT color="green">493</FONT>         * @param edge  the edge.<a name="line.493"></a>
<FONT color="green">494</FONT>         *<a name="line.494"></a>
<FONT color="green">495</FONT>         * @return A list of ticks.<a name="line.495"></a>
<FONT color="green">496</FONT>         */<a name="line.496"></a>
<FONT color="green">497</FONT>        protected List refreshTicksHorizontal(Graphics2D g2, Rectangle2D dataArea,<a name="line.497"></a>
<FONT color="green">498</FONT>                RectangleEdge edge) {<a name="line.498"></a>
<FONT color="green">499</FONT>    <a name="line.499"></a>
<FONT color="green">500</FONT>            Range range = getRange();<a name="line.500"></a>
<FONT color="green">501</FONT>            List ticks = new ArrayList();<a name="line.501"></a>
<FONT color="green">502</FONT>            Font tickLabelFont = getTickLabelFont();<a name="line.502"></a>
<FONT color="green">503</FONT>            g2.setFont(tickLabelFont);<a name="line.503"></a>
<FONT color="green">504</FONT>            TextAnchor textAnchor;<a name="line.504"></a>
<FONT color="green">505</FONT>            if (edge == RectangleEdge.TOP) {<a name="line.505"></a>
<FONT color="green">506</FONT>                textAnchor = TextAnchor.BOTTOM_CENTER;<a name="line.506"></a>
<FONT color="green">507</FONT>            }<a name="line.507"></a>
<FONT color="green">508</FONT>            else {<a name="line.508"></a>
<FONT color="green">509</FONT>                textAnchor = TextAnchor.TOP_CENTER;<a name="line.509"></a>
<FONT color="green">510</FONT>            }<a name="line.510"></a>
<FONT color="green">511</FONT>    <a name="line.511"></a>
<FONT color="green">512</FONT>            if (isAutoTickUnitSelection()) {<a name="line.512"></a>
<FONT color="green">513</FONT>                selectAutoTickUnit(g2, dataArea, edge);<a name="line.513"></a>
<FONT color="green">514</FONT>            }<a name="line.514"></a>
<FONT color="green">515</FONT>            int minorTickCount = this.tickUnit.getMinorTickCount();<a name="line.515"></a>
<FONT color="green">516</FONT>            double start = Math.floor(calculateLog(getLowerBound()));<a name="line.516"></a>
<FONT color="green">517</FONT>            double end = Math.ceil(calculateLog(getUpperBound()));<a name="line.517"></a>
<FONT color="green">518</FONT>            double current = start;<a name="line.518"></a>
<FONT color="green">519</FONT>            while (current &lt;= end) {<a name="line.519"></a>
<FONT color="green">520</FONT>                double v = calculateValue(current);<a name="line.520"></a>
<FONT color="green">521</FONT>                if (range.contains(v)) {<a name="line.521"></a>
<FONT color="green">522</FONT>                    ticks.add(new NumberTick(TickType.MAJOR, v, createTickLabel(v),<a name="line.522"></a>
<FONT color="green">523</FONT>                            textAnchor, TextAnchor.CENTER, 0.0));<a name="line.523"></a>
<FONT color="green">524</FONT>                }<a name="line.524"></a>
<FONT color="green">525</FONT>                // add minor ticks (for gridlines)<a name="line.525"></a>
<FONT color="green">526</FONT>                double next = Math.pow(this.base, current<a name="line.526"></a>
<FONT color="green">527</FONT>                        + this.tickUnit.getSize());<a name="line.527"></a>
<FONT color="green">528</FONT>                for (int i = 1; i &lt; minorTickCount; i++) {<a name="line.528"></a>
<FONT color="green">529</FONT>                    double minorV = v + i * ((next - v) / minorTickCount);<a name="line.529"></a>
<FONT color="green">530</FONT>                    if (range.contains(minorV)) {<a name="line.530"></a>
<FONT color="green">531</FONT>                        ticks.add(new NumberTick(TickType.MINOR, minorV, "",<a name="line.531"></a>
<FONT color="green">532</FONT>                                textAnchor, TextAnchor.CENTER, 0.0));<a name="line.532"></a>
<FONT color="green">533</FONT>                    }<a name="line.533"></a>
<FONT color="green">534</FONT>                }<a name="line.534"></a>
<FONT color="green">535</FONT>                current = current + this.tickUnit.getSize();<a name="line.535"></a>
<FONT color="green">536</FONT>            }<a name="line.536"></a>
<FONT color="green">537</FONT>            return ticks;<a name="line.537"></a>
<FONT color="green">538</FONT>        }<a name="line.538"></a>
<FONT color="green">539</FONT>    <a name="line.539"></a>
<FONT color="green">540</FONT>        /**<a name="line.540"></a>
<FONT color="green">541</FONT>         * Returns a list of ticks for an axis at the left or right of the chart.<a name="line.541"></a>
<FONT color="green">542</FONT>         *<a name="line.542"></a>
<FONT color="green">543</FONT>         * @param g2  the graphics device.<a name="line.543"></a>
<FONT color="green">544</FONT>         * @param dataArea  the data area.<a name="line.544"></a>
<FONT color="green">545</FONT>         * @param edge  the edge.<a name="line.545"></a>
<FONT color="green">546</FONT>         *<a name="line.546"></a>
<FONT color="green">547</FONT>         * @return A list of ticks.<a name="line.547"></a>
<FONT color="green">548</FONT>         */<a name="line.548"></a>
<FONT color="green">549</FONT>        protected List refreshTicksVertical(Graphics2D g2, Rectangle2D dataArea,<a name="line.549"></a>
<FONT color="green">550</FONT>                RectangleEdge edge) {<a name="line.550"></a>
<FONT color="green">551</FONT>    <a name="line.551"></a>
<FONT color="green">552</FONT>            Range range = getRange();<a name="line.552"></a>
<FONT color="green">553</FONT>            List ticks = new ArrayList();<a name="line.553"></a>
<FONT color="green">554</FONT>            Font tickLabelFont = getTickLabelFont();<a name="line.554"></a>
<FONT color="green">555</FONT>            g2.setFont(tickLabelFont);<a name="line.555"></a>
<FONT color="green">556</FONT>            TextAnchor textAnchor;<a name="line.556"></a>
<FONT color="green">557</FONT>            if (edge == RectangleEdge.RIGHT) {<a name="line.557"></a>
<FONT color="green">558</FONT>                textAnchor = TextAnchor.CENTER_LEFT;<a name="line.558"></a>
<FONT color="green">559</FONT>            }<a name="line.559"></a>
<FONT color="green">560</FONT>            else {<a name="line.560"></a>
<FONT color="green">561</FONT>                textAnchor = TextAnchor.CENTER_RIGHT;<a name="line.561"></a>
<FONT color="green">562</FONT>            }<a name="line.562"></a>
<FONT color="green">563</FONT>    <a name="line.563"></a>
<FONT color="green">564</FONT>            if (isAutoTickUnitSelection()) {<a name="line.564"></a>
<FONT color="green">565</FONT>                selectAutoTickUnit(g2, dataArea, edge);<a name="line.565"></a>
<FONT color="green">566</FONT>            }<a name="line.566"></a>
<FONT color="green">567</FONT>            int minorTickCount = this.tickUnit.getMinorTickCount();<a name="line.567"></a>
<FONT color="green">568</FONT>            double start = Math.floor(calculateLog(getLowerBound()));<a name="line.568"></a>
<FONT color="green">569</FONT>            double end = Math.ceil(calculateLog(getUpperBound()));<a name="line.569"></a>
<FONT color="green">570</FONT>            double current = start;<a name="line.570"></a>
<FONT color="green">571</FONT>            while (current &lt;= end) {<a name="line.571"></a>
<FONT color="green">572</FONT>                double v = calculateValue(current);<a name="line.572"></a>
<FONT color="green">573</FONT>                if (range.contains(v)) {<a name="line.573"></a>
<FONT color="green">574</FONT>                    ticks.add(new NumberTick(TickType.MAJOR, v, createTickLabel(v),<a name="line.574"></a>
<FONT color="green">575</FONT>                            textAnchor, TextAnchor.CENTER, 0.0));<a name="line.575"></a>
<FONT color="green">576</FONT>                }<a name="line.576"></a>
<FONT color="green">577</FONT>                // add minor ticks (for gridlines)<a name="line.577"></a>
<FONT color="green">578</FONT>                double next = Math.pow(this.base, current<a name="line.578"></a>
<FONT color="green">579</FONT>                        + this.tickUnit.getSize());<a name="line.579"></a>
<FONT color="green">580</FONT>                for (int i = 1; i &lt; minorTickCount; i++) {<a name="line.580"></a>
<FONT color="green">581</FONT>                    double minorV = v + i * ((next - v) / minorTickCount);<a name="line.581"></a>
<FONT color="green">582</FONT>                    if (range.contains(minorV)) {<a name="line.582"></a>
<FONT color="green">583</FONT>                        ticks.add(new NumberTick(TickType.MINOR, minorV, "",<a name="line.583"></a>
<FONT color="green">584</FONT>                                textAnchor, TextAnchor.CENTER, 0.0));<a name="line.584"></a>
<FONT color="green">585</FONT>                    }<a name="line.585"></a>
<FONT color="green">586</FONT>                }<a name="line.586"></a>
<FONT color="green">587</FONT>                current = current + this.tickUnit.getSize();<a name="line.587"></a>
<FONT color="green">588</FONT>            }<a name="line.588"></a>
<FONT color="green">589</FONT>            return ticks;<a name="line.589"></a>
<FONT color="green">590</FONT>        }<a name="line.590"></a>
<FONT color="green">591</FONT>    <a name="line.591"></a>
<FONT color="green">592</FONT>        /**<a name="line.592"></a>
<FONT color="green">593</FONT>         * Selects an appropriate tick value for the axis.  The strategy is to<a name="line.593"></a>
<FONT color="green">594</FONT>         * display as many ticks as possible (selected from an array of 'standard'<a name="line.594"></a>
<FONT color="green">595</FONT>         * tick units) without the labels overlapping.<a name="line.595"></a>
<FONT color="green">596</FONT>         *<a name="line.596"></a>
<FONT color="green">597</FONT>         * @param g2  the graphics device.<a name="line.597"></a>
<FONT color="green">598</FONT>         * @param dataArea  the area defined by the axes.<a name="line.598"></a>
<FONT color="green">599</FONT>         * @param edge  the axis location.<a name="line.599"></a>
<FONT color="green">600</FONT>         *<a name="line.600"></a>
<FONT color="green">601</FONT>         * @since 1.0.7<a name="line.601"></a>
<FONT color="green">602</FONT>         */<a name="line.602"></a>
<FONT color="green">603</FONT>        protected void selectAutoTickUnit(Graphics2D g2, Rectangle2D dataArea,<a name="line.603"></a>
<FONT color="green">604</FONT>                RectangleEdge edge) {<a name="line.604"></a>
<FONT color="green">605</FONT>    <a name="line.605"></a>
<FONT color="green">606</FONT>            if (RectangleEdge.isTopOrBottom(edge)) {<a name="line.606"></a>
<FONT color="green">607</FONT>                selectHorizontalAutoTickUnit(g2, dataArea, edge);<a name="line.607"></a>
<FONT color="green">608</FONT>            }<a name="line.608"></a>
<FONT color="green">609</FONT>            else if (RectangleEdge.isLeftOrRight(edge)) {<a name="line.609"></a>
<FONT color="green">610</FONT>                selectVerticalAutoTickUnit(g2, dataArea, edge);<a name="line.610"></a>
<FONT color="green">611</FONT>            }<a name="line.611"></a>
<FONT color="green">612</FONT>    <a name="line.612"></a>
<FONT color="green">613</FONT>        }<a name="line.613"></a>
<FONT color="green">614</FONT>    <a name="line.614"></a>
<FONT color="green">615</FONT>        /**<a name="line.615"></a>
<FONT color="green">616</FONT>         * Selects an appropriate tick value for the axis.  The strategy is to<a name="line.616"></a>
<FONT color="green">617</FONT>         * display as many ticks as possible (selected from an array of 'standard'<a name="line.617"></a>
<FONT color="green">618</FONT>         * tick units) without the labels overlapping.<a name="line.618"></a>
<FONT color="green">619</FONT>         *<a name="line.619"></a>
<FONT color="green">620</FONT>         * @param g2  the graphics device.<a name="line.620"></a>
<FONT color="green">621</FONT>         * @param dataArea  the area defined by the axes.<a name="line.621"></a>
<FONT color="green">622</FONT>         * @param edge  the axis location.<a name="line.622"></a>
<FONT color="green">623</FONT>         *<a name="line.623"></a>
<FONT color="green">624</FONT>         * @since 1.0.7<a name="line.624"></a>
<FONT color="green">625</FONT>         */<a name="line.625"></a>
<FONT color="green">626</FONT>       protected void selectHorizontalAutoTickUnit(Graphics2D g2,<a name="line.626"></a>
<FONT color="green">627</FONT>               Rectangle2D dataArea, RectangleEdge edge) {<a name="line.627"></a>
<FONT color="green">628</FONT>    <a name="line.628"></a>
<FONT color="green">629</FONT>            double tickLabelWidth = estimateMaximumTickLabelWidth(g2,<a name="line.629"></a>
<FONT color="green">630</FONT>                    getTickUnit());<a name="line.630"></a>
<FONT color="green">631</FONT>    <a name="line.631"></a>
<FONT color="green">632</FONT>            // start with the current tick unit...<a name="line.632"></a>
<FONT color="green">633</FONT>            TickUnitSource tickUnits = getStandardTickUnits();<a name="line.633"></a>
<FONT color="green">634</FONT>            TickUnit unit1 = tickUnits.getCeilingTickUnit(getTickUnit());<a name="line.634"></a>
<FONT color="green">635</FONT>            double unit1Width = exponentLengthToJava2D(unit1.getSize(), dataArea,<a name="line.635"></a>
<FONT color="green">636</FONT>                    edge);<a name="line.636"></a>
<FONT color="green">637</FONT>    <a name="line.637"></a>
<FONT color="green">638</FONT>            // then extrapolate...<a name="line.638"></a>
<FONT color="green">639</FONT>            double guess = (tickLabelWidth / unit1Width) * unit1.getSize();<a name="line.639"></a>
<FONT color="green">640</FONT>    <a name="line.640"></a>
<FONT color="green">641</FONT>            NumberTickUnit unit2 = (NumberTickUnit)<a name="line.641"></a>
<FONT color="green">642</FONT>                    tickUnits.getCeilingTickUnit(guess);<a name="line.642"></a>
<FONT color="green">643</FONT>            double unit2Width = exponentLengthToJava2D(unit2.getSize(), dataArea,<a name="line.643"></a>
<FONT color="green">644</FONT>                    edge);<a name="line.644"></a>
<FONT color="green">645</FONT>    <a name="line.645"></a>
<FONT color="green">646</FONT>            tickLabelWidth = estimateMaximumTickLabelWidth(g2, unit2);<a name="line.646"></a>
<FONT color="green">647</FONT>            if (tickLabelWidth &gt; unit2Width) {<a name="line.647"></a>
<FONT color="green">648</FONT>                unit2 = (NumberTickUnit) tickUnits.getLargerTickUnit(unit2);<a name="line.648"></a>
<FONT color="green">649</FONT>            }<a name="line.649"></a>
<FONT color="green">650</FONT>    <a name="line.650"></a>
<FONT color="green">651</FONT>            setTickUnit(unit2, false, false);<a name="line.651"></a>
<FONT color="green">652</FONT>    <a name="line.652"></a>
<FONT color="green">653</FONT>        }<a name="line.653"></a>
<FONT color="green">654</FONT>    <a name="line.654"></a>
<FONT color="green">655</FONT>        /**<a name="line.655"></a>
<FONT color="green">656</FONT>         * Converts a length in data coordinates into the corresponding length in<a name="line.656"></a>
<FONT color="green">657</FONT>         * Java2D coordinates.<a name="line.657"></a>
<FONT color="green">658</FONT>         *<a name="line.658"></a>
<FONT color="green">659</FONT>         * @param length  the length.<a name="line.659"></a>
<FONT color="green">660</FONT>         * @param area  the plot area.<a name="line.660"></a>
<FONT color="green">661</FONT>         * @param edge  the edge along which the axis lies.<a name="line.661"></a>
<FONT color="green">662</FONT>         *<a name="line.662"></a>
<FONT color="green">663</FONT>         * @return The length in Java2D coordinates.<a name="line.663"></a>
<FONT color="green">664</FONT>         *<a name="line.664"></a>
<FONT color="green">665</FONT>         * @since 1.0.7<a name="line.665"></a>
<FONT color="green">666</FONT>         */<a name="line.666"></a>
<FONT color="green">667</FONT>        public double exponentLengthToJava2D(double length, Rectangle2D area,<a name="line.667"></a>
<FONT color="green">668</FONT>                                    RectangleEdge edge) {<a name="line.668"></a>
<FONT color="green">669</FONT>            double one = valueToJava2D(calculateValue(1.0), area, edge);<a name="line.669"></a>
<FONT color="green">670</FONT>            double l = valueToJava2D(calculateValue(length + 1.0), area, edge);<a name="line.670"></a>
<FONT color="green">671</FONT>            return Math.abs(l - one);<a name="line.671"></a>
<FONT color="green">672</FONT>        }<a name="line.672"></a>
<FONT color="green">673</FONT>    <a name="line.673"></a>
<FONT color="green">674</FONT>        /**<a name="line.674"></a>
<FONT color="green">675</FONT>         * Selects an appropriate tick value for the axis.  The strategy is to<a name="line.675"></a>
<FONT color="green">676</FONT>         * display as many ticks as possible (selected from an array of 'standard'<a name="line.676"></a>
<FONT color="green">677</FONT>         * tick units) without the labels overlapping.<a name="line.677"></a>
<FONT color="green">678</FONT>         *<a name="line.678"></a>
<FONT color="green">679</FONT>         * @param g2  the graphics device.<a name="line.679"></a>
<FONT color="green">680</FONT>         * @param dataArea  the area in which the plot should be drawn.<a name="line.680"></a>
<FONT color="green">681</FONT>         * @param edge  the axis location.<a name="line.681"></a>
<FONT color="green">682</FONT>         *<a name="line.682"></a>
<FONT color="green">683</FONT>         * @since 1.0.7<a name="line.683"></a>
<FONT color="green">684</FONT>         */<a name="line.684"></a>
<FONT color="green">685</FONT>        protected void selectVerticalAutoTickUnit(Graphics2D g2,<a name="line.685"></a>
<FONT color="green">686</FONT>                                                  Rectangle2D dataArea,<a name="line.686"></a>
<FONT color="green">687</FONT>                                                  RectangleEdge edge) {<a name="line.687"></a>
<FONT color="green">688</FONT>    <a name="line.688"></a>
<FONT color="green">689</FONT>            double tickLabelHeight = estimateMaximumTickLabelHeight(g2);<a name="line.689"></a>
<FONT color="green">690</FONT>    <a name="line.690"></a>
<FONT color="green">691</FONT>            // start with the current tick unit...<a name="line.691"></a>
<FONT color="green">692</FONT>            TickUnitSource tickUnits = getStandardTickUnits();<a name="line.692"></a>
<FONT color="green">693</FONT>            TickUnit unit1 = tickUnits.getCeilingTickUnit(getTickUnit());<a name="line.693"></a>
<FONT color="green">694</FONT>            double unitHeight = exponentLengthToJava2D(unit1.getSize(), dataArea,<a name="line.694"></a>
<FONT color="green">695</FONT>                    edge);<a name="line.695"></a>
<FONT color="green">696</FONT>    <a name="line.696"></a>
<FONT color="green">697</FONT>            // then extrapolate...<a name="line.697"></a>
<FONT color="green">698</FONT>            double guess = (tickLabelHeight / unitHeight) * unit1.getSize();<a name="line.698"></a>
<FONT color="green">699</FONT>    <a name="line.699"></a>
<FONT color="green">700</FONT>            NumberTickUnit unit2 = (NumberTickUnit)<a name="line.700"></a>
<FONT color="green">701</FONT>                    tickUnits.getCeilingTickUnit(guess);<a name="line.701"></a>
<FONT color="green">702</FONT>            double unit2Height = exponentLengthToJava2D(unit2.getSize(), dataArea,<a name="line.702"></a>
<FONT color="green">703</FONT>                    edge);<a name="line.703"></a>
<FONT color="green">704</FONT>    <a name="line.704"></a>
<FONT color="green">705</FONT>            tickLabelHeight = estimateMaximumTickLabelHeight(g2);<a name="line.705"></a>
<FONT color="green">706</FONT>            if (tickLabelHeight &gt; unit2Height) {<a name="line.706"></a>
<FONT color="green">707</FONT>                unit2 = (NumberTickUnit) tickUnits.getLargerTickUnit(unit2);<a name="line.707"></a>
<FONT color="green">708</FONT>            }<a name="line.708"></a>
<FONT color="green">709</FONT>    <a name="line.709"></a>
<FONT color="green">710</FONT>            setTickUnit(unit2, false, false);<a name="line.710"></a>
<FONT color="green">711</FONT>    <a name="line.711"></a>
<FONT color="green">712</FONT>        }<a name="line.712"></a>
<FONT color="green">713</FONT>    <a name="line.713"></a>
<FONT color="green">714</FONT>        /**<a name="line.714"></a>
<FONT color="green">715</FONT>         * Estimates the maximum tick label height.<a name="line.715"></a>
<FONT color="green">716</FONT>         *<a name="line.716"></a>
<FONT color="green">717</FONT>         * @param g2  the graphics device.<a name="line.717"></a>
<FONT color="green">718</FONT>         *<a name="line.718"></a>
<FONT color="green">719</FONT>         * @return The maximum height.<a name="line.719"></a>
<FONT color="green">720</FONT>         *<a name="line.720"></a>
<FONT color="green">721</FONT>         * @since 1.0.7<a name="line.721"></a>
<FONT color="green">722</FONT>         */<a name="line.722"></a>
<FONT color="green">723</FONT>        protected double estimateMaximumTickLabelHeight(Graphics2D g2) {<a name="line.723"></a>
<FONT color="green">724</FONT>    <a name="line.724"></a>
<FONT color="green">725</FONT>            RectangleInsets tickLabelInsets = getTickLabelInsets();<a name="line.725"></a>
<FONT color="green">726</FONT>            double result = tickLabelInsets.getTop() + tickLabelInsets.getBottom();<a name="line.726"></a>
<FONT color="green">727</FONT>    <a name="line.727"></a>
<FONT color="green">728</FONT>            Font tickLabelFont = getTickLabelFont();<a name="line.728"></a>
<FONT color="green">729</FONT>            FontRenderContext frc = g2.getFontRenderContext();<a name="line.729"></a>
<FONT color="green">730</FONT>            result += tickLabelFont.getLineMetrics("123", frc).getHeight();<a name="line.730"></a>
<FONT color="green">731</FONT>            return result;<a name="line.731"></a>
<FONT color="green">732</FONT>    <a name="line.732"></a>
<FONT color="green">733</FONT>        }<a name="line.733"></a>
<FONT color="green">734</FONT>    <a name="line.734"></a>
<FONT color="green">735</FONT>        /**<a name="line.735"></a>
<FONT color="green">736</FONT>         * Estimates the maximum width of the tick labels, assuming the specified<a name="line.736"></a>
<FONT color="green">737</FONT>         * tick unit is used.<a name="line.737"></a>
<FONT color="green">738</FONT>         * &lt;P&gt;<a name="line.738"></a>
<FONT color="green">739</FONT>         * Rather than computing the string bounds of every tick on the axis, we<a name="line.739"></a>
<FONT color="green">740</FONT>         * just look at two values: the lower bound and the upper bound for the<a name="line.740"></a>
<FONT color="green">741</FONT>         * axis.  These two values will usually be representative.<a name="line.741"></a>
<FONT color="green">742</FONT>         *<a name="line.742"></a>
<FONT color="green">743</FONT>         * @param g2  the graphics device.<a name="line.743"></a>
<FONT color="green">744</FONT>         * @param unit  the tick unit to use for calculation.<a name="line.744"></a>
<FONT color="green">745</FONT>         *<a name="line.745"></a>
<FONT color="green">746</FONT>         * @return The estimated maximum width of the tick labels.<a name="line.746"></a>
<FONT color="green">747</FONT>         *<a name="line.747"></a>
<FONT color="green">748</FONT>         * @since 1.0.7<a name="line.748"></a>
<FONT color="green">749</FONT>         */<a name="line.749"></a>
<FONT color="green">750</FONT>        protected double estimateMaximumTickLabelWidth(Graphics2D g2,<a name="line.750"></a>
<FONT color="green">751</FONT>                                                       TickUnit unit) {<a name="line.751"></a>
<FONT color="green">752</FONT>    <a name="line.752"></a>
<FONT color="green">753</FONT>            RectangleInsets tickLabelInsets = getTickLabelInsets();<a name="line.753"></a>
<FONT color="green">754</FONT>            double result = tickLabelInsets.getLeft() + tickLabelInsets.getRight();<a name="line.754"></a>
<FONT color="green">755</FONT>    <a name="line.755"></a>
<FONT color="green">756</FONT>            if (isVerticalTickLabels()) {<a name="line.756"></a>
<FONT color="green">757</FONT>                // all tick labels have the same width (equal to the height of the<a name="line.757"></a>
<FONT color="green">758</FONT>                // font)...<a name="line.758"></a>
<FONT color="green">759</FONT>                FontRenderContext frc = g2.getFontRenderContext();<a name="line.759"></a>
<FONT color="green">760</FONT>                LineMetrics lm = getTickLabelFont().getLineMetrics("0", frc);<a name="line.760"></a>
<FONT color="green">761</FONT>                result += lm.getHeight();<a name="line.761"></a>
<FONT color="green">762</FONT>            }<a name="line.762"></a>
<FONT color="green">763</FONT>            else {<a name="line.763"></a>
<FONT color="green">764</FONT>                // look at lower and upper bounds...<a name="line.764"></a>
<FONT color="green">765</FONT>                FontMetrics fm = g2.getFontMetrics(getTickLabelFont());<a name="line.765"></a>
<FONT color="green">766</FONT>                Range range = getRange();<a name="line.766"></a>
<FONT color="green">767</FONT>                double lower = range.getLowerBound();<a name="line.767"></a>
<FONT color="green">768</FONT>                double upper = range.getUpperBound();<a name="line.768"></a>
<FONT color="green">769</FONT>                String lowerStr = "";<a name="line.769"></a>
<FONT color="green">770</FONT>                String upperStr = "";<a name="line.770"></a>
<FONT color="green">771</FONT>                NumberFormat formatter = getNumberFormatOverride();<a name="line.771"></a>
<FONT color="green">772</FONT>                if (formatter != null) {<a name="line.772"></a>
<FONT color="green">773</FONT>                    lowerStr = formatter.format(lower);<a name="line.773"></a>
<FONT color="green">774</FONT>                    upperStr = formatter.format(upper);<a name="line.774"></a>
<FONT color="green">775</FONT>                }<a name="line.775"></a>
<FONT color="green">776</FONT>                else {<a name="line.776"></a>
<FONT color="green">777</FONT>                    lowerStr = unit.valueToString(lower);<a name="line.777"></a>
<FONT color="green">778</FONT>                    upperStr = unit.valueToString(upper);<a name="line.778"></a>
<FONT color="green">779</FONT>                }<a name="line.779"></a>
<FONT color="green">780</FONT>                double w1 = fm.stringWidth(lowerStr);<a name="line.780"></a>
<FONT color="green">781</FONT>                double w2 = fm.stringWidth(upperStr);<a name="line.781"></a>
<FONT color="green">782</FONT>                result += Math.max(w1, w2);<a name="line.782"></a>
<FONT color="green">783</FONT>            }<a name="line.783"></a>
<FONT color="green">784</FONT>    <a name="line.784"></a>
<FONT color="green">785</FONT>            return result;<a name="line.785"></a>
<FONT color="green">786</FONT>    <a name="line.786"></a>
<FONT color="green">787</FONT>        }<a name="line.787"></a>
<FONT color="green">788</FONT>    <a name="line.788"></a>
<FONT color="green">789</FONT>        /**<a name="line.789"></a>
<FONT color="green">790</FONT>         * Zooms in on the current range.<a name="line.790"></a>
<FONT color="green">791</FONT>         *<a name="line.791"></a>
<FONT color="green">792</FONT>         * @param lowerPercent  the new lower bound.<a name="line.792"></a>
<FONT color="green">793</FONT>         * @param upperPercent  the new upper bound.<a name="line.793"></a>
<FONT color="green">794</FONT>         */<a name="line.794"></a>
<FONT color="green">795</FONT>        public void zoomRange(double lowerPercent, double upperPercent) {<a name="line.795"></a>
<FONT color="green">796</FONT>            Range range = getRange();<a name="line.796"></a>
<FONT color="green">797</FONT>            double start = range.getLowerBound();<a name="line.797"></a>
<FONT color="green">798</FONT>            double end = range.getUpperBound();<a name="line.798"></a>
<FONT color="green">799</FONT>            double log1 = calculateLog(start);<a name="line.799"></a>
<FONT color="green">800</FONT>            double log2 = calculateLog(end);<a name="line.800"></a>
<FONT color="green">801</FONT>            double length = log2 - log1;<a name="line.801"></a>
<FONT color="green">802</FONT>            Range adjusted = null;<a name="line.802"></a>
<FONT color="green">803</FONT>            if (isInverted()) {<a name="line.803"></a>
<FONT color="green">804</FONT>                double logA = log1 + length * (1 - upperPercent);<a name="line.804"></a>
<FONT color="green">805</FONT>                double logB = log1 + length * (1 - lowerPercent);<a name="line.805"></a>
<FONT color="green">806</FONT>                adjusted = new Range(calculateValue(logA), calculateValue(logB));<a name="line.806"></a>
<FONT color="green">807</FONT>            }<a name="line.807"></a>
<FONT color="green">808</FONT>            else {<a name="line.808"></a>
<FONT color="green">809</FONT>                double logA = log1 + length * lowerPercent;<a name="line.809"></a>
<FONT color="green">810</FONT>                double logB = log1 + length * upperPercent;<a name="line.810"></a>
<FONT color="green">811</FONT>                adjusted = new Range(calculateValue(logA), calculateValue(logB));<a name="line.811"></a>
<FONT color="green">812</FONT>            }<a name="line.812"></a>
<FONT color="green">813</FONT>            setRange(adjusted);<a name="line.813"></a>
<FONT color="green">814</FONT>        }<a name="line.814"></a>
<FONT color="green">815</FONT>    <a name="line.815"></a>
<FONT color="green">816</FONT>        /**<a name="line.816"></a>
<FONT color="green">817</FONT>         * Slides the axis range by the specified percentage.<a name="line.817"></a>
<FONT color="green">818</FONT>         *<a name="line.818"></a>
<FONT color="green">819</FONT>         * @param percent  the percentage.<a name="line.819"></a>
<FONT color="green">820</FONT>         *<a name="line.820"></a>
<FONT color="green">821</FONT>         * @since 1.0.13<a name="line.821"></a>
<FONT color="green">822</FONT>         */<a name="line.822"></a>
<FONT color="green">823</FONT>        public void pan(double percent) {<a name="line.823"></a>
<FONT color="green">824</FONT>            Range range = getRange();<a name="line.824"></a>
<FONT color="green">825</FONT>            double lower = range.getLowerBound();<a name="line.825"></a>
<FONT color="green">826</FONT>            double upper = range.getUpperBound();<a name="line.826"></a>
<FONT color="green">827</FONT>            double log1 = calculateLog(lower);<a name="line.827"></a>
<FONT color="green">828</FONT>            double log2 = calculateLog(upper);<a name="line.828"></a>
<FONT color="green">829</FONT>            double length = log2 - log1;<a name="line.829"></a>
<FONT color="green">830</FONT>            double adj = length * percent;<a name="line.830"></a>
<FONT color="green">831</FONT>            log1 = log1 + adj;<a name="line.831"></a>
<FONT color="green">832</FONT>            log2 = log2 + adj;<a name="line.832"></a>
<FONT color="green">833</FONT>            setRange(calculateValue(log1), calculateValue(log2));<a name="line.833"></a>
<FONT color="green">834</FONT>        }<a name="line.834"></a>
<FONT color="green">835</FONT>    <a name="line.835"></a>
<FONT color="green">836</FONT>        /**<a name="line.836"></a>
<FONT color="green">837</FONT>         * Creates a tick label for the specified value.  Note that this method<a name="line.837"></a>
<FONT color="green">838</FONT>         * was 'private' prior to version 1.0.10.<a name="line.838"></a>
<FONT color="green">839</FONT>         *<a name="line.839"></a>
<FONT color="green">840</FONT>         * @param value  the value.<a name="line.840"></a>
<FONT color="green">841</FONT>         *<a name="line.841"></a>
<FONT color="green">842</FONT>         * @return The label.<a name="line.842"></a>
<FONT color="green">843</FONT>         *<a name="line.843"></a>
<FONT color="green">844</FONT>         * @since 1.0.10<a name="line.844"></a>
<FONT color="green">845</FONT>         */<a name="line.845"></a>
<FONT color="green">846</FONT>        protected String createTickLabel(double value) {<a name="line.846"></a>
<FONT color="green">847</FONT>            if (this.numberFormatOverride != null) {<a name="line.847"></a>
<FONT color="green">848</FONT>                return this.numberFormatOverride.format(value);<a name="line.848"></a>
<FONT color="green">849</FONT>            }<a name="line.849"></a>
<FONT color="green">850</FONT>            else {<a name="line.850"></a>
<FONT color="green">851</FONT>                return this.tickUnit.valueToString(value);<a name="line.851"></a>
<FONT color="green">852</FONT>            }<a name="line.852"></a>
<FONT color="green">853</FONT>        }<a name="line.853"></a>
<FONT color="green">854</FONT>    <a name="line.854"></a>
<FONT color="green">855</FONT>        /**<a name="line.855"></a>
<FONT color="green">856</FONT>         * Tests this axis for equality with an arbitrary object.<a name="line.856"></a>
<FONT color="green">857</FONT>         *<a name="line.857"></a>
<FONT color="green">858</FONT>         * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.858"></a>
<FONT color="green">859</FONT>         *<a name="line.859"></a>
<FONT color="green">860</FONT>         * @return A boolean.<a name="line.860"></a>
<FONT color="green">861</FONT>         */<a name="line.861"></a>
<FONT color="green">862</FONT>        public boolean equals(Object obj) {<a name="line.862"></a>
<FONT color="green">863</FONT>            if (obj == this) {<a name="line.863"></a>
<FONT color="green">864</FONT>                return true;<a name="line.864"></a>
<FONT color="green">865</FONT>            }<a name="line.865"></a>
<FONT color="green">866</FONT>            if (!(obj instanceof LogAxis)) {<a name="line.866"></a>
<FONT color="green">867</FONT>                return false;<a name="line.867"></a>
<FONT color="green">868</FONT>            }<a name="line.868"></a>
<FONT color="green">869</FONT>            LogAxis that = (LogAxis) obj;<a name="line.869"></a>
<FONT color="green">870</FONT>            if (this.base != that.base) {<a name="line.870"></a>
<FONT color="green">871</FONT>                return false;<a name="line.871"></a>
<FONT color="green">872</FONT>            }<a name="line.872"></a>
<FONT color="green">873</FONT>            if (this.smallestValue != that.smallestValue) {<a name="line.873"></a>
<FONT color="green">874</FONT>                return false;<a name="line.874"></a>
<FONT color="green">875</FONT>            }<a name="line.875"></a>
<FONT color="green">876</FONT>            return super.equals(obj);<a name="line.876"></a>
<FONT color="green">877</FONT>        }<a name="line.877"></a>
<FONT color="green">878</FONT>    <a name="line.878"></a>
<FONT color="green">879</FONT>        /**<a name="line.879"></a>
<FONT color="green">880</FONT>         * Returns a hash code for this instance.<a name="line.880"></a>
<FONT color="green">881</FONT>         *<a name="line.881"></a>
<FONT color="green">882</FONT>         * @return A hash code.<a name="line.882"></a>
<FONT color="green">883</FONT>         */<a name="line.883"></a>
<FONT color="green">884</FONT>        public int hashCode() {<a name="line.884"></a>
<FONT color="green">885</FONT>            int result = 193;<a name="line.885"></a>
<FONT color="green">886</FONT>            long temp = Double.doubleToLongBits(this.base);<a name="line.886"></a>
<FONT color="green">887</FONT>            result = 37 * result + (int) (temp ^ (temp &gt;&gt;&gt; 32));<a name="line.887"></a>
<FONT color="green">888</FONT>            temp = Double.doubleToLongBits(this.smallestValue);<a name="line.888"></a>
<FONT color="green">889</FONT>            result = 37 * result + (int) (temp ^ (temp &gt;&gt;&gt; 32));<a name="line.889"></a>
<FONT color="green">890</FONT>            if (this.numberFormatOverride != null) {<a name="line.890"></a>
<FONT color="green">891</FONT>                result = 37 * result + this.numberFormatOverride.hashCode();<a name="line.891"></a>
<FONT color="green">892</FONT>            }<a name="line.892"></a>
<FONT color="green">893</FONT>            result = 37 * result + this.tickUnit.hashCode();<a name="line.893"></a>
<FONT color="green">894</FONT>            return result;<a name="line.894"></a>
<FONT color="green">895</FONT>        }<a name="line.895"></a>
<FONT color="green">896</FONT>    <a name="line.896"></a>
<FONT color="green">897</FONT>        /**<a name="line.897"></a>
<FONT color="green">898</FONT>         * Returns a collection of tick units for log (base 10) values.<a name="line.898"></a>
<FONT color="green">899</FONT>         * Uses a given Locale to create the DecimalFormats.<a name="line.899"></a>
<FONT color="green">900</FONT>         *<a name="line.900"></a>
<FONT color="green">901</FONT>         * @param locale the locale to use to represent Numbers.<a name="line.901"></a>
<FONT color="green">902</FONT>         *<a name="line.902"></a>
<FONT color="green">903</FONT>         * @return A collection of tick units for integer values.<a name="line.903"></a>
<FONT color="green">904</FONT>         *<a name="line.904"></a>
<FONT color="green">905</FONT>         * @since 1.0.7<a name="line.905"></a>
<FONT color="green">906</FONT>         */<a name="line.906"></a>
<FONT color="green">907</FONT>        public static TickUnitSource createLogTickUnits(Locale locale) {<a name="line.907"></a>
<FONT color="green">908</FONT>            TickUnits units = new TickUnits();<a name="line.908"></a>
<FONT color="green">909</FONT>            NumberFormat numberFormat = new LogFormat();<a name="line.909"></a>
<FONT color="green">910</FONT>            units.add(new NumberTickUnit(0.05, numberFormat, 2));<a name="line.910"></a>
<FONT color="green">911</FONT>            units.add(new NumberTickUnit(0.1, numberFormat, 10));<a name="line.911"></a>
<FONT color="green">912</FONT>            units.add(new NumberTickUnit(0.2, numberFormat, 2));<a name="line.912"></a>
<FONT color="green">913</FONT>            units.add(new NumberTickUnit(0.5, numberFormat, 5));<a name="line.913"></a>
<FONT color="green">914</FONT>            units.add(new NumberTickUnit(1, numberFormat, 10));<a name="line.914"></a>
<FONT color="green">915</FONT>            units.add(new NumberTickUnit(2, numberFormat, 10));<a name="line.915"></a>
<FONT color="green">916</FONT>            units.add(new NumberTickUnit(3, numberFormat, 15));<a name="line.916"></a>
<FONT color="green">917</FONT>            units.add(new NumberTickUnit(4, numberFormat, 20));<a name="line.917"></a>
<FONT color="green">918</FONT>            units.add(new NumberTickUnit(5, numberFormat, 25));<a name="line.918"></a>
<FONT color="green">919</FONT>            units.add(new NumberTickUnit(6, numberFormat));<a name="line.919"></a>
<FONT color="green">920</FONT>            units.add(new NumberTickUnit(7, numberFormat));<a name="line.920"></a>
<FONT color="green">921</FONT>            units.add(new NumberTickUnit(8, numberFormat));<a name="line.921"></a>
<FONT color="green">922</FONT>            units.add(new NumberTickUnit(9, numberFormat));<a name="line.922"></a>
<FONT color="green">923</FONT>            units.add(new NumberTickUnit(10, numberFormat));<a name="line.923"></a>
<FONT color="green">924</FONT>            return units;<a name="line.924"></a>
<FONT color="green">925</FONT>        }<a name="line.925"></a>
<FONT color="green">926</FONT>    <a name="line.926"></a>
<FONT color="green">927</FONT>    }<a name="line.927"></a>




























































</PRE>
</BODY>
</HTML>
