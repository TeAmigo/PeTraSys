<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ===========================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JFreeChart : a free chart library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ===========================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     *<a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jfreechart/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it<a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by<a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or<a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but<a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY<a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public<a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,<a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.<a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc.<a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     *<a name="line.26"></a>
<FONT color="green">027</FONT>     * ---------------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * CyclicNumberAxis.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * ---------------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C) Copyright 2003-2008, by Nicolas Brodu and Contributors.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  Nicolas Brodu;<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   David Gilbert (for Object Refinery Limited);<a name="line.33"></a>
<FONT color="green">034</FONT>     *<a name="line.34"></a>
<FONT color="green">035</FONT>     * Changes<a name="line.35"></a>
<FONT color="green">036</FONT>     * -------<a name="line.36"></a>
<FONT color="green">037</FONT>     * 19-Nov-2003 : Initial import to JFreeChart from the JSynoptic project (NB);<a name="line.37"></a>
<FONT color="green">038</FONT>     * 16-Mar-2004 : Added plotState to draw() method (DG);<a name="line.38"></a>
<FONT color="green">039</FONT>     * 07-Apr-2004 : Modifed text bounds calculation (DG);<a name="line.39"></a>
<FONT color="green">040</FONT>     * 21-Apr-2005 : Replaced Insets with RectangleInsets, removed redundant<a name="line.40"></a>
<FONT color="green">041</FONT>     *               argument in selectAutoTickUnit() (DG);<a name="line.41"></a>
<FONT color="green">042</FONT>     * 22-Apr-2005 : Renamed refreshHorizontalTicks() --&gt; refreshTicksHorizontal<a name="line.42"></a>
<FONT color="green">043</FONT>     *               (for consistency with other classes) and removed unused<a name="line.43"></a>
<FONT color="green">044</FONT>     *               parameters (DG);<a name="line.44"></a>
<FONT color="green">045</FONT>     * 08-Jun-2005 : Fixed equals() method to handle GradientPaint (DG);<a name="line.45"></a>
<FONT color="green">046</FONT>     *<a name="line.46"></a>
<FONT color="green">047</FONT>     */<a name="line.47"></a>
<FONT color="green">048</FONT>    <a name="line.48"></a>
<FONT color="green">049</FONT>    package org.jfree.chart.axis;<a name="line.49"></a>
<FONT color="green">050</FONT>    <a name="line.50"></a>
<FONT color="green">051</FONT>    import java.awt.BasicStroke;<a name="line.51"></a>
<FONT color="green">052</FONT>    import java.awt.Color;<a name="line.52"></a>
<FONT color="green">053</FONT>    import java.awt.Font;<a name="line.53"></a>
<FONT color="green">054</FONT>    import java.awt.FontMetrics;<a name="line.54"></a>
<FONT color="green">055</FONT>    import java.awt.Graphics2D;<a name="line.55"></a>
<FONT color="green">056</FONT>    import java.awt.Paint;<a name="line.56"></a>
<FONT color="green">057</FONT>    import java.awt.Stroke;<a name="line.57"></a>
<FONT color="green">058</FONT>    import java.awt.geom.Line2D;<a name="line.58"></a>
<FONT color="green">059</FONT>    import java.awt.geom.Rectangle2D;<a name="line.59"></a>
<FONT color="green">060</FONT>    import java.io.IOException;<a name="line.60"></a>
<FONT color="green">061</FONT>    import java.io.ObjectInputStream;<a name="line.61"></a>
<FONT color="green">062</FONT>    import java.io.ObjectOutputStream;<a name="line.62"></a>
<FONT color="green">063</FONT>    import java.text.NumberFormat;<a name="line.63"></a>
<FONT color="green">064</FONT>    import java.util.List;<a name="line.64"></a>
<FONT color="green">065</FONT>    <a name="line.65"></a>
<FONT color="green">066</FONT>    import org.jfree.chart.plot.Plot;<a name="line.66"></a>
<FONT color="green">067</FONT>    import org.jfree.chart.plot.PlotRenderingInfo;<a name="line.67"></a>
<FONT color="green">068</FONT>    import org.jfree.data.Range;<a name="line.68"></a>
<FONT color="green">069</FONT>    import org.jfree.io.SerialUtilities;<a name="line.69"></a>
<FONT color="green">070</FONT>    import org.jfree.text.TextUtilities;<a name="line.70"></a>
<FONT color="green">071</FONT>    import org.jfree.ui.RectangleEdge;<a name="line.71"></a>
<FONT color="green">072</FONT>    import org.jfree.ui.TextAnchor;<a name="line.72"></a>
<FONT color="green">073</FONT>    import org.jfree.util.ObjectUtilities;<a name="line.73"></a>
<FONT color="green">074</FONT>    import org.jfree.util.PaintUtilities;<a name="line.74"></a>
<FONT color="green">075</FONT>    <a name="line.75"></a>
<FONT color="green">076</FONT>    /**<a name="line.76"></a>
<FONT color="green">077</FONT>    This class extends NumberAxis and handles cycling.<a name="line.77"></a>
<FONT color="green">078</FONT>    <a name="line.78"></a>
<FONT color="green">079</FONT>    Traditional representation of data in the range x0..x1<a name="line.79"></a>
<FONT color="green">080</FONT>    &lt;pre&gt;<a name="line.80"></a>
<FONT color="green">081</FONT>    |-------------------------|<a name="line.81"></a>
<FONT color="green">082</FONT>    x0                       x1<a name="line.82"></a>
<FONT color="green">083</FONT>    &lt;/pre&gt;<a name="line.83"></a>
<FONT color="green">084</FONT>    <a name="line.84"></a>
<FONT color="green">085</FONT>    Here, the range bounds are at the axis extremities.<a name="line.85"></a>
<FONT color="green">086</FONT>    With cyclic axis, however, the time is split in<a name="line.86"></a>
<FONT color="green">087</FONT>    "cycles", or "time frames", or the same duration : the period.<a name="line.87"></a>
<FONT color="green">088</FONT>    <a name="line.88"></a>
<FONT color="green">089</FONT>    A cycle axis cannot by definition handle a larger interval<a name="line.89"></a>
<FONT color="green">090</FONT>    than the period : &lt;pre&gt;x1 - x0 &gt;= period&lt;/pre&gt;. Thus, at most a full<a name="line.90"></a>
<FONT color="green">091</FONT>    period can be represented with such an axis.<a name="line.91"></a>
<FONT color="green">092</FONT>    <a name="line.92"></a>
<FONT color="green">093</FONT>    The cycle bound is the number between x0 and x1 which marks<a name="line.93"></a>
<FONT color="green">094</FONT>    the beginning of new time frame:<a name="line.94"></a>
<FONT color="green">095</FONT>    &lt;pre&gt;<a name="line.95"></a>
<FONT color="green">096</FONT>    |---------------------|----------------------------|<a name="line.96"></a>
<FONT color="green">097</FONT>    x0                   cb                           x1<a name="line.97"></a>
<FONT color="green">098</FONT>    &lt;---previous cycle---&gt;&lt;-------current cycle--------&gt;<a name="line.98"></a>
<FONT color="green">099</FONT>    &lt;/pre&gt;<a name="line.99"></a>
<FONT color="green">100</FONT>    <a name="line.100"></a>
<FONT color="green">101</FONT>    It is actually a multiple of the period, plus optionally<a name="line.101"></a>
<FONT color="green">102</FONT>    a start offset: &lt;pre&gt;cb = n * period + offset&lt;/pre&gt;<a name="line.102"></a>
<FONT color="green">103</FONT>    <a name="line.103"></a>
<FONT color="green">104</FONT>    Thus, by definition, two consecutive cycle bounds<a name="line.104"></a>
<FONT color="green">105</FONT>    period apart, which is precisely why it is called a<a name="line.105"></a>
<FONT color="green">106</FONT>    period.<a name="line.106"></a>
<FONT color="green">107</FONT>    <a name="line.107"></a>
<FONT color="green">108</FONT>    The visual representation of a cyclic axis is like that:<a name="line.108"></a>
<FONT color="green">109</FONT>    &lt;pre&gt;<a name="line.109"></a>
<FONT color="green">110</FONT>    |----------------------------|---------------------|<a name="line.110"></a>
<FONT color="green">111</FONT>    cb                         x1|x0                  cb<a name="line.111"></a>
<FONT color="green">112</FONT>    &lt;-------current cycle--------&gt;&lt;---previous cycle---&gt;<a name="line.112"></a>
<FONT color="green">113</FONT>    &lt;/pre&gt;<a name="line.113"></a>
<FONT color="green">114</FONT>    <a name="line.114"></a>
<FONT color="green">115</FONT>    The cycle bound is at the axis ends, then current<a name="line.115"></a>
<FONT color="green">116</FONT>    cycle is shown, then the last cycle. When using<a name="line.116"></a>
<FONT color="green">117</FONT>    dynamic data, the visual effect is the current cycle<a name="line.117"></a>
<FONT color="green">118</FONT>    erases the last cycle as x grows. Then, the next cycle<a name="line.118"></a>
<FONT color="green">119</FONT>    bound is reached, and the process starts over, erasing<a name="line.119"></a>
<FONT color="green">120</FONT>    the previous cycle.<a name="line.120"></a>
<FONT color="green">121</FONT>    <a name="line.121"></a>
<FONT color="green">122</FONT>    A Cyclic item renderer is provided to do exactly this.<a name="line.122"></a>
<FONT color="green">123</FONT>    <a name="line.123"></a>
<FONT color="green">124</FONT>     */<a name="line.124"></a>
<FONT color="green">125</FONT>    public class CyclicNumberAxis extends NumberAxis {<a name="line.125"></a>
<FONT color="green">126</FONT>    <a name="line.126"></a>
<FONT color="green">127</FONT>        /** For serialization. */<a name="line.127"></a>
<FONT color="green">128</FONT>        static final long serialVersionUID = -7514160997164582554L;<a name="line.128"></a>
<FONT color="green">129</FONT>    <a name="line.129"></a>
<FONT color="green">130</FONT>        /** The default axis line stroke. */<a name="line.130"></a>
<FONT color="green">131</FONT>        public static Stroke DEFAULT_ADVANCE_LINE_STROKE = new BasicStroke(1.0f);<a name="line.131"></a>
<FONT color="green">132</FONT>    <a name="line.132"></a>
<FONT color="green">133</FONT>        /** The default axis line paint. */<a name="line.133"></a>
<FONT color="green">134</FONT>        public static final Paint DEFAULT_ADVANCE_LINE_PAINT = Color.gray;<a name="line.134"></a>
<FONT color="green">135</FONT>    <a name="line.135"></a>
<FONT color="green">136</FONT>        /** The offset. */<a name="line.136"></a>
<FONT color="green">137</FONT>        protected double offset;<a name="line.137"></a>
<FONT color="green">138</FONT>    <a name="line.138"></a>
<FONT color="green">139</FONT>        /** The period.*/<a name="line.139"></a>
<FONT color="green">140</FONT>        protected double period;<a name="line.140"></a>
<FONT color="green">141</FONT>    <a name="line.141"></a>
<FONT color="green">142</FONT>        /** ??. */<a name="line.142"></a>
<FONT color="green">143</FONT>        protected boolean boundMappedToLastCycle;<a name="line.143"></a>
<FONT color="green">144</FONT>    <a name="line.144"></a>
<FONT color="green">145</FONT>        /** A flag that controls whether or not the advance line is visible. */<a name="line.145"></a>
<FONT color="green">146</FONT>        protected boolean advanceLineVisible;<a name="line.146"></a>
<FONT color="green">147</FONT>    <a name="line.147"></a>
<FONT color="green">148</FONT>        /** The advance line stroke. */<a name="line.148"></a>
<FONT color="green">149</FONT>        protected transient Stroke advanceLineStroke = DEFAULT_ADVANCE_LINE_STROKE;<a name="line.149"></a>
<FONT color="green">150</FONT>    <a name="line.150"></a>
<FONT color="green">151</FONT>        /** The advance line paint. */<a name="line.151"></a>
<FONT color="green">152</FONT>        protected transient Paint advanceLinePaint;<a name="line.152"></a>
<FONT color="green">153</FONT>    <a name="line.153"></a>
<FONT color="green">154</FONT>        private transient boolean internalMarkerWhenTicksOverlap;<a name="line.154"></a>
<FONT color="green">155</FONT>        private transient Tick internalMarkerCycleBoundTick;<a name="line.155"></a>
<FONT color="green">156</FONT>    <a name="line.156"></a>
<FONT color="green">157</FONT>        /**<a name="line.157"></a>
<FONT color="green">158</FONT>         * Creates a CycleNumberAxis with the given period.<a name="line.158"></a>
<FONT color="green">159</FONT>         *<a name="line.159"></a>
<FONT color="green">160</FONT>         * @param period  the period.<a name="line.160"></a>
<FONT color="green">161</FONT>         */<a name="line.161"></a>
<FONT color="green">162</FONT>        public CyclicNumberAxis(double period) {<a name="line.162"></a>
<FONT color="green">163</FONT>            this(period, 0.0);<a name="line.163"></a>
<FONT color="green">164</FONT>        }<a name="line.164"></a>
<FONT color="green">165</FONT>    <a name="line.165"></a>
<FONT color="green">166</FONT>        /**<a name="line.166"></a>
<FONT color="green">167</FONT>         * Creates a CycleNumberAxis with the given period and offset.<a name="line.167"></a>
<FONT color="green">168</FONT>         *<a name="line.168"></a>
<FONT color="green">169</FONT>         * @param period  the period.<a name="line.169"></a>
<FONT color="green">170</FONT>         * @param offset  the offset.<a name="line.170"></a>
<FONT color="green">171</FONT>         */<a name="line.171"></a>
<FONT color="green">172</FONT>        public CyclicNumberAxis(double period, double offset) {<a name="line.172"></a>
<FONT color="green">173</FONT>            this(period, offset, null);<a name="line.173"></a>
<FONT color="green">174</FONT>        }<a name="line.174"></a>
<FONT color="green">175</FONT>    <a name="line.175"></a>
<FONT color="green">176</FONT>        /**<a name="line.176"></a>
<FONT color="green">177</FONT>         * Creates a named CycleNumberAxis with the given period.<a name="line.177"></a>
<FONT color="green">178</FONT>         *<a name="line.178"></a>
<FONT color="green">179</FONT>         * @param period  the period.<a name="line.179"></a>
<FONT color="green">180</FONT>         * @param label  the label.<a name="line.180"></a>
<FONT color="green">181</FONT>         */<a name="line.181"></a>
<FONT color="green">182</FONT>        public CyclicNumberAxis(double period, String label) {<a name="line.182"></a>
<FONT color="green">183</FONT>            this(0, period, label);<a name="line.183"></a>
<FONT color="green">184</FONT>        }<a name="line.184"></a>
<FONT color="green">185</FONT>    <a name="line.185"></a>
<FONT color="green">186</FONT>        /**<a name="line.186"></a>
<FONT color="green">187</FONT>         * Creates a named CycleNumberAxis with the given period and offset.<a name="line.187"></a>
<FONT color="green">188</FONT>         *<a name="line.188"></a>
<FONT color="green">189</FONT>         * @param period  the period.<a name="line.189"></a>
<FONT color="green">190</FONT>         * @param offset  the offset.<a name="line.190"></a>
<FONT color="green">191</FONT>         * @param label  the label.<a name="line.191"></a>
<FONT color="green">192</FONT>         */<a name="line.192"></a>
<FONT color="green">193</FONT>        public CyclicNumberAxis(double period, double offset, String label) {<a name="line.193"></a>
<FONT color="green">194</FONT>            super(label);<a name="line.194"></a>
<FONT color="green">195</FONT>            this.period = period;<a name="line.195"></a>
<FONT color="green">196</FONT>            this.offset = offset;<a name="line.196"></a>
<FONT color="green">197</FONT>            setFixedAutoRange(period);<a name="line.197"></a>
<FONT color="green">198</FONT>            this.advanceLineVisible = true;<a name="line.198"></a>
<FONT color="green">199</FONT>            this.advanceLinePaint = DEFAULT_ADVANCE_LINE_PAINT;<a name="line.199"></a>
<FONT color="green">200</FONT>        }<a name="line.200"></a>
<FONT color="green">201</FONT>    <a name="line.201"></a>
<FONT color="green">202</FONT>        /**<a name="line.202"></a>
<FONT color="green">203</FONT>         * The advance line is the line drawn at the limit of the current cycle,<a name="line.203"></a>
<FONT color="green">204</FONT>         * when erasing the previous cycle.<a name="line.204"></a>
<FONT color="green">205</FONT>         *<a name="line.205"></a>
<FONT color="green">206</FONT>         * @return A boolean.<a name="line.206"></a>
<FONT color="green">207</FONT>         */<a name="line.207"></a>
<FONT color="green">208</FONT>        public boolean isAdvanceLineVisible() {<a name="line.208"></a>
<FONT color="green">209</FONT>            return this.advanceLineVisible;<a name="line.209"></a>
<FONT color="green">210</FONT>        }<a name="line.210"></a>
<FONT color="green">211</FONT>    <a name="line.211"></a>
<FONT color="green">212</FONT>        /**<a name="line.212"></a>
<FONT color="green">213</FONT>         * The advance line is the line drawn at the limit of the current cycle,<a name="line.213"></a>
<FONT color="green">214</FONT>         * when erasing the previous cycle.<a name="line.214"></a>
<FONT color="green">215</FONT>         *<a name="line.215"></a>
<FONT color="green">216</FONT>         * @param visible  the flag.<a name="line.216"></a>
<FONT color="green">217</FONT>         */<a name="line.217"></a>
<FONT color="green">218</FONT>        public void setAdvanceLineVisible(boolean visible) {<a name="line.218"></a>
<FONT color="green">219</FONT>            this.advanceLineVisible = visible;<a name="line.219"></a>
<FONT color="green">220</FONT>        }<a name="line.220"></a>
<FONT color="green">221</FONT>    <a name="line.221"></a>
<FONT color="green">222</FONT>        /**<a name="line.222"></a>
<FONT color="green">223</FONT>         * The advance line is the line drawn at the limit of the current cycle,<a name="line.223"></a>
<FONT color="green">224</FONT>         * when erasing the previous cycle.<a name="line.224"></a>
<FONT color="green">225</FONT>         *<a name="line.225"></a>
<FONT color="green">226</FONT>         * @return The paint (never &lt;code&gt;null&lt;/code&gt;).<a name="line.226"></a>
<FONT color="green">227</FONT>         */<a name="line.227"></a>
<FONT color="green">228</FONT>        public Paint getAdvanceLinePaint() {<a name="line.228"></a>
<FONT color="green">229</FONT>            return this.advanceLinePaint;<a name="line.229"></a>
<FONT color="green">230</FONT>        }<a name="line.230"></a>
<FONT color="green">231</FONT>    <a name="line.231"></a>
<FONT color="green">232</FONT>        /**<a name="line.232"></a>
<FONT color="green">233</FONT>         * The advance line is the line drawn at the limit of the current cycle,<a name="line.233"></a>
<FONT color="green">234</FONT>         * when erasing the previous cycle.<a name="line.234"></a>
<FONT color="green">235</FONT>         *<a name="line.235"></a>
<FONT color="green">236</FONT>         * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.236"></a>
<FONT color="green">237</FONT>         */<a name="line.237"></a>
<FONT color="green">238</FONT>        public void setAdvanceLinePaint(Paint paint) {<a name="line.238"></a>
<FONT color="green">239</FONT>            if (paint == null) {<a name="line.239"></a>
<FONT color="green">240</FONT>                throw new IllegalArgumentException("Null 'paint' argument.");<a name="line.240"></a>
<FONT color="green">241</FONT>            }<a name="line.241"></a>
<FONT color="green">242</FONT>            this.advanceLinePaint = paint;<a name="line.242"></a>
<FONT color="green">243</FONT>        }<a name="line.243"></a>
<FONT color="green">244</FONT>    <a name="line.244"></a>
<FONT color="green">245</FONT>        /**<a name="line.245"></a>
<FONT color="green">246</FONT>         * The advance line is the line drawn at the limit of the current cycle,<a name="line.246"></a>
<FONT color="green">247</FONT>         * when erasing the previous cycle.<a name="line.247"></a>
<FONT color="green">248</FONT>         *<a name="line.248"></a>
<FONT color="green">249</FONT>         * @return The stroke (never &lt;code&gt;null&lt;/code&gt;).<a name="line.249"></a>
<FONT color="green">250</FONT>         */<a name="line.250"></a>
<FONT color="green">251</FONT>        public Stroke getAdvanceLineStroke() {<a name="line.251"></a>
<FONT color="green">252</FONT>            return this.advanceLineStroke;<a name="line.252"></a>
<FONT color="green">253</FONT>        }<a name="line.253"></a>
<FONT color="green">254</FONT>        /**<a name="line.254"></a>
<FONT color="green">255</FONT>         * The advance line is the line drawn at the limit of the current cycle,<a name="line.255"></a>
<FONT color="green">256</FONT>         * when erasing the previous cycle.<a name="line.256"></a>
<FONT color="green">257</FONT>         *<a name="line.257"></a>
<FONT color="green">258</FONT>         * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.258"></a>
<FONT color="green">259</FONT>         */<a name="line.259"></a>
<FONT color="green">260</FONT>        public void setAdvanceLineStroke(Stroke stroke) {<a name="line.260"></a>
<FONT color="green">261</FONT>            if (stroke == null) {<a name="line.261"></a>
<FONT color="green">262</FONT>                throw new IllegalArgumentException("Null 'stroke' argument.");<a name="line.262"></a>
<FONT color="green">263</FONT>            }<a name="line.263"></a>
<FONT color="green">264</FONT>            this.advanceLineStroke = stroke;<a name="line.264"></a>
<FONT color="green">265</FONT>        }<a name="line.265"></a>
<FONT color="green">266</FONT>    <a name="line.266"></a>
<FONT color="green">267</FONT>        /**<a name="line.267"></a>
<FONT color="green">268</FONT>         * The cycle bound can be associated either with the current or with the<a name="line.268"></a>
<FONT color="green">269</FONT>         * last cycle.  It's up to the user's choice to decide which, as this is<a name="line.269"></a>
<FONT color="green">270</FONT>         * just a convention.  By default, the cycle bound is mapped to the current<a name="line.270"></a>
<FONT color="green">271</FONT>         * cycle.<a name="line.271"></a>
<FONT color="green">272</FONT>         * &lt;br&gt;<a name="line.272"></a>
<FONT color="green">273</FONT>         * Note that this has no effect on visual appearance, as the cycle bound is<a name="line.273"></a>
<FONT color="green">274</FONT>         * mapped successively for both axis ends. Use this function for correct<a name="line.274"></a>
<FONT color="green">275</FONT>         * results in translateValueToJava2D.<a name="line.275"></a>
<FONT color="green">276</FONT>         *<a name="line.276"></a>
<FONT color="green">277</FONT>         * @return &lt;code&gt;true&lt;/code&gt; if the cycle bound is mapped to the last<a name="line.277"></a>
<FONT color="green">278</FONT>         *         cycle, &lt;code&gt;false&lt;/code&gt; if it is bound to the current cycle<a name="line.278"></a>
<FONT color="green">279</FONT>         *         (default)<a name="line.279"></a>
<FONT color="green">280</FONT>         */<a name="line.280"></a>
<FONT color="green">281</FONT>        public boolean isBoundMappedToLastCycle() {<a name="line.281"></a>
<FONT color="green">282</FONT>            return this.boundMappedToLastCycle;<a name="line.282"></a>
<FONT color="green">283</FONT>        }<a name="line.283"></a>
<FONT color="green">284</FONT>    <a name="line.284"></a>
<FONT color="green">285</FONT>        /**<a name="line.285"></a>
<FONT color="green">286</FONT>         * The cycle bound can be associated either with the current or with the<a name="line.286"></a>
<FONT color="green">287</FONT>         * last cycle.  It's up to the user's choice to decide which, as this is<a name="line.287"></a>
<FONT color="green">288</FONT>         * just a convention. By default, the cycle bound is mapped to the current<a name="line.288"></a>
<FONT color="green">289</FONT>         * cycle.<a name="line.289"></a>
<FONT color="green">290</FONT>         * &lt;br&gt;<a name="line.290"></a>
<FONT color="green">291</FONT>         * Note that this has no effect on visual appearance, as the cycle bound is<a name="line.291"></a>
<FONT color="green">292</FONT>         * mapped successively for both axis ends. Use this function for correct<a name="line.292"></a>
<FONT color="green">293</FONT>         * results in valueToJava2D.<a name="line.293"></a>
<FONT color="green">294</FONT>         *<a name="line.294"></a>
<FONT color="green">295</FONT>         * @param boundMappedToLastCycle Set it to true to map the cycle bound to<a name="line.295"></a>
<FONT color="green">296</FONT>         *        the last cycle.<a name="line.296"></a>
<FONT color="green">297</FONT>         */<a name="line.297"></a>
<FONT color="green">298</FONT>        public void setBoundMappedToLastCycle(boolean boundMappedToLastCycle) {<a name="line.298"></a>
<FONT color="green">299</FONT>            this.boundMappedToLastCycle = boundMappedToLastCycle;<a name="line.299"></a>
<FONT color="green">300</FONT>        }<a name="line.300"></a>
<FONT color="green">301</FONT>    <a name="line.301"></a>
<FONT color="green">302</FONT>        /**<a name="line.302"></a>
<FONT color="green">303</FONT>         * Selects a tick unit when the axis is displayed horizontally.<a name="line.303"></a>
<FONT color="green">304</FONT>         *<a name="line.304"></a>
<FONT color="green">305</FONT>         * @param g2  the graphics device.<a name="line.305"></a>
<FONT color="green">306</FONT>         * @param drawArea  the drawing area.<a name="line.306"></a>
<FONT color="green">307</FONT>         * @param dataArea  the data area.<a name="line.307"></a>
<FONT color="green">308</FONT>         * @param edge  the side of the rectangle on which the axis is displayed.<a name="line.308"></a>
<FONT color="green">309</FONT>         */<a name="line.309"></a>
<FONT color="green">310</FONT>        protected void selectHorizontalAutoTickUnit(Graphics2D g2,<a name="line.310"></a>
<FONT color="green">311</FONT>                                                    Rectangle2D drawArea,<a name="line.311"></a>
<FONT color="green">312</FONT>                                                    Rectangle2D dataArea,<a name="line.312"></a>
<FONT color="green">313</FONT>                                                    RectangleEdge edge) {<a name="line.313"></a>
<FONT color="green">314</FONT>    <a name="line.314"></a>
<FONT color="green">315</FONT>            double tickLabelWidth<a name="line.315"></a>
<FONT color="green">316</FONT>                = estimateMaximumTickLabelWidth(g2, getTickUnit());<a name="line.316"></a>
<FONT color="green">317</FONT>    <a name="line.317"></a>
<FONT color="green">318</FONT>            // Compute number of labels<a name="line.318"></a>
<FONT color="green">319</FONT>            double n = getRange().getLength()<a name="line.319"></a>
<FONT color="green">320</FONT>                       * tickLabelWidth / dataArea.getWidth();<a name="line.320"></a>
<FONT color="green">321</FONT>    <a name="line.321"></a>
<FONT color="green">322</FONT>            setTickUnit(<a name="line.322"></a>
<FONT color="green">323</FONT>                (NumberTickUnit) getStandardTickUnits().getCeilingTickUnit(n),<a name="line.323"></a>
<FONT color="green">324</FONT>                false, false<a name="line.324"></a>
<FONT color="green">325</FONT>            );<a name="line.325"></a>
<FONT color="green">326</FONT>    <a name="line.326"></a>
<FONT color="green">327</FONT>         }<a name="line.327"></a>
<FONT color="green">328</FONT>    <a name="line.328"></a>
<FONT color="green">329</FONT>        /**<a name="line.329"></a>
<FONT color="green">330</FONT>         * Selects a tick unit when the axis is displayed vertically.<a name="line.330"></a>
<FONT color="green">331</FONT>         *<a name="line.331"></a>
<FONT color="green">332</FONT>         * @param g2  the graphics device.<a name="line.332"></a>
<FONT color="green">333</FONT>         * @param drawArea  the drawing area.<a name="line.333"></a>
<FONT color="green">334</FONT>         * @param dataArea  the data area.<a name="line.334"></a>
<FONT color="green">335</FONT>         * @param edge  the side of the rectangle on which the axis is displayed.<a name="line.335"></a>
<FONT color="green">336</FONT>         */<a name="line.336"></a>
<FONT color="green">337</FONT>        protected void selectVerticalAutoTickUnit(Graphics2D g2,<a name="line.337"></a>
<FONT color="green">338</FONT>                                                    Rectangle2D drawArea,<a name="line.338"></a>
<FONT color="green">339</FONT>                                                    Rectangle2D dataArea,<a name="line.339"></a>
<FONT color="green">340</FONT>                                                    RectangleEdge edge) {<a name="line.340"></a>
<FONT color="green">341</FONT>    <a name="line.341"></a>
<FONT color="green">342</FONT>            double tickLabelWidth<a name="line.342"></a>
<FONT color="green">343</FONT>                = estimateMaximumTickLabelWidth(g2, getTickUnit());<a name="line.343"></a>
<FONT color="green">344</FONT>    <a name="line.344"></a>
<FONT color="green">345</FONT>            // Compute number of labels<a name="line.345"></a>
<FONT color="green">346</FONT>            double n = getRange().getLength()<a name="line.346"></a>
<FONT color="green">347</FONT>                       * tickLabelWidth / dataArea.getHeight();<a name="line.347"></a>
<FONT color="green">348</FONT>    <a name="line.348"></a>
<FONT color="green">349</FONT>            setTickUnit(<a name="line.349"></a>
<FONT color="green">350</FONT>                (NumberTickUnit) getStandardTickUnits().getCeilingTickUnit(n),<a name="line.350"></a>
<FONT color="green">351</FONT>                false, false<a name="line.351"></a>
<FONT color="green">352</FONT>            );<a name="line.352"></a>
<FONT color="green">353</FONT>    <a name="line.353"></a>
<FONT color="green">354</FONT>         }<a name="line.354"></a>
<FONT color="green">355</FONT>    <a name="line.355"></a>
<FONT color="green">356</FONT>        /**<a name="line.356"></a>
<FONT color="green">357</FONT>         * A special Number tick that also hold information about the cycle bound<a name="line.357"></a>
<FONT color="green">358</FONT>         * mapping for this tick.  This is especially useful for having a tick at<a name="line.358"></a>
<FONT color="green">359</FONT>         * each axis end with the cycle bound value.  See also<a name="line.359"></a>
<FONT color="green">360</FONT>         * isBoundMappedToLastCycle()<a name="line.360"></a>
<FONT color="green">361</FONT>         */<a name="line.361"></a>
<FONT color="green">362</FONT>        protected static class CycleBoundTick extends NumberTick {<a name="line.362"></a>
<FONT color="green">363</FONT>    <a name="line.363"></a>
<FONT color="green">364</FONT>            /** Map to last cycle. */<a name="line.364"></a>
<FONT color="green">365</FONT>            public boolean mapToLastCycle;<a name="line.365"></a>
<FONT color="green">366</FONT>    <a name="line.366"></a>
<FONT color="green">367</FONT>            /**<a name="line.367"></a>
<FONT color="green">368</FONT>             * Creates a new tick.<a name="line.368"></a>
<FONT color="green">369</FONT>             *<a name="line.369"></a>
<FONT color="green">370</FONT>             * @param mapToLastCycle  map to last cycle?<a name="line.370"></a>
<FONT color="green">371</FONT>             * @param number  the number.<a name="line.371"></a>
<FONT color="green">372</FONT>             * @param label  the label.<a name="line.372"></a>
<FONT color="green">373</FONT>             * @param textAnchor  the text anchor.<a name="line.373"></a>
<FONT color="green">374</FONT>             * @param rotationAnchor  the rotation anchor.<a name="line.374"></a>
<FONT color="green">375</FONT>             * @param angle  the rotation angle.<a name="line.375"></a>
<FONT color="green">376</FONT>             */<a name="line.376"></a>
<FONT color="green">377</FONT>            public CycleBoundTick(boolean mapToLastCycle, Number number,<a name="line.377"></a>
<FONT color="green">378</FONT>                                  String label, TextAnchor textAnchor,<a name="line.378"></a>
<FONT color="green">379</FONT>                                  TextAnchor rotationAnchor, double angle) {<a name="line.379"></a>
<FONT color="green">380</FONT>                super(number, label, textAnchor, rotationAnchor, angle);<a name="line.380"></a>
<FONT color="green">381</FONT>                this.mapToLastCycle = mapToLastCycle;<a name="line.381"></a>
<FONT color="green">382</FONT>            }<a name="line.382"></a>
<FONT color="green">383</FONT>        }<a name="line.383"></a>
<FONT color="green">384</FONT>    <a name="line.384"></a>
<FONT color="green">385</FONT>        /**<a name="line.385"></a>
<FONT color="green">386</FONT>         * Calculates the anchor point for a tick.<a name="line.386"></a>
<FONT color="green">387</FONT>         *<a name="line.387"></a>
<FONT color="green">388</FONT>         * @param tick  the tick.<a name="line.388"></a>
<FONT color="green">389</FONT>         * @param cursor  the cursor.<a name="line.389"></a>
<FONT color="green">390</FONT>         * @param dataArea  the data area.<a name="line.390"></a>
<FONT color="green">391</FONT>         * @param edge  the side on which the axis is displayed.<a name="line.391"></a>
<FONT color="green">392</FONT>         *<a name="line.392"></a>
<FONT color="green">393</FONT>         * @return The anchor point.<a name="line.393"></a>
<FONT color="green">394</FONT>         */<a name="line.394"></a>
<FONT color="green">395</FONT>        protected float[] calculateAnchorPoint(ValueTick tick, double cursor,<a name="line.395"></a>
<FONT color="green">396</FONT>                                               Rectangle2D dataArea,<a name="line.396"></a>
<FONT color="green">397</FONT>                                               RectangleEdge edge) {<a name="line.397"></a>
<FONT color="green">398</FONT>            if (tick instanceof CycleBoundTick) {<a name="line.398"></a>
<FONT color="green">399</FONT>                boolean mapsav = this.boundMappedToLastCycle;<a name="line.399"></a>
<FONT color="green">400</FONT>                this.boundMappedToLastCycle<a name="line.400"></a>
<FONT color="green">401</FONT>                    = ((CycleBoundTick) tick).mapToLastCycle;<a name="line.401"></a>
<FONT color="green">402</FONT>                float[] ret = super.calculateAnchorPoint(<a name="line.402"></a>
<FONT color="green">403</FONT>                    tick, cursor, dataArea, edge<a name="line.403"></a>
<FONT color="green">404</FONT>                );<a name="line.404"></a>
<FONT color="green">405</FONT>                this.boundMappedToLastCycle = mapsav;<a name="line.405"></a>
<FONT color="green">406</FONT>                return ret;<a name="line.406"></a>
<FONT color="green">407</FONT>            }<a name="line.407"></a>
<FONT color="green">408</FONT>            return super.calculateAnchorPoint(tick, cursor, dataArea, edge);<a name="line.408"></a>
<FONT color="green">409</FONT>        }<a name="line.409"></a>
<FONT color="green">410</FONT>    <a name="line.410"></a>
<FONT color="green">411</FONT>    <a name="line.411"></a>
<FONT color="green">412</FONT>    <a name="line.412"></a>
<FONT color="green">413</FONT>        /**<a name="line.413"></a>
<FONT color="green">414</FONT>         * Builds a list of ticks for the axis.  This method is called when the<a name="line.414"></a>
<FONT color="green">415</FONT>         * axis is at the top or bottom of the chart (so the axis is "horizontal").<a name="line.415"></a>
<FONT color="green">416</FONT>         *<a name="line.416"></a>
<FONT color="green">417</FONT>         * @param g2  the graphics device.<a name="line.417"></a>
<FONT color="green">418</FONT>         * @param dataArea  the data area.<a name="line.418"></a>
<FONT color="green">419</FONT>         * @param edge  the edge.<a name="line.419"></a>
<FONT color="green">420</FONT>         *<a name="line.420"></a>
<FONT color="green">421</FONT>         * @return A list of ticks.<a name="line.421"></a>
<FONT color="green">422</FONT>         */<a name="line.422"></a>
<FONT color="green">423</FONT>        protected List refreshTicksHorizontal(Graphics2D g2,<a name="line.423"></a>
<FONT color="green">424</FONT>                                              Rectangle2D dataArea,<a name="line.424"></a>
<FONT color="green">425</FONT>                                              RectangleEdge edge) {<a name="line.425"></a>
<FONT color="green">426</FONT>    <a name="line.426"></a>
<FONT color="green">427</FONT>            List result = new java.util.ArrayList();<a name="line.427"></a>
<FONT color="green">428</FONT>    <a name="line.428"></a>
<FONT color="green">429</FONT>            Font tickLabelFont = getTickLabelFont();<a name="line.429"></a>
<FONT color="green">430</FONT>            g2.setFont(tickLabelFont);<a name="line.430"></a>
<FONT color="green">431</FONT>    <a name="line.431"></a>
<FONT color="green">432</FONT>            if (isAutoTickUnitSelection()) {<a name="line.432"></a>
<FONT color="green">433</FONT>                selectAutoTickUnit(g2, dataArea, edge);<a name="line.433"></a>
<FONT color="green">434</FONT>            }<a name="line.434"></a>
<FONT color="green">435</FONT>    <a name="line.435"></a>
<FONT color="green">436</FONT>            double unit = getTickUnit().getSize();<a name="line.436"></a>
<FONT color="green">437</FONT>            double cycleBound = getCycleBound();<a name="line.437"></a>
<FONT color="green">438</FONT>            double currentTickValue = Math.ceil(cycleBound / unit) * unit;<a name="line.438"></a>
<FONT color="green">439</FONT>            double upperValue = getRange().getUpperBound();<a name="line.439"></a>
<FONT color="green">440</FONT>            boolean cycled = false;<a name="line.440"></a>
<FONT color="green">441</FONT>    <a name="line.441"></a>
<FONT color="green">442</FONT>            boolean boundMapping = this.boundMappedToLastCycle;<a name="line.442"></a>
<FONT color="green">443</FONT>            this.boundMappedToLastCycle = false;<a name="line.443"></a>
<FONT color="green">444</FONT>    <a name="line.444"></a>
<FONT color="green">445</FONT>            CycleBoundTick lastTick = null;<a name="line.445"></a>
<FONT color="green">446</FONT>            float lastX = 0.0f;<a name="line.446"></a>
<FONT color="green">447</FONT>    <a name="line.447"></a>
<FONT color="green">448</FONT>            if (upperValue == cycleBound) {<a name="line.448"></a>
<FONT color="green">449</FONT>                currentTickValue = calculateLowestVisibleTickValue();<a name="line.449"></a>
<FONT color="green">450</FONT>                cycled = true;<a name="line.450"></a>
<FONT color="green">451</FONT>                this.boundMappedToLastCycle = true;<a name="line.451"></a>
<FONT color="green">452</FONT>            }<a name="line.452"></a>
<FONT color="green">453</FONT>    <a name="line.453"></a>
<FONT color="green">454</FONT>            while (currentTickValue &lt;= upperValue) {<a name="line.454"></a>
<FONT color="green">455</FONT>    <a name="line.455"></a>
<FONT color="green">456</FONT>                // Cycle when necessary<a name="line.456"></a>
<FONT color="green">457</FONT>                boolean cyclenow = false;<a name="line.457"></a>
<FONT color="green">458</FONT>                if ((currentTickValue + unit &gt; upperValue) &amp;&amp; !cycled) {<a name="line.458"></a>
<FONT color="green">459</FONT>                    cyclenow = true;<a name="line.459"></a>
<FONT color="green">460</FONT>                }<a name="line.460"></a>
<FONT color="green">461</FONT>    <a name="line.461"></a>
<FONT color="green">462</FONT>                double xx = valueToJava2D(currentTickValue, dataArea, edge);<a name="line.462"></a>
<FONT color="green">463</FONT>                String tickLabel;<a name="line.463"></a>
<FONT color="green">464</FONT>                NumberFormat formatter = getNumberFormatOverride();<a name="line.464"></a>
<FONT color="green">465</FONT>                if (formatter != null) {<a name="line.465"></a>
<FONT color="green">466</FONT>                    tickLabel = formatter.format(currentTickValue);<a name="line.466"></a>
<FONT color="green">467</FONT>                }<a name="line.467"></a>
<FONT color="green">468</FONT>                else {<a name="line.468"></a>
<FONT color="green">469</FONT>                    tickLabel = getTickUnit().valueToString(currentTickValue);<a name="line.469"></a>
<FONT color="green">470</FONT>                }<a name="line.470"></a>
<FONT color="green">471</FONT>                float x = (float) xx;<a name="line.471"></a>
<FONT color="green">472</FONT>                TextAnchor anchor = null;<a name="line.472"></a>
<FONT color="green">473</FONT>                TextAnchor rotationAnchor = null;<a name="line.473"></a>
<FONT color="green">474</FONT>                double angle = 0.0;<a name="line.474"></a>
<FONT color="green">475</FONT>                if (isVerticalTickLabels()) {<a name="line.475"></a>
<FONT color="green">476</FONT>                    if (edge == RectangleEdge.TOP) {<a name="line.476"></a>
<FONT color="green">477</FONT>                        angle = Math.PI / 2.0;<a name="line.477"></a>
<FONT color="green">478</FONT>                    }<a name="line.478"></a>
<FONT color="green">479</FONT>                    else {<a name="line.479"></a>
<FONT color="green">480</FONT>                        angle = -Math.PI / 2.0;<a name="line.480"></a>
<FONT color="green">481</FONT>                    }<a name="line.481"></a>
<FONT color="green">482</FONT>                    anchor = TextAnchor.CENTER_RIGHT;<a name="line.482"></a>
<FONT color="green">483</FONT>                    // If tick overlap when cycling, update last tick too<a name="line.483"></a>
<FONT color="green">484</FONT>                    if ((lastTick != null) &amp;&amp; (lastX == x)<a name="line.484"></a>
<FONT color="green">485</FONT>                            &amp;&amp; (currentTickValue != cycleBound)) {<a name="line.485"></a>
<FONT color="green">486</FONT>                        anchor = isInverted()<a name="line.486"></a>
<FONT color="green">487</FONT>                            ? TextAnchor.TOP_RIGHT : TextAnchor.BOTTOM_RIGHT;<a name="line.487"></a>
<FONT color="green">488</FONT>                        result.remove(result.size() - 1);<a name="line.488"></a>
<FONT color="green">489</FONT>                        result.add(new CycleBoundTick(<a name="line.489"></a>
<FONT color="green">490</FONT>                            this.boundMappedToLastCycle, lastTick.getNumber(),<a name="line.490"></a>
<FONT color="green">491</FONT>                            lastTick.getText(), anchor, anchor,<a name="line.491"></a>
<FONT color="green">492</FONT>                            lastTick.getAngle())<a name="line.492"></a>
<FONT color="green">493</FONT>                        );<a name="line.493"></a>
<FONT color="green">494</FONT>                        this.internalMarkerWhenTicksOverlap = true;<a name="line.494"></a>
<FONT color="green">495</FONT>                        anchor = isInverted()<a name="line.495"></a>
<FONT color="green">496</FONT>                            ? TextAnchor.BOTTOM_RIGHT : TextAnchor.TOP_RIGHT;<a name="line.496"></a>
<FONT color="green">497</FONT>                    }<a name="line.497"></a>
<FONT color="green">498</FONT>                    rotationAnchor = anchor;<a name="line.498"></a>
<FONT color="green">499</FONT>                }<a name="line.499"></a>
<FONT color="green">500</FONT>                else {<a name="line.500"></a>
<FONT color="green">501</FONT>                    if (edge == RectangleEdge.TOP) {<a name="line.501"></a>
<FONT color="green">502</FONT>                        anchor = TextAnchor.BOTTOM_CENTER;<a name="line.502"></a>
<FONT color="green">503</FONT>                        if ((lastTick != null) &amp;&amp; (lastX == x)<a name="line.503"></a>
<FONT color="green">504</FONT>                                &amp;&amp; (currentTickValue != cycleBound)) {<a name="line.504"></a>
<FONT color="green">505</FONT>                            anchor = isInverted()<a name="line.505"></a>
<FONT color="green">506</FONT>                                ? TextAnchor.BOTTOM_LEFT : TextAnchor.BOTTOM_RIGHT;<a name="line.506"></a>
<FONT color="green">507</FONT>                            result.remove(result.size() - 1);<a name="line.507"></a>
<FONT color="green">508</FONT>                            result.add(new CycleBoundTick(<a name="line.508"></a>
<FONT color="green">509</FONT>                                this.boundMappedToLastCycle, lastTick.getNumber(),<a name="line.509"></a>
<FONT color="green">510</FONT>                                lastTick.getText(), anchor, anchor,<a name="line.510"></a>
<FONT color="green">511</FONT>                                lastTick.getAngle())<a name="line.511"></a>
<FONT color="green">512</FONT>                            );<a name="line.512"></a>
<FONT color="green">513</FONT>                            this.internalMarkerWhenTicksOverlap = true;<a name="line.513"></a>
<FONT color="green">514</FONT>                            anchor = isInverted()<a name="line.514"></a>
<FONT color="green">515</FONT>                                ? TextAnchor.BOTTOM_RIGHT : TextAnchor.BOTTOM_LEFT;<a name="line.515"></a>
<FONT color="green">516</FONT>                        }<a name="line.516"></a>
<FONT color="green">517</FONT>                        rotationAnchor = anchor;<a name="line.517"></a>
<FONT color="green">518</FONT>                    }<a name="line.518"></a>
<FONT color="green">519</FONT>                    else {<a name="line.519"></a>
<FONT color="green">520</FONT>                        anchor = TextAnchor.TOP_CENTER;<a name="line.520"></a>
<FONT color="green">521</FONT>                        if ((lastTick != null) &amp;&amp; (lastX == x)<a name="line.521"></a>
<FONT color="green">522</FONT>                                &amp;&amp; (currentTickValue != cycleBound)) {<a name="line.522"></a>
<FONT color="green">523</FONT>                            anchor = isInverted()<a name="line.523"></a>
<FONT color="green">524</FONT>                                ? TextAnchor.TOP_LEFT : TextAnchor.TOP_RIGHT;<a name="line.524"></a>
<FONT color="green">525</FONT>                            result.remove(result.size() - 1);<a name="line.525"></a>
<FONT color="green">526</FONT>                            result.add(new CycleBoundTick(<a name="line.526"></a>
<FONT color="green">527</FONT>                                this.boundMappedToLastCycle, lastTick.getNumber(),<a name="line.527"></a>
<FONT color="green">528</FONT>                                lastTick.getText(), anchor, anchor,<a name="line.528"></a>
<FONT color="green">529</FONT>                                lastTick.getAngle())<a name="line.529"></a>
<FONT color="green">530</FONT>                            );<a name="line.530"></a>
<FONT color="green">531</FONT>                            this.internalMarkerWhenTicksOverlap = true;<a name="line.531"></a>
<FONT color="green">532</FONT>                            anchor = isInverted()<a name="line.532"></a>
<FONT color="green">533</FONT>                                ? TextAnchor.TOP_RIGHT : TextAnchor.TOP_LEFT;<a name="line.533"></a>
<FONT color="green">534</FONT>                        }<a name="line.534"></a>
<FONT color="green">535</FONT>                        rotationAnchor = anchor;<a name="line.535"></a>
<FONT color="green">536</FONT>                    }<a name="line.536"></a>
<FONT color="green">537</FONT>                }<a name="line.537"></a>
<FONT color="green">538</FONT>    <a name="line.538"></a>
<FONT color="green">539</FONT>                CycleBoundTick tick = new CycleBoundTick(<a name="line.539"></a>
<FONT color="green">540</FONT>                    this.boundMappedToLastCycle,<a name="line.540"></a>
<FONT color="green">541</FONT>                    new Double(currentTickValue), tickLabel, anchor,<a name="line.541"></a>
<FONT color="green">542</FONT>                    rotationAnchor, angle<a name="line.542"></a>
<FONT color="green">543</FONT>                );<a name="line.543"></a>
<FONT color="green">544</FONT>                if (currentTickValue == cycleBound) {<a name="line.544"></a>
<FONT color="green">545</FONT>                    this.internalMarkerCycleBoundTick = tick;<a name="line.545"></a>
<FONT color="green">546</FONT>                }<a name="line.546"></a>
<FONT color="green">547</FONT>                result.add(tick);<a name="line.547"></a>
<FONT color="green">548</FONT>                lastTick = tick;<a name="line.548"></a>
<FONT color="green">549</FONT>                lastX = x;<a name="line.549"></a>
<FONT color="green">550</FONT>    <a name="line.550"></a>
<FONT color="green">551</FONT>                currentTickValue += unit;<a name="line.551"></a>
<FONT color="green">552</FONT>    <a name="line.552"></a>
<FONT color="green">553</FONT>                if (cyclenow) {<a name="line.553"></a>
<FONT color="green">554</FONT>                    currentTickValue = calculateLowestVisibleTickValue();<a name="line.554"></a>
<FONT color="green">555</FONT>                    upperValue = cycleBound;<a name="line.555"></a>
<FONT color="green">556</FONT>                    cycled = true;<a name="line.556"></a>
<FONT color="green">557</FONT>                    this.boundMappedToLastCycle = true;<a name="line.557"></a>
<FONT color="green">558</FONT>                }<a name="line.558"></a>
<FONT color="green">559</FONT>    <a name="line.559"></a>
<FONT color="green">560</FONT>            }<a name="line.560"></a>
<FONT color="green">561</FONT>            this.boundMappedToLastCycle = boundMapping;<a name="line.561"></a>
<FONT color="green">562</FONT>            return result;<a name="line.562"></a>
<FONT color="green">563</FONT>    <a name="line.563"></a>
<FONT color="green">564</FONT>        }<a name="line.564"></a>
<FONT color="green">565</FONT>    <a name="line.565"></a>
<FONT color="green">566</FONT>        /**<a name="line.566"></a>
<FONT color="green">567</FONT>         * Builds a list of ticks for the axis.  This method is called when the<a name="line.567"></a>
<FONT color="green">568</FONT>         * axis is at the left or right of the chart (so the axis is "vertical").<a name="line.568"></a>
<FONT color="green">569</FONT>         *<a name="line.569"></a>
<FONT color="green">570</FONT>         * @param g2  the graphics device.<a name="line.570"></a>
<FONT color="green">571</FONT>         * @param dataArea  the data area.<a name="line.571"></a>
<FONT color="green">572</FONT>         * @param edge  the edge.<a name="line.572"></a>
<FONT color="green">573</FONT>         *<a name="line.573"></a>
<FONT color="green">574</FONT>         * @return A list of ticks.<a name="line.574"></a>
<FONT color="green">575</FONT>         */<a name="line.575"></a>
<FONT color="green">576</FONT>        protected List refreshVerticalTicks(Graphics2D g2,<a name="line.576"></a>
<FONT color="green">577</FONT>                                            Rectangle2D dataArea,<a name="line.577"></a>
<FONT color="green">578</FONT>                                            RectangleEdge edge) {<a name="line.578"></a>
<FONT color="green">579</FONT>    <a name="line.579"></a>
<FONT color="green">580</FONT>            List result = new java.util.ArrayList();<a name="line.580"></a>
<FONT color="green">581</FONT>            result.clear();<a name="line.581"></a>
<FONT color="green">582</FONT>    <a name="line.582"></a>
<FONT color="green">583</FONT>            Font tickLabelFont = getTickLabelFont();<a name="line.583"></a>
<FONT color="green">584</FONT>            g2.setFont(tickLabelFont);<a name="line.584"></a>
<FONT color="green">585</FONT>            if (isAutoTickUnitSelection()) {<a name="line.585"></a>
<FONT color="green">586</FONT>                selectAutoTickUnit(g2, dataArea, edge);<a name="line.586"></a>
<FONT color="green">587</FONT>            }<a name="line.587"></a>
<FONT color="green">588</FONT>    <a name="line.588"></a>
<FONT color="green">589</FONT>            double unit = getTickUnit().getSize();<a name="line.589"></a>
<FONT color="green">590</FONT>            double cycleBound = getCycleBound();<a name="line.590"></a>
<FONT color="green">591</FONT>            double currentTickValue = Math.ceil(cycleBound / unit) * unit;<a name="line.591"></a>
<FONT color="green">592</FONT>            double upperValue = getRange().getUpperBound();<a name="line.592"></a>
<FONT color="green">593</FONT>            boolean cycled = false;<a name="line.593"></a>
<FONT color="green">594</FONT>    <a name="line.594"></a>
<FONT color="green">595</FONT>            boolean boundMapping = this.boundMappedToLastCycle;<a name="line.595"></a>
<FONT color="green">596</FONT>            this.boundMappedToLastCycle = true;<a name="line.596"></a>
<FONT color="green">597</FONT>    <a name="line.597"></a>
<FONT color="green">598</FONT>            NumberTick lastTick = null;<a name="line.598"></a>
<FONT color="green">599</FONT>            float lastY = 0.0f;<a name="line.599"></a>
<FONT color="green">600</FONT>    <a name="line.600"></a>
<FONT color="green">601</FONT>            if (upperValue == cycleBound) {<a name="line.601"></a>
<FONT color="green">602</FONT>                currentTickValue = calculateLowestVisibleTickValue();<a name="line.602"></a>
<FONT color="green">603</FONT>                cycled = true;<a name="line.603"></a>
<FONT color="green">604</FONT>                this.boundMappedToLastCycle = true;<a name="line.604"></a>
<FONT color="green">605</FONT>            }<a name="line.605"></a>
<FONT color="green">606</FONT>    <a name="line.606"></a>
<FONT color="green">607</FONT>            while (currentTickValue &lt;= upperValue) {<a name="line.607"></a>
<FONT color="green">608</FONT>    <a name="line.608"></a>
<FONT color="green">609</FONT>                // Cycle when necessary<a name="line.609"></a>
<FONT color="green">610</FONT>                boolean cyclenow = false;<a name="line.610"></a>
<FONT color="green">611</FONT>                if ((currentTickValue + unit &gt; upperValue) &amp;&amp; !cycled) {<a name="line.611"></a>
<FONT color="green">612</FONT>                    cyclenow = true;<a name="line.612"></a>
<FONT color="green">613</FONT>                }<a name="line.613"></a>
<FONT color="green">614</FONT>    <a name="line.614"></a>
<FONT color="green">615</FONT>                double yy = valueToJava2D(currentTickValue, dataArea, edge);<a name="line.615"></a>
<FONT color="green">616</FONT>                String tickLabel;<a name="line.616"></a>
<FONT color="green">617</FONT>                NumberFormat formatter = getNumberFormatOverride();<a name="line.617"></a>
<FONT color="green">618</FONT>                if (formatter != null) {<a name="line.618"></a>
<FONT color="green">619</FONT>                    tickLabel = formatter.format(currentTickValue);<a name="line.619"></a>
<FONT color="green">620</FONT>                }<a name="line.620"></a>
<FONT color="green">621</FONT>                else {<a name="line.621"></a>
<FONT color="green">622</FONT>                    tickLabel = getTickUnit().valueToString(currentTickValue);<a name="line.622"></a>
<FONT color="green">623</FONT>                }<a name="line.623"></a>
<FONT color="green">624</FONT>    <a name="line.624"></a>
<FONT color="green">625</FONT>                float y = (float) yy;<a name="line.625"></a>
<FONT color="green">626</FONT>                TextAnchor anchor = null;<a name="line.626"></a>
<FONT color="green">627</FONT>                TextAnchor rotationAnchor = null;<a name="line.627"></a>
<FONT color="green">628</FONT>                double angle = 0.0;<a name="line.628"></a>
<FONT color="green">629</FONT>                if (isVerticalTickLabels()) {<a name="line.629"></a>
<FONT color="green">630</FONT>    <a name="line.630"></a>
<FONT color="green">631</FONT>                    if (edge == RectangleEdge.LEFT) {<a name="line.631"></a>
<FONT color="green">632</FONT>                        anchor = TextAnchor.BOTTOM_CENTER;<a name="line.632"></a>
<FONT color="green">633</FONT>                        if ((lastTick != null) &amp;&amp; (lastY == y)<a name="line.633"></a>
<FONT color="green">634</FONT>                                &amp;&amp; (currentTickValue != cycleBound)) {<a name="line.634"></a>
<FONT color="green">635</FONT>                            anchor = isInverted()<a name="line.635"></a>
<FONT color="green">636</FONT>                                ? TextAnchor.BOTTOM_LEFT : TextAnchor.BOTTOM_RIGHT;<a name="line.636"></a>
<FONT color="green">637</FONT>                            result.remove(result.size() - 1);<a name="line.637"></a>
<FONT color="green">638</FONT>                            result.add(new CycleBoundTick(<a name="line.638"></a>
<FONT color="green">639</FONT>                                this.boundMappedToLastCycle, lastTick.getNumber(),<a name="line.639"></a>
<FONT color="green">640</FONT>                                lastTick.getText(), anchor, anchor,<a name="line.640"></a>
<FONT color="green">641</FONT>                                lastTick.getAngle())<a name="line.641"></a>
<FONT color="green">642</FONT>                            );<a name="line.642"></a>
<FONT color="green">643</FONT>                            this.internalMarkerWhenTicksOverlap = true;<a name="line.643"></a>
<FONT color="green">644</FONT>                            anchor = isInverted()<a name="line.644"></a>
<FONT color="green">645</FONT>                                ? TextAnchor.BOTTOM_RIGHT : TextAnchor.BOTTOM_LEFT;<a name="line.645"></a>
<FONT color="green">646</FONT>                        }<a name="line.646"></a>
<FONT color="green">647</FONT>                        rotationAnchor = anchor;<a name="line.647"></a>
<FONT color="green">648</FONT>                        angle = -Math.PI / 2.0;<a name="line.648"></a>
<FONT color="green">649</FONT>                    }<a name="line.649"></a>
<FONT color="green">650</FONT>                    else {<a name="line.650"></a>
<FONT color="green">651</FONT>                        anchor = TextAnchor.BOTTOM_CENTER;<a name="line.651"></a>
<FONT color="green">652</FONT>                        if ((lastTick != null) &amp;&amp; (lastY == y)<a name="line.652"></a>
<FONT color="green">653</FONT>                                &amp;&amp; (currentTickValue != cycleBound)) {<a name="line.653"></a>
<FONT color="green">654</FONT>                            anchor = isInverted()<a name="line.654"></a>
<FONT color="green">655</FONT>                                ? TextAnchor.BOTTOM_RIGHT : TextAnchor.BOTTOM_LEFT;<a name="line.655"></a>
<FONT color="green">656</FONT>                            result.remove(result.size() - 1);<a name="line.656"></a>
<FONT color="green">657</FONT>                            result.add(new CycleBoundTick(<a name="line.657"></a>
<FONT color="green">658</FONT>                                this.boundMappedToLastCycle, lastTick.getNumber(),<a name="line.658"></a>
<FONT color="green">659</FONT>                                lastTick.getText(), anchor, anchor,<a name="line.659"></a>
<FONT color="green">660</FONT>                                lastTick.getAngle())<a name="line.660"></a>
<FONT color="green">661</FONT>                            );<a name="line.661"></a>
<FONT color="green">662</FONT>                            this.internalMarkerWhenTicksOverlap = true;<a name="line.662"></a>
<FONT color="green">663</FONT>                            anchor = isInverted()<a name="line.663"></a>
<FONT color="green">664</FONT>                                ? TextAnchor.BOTTOM_LEFT : TextAnchor.BOTTOM_RIGHT;<a name="line.664"></a>
<FONT color="green">665</FONT>                        }<a name="line.665"></a>
<FONT color="green">666</FONT>                        rotationAnchor = anchor;<a name="line.666"></a>
<FONT color="green">667</FONT>                        angle = Math.PI / 2.0;<a name="line.667"></a>
<FONT color="green">668</FONT>                    }<a name="line.668"></a>
<FONT color="green">669</FONT>                }<a name="line.669"></a>
<FONT color="green">670</FONT>                else {<a name="line.670"></a>
<FONT color="green">671</FONT>                    if (edge == RectangleEdge.LEFT) {<a name="line.671"></a>
<FONT color="green">672</FONT>                        anchor = TextAnchor.CENTER_RIGHT;<a name="line.672"></a>
<FONT color="green">673</FONT>                        if ((lastTick != null) &amp;&amp; (lastY == y)<a name="line.673"></a>
<FONT color="green">674</FONT>                                &amp;&amp; (currentTickValue != cycleBound)) {<a name="line.674"></a>
<FONT color="green">675</FONT>                            anchor = isInverted()<a name="line.675"></a>
<FONT color="green">676</FONT>                                ? TextAnchor.BOTTOM_RIGHT : TextAnchor.TOP_RIGHT;<a name="line.676"></a>
<FONT color="green">677</FONT>                            result.remove(result.size() - 1);<a name="line.677"></a>
<FONT color="green">678</FONT>                            result.add(new CycleBoundTick(<a name="line.678"></a>
<FONT color="green">679</FONT>                                this.boundMappedToLastCycle, lastTick.getNumber(),<a name="line.679"></a>
<FONT color="green">680</FONT>                                lastTick.getText(), anchor, anchor,<a name="line.680"></a>
<FONT color="green">681</FONT>                                lastTick.getAngle())<a name="line.681"></a>
<FONT color="green">682</FONT>                            );<a name="line.682"></a>
<FONT color="green">683</FONT>                            this.internalMarkerWhenTicksOverlap = true;<a name="line.683"></a>
<FONT color="green">684</FONT>                            anchor = isInverted()<a name="line.684"></a>
<FONT color="green">685</FONT>                                ? TextAnchor.TOP_RIGHT : TextAnchor.BOTTOM_RIGHT;<a name="line.685"></a>
<FONT color="green">686</FONT>                        }<a name="line.686"></a>
<FONT color="green">687</FONT>                        rotationAnchor = anchor;<a name="line.687"></a>
<FONT color="green">688</FONT>                    }<a name="line.688"></a>
<FONT color="green">689</FONT>                    else {<a name="line.689"></a>
<FONT color="green">690</FONT>                        anchor = TextAnchor.CENTER_LEFT;<a name="line.690"></a>
<FONT color="green">691</FONT>                        if ((lastTick != null) &amp;&amp; (lastY == y)<a name="line.691"></a>
<FONT color="green">692</FONT>                                &amp;&amp; (currentTickValue != cycleBound)) {<a name="line.692"></a>
<FONT color="green">693</FONT>                            anchor = isInverted()<a name="line.693"></a>
<FONT color="green">694</FONT>                                ? TextAnchor.BOTTOM_LEFT : TextAnchor.TOP_LEFT;<a name="line.694"></a>
<FONT color="green">695</FONT>                            result.remove(result.size() - 1);<a name="line.695"></a>
<FONT color="green">696</FONT>                            result.add(new CycleBoundTick(<a name="line.696"></a>
<FONT color="green">697</FONT>                                this.boundMappedToLastCycle, lastTick.getNumber(),<a name="line.697"></a>
<FONT color="green">698</FONT>                                lastTick.getText(), anchor, anchor,<a name="line.698"></a>
<FONT color="green">699</FONT>                                lastTick.getAngle())<a name="line.699"></a>
<FONT color="green">700</FONT>                            );<a name="line.700"></a>
<FONT color="green">701</FONT>                            this.internalMarkerWhenTicksOverlap = true;<a name="line.701"></a>
<FONT color="green">702</FONT>                            anchor = isInverted()<a name="line.702"></a>
<FONT color="green">703</FONT>                                ? TextAnchor.TOP_LEFT : TextAnchor.BOTTOM_LEFT;<a name="line.703"></a>
<FONT color="green">704</FONT>                        }<a name="line.704"></a>
<FONT color="green">705</FONT>                        rotationAnchor = anchor;<a name="line.705"></a>
<FONT color="green">706</FONT>                    }<a name="line.706"></a>
<FONT color="green">707</FONT>                }<a name="line.707"></a>
<FONT color="green">708</FONT>    <a name="line.708"></a>
<FONT color="green">709</FONT>                CycleBoundTick tick = new CycleBoundTick(<a name="line.709"></a>
<FONT color="green">710</FONT>                    this.boundMappedToLastCycle, new Double(currentTickValue),<a name="line.710"></a>
<FONT color="green">711</FONT>                    tickLabel, anchor, rotationAnchor, angle<a name="line.711"></a>
<FONT color="green">712</FONT>                );<a name="line.712"></a>
<FONT color="green">713</FONT>                if (currentTickValue == cycleBound) {<a name="line.713"></a>
<FONT color="green">714</FONT>                    this.internalMarkerCycleBoundTick = tick;<a name="line.714"></a>
<FONT color="green">715</FONT>                }<a name="line.715"></a>
<FONT color="green">716</FONT>                result.add(tick);<a name="line.716"></a>
<FONT color="green">717</FONT>                lastTick = tick;<a name="line.717"></a>
<FONT color="green">718</FONT>                lastY = y;<a name="line.718"></a>
<FONT color="green">719</FONT>    <a name="line.719"></a>
<FONT color="green">720</FONT>                if (currentTickValue == cycleBound) {<a name="line.720"></a>
<FONT color="green">721</FONT>                    this.internalMarkerCycleBoundTick = tick;<a name="line.721"></a>
<FONT color="green">722</FONT>                }<a name="line.722"></a>
<FONT color="green">723</FONT>    <a name="line.723"></a>
<FONT color="green">724</FONT>                currentTickValue += unit;<a name="line.724"></a>
<FONT color="green">725</FONT>    <a name="line.725"></a>
<FONT color="green">726</FONT>                if (cyclenow) {<a name="line.726"></a>
<FONT color="green">727</FONT>                    currentTickValue = calculateLowestVisibleTickValue();<a name="line.727"></a>
<FONT color="green">728</FONT>                    upperValue = cycleBound;<a name="line.728"></a>
<FONT color="green">729</FONT>                    cycled = true;<a name="line.729"></a>
<FONT color="green">730</FONT>                    this.boundMappedToLastCycle = false;<a name="line.730"></a>
<FONT color="green">731</FONT>                }<a name="line.731"></a>
<FONT color="green">732</FONT>    <a name="line.732"></a>
<FONT color="green">733</FONT>            }<a name="line.733"></a>
<FONT color="green">734</FONT>            this.boundMappedToLastCycle = boundMapping;<a name="line.734"></a>
<FONT color="green">735</FONT>            return result;<a name="line.735"></a>
<FONT color="green">736</FONT>        }<a name="line.736"></a>
<FONT color="green">737</FONT>    <a name="line.737"></a>
<FONT color="green">738</FONT>        /**<a name="line.738"></a>
<FONT color="green">739</FONT>         * Converts a coordinate from Java 2D space to data space.<a name="line.739"></a>
<FONT color="green">740</FONT>         *<a name="line.740"></a>
<FONT color="green">741</FONT>         * @param java2DValue  the coordinate in Java2D space.<a name="line.741"></a>
<FONT color="green">742</FONT>         * @param dataArea  the data area.<a name="line.742"></a>
<FONT color="green">743</FONT>         * @param edge  the edge.<a name="line.743"></a>
<FONT color="green">744</FONT>         *<a name="line.744"></a>
<FONT color="green">745</FONT>         * @return The data value.<a name="line.745"></a>
<FONT color="green">746</FONT>         */<a name="line.746"></a>
<FONT color="green">747</FONT>        public double java2DToValue(double java2DValue, Rectangle2D dataArea,<a name="line.747"></a>
<FONT color="green">748</FONT>                                    RectangleEdge edge) {<a name="line.748"></a>
<FONT color="green">749</FONT>            Range range = getRange();<a name="line.749"></a>
<FONT color="green">750</FONT>    <a name="line.750"></a>
<FONT color="green">751</FONT>            double vmax = range.getUpperBound();<a name="line.751"></a>
<FONT color="green">752</FONT>            double vp = getCycleBound();<a name="line.752"></a>
<FONT color="green">753</FONT>    <a name="line.753"></a>
<FONT color="green">754</FONT>            double jmin = 0.0;<a name="line.754"></a>
<FONT color="green">755</FONT>            double jmax = 0.0;<a name="line.755"></a>
<FONT color="green">756</FONT>            if (RectangleEdge.isTopOrBottom(edge)) {<a name="line.756"></a>
<FONT color="green">757</FONT>                jmin = dataArea.getMinX();<a name="line.757"></a>
<FONT color="green">758</FONT>                jmax = dataArea.getMaxX();<a name="line.758"></a>
<FONT color="green">759</FONT>            }<a name="line.759"></a>
<FONT color="green">760</FONT>            else if (RectangleEdge.isLeftOrRight(edge)) {<a name="line.760"></a>
<FONT color="green">761</FONT>                jmin = dataArea.getMaxY();<a name="line.761"></a>
<FONT color="green">762</FONT>                jmax = dataArea.getMinY();<a name="line.762"></a>
<FONT color="green">763</FONT>            }<a name="line.763"></a>
<FONT color="green">764</FONT>    <a name="line.764"></a>
<FONT color="green">765</FONT>            if (isInverted()) {<a name="line.765"></a>
<FONT color="green">766</FONT>                double jbreak = jmax - (vmax - vp) * (jmax - jmin) / this.period;<a name="line.766"></a>
<FONT color="green">767</FONT>                if (java2DValue &gt;= jbreak) {<a name="line.767"></a>
<FONT color="green">768</FONT>                    return vp + (jmax - java2DValue) * this.period / (jmax - jmin);<a name="line.768"></a>
<FONT color="green">769</FONT>                }<a name="line.769"></a>
<FONT color="green">770</FONT>                else {<a name="line.770"></a>
<FONT color="green">771</FONT>                    return vp - (java2DValue - jmin) * this.period / (jmax - jmin);<a name="line.771"></a>
<FONT color="green">772</FONT>                }<a name="line.772"></a>
<FONT color="green">773</FONT>            }<a name="line.773"></a>
<FONT color="green">774</FONT>            else {<a name="line.774"></a>
<FONT color="green">775</FONT>                double jbreak = (vmax - vp) * (jmax - jmin) / this.period + jmin;<a name="line.775"></a>
<FONT color="green">776</FONT>                if (java2DValue &lt;= jbreak) {<a name="line.776"></a>
<FONT color="green">777</FONT>                    return vp + (java2DValue - jmin) * this.period / (jmax - jmin);<a name="line.777"></a>
<FONT color="green">778</FONT>                }<a name="line.778"></a>
<FONT color="green">779</FONT>                else {<a name="line.779"></a>
<FONT color="green">780</FONT>                    return vp - (jmax - java2DValue) * this.period / (jmax - jmin);<a name="line.780"></a>
<FONT color="green">781</FONT>                }<a name="line.781"></a>
<FONT color="green">782</FONT>            }<a name="line.782"></a>
<FONT color="green">783</FONT>        }<a name="line.783"></a>
<FONT color="green">784</FONT>    <a name="line.784"></a>
<FONT color="green">785</FONT>        /**<a name="line.785"></a>
<FONT color="green">786</FONT>         * Translates a value from data space to Java 2D space.<a name="line.786"></a>
<FONT color="green">787</FONT>         *<a name="line.787"></a>
<FONT color="green">788</FONT>         * @param value  the data value.<a name="line.788"></a>
<FONT color="green">789</FONT>         * @param dataArea  the data area.<a name="line.789"></a>
<FONT color="green">790</FONT>         * @param edge  the edge.<a name="line.790"></a>
<FONT color="green">791</FONT>         *<a name="line.791"></a>
<FONT color="green">792</FONT>         * @return The Java 2D value.<a name="line.792"></a>
<FONT color="green">793</FONT>         */<a name="line.793"></a>
<FONT color="green">794</FONT>        public double valueToJava2D(double value, Rectangle2D dataArea,<a name="line.794"></a>
<FONT color="green">795</FONT>                                    RectangleEdge edge) {<a name="line.795"></a>
<FONT color="green">796</FONT>            Range range = getRange();<a name="line.796"></a>
<FONT color="green">797</FONT>    <a name="line.797"></a>
<FONT color="green">798</FONT>            double vmin = range.getLowerBound();<a name="line.798"></a>
<FONT color="green">799</FONT>            double vmax = range.getUpperBound();<a name="line.799"></a>
<FONT color="green">800</FONT>            double vp = getCycleBound();<a name="line.800"></a>
<FONT color="green">801</FONT>    <a name="line.801"></a>
<FONT color="green">802</FONT>            if ((value &lt; vmin) || (value &gt; vmax)) {<a name="line.802"></a>
<FONT color="green">803</FONT>                return Double.NaN;<a name="line.803"></a>
<FONT color="green">804</FONT>            }<a name="line.804"></a>
<FONT color="green">805</FONT>    <a name="line.805"></a>
<FONT color="green">806</FONT>    <a name="line.806"></a>
<FONT color="green">807</FONT>            double jmin = 0.0;<a name="line.807"></a>
<FONT color="green">808</FONT>            double jmax = 0.0;<a name="line.808"></a>
<FONT color="green">809</FONT>            if (RectangleEdge.isTopOrBottom(edge)) {<a name="line.809"></a>
<FONT color="green">810</FONT>                jmin = dataArea.getMinX();<a name="line.810"></a>
<FONT color="green">811</FONT>                jmax = dataArea.getMaxX();<a name="line.811"></a>
<FONT color="green">812</FONT>            }<a name="line.812"></a>
<FONT color="green">813</FONT>            else if (RectangleEdge.isLeftOrRight(edge)) {<a name="line.813"></a>
<FONT color="green">814</FONT>                jmax = dataArea.getMinY();<a name="line.814"></a>
<FONT color="green">815</FONT>                jmin = dataArea.getMaxY();<a name="line.815"></a>
<FONT color="green">816</FONT>            }<a name="line.816"></a>
<FONT color="green">817</FONT>    <a name="line.817"></a>
<FONT color="green">818</FONT>            if (isInverted()) {<a name="line.818"></a>
<FONT color="green">819</FONT>                if (value == vp) {<a name="line.819"></a>
<FONT color="green">820</FONT>                    return this.boundMappedToLastCycle ? jmin : jmax;<a name="line.820"></a>
<FONT color="green">821</FONT>                }<a name="line.821"></a>
<FONT color="green">822</FONT>                else if (value &gt; vp) {<a name="line.822"></a>
<FONT color="green">823</FONT>                    return jmax - (value - vp) * (jmax - jmin) / this.period;<a name="line.823"></a>
<FONT color="green">824</FONT>                }<a name="line.824"></a>
<FONT color="green">825</FONT>                else {<a name="line.825"></a>
<FONT color="green">826</FONT>                    return jmin + (vp - value) * (jmax - jmin) / this.period;<a name="line.826"></a>
<FONT color="green">827</FONT>                }<a name="line.827"></a>
<FONT color="green">828</FONT>            }<a name="line.828"></a>
<FONT color="green">829</FONT>            else {<a name="line.829"></a>
<FONT color="green">830</FONT>                if (value == vp) {<a name="line.830"></a>
<FONT color="green">831</FONT>                    return this.boundMappedToLastCycle ? jmax : jmin;<a name="line.831"></a>
<FONT color="green">832</FONT>                }<a name="line.832"></a>
<FONT color="green">833</FONT>                else if (value &gt;= vp) {<a name="line.833"></a>
<FONT color="green">834</FONT>                    return jmin + (value - vp) * (jmax - jmin) / this.period;<a name="line.834"></a>
<FONT color="green">835</FONT>                }<a name="line.835"></a>
<FONT color="green">836</FONT>                else {<a name="line.836"></a>
<FONT color="green">837</FONT>                    return jmax - (vp - value) * (jmax - jmin) / this.period;<a name="line.837"></a>
<FONT color="green">838</FONT>                }<a name="line.838"></a>
<FONT color="green">839</FONT>            }<a name="line.839"></a>
<FONT color="green">840</FONT>        }<a name="line.840"></a>
<FONT color="green">841</FONT>    <a name="line.841"></a>
<FONT color="green">842</FONT>        /**<a name="line.842"></a>
<FONT color="green">843</FONT>         * Centers the range about the given value.<a name="line.843"></a>
<FONT color="green">844</FONT>         *<a name="line.844"></a>
<FONT color="green">845</FONT>         * @param value  the data value.<a name="line.845"></a>
<FONT color="green">846</FONT>         */<a name="line.846"></a>
<FONT color="green">847</FONT>        public void centerRange(double value) {<a name="line.847"></a>
<FONT color="green">848</FONT>            setRange(value - this.period / 2.0, value + this.period / 2.0);<a name="line.848"></a>
<FONT color="green">849</FONT>        }<a name="line.849"></a>
<FONT color="green">850</FONT>    <a name="line.850"></a>
<FONT color="green">851</FONT>        /**<a name="line.851"></a>
<FONT color="green">852</FONT>         * This function is nearly useless since the auto range is fixed for this<a name="line.852"></a>
<FONT color="green">853</FONT>         * class to the period.  The period is extended if necessary to fit the<a name="line.853"></a>
<FONT color="green">854</FONT>         * minimum size.<a name="line.854"></a>
<FONT color="green">855</FONT>         *<a name="line.855"></a>
<FONT color="green">856</FONT>         * @param size  the size.<a name="line.856"></a>
<FONT color="green">857</FONT>         * @param notify  notify?<a name="line.857"></a>
<FONT color="green">858</FONT>         *<a name="line.858"></a>
<FONT color="green">859</FONT>         * @see org.jfree.chart.axis.ValueAxis#setAutoRangeMinimumSize(double,<a name="line.859"></a>
<FONT color="green">860</FONT>         *      boolean)<a name="line.860"></a>
<FONT color="green">861</FONT>         */<a name="line.861"></a>
<FONT color="green">862</FONT>        public void setAutoRangeMinimumSize(double size, boolean notify) {<a name="line.862"></a>
<FONT color="green">863</FONT>            if (size &gt; this.period) {<a name="line.863"></a>
<FONT color="green">864</FONT>                this.period = size;<a name="line.864"></a>
<FONT color="green">865</FONT>            }<a name="line.865"></a>
<FONT color="green">866</FONT>            super.setAutoRangeMinimumSize(size, notify);<a name="line.866"></a>
<FONT color="green">867</FONT>        }<a name="line.867"></a>
<FONT color="green">868</FONT>    <a name="line.868"></a>
<FONT color="green">869</FONT>        /**<a name="line.869"></a>
<FONT color="green">870</FONT>         * The auto range is fixed for this class to the period by default.<a name="line.870"></a>
<FONT color="green">871</FONT>         * This function will thus set a new period.<a name="line.871"></a>
<FONT color="green">872</FONT>         *<a name="line.872"></a>
<FONT color="green">873</FONT>         * @param length  the length.<a name="line.873"></a>
<FONT color="green">874</FONT>         *<a name="line.874"></a>
<FONT color="green">875</FONT>         * @see org.jfree.chart.axis.ValueAxis#setFixedAutoRange(double)<a name="line.875"></a>
<FONT color="green">876</FONT>         */<a name="line.876"></a>
<FONT color="green">877</FONT>        public void setFixedAutoRange(double length) {<a name="line.877"></a>
<FONT color="green">878</FONT>            this.period = length;<a name="line.878"></a>
<FONT color="green">879</FONT>            super.setFixedAutoRange(length);<a name="line.879"></a>
<FONT color="green">880</FONT>        }<a name="line.880"></a>
<FONT color="green">881</FONT>    <a name="line.881"></a>
<FONT color="green">882</FONT>        /**<a name="line.882"></a>
<FONT color="green">883</FONT>         * Sets a new axis range. The period is extended to fit the range size, if<a name="line.883"></a>
<FONT color="green">884</FONT>         * necessary.<a name="line.884"></a>
<FONT color="green">885</FONT>         *<a name="line.885"></a>
<FONT color="green">886</FONT>         * @param range  the range.<a name="line.886"></a>
<FONT color="green">887</FONT>         * @param turnOffAutoRange  switch off the auto range.<a name="line.887"></a>
<FONT color="green">888</FONT>         * @param notify notify?<a name="line.888"></a>
<FONT color="green">889</FONT>         *<a name="line.889"></a>
<FONT color="green">890</FONT>         * @see org.jfree.chart.axis.ValueAxis#setRange(Range, boolean, boolean)<a name="line.890"></a>
<FONT color="green">891</FONT>         */<a name="line.891"></a>
<FONT color="green">892</FONT>        public void setRange(Range range, boolean turnOffAutoRange,<a name="line.892"></a>
<FONT color="green">893</FONT>                             boolean notify) {<a name="line.893"></a>
<FONT color="green">894</FONT>            double size = range.getUpperBound() - range.getLowerBound();<a name="line.894"></a>
<FONT color="green">895</FONT>            if (size &gt; this.period) {<a name="line.895"></a>
<FONT color="green">896</FONT>                this.period = size;<a name="line.896"></a>
<FONT color="green">897</FONT>            }<a name="line.897"></a>
<FONT color="green">898</FONT>            super.setRange(range, turnOffAutoRange, notify);<a name="line.898"></a>
<FONT color="green">899</FONT>        }<a name="line.899"></a>
<FONT color="green">900</FONT>    <a name="line.900"></a>
<FONT color="green">901</FONT>        /**<a name="line.901"></a>
<FONT color="green">902</FONT>         * The cycle bound is defined as the higest value x such that<a name="line.902"></a>
<FONT color="green">903</FONT>         * "offset + period * i = x", with i and integer and x &amp;lt;<a name="line.903"></a>
<FONT color="green">904</FONT>         * range.getUpperBound() This is the value which is at both ends of the<a name="line.904"></a>
<FONT color="green">905</FONT>         * axis :  x...up|low...x<a name="line.905"></a>
<FONT color="green">906</FONT>         * The values from x to up are the valued in the current cycle.<a name="line.906"></a>
<FONT color="green">907</FONT>         * The values from low to x are the valued in the previous cycle.<a name="line.907"></a>
<FONT color="green">908</FONT>         *<a name="line.908"></a>
<FONT color="green">909</FONT>         * @return The cycle bound.<a name="line.909"></a>
<FONT color="green">910</FONT>         */<a name="line.910"></a>
<FONT color="green">911</FONT>        public double getCycleBound() {<a name="line.911"></a>
<FONT color="green">912</FONT>            return Math.floor(<a name="line.912"></a>
<FONT color="green">913</FONT>                (getRange().getUpperBound() - this.offset) / this.period<a name="line.913"></a>
<FONT color="green">914</FONT>            ) * this.period + this.offset;<a name="line.914"></a>
<FONT color="green">915</FONT>        }<a name="line.915"></a>
<FONT color="green">916</FONT>    <a name="line.916"></a>
<FONT color="green">917</FONT>        /**<a name="line.917"></a>
<FONT color="green">918</FONT>         * The cycle bound is a multiple of the period, plus optionally a start<a name="line.918"></a>
<FONT color="green">919</FONT>         * offset.<a name="line.919"></a>
<FONT color="green">920</FONT>         * &lt;P&gt;<a name="line.920"></a>
<FONT color="green">921</FONT>         * &lt;pre&gt;cb = n * period + offset&lt;/pre&gt;&lt;br&gt;<a name="line.921"></a>
<FONT color="green">922</FONT>         *<a name="line.922"></a>
<FONT color="green">923</FONT>         * @return The current offset.<a name="line.923"></a>
<FONT color="green">924</FONT>         *<a name="line.924"></a>
<FONT color="green">925</FONT>         * @see #getCycleBound()<a name="line.925"></a>
<FONT color="green">926</FONT>         */<a name="line.926"></a>
<FONT color="green">927</FONT>        public double getOffset() {<a name="line.927"></a>
<FONT color="green">928</FONT>            return this.offset;<a name="line.928"></a>
<FONT color="green">929</FONT>        }<a name="line.929"></a>
<FONT color="green">930</FONT>    <a name="line.930"></a>
<FONT color="green">931</FONT>        /**<a name="line.931"></a>
<FONT color="green">932</FONT>         * The cycle bound is a multiple of the period, plus optionally a start<a name="line.932"></a>
<FONT color="green">933</FONT>         * offset.<a name="line.933"></a>
<FONT color="green">934</FONT>         * &lt;P&gt;<a name="line.934"></a>
<FONT color="green">935</FONT>         * &lt;pre&gt;cb = n * period + offset&lt;/pre&gt;&lt;br&gt;<a name="line.935"></a>
<FONT color="green">936</FONT>         *<a name="line.936"></a>
<FONT color="green">937</FONT>         * @param offset The offset to set.<a name="line.937"></a>
<FONT color="green">938</FONT>         *<a name="line.938"></a>
<FONT color="green">939</FONT>         * @see #getCycleBound()<a name="line.939"></a>
<FONT color="green">940</FONT>         */<a name="line.940"></a>
<FONT color="green">941</FONT>        public void setOffset(double offset) {<a name="line.941"></a>
<FONT color="green">942</FONT>            this.offset = offset;<a name="line.942"></a>
<FONT color="green">943</FONT>        }<a name="line.943"></a>
<FONT color="green">944</FONT>    <a name="line.944"></a>
<FONT color="green">945</FONT>        /**<a name="line.945"></a>
<FONT color="green">946</FONT>         * The cycle bound is a multiple of the period, plus optionally a start<a name="line.946"></a>
<FONT color="green">947</FONT>         * offset.<a name="line.947"></a>
<FONT color="green">948</FONT>         * &lt;P&gt;<a name="line.948"></a>
<FONT color="green">949</FONT>         * &lt;pre&gt;cb = n * period + offset&lt;/pre&gt;&lt;br&gt;<a name="line.949"></a>
<FONT color="green">950</FONT>         *<a name="line.950"></a>
<FONT color="green">951</FONT>         * @return The current period.<a name="line.951"></a>
<FONT color="green">952</FONT>         *<a name="line.952"></a>
<FONT color="green">953</FONT>         * @see #getCycleBound()<a name="line.953"></a>
<FONT color="green">954</FONT>         */<a name="line.954"></a>
<FONT color="green">955</FONT>        public double getPeriod() {<a name="line.955"></a>
<FONT color="green">956</FONT>            return this.period;<a name="line.956"></a>
<FONT color="green">957</FONT>        }<a name="line.957"></a>
<FONT color="green">958</FONT>    <a name="line.958"></a>
<FONT color="green">959</FONT>        /**<a name="line.959"></a>
<FONT color="green">960</FONT>         * The cycle bound is a multiple of the period, plus optionally a start<a name="line.960"></a>
<FONT color="green">961</FONT>         * offset.<a name="line.961"></a>
<FONT color="green">962</FONT>         * &lt;P&gt;<a name="line.962"></a>
<FONT color="green">963</FONT>         * &lt;pre&gt;cb = n * period + offset&lt;/pre&gt;&lt;br&gt;<a name="line.963"></a>
<FONT color="green">964</FONT>         *<a name="line.964"></a>
<FONT color="green">965</FONT>         * @param period The period to set.<a name="line.965"></a>
<FONT color="green">966</FONT>         *<a name="line.966"></a>
<FONT color="green">967</FONT>         * @see #getCycleBound()<a name="line.967"></a>
<FONT color="green">968</FONT>         */<a name="line.968"></a>
<FONT color="green">969</FONT>        public void setPeriod(double period) {<a name="line.969"></a>
<FONT color="green">970</FONT>            this.period = period;<a name="line.970"></a>
<FONT color="green">971</FONT>        }<a name="line.971"></a>
<FONT color="green">972</FONT>    <a name="line.972"></a>
<FONT color="green">973</FONT>        /**<a name="line.973"></a>
<FONT color="green">974</FONT>         * Draws the tick marks and labels.<a name="line.974"></a>
<FONT color="green">975</FONT>         *<a name="line.975"></a>
<FONT color="green">976</FONT>         * @param g2  the graphics device.<a name="line.976"></a>
<FONT color="green">977</FONT>         * @param cursor  the cursor.<a name="line.977"></a>
<FONT color="green">978</FONT>         * @param plotArea  the plot area.<a name="line.978"></a>
<FONT color="green">979</FONT>         * @param dataArea  the area inside the axes.<a name="line.979"></a>
<FONT color="green">980</FONT>         * @param edge  the side on which the axis is displayed.<a name="line.980"></a>
<FONT color="green">981</FONT>         *<a name="line.981"></a>
<FONT color="green">982</FONT>         * @return The axis state.<a name="line.982"></a>
<FONT color="green">983</FONT>         */<a name="line.983"></a>
<FONT color="green">984</FONT>        protected AxisState drawTickMarksAndLabels(Graphics2D g2, double cursor,<a name="line.984"></a>
<FONT color="green">985</FONT>                Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge) {<a name="line.985"></a>
<FONT color="green">986</FONT>            this.internalMarkerWhenTicksOverlap = false;<a name="line.986"></a>
<FONT color="green">987</FONT>            AxisState ret = super.drawTickMarksAndLabels(g2, cursor, plotArea,<a name="line.987"></a>
<FONT color="green">988</FONT>                    dataArea, edge);<a name="line.988"></a>
<FONT color="green">989</FONT>    <a name="line.989"></a>
<FONT color="green">990</FONT>            // continue and separate the labels only if necessary<a name="line.990"></a>
<FONT color="green">991</FONT>            if (!this.internalMarkerWhenTicksOverlap) {<a name="line.991"></a>
<FONT color="green">992</FONT>                return ret;<a name="line.992"></a>
<FONT color="green">993</FONT>            }<a name="line.993"></a>
<FONT color="green">994</FONT>    <a name="line.994"></a>
<FONT color="green">995</FONT>            double ol = getTickMarkOutsideLength();<a name="line.995"></a>
<FONT color="green">996</FONT>            FontMetrics fm = g2.getFontMetrics(getTickLabelFont());<a name="line.996"></a>
<FONT color="green">997</FONT>    <a name="line.997"></a>
<FONT color="green">998</FONT>            if (isVerticalTickLabels()) {<a name="line.998"></a>
<FONT color="green">999</FONT>                ol = fm.getMaxAdvance();<a name="line.999"></a>
<FONT color="green">1000</FONT>            }<a name="line.1000"></a>
<FONT color="green">1001</FONT>            else {<a name="line.1001"></a>
<FONT color="green">1002</FONT>                ol = fm.getHeight();<a name="line.1002"></a>
<FONT color="green">1003</FONT>            }<a name="line.1003"></a>
<FONT color="green">1004</FONT>    <a name="line.1004"></a>
<FONT color="green">1005</FONT>            double il = 0;<a name="line.1005"></a>
<FONT color="green">1006</FONT>            if (isTickMarksVisible()) {<a name="line.1006"></a>
<FONT color="green">1007</FONT>                float xx = (float) valueToJava2D(getRange().getUpperBound(),<a name="line.1007"></a>
<FONT color="green">1008</FONT>                        dataArea, edge);<a name="line.1008"></a>
<FONT color="green">1009</FONT>                Line2D mark = null;<a name="line.1009"></a>
<FONT color="green">1010</FONT>                g2.setStroke(getTickMarkStroke());<a name="line.1010"></a>
<FONT color="green">1011</FONT>                g2.setPaint(getTickMarkPaint());<a name="line.1011"></a>
<FONT color="green">1012</FONT>                if (edge == RectangleEdge.LEFT) {<a name="line.1012"></a>
<FONT color="green">1013</FONT>                    mark = new Line2D.Double(cursor - ol, xx, cursor + il, xx);<a name="line.1013"></a>
<FONT color="green">1014</FONT>                }<a name="line.1014"></a>
<FONT color="green">1015</FONT>                else if (edge == RectangleEdge.RIGHT) {<a name="line.1015"></a>
<FONT color="green">1016</FONT>                    mark = new Line2D.Double(cursor + ol, xx, cursor - il, xx);<a name="line.1016"></a>
<FONT color="green">1017</FONT>                }<a name="line.1017"></a>
<FONT color="green">1018</FONT>                else if (edge == RectangleEdge.TOP) {<a name="line.1018"></a>
<FONT color="green">1019</FONT>                    mark = new Line2D.Double(xx, cursor - ol, xx, cursor + il);<a name="line.1019"></a>
<FONT color="green">1020</FONT>                }<a name="line.1020"></a>
<FONT color="green">1021</FONT>                else if (edge == RectangleEdge.BOTTOM) {<a name="line.1021"></a>
<FONT color="green">1022</FONT>                    mark = new Line2D.Double(xx, cursor + ol, xx, cursor - il);<a name="line.1022"></a>
<FONT color="green">1023</FONT>                }<a name="line.1023"></a>
<FONT color="green">1024</FONT>                g2.draw(mark);<a name="line.1024"></a>
<FONT color="green">1025</FONT>            }<a name="line.1025"></a>
<FONT color="green">1026</FONT>            return ret;<a name="line.1026"></a>
<FONT color="green">1027</FONT>        }<a name="line.1027"></a>
<FONT color="green">1028</FONT>    <a name="line.1028"></a>
<FONT color="green">1029</FONT>        /**<a name="line.1029"></a>
<FONT color="green">1030</FONT>         * Draws the axis.<a name="line.1030"></a>
<FONT color="green">1031</FONT>         *<a name="line.1031"></a>
<FONT color="green">1032</FONT>         * @param g2  the graphics device (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.1032"></a>
<FONT color="green">1033</FONT>         * @param cursor  the cursor position.<a name="line.1033"></a>
<FONT color="green">1034</FONT>         * @param plotArea  the plot area (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.1034"></a>
<FONT color="green">1035</FONT>         * @param dataArea  the data area (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.1035"></a>
<FONT color="green">1036</FONT>         * @param edge  the edge (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.1036"></a>
<FONT color="green">1037</FONT>         * @param plotState  collects information about the plot<a name="line.1037"></a>
<FONT color="green">1038</FONT>         *                   (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.1038"></a>
<FONT color="green">1039</FONT>         *<a name="line.1039"></a>
<FONT color="green">1040</FONT>         * @return The axis state (never &lt;code&gt;null&lt;/code&gt;).<a name="line.1040"></a>
<FONT color="green">1041</FONT>         */<a name="line.1041"></a>
<FONT color="green">1042</FONT>        public AxisState draw(Graphics2D g2,<a name="line.1042"></a>
<FONT color="green">1043</FONT>                              double cursor,<a name="line.1043"></a>
<FONT color="green">1044</FONT>                              Rectangle2D plotArea,<a name="line.1044"></a>
<FONT color="green">1045</FONT>                              Rectangle2D dataArea,<a name="line.1045"></a>
<FONT color="green">1046</FONT>                              RectangleEdge edge,<a name="line.1046"></a>
<FONT color="green">1047</FONT>                              PlotRenderingInfo plotState) {<a name="line.1047"></a>
<FONT color="green">1048</FONT>    <a name="line.1048"></a>
<FONT color="green">1049</FONT>            AxisState ret = super.draw(<a name="line.1049"></a>
<FONT color="green">1050</FONT>                g2, cursor, plotArea, dataArea, edge, plotState<a name="line.1050"></a>
<FONT color="green">1051</FONT>            );<a name="line.1051"></a>
<FONT color="green">1052</FONT>            if (isAdvanceLineVisible()) {<a name="line.1052"></a>
<FONT color="green">1053</FONT>                double xx = valueToJava2D(<a name="line.1053"></a>
<FONT color="green">1054</FONT>                    getRange().getUpperBound(), dataArea, edge<a name="line.1054"></a>
<FONT color="green">1055</FONT>                );<a name="line.1055"></a>
<FONT color="green">1056</FONT>                Line2D mark = null;<a name="line.1056"></a>
<FONT color="green">1057</FONT>                g2.setStroke(getAdvanceLineStroke());<a name="line.1057"></a>
<FONT color="green">1058</FONT>                g2.setPaint(getAdvanceLinePaint());<a name="line.1058"></a>
<FONT color="green">1059</FONT>                if (edge == RectangleEdge.LEFT) {<a name="line.1059"></a>
<FONT color="green">1060</FONT>                    mark = new Line2D.Double(<a name="line.1060"></a>
<FONT color="green">1061</FONT>                        cursor, xx, cursor + dataArea.getWidth(), xx<a name="line.1061"></a>
<FONT color="green">1062</FONT>                    );<a name="line.1062"></a>
<FONT color="green">1063</FONT>                }<a name="line.1063"></a>
<FONT color="green">1064</FONT>                else if (edge == RectangleEdge.RIGHT) {<a name="line.1064"></a>
<FONT color="green">1065</FONT>                    mark = new Line2D.Double(<a name="line.1065"></a>
<FONT color="green">1066</FONT>                        cursor - dataArea.getWidth(), xx, cursor, xx<a name="line.1066"></a>
<FONT color="green">1067</FONT>                    );<a name="line.1067"></a>
<FONT color="green">1068</FONT>                }<a name="line.1068"></a>
<FONT color="green">1069</FONT>                else if (edge == RectangleEdge.TOP) {<a name="line.1069"></a>
<FONT color="green">1070</FONT>                    mark = new Line2D.Double(<a name="line.1070"></a>
<FONT color="green">1071</FONT>                        xx, cursor + dataArea.getHeight(), xx, cursor<a name="line.1071"></a>
<FONT color="green">1072</FONT>                    );<a name="line.1072"></a>
<FONT color="green">1073</FONT>                }<a name="line.1073"></a>
<FONT color="green">1074</FONT>                else if (edge == RectangleEdge.BOTTOM) {<a name="line.1074"></a>
<FONT color="green">1075</FONT>                    mark = new Line2D.Double(<a name="line.1075"></a>
<FONT color="green">1076</FONT>                        xx, cursor, xx, cursor - dataArea.getHeight()<a name="line.1076"></a>
<FONT color="green">1077</FONT>                    );<a name="line.1077"></a>
<FONT color="green">1078</FONT>                }<a name="line.1078"></a>
<FONT color="green">1079</FONT>                g2.draw(mark);<a name="line.1079"></a>
<FONT color="green">1080</FONT>            }<a name="line.1080"></a>
<FONT color="green">1081</FONT>            return ret;<a name="line.1081"></a>
<FONT color="green">1082</FONT>        }<a name="line.1082"></a>
<FONT color="green">1083</FONT>    <a name="line.1083"></a>
<FONT color="green">1084</FONT>        /**<a name="line.1084"></a>
<FONT color="green">1085</FONT>         * Reserve some space on each axis side because we draw a centered label at<a name="line.1085"></a>
<FONT color="green">1086</FONT>         * each extremity.<a name="line.1086"></a>
<FONT color="green">1087</FONT>         *<a name="line.1087"></a>
<FONT color="green">1088</FONT>         * @param g2  the graphics device.<a name="line.1088"></a>
<FONT color="green">1089</FONT>         * @param plot  the plot.<a name="line.1089"></a>
<FONT color="green">1090</FONT>         * @param plotArea  the plot area.<a name="line.1090"></a>
<FONT color="green">1091</FONT>         * @param edge  the edge.<a name="line.1091"></a>
<FONT color="green">1092</FONT>         * @param space  the space already reserved.<a name="line.1092"></a>
<FONT color="green">1093</FONT>         *<a name="line.1093"></a>
<FONT color="green">1094</FONT>         * @return The reserved space.<a name="line.1094"></a>
<FONT color="green">1095</FONT>         */<a name="line.1095"></a>
<FONT color="green">1096</FONT>        public AxisSpace reserveSpace(Graphics2D g2,<a name="line.1096"></a>
<FONT color="green">1097</FONT>                                      Plot plot,<a name="line.1097"></a>
<FONT color="green">1098</FONT>                                      Rectangle2D plotArea,<a name="line.1098"></a>
<FONT color="green">1099</FONT>                                      RectangleEdge edge,<a name="line.1099"></a>
<FONT color="green">1100</FONT>                                      AxisSpace space) {<a name="line.1100"></a>
<FONT color="green">1101</FONT>    <a name="line.1101"></a>
<FONT color="green">1102</FONT>            this.internalMarkerCycleBoundTick = null;<a name="line.1102"></a>
<FONT color="green">1103</FONT>            AxisSpace ret = super.reserveSpace(g2, plot, plotArea, edge, space);<a name="line.1103"></a>
<FONT color="green">1104</FONT>            if (this.internalMarkerCycleBoundTick == null) {<a name="line.1104"></a>
<FONT color="green">1105</FONT>                return ret;<a name="line.1105"></a>
<FONT color="green">1106</FONT>            }<a name="line.1106"></a>
<FONT color="green">1107</FONT>    <a name="line.1107"></a>
<FONT color="green">1108</FONT>            FontMetrics fm = g2.getFontMetrics(getTickLabelFont());<a name="line.1108"></a>
<FONT color="green">1109</FONT>            Rectangle2D r = TextUtilities.getTextBounds(<a name="line.1109"></a>
<FONT color="green">1110</FONT>                this.internalMarkerCycleBoundTick.getText(), g2, fm<a name="line.1110"></a>
<FONT color="green">1111</FONT>            );<a name="line.1111"></a>
<FONT color="green">1112</FONT>    <a name="line.1112"></a>
<FONT color="green">1113</FONT>            if (RectangleEdge.isTopOrBottom(edge)) {<a name="line.1113"></a>
<FONT color="green">1114</FONT>                if (isVerticalTickLabels()) {<a name="line.1114"></a>
<FONT color="green">1115</FONT>                    space.add(r.getHeight() / 2, RectangleEdge.RIGHT);<a name="line.1115"></a>
<FONT color="green">1116</FONT>                }<a name="line.1116"></a>
<FONT color="green">1117</FONT>                else {<a name="line.1117"></a>
<FONT color="green">1118</FONT>                    space.add(r.getWidth() / 2, RectangleEdge.RIGHT);<a name="line.1118"></a>
<FONT color="green">1119</FONT>                }<a name="line.1119"></a>
<FONT color="green">1120</FONT>            }<a name="line.1120"></a>
<FONT color="green">1121</FONT>            else if (RectangleEdge.isLeftOrRight(edge)) {<a name="line.1121"></a>
<FONT color="green">1122</FONT>                if (isVerticalTickLabels()) {<a name="line.1122"></a>
<FONT color="green">1123</FONT>                    space.add(r.getWidth() / 2, RectangleEdge.TOP);<a name="line.1123"></a>
<FONT color="green">1124</FONT>                }<a name="line.1124"></a>
<FONT color="green">1125</FONT>                else {<a name="line.1125"></a>
<FONT color="green">1126</FONT>                    space.add(r.getHeight() / 2, RectangleEdge.TOP);<a name="line.1126"></a>
<FONT color="green">1127</FONT>                }<a name="line.1127"></a>
<FONT color="green">1128</FONT>            }<a name="line.1128"></a>
<FONT color="green">1129</FONT>    <a name="line.1129"></a>
<FONT color="green">1130</FONT>            return ret;<a name="line.1130"></a>
<FONT color="green">1131</FONT>    <a name="line.1131"></a>
<FONT color="green">1132</FONT>        }<a name="line.1132"></a>
<FONT color="green">1133</FONT>    <a name="line.1133"></a>
<FONT color="green">1134</FONT>        /**<a name="line.1134"></a>
<FONT color="green">1135</FONT>         * Provides serialization support.<a name="line.1135"></a>
<FONT color="green">1136</FONT>         *<a name="line.1136"></a>
<FONT color="green">1137</FONT>         * @param stream  the output stream.<a name="line.1137"></a>
<FONT color="green">1138</FONT>         *<a name="line.1138"></a>
<FONT color="green">1139</FONT>         * @throws IOException  if there is an I/O error.<a name="line.1139"></a>
<FONT color="green">1140</FONT>         */<a name="line.1140"></a>
<FONT color="green">1141</FONT>        private void writeObject(ObjectOutputStream stream) throws IOException {<a name="line.1141"></a>
<FONT color="green">1142</FONT>    <a name="line.1142"></a>
<FONT color="green">1143</FONT>            stream.defaultWriteObject();<a name="line.1143"></a>
<FONT color="green">1144</FONT>            SerialUtilities.writePaint(this.advanceLinePaint, stream);<a name="line.1144"></a>
<FONT color="green">1145</FONT>            SerialUtilities.writeStroke(this.advanceLineStroke, stream);<a name="line.1145"></a>
<FONT color="green">1146</FONT>    <a name="line.1146"></a>
<FONT color="green">1147</FONT>        }<a name="line.1147"></a>
<FONT color="green">1148</FONT>    <a name="line.1148"></a>
<FONT color="green">1149</FONT>        /**<a name="line.1149"></a>
<FONT color="green">1150</FONT>         * Provides serialization support.<a name="line.1150"></a>
<FONT color="green">1151</FONT>         *<a name="line.1151"></a>
<FONT color="green">1152</FONT>         * @param stream  the input stream.<a name="line.1152"></a>
<FONT color="green">1153</FONT>         *<a name="line.1153"></a>
<FONT color="green">1154</FONT>         * @throws IOException  if there is an I/O error.<a name="line.1154"></a>
<FONT color="green">1155</FONT>         * @throws ClassNotFoundException  if there is a classpath problem.<a name="line.1155"></a>
<FONT color="green">1156</FONT>         */<a name="line.1156"></a>
<FONT color="green">1157</FONT>        private void readObject(ObjectInputStream stream)<a name="line.1157"></a>
<FONT color="green">1158</FONT>            throws IOException, ClassNotFoundException {<a name="line.1158"></a>
<FONT color="green">1159</FONT>    <a name="line.1159"></a>
<FONT color="green">1160</FONT>            stream.defaultReadObject();<a name="line.1160"></a>
<FONT color="green">1161</FONT>            this.advanceLinePaint = SerialUtilities.readPaint(stream);<a name="line.1161"></a>
<FONT color="green">1162</FONT>            this.advanceLineStroke = SerialUtilities.readStroke(stream);<a name="line.1162"></a>
<FONT color="green">1163</FONT>    <a name="line.1163"></a>
<FONT color="green">1164</FONT>        }<a name="line.1164"></a>
<FONT color="green">1165</FONT>    <a name="line.1165"></a>
<FONT color="green">1166</FONT>    <a name="line.1166"></a>
<FONT color="green">1167</FONT>        /**<a name="line.1167"></a>
<FONT color="green">1168</FONT>         * Tests the axis for equality with another object.<a name="line.1168"></a>
<FONT color="green">1169</FONT>         *<a name="line.1169"></a>
<FONT color="green">1170</FONT>         * @param obj  the object to test against.<a name="line.1170"></a>
<FONT color="green">1171</FONT>         *<a name="line.1171"></a>
<FONT color="green">1172</FONT>         * @return A boolean.<a name="line.1172"></a>
<FONT color="green">1173</FONT>         */<a name="line.1173"></a>
<FONT color="green">1174</FONT>        public boolean equals(Object obj) {<a name="line.1174"></a>
<FONT color="green">1175</FONT>            if (obj == this) {<a name="line.1175"></a>
<FONT color="green">1176</FONT>                return true;<a name="line.1176"></a>
<FONT color="green">1177</FONT>            }<a name="line.1177"></a>
<FONT color="green">1178</FONT>            if (!(obj instanceof CyclicNumberAxis)) {<a name="line.1178"></a>
<FONT color="green">1179</FONT>                return false;<a name="line.1179"></a>
<FONT color="green">1180</FONT>            }<a name="line.1180"></a>
<FONT color="green">1181</FONT>            if (!super.equals(obj)) {<a name="line.1181"></a>
<FONT color="green">1182</FONT>                return false;<a name="line.1182"></a>
<FONT color="green">1183</FONT>            }<a name="line.1183"></a>
<FONT color="green">1184</FONT>            CyclicNumberAxis that = (CyclicNumberAxis) obj;<a name="line.1184"></a>
<FONT color="green">1185</FONT>            if (this.period != that.period) {<a name="line.1185"></a>
<FONT color="green">1186</FONT>                return false;<a name="line.1186"></a>
<FONT color="green">1187</FONT>            }<a name="line.1187"></a>
<FONT color="green">1188</FONT>            if (this.offset != that.offset) {<a name="line.1188"></a>
<FONT color="green">1189</FONT>                return false;<a name="line.1189"></a>
<FONT color="green">1190</FONT>            }<a name="line.1190"></a>
<FONT color="green">1191</FONT>            if (!PaintUtilities.equal(this.advanceLinePaint,<a name="line.1191"></a>
<FONT color="green">1192</FONT>                    that.advanceLinePaint)) {<a name="line.1192"></a>
<FONT color="green">1193</FONT>                return false;<a name="line.1193"></a>
<FONT color="green">1194</FONT>            }<a name="line.1194"></a>
<FONT color="green">1195</FONT>            if (!ObjectUtilities.equal(this.advanceLineStroke,<a name="line.1195"></a>
<FONT color="green">1196</FONT>                    that.advanceLineStroke)) {<a name="line.1196"></a>
<FONT color="green">1197</FONT>                return false;<a name="line.1197"></a>
<FONT color="green">1198</FONT>            }<a name="line.1198"></a>
<FONT color="green">1199</FONT>            if (this.advanceLineVisible != that.advanceLineVisible) {<a name="line.1199"></a>
<FONT color="green">1200</FONT>                return false;<a name="line.1200"></a>
<FONT color="green">1201</FONT>            }<a name="line.1201"></a>
<FONT color="green">1202</FONT>            if (this.boundMappedToLastCycle != that.boundMappedToLastCycle) {<a name="line.1202"></a>
<FONT color="green">1203</FONT>                return false;<a name="line.1203"></a>
<FONT color="green">1204</FONT>            }<a name="line.1204"></a>
<FONT color="green">1205</FONT>            return true;<a name="line.1205"></a>
<FONT color="green">1206</FONT>        }<a name="line.1206"></a>
<FONT color="green">1207</FONT>    }<a name="line.1207"></a>




























































</PRE>
</BODY>
</HTML>
