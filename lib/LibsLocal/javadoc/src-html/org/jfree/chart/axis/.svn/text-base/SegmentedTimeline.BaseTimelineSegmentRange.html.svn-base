<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ===========================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JFreeChart : a free chart library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ===========================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     *<a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jfreechart/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it<a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by<a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or<a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but<a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY<a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public<a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,<a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.<a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc.<a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     *<a name="line.26"></a>
<FONT color="green">027</FONT>     * -----------------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * SegmentedTimeline.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * -----------------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C) Copyright 2003-2008, by Bill Kelemen and Contributors.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  Bill Kelemen;<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   David Gilbert (for Object Refinery Limited);<a name="line.33"></a>
<FONT color="green">034</FONT>     *<a name="line.34"></a>
<FONT color="green">035</FONT>     * Changes<a name="line.35"></a>
<FONT color="green">036</FONT>     * -------<a name="line.36"></a>
<FONT color="green">037</FONT>     * 23-May-2003 : Version 1 (BK);<a name="line.37"></a>
<FONT color="green">038</FONT>     * 15-Aug-2003 : Implemented Cloneable (DG);<a name="line.38"></a>
<FONT color="green">039</FONT>     * 01-Jun-2004 : Modified to compile with JDK 1.2.2 (DG);<a name="line.39"></a>
<FONT color="green">040</FONT>     * 30-Sep-2004 : Replaced getTime().getTime() with getTimeInMillis() (DG);<a name="line.40"></a>
<FONT color="green">041</FONT>     * 04-Nov-2004 : Reverted change of 30-Sep-2004, won't work with JDK 1.3 (DG);<a name="line.41"></a>
<FONT color="green">042</FONT>     * 11-Jan-2005 : Removed deprecated code in preparation for 1.0.0 release (DG);<a name="line.42"></a>
<FONT color="green">043</FONT>     * ------------- JFREECHART 1.0.x ---------------------------------------------<a name="line.43"></a>
<FONT color="green">044</FONT>     * 14-Nov-2006 : Fix in toTimelineValue(long) to avoid stack overflow (DG);<a name="line.44"></a>
<FONT color="green">045</FONT>     * 02-Feb-2007 : Removed author tags all over JFreeChart sources (DG);<a name="line.45"></a>
<FONT color="green">046</FONT>     * 11-Jul-2007 : Fixed time zone bugs (DG);<a name="line.46"></a>
<FONT color="green">047</FONT>     * 06-Jun-2008 : Performance enhancement posted in forum (DG);<a name="line.47"></a>
<FONT color="green">048</FONT>     *<a name="line.48"></a>
<FONT color="green">049</FONT>     */<a name="line.49"></a>
<FONT color="green">050</FONT>    <a name="line.50"></a>
<FONT color="green">051</FONT>    package org.jfree.chart.axis;<a name="line.51"></a>
<FONT color="green">052</FONT>    <a name="line.52"></a>
<FONT color="green">053</FONT>    import java.io.Serializable;<a name="line.53"></a>
<FONT color="green">054</FONT>    import java.util.ArrayList;<a name="line.54"></a>
<FONT color="green">055</FONT>    import java.util.Calendar;<a name="line.55"></a>
<FONT color="green">056</FONT>    import java.util.Collections;<a name="line.56"></a>
<FONT color="green">057</FONT>    import java.util.Date;<a name="line.57"></a>
<FONT color="green">058</FONT>    import java.util.GregorianCalendar;<a name="line.58"></a>
<FONT color="green">059</FONT>    import java.util.Iterator;<a name="line.59"></a>
<FONT color="green">060</FONT>    import java.util.List;<a name="line.60"></a>
<FONT color="green">061</FONT>    import java.util.Locale;<a name="line.61"></a>
<FONT color="green">062</FONT>    import java.util.SimpleTimeZone;<a name="line.62"></a>
<FONT color="green">063</FONT>    import java.util.TimeZone;<a name="line.63"></a>
<FONT color="green">064</FONT>    <a name="line.64"></a>
<FONT color="green">065</FONT>    /**<a name="line.65"></a>
<FONT color="green">066</FONT>     * A {@link Timeline} that implements a "segmented" timeline with included,<a name="line.66"></a>
<FONT color="green">067</FONT>     * excluded and exception segments.<a name="line.67"></a>
<FONT color="green">068</FONT>     * &lt;P&gt;<a name="line.68"></a>
<FONT color="green">069</FONT>     * A Timeline will present a series of values to be used for an axis. Each<a name="line.69"></a>
<FONT color="green">070</FONT>     * Timeline must provide transformation methods between domain values and<a name="line.70"></a>
<FONT color="green">071</FONT>     * timeline values.<a name="line.71"></a>
<FONT color="green">072</FONT>     * &lt;P&gt;<a name="line.72"></a>
<FONT color="green">073</FONT>     * A timeline can be used as parameter to a<a name="line.73"></a>
<FONT color="green">074</FONT>     * {@link org.jfree.chart.axis.DateAxis} to define the values that this axis<a name="line.74"></a>
<FONT color="green">075</FONT>     * supports. This class implements a timeline formed by segments of equal<a name="line.75"></a>
<FONT color="green">076</FONT>     * length (ex. days, hours, minutes) where some segments can be included in the<a name="line.76"></a>
<FONT color="green">077</FONT>     * timeline and others excluded. Therefore timelines like "working days" or<a name="line.77"></a>
<FONT color="green">078</FONT>     * "working hours" can be created where non-working days or non-working hours<a name="line.78"></a>
<FONT color="green">079</FONT>     * respectively can be removed from the timeline, and therefore from the axis.<a name="line.79"></a>
<FONT color="green">080</FONT>     * This creates a smooth plot with equal separation between all included<a name="line.80"></a>
<FONT color="green">081</FONT>     * segments.<a name="line.81"></a>
<FONT color="green">082</FONT>     * &lt;P&gt;<a name="line.82"></a>
<FONT color="green">083</FONT>     * Because Timelines were created mainly for Date related axis, values are<a name="line.83"></a>
<FONT color="green">084</FONT>     * represented as longs instead of doubles. In this case, the domain value is<a name="line.84"></a>
<FONT color="green">085</FONT>     * just the number of milliseconds since January 1, 1970, 00:00:00 GMT as<a name="line.85"></a>
<FONT color="green">086</FONT>     * defined by the getTime() method of {@link java.util.Date}.<a name="line.86"></a>
<FONT color="green">087</FONT>     * &lt;P&gt;<a name="line.87"></a>
<FONT color="green">088</FONT>     * In this class, a segment is defined as a unit of time of fixed length.<a name="line.88"></a>
<FONT color="green">089</FONT>     * Examples of segments are: days, hours, minutes, etc. The size of a segment<a name="line.89"></a>
<FONT color="green">090</FONT>     * is defined as the number of milliseconds in the segment. Some useful segment<a name="line.90"></a>
<FONT color="green">091</FONT>     * sizes are defined as constants in this class: DAY_SEGMENT_SIZE,<a name="line.91"></a>
<FONT color="green">092</FONT>     * HOUR_SEGMENT_SIZE, FIFTEEN_MINUTE_SEGMENT_SIZE and MINUTE_SEGMENT_SIZE.<a name="line.92"></a>
<FONT color="green">093</FONT>     * &lt;P&gt;<a name="line.93"></a>
<FONT color="green">094</FONT>     * Segments are group together to form a Segment Group. Each Segment Group will<a name="line.94"></a>
<FONT color="green">095</FONT>     * contain a number of Segments included and a number of Segments excluded. This<a name="line.95"></a>
<FONT color="green">096</FONT>     * Segment Group structure will repeat for the whole timeline.<a name="line.96"></a>
<FONT color="green">097</FONT>     * &lt;P&gt;<a name="line.97"></a>
<FONT color="green">098</FONT>     * For example, a working days SegmentedTimeline would be formed by a group of<a name="line.98"></a>
<FONT color="green">099</FONT>     * 7 daily segments, where there are 5 included (Monday through Friday) and 2<a name="line.99"></a>
<FONT color="green">100</FONT>     * excluded (Saturday and Sunday) segments.<a name="line.100"></a>
<FONT color="green">101</FONT>     * &lt;P&gt;<a name="line.101"></a>
<FONT color="green">102</FONT>     * Following is a diagram that explains the major attributes that define a<a name="line.102"></a>
<FONT color="green">103</FONT>     * segment.  Each box is one segment and must be of fixed length (ms, second,<a name="line.103"></a>
<FONT color="green">104</FONT>     * hour, day, etc).<a name="line.104"></a>
<FONT color="green">105</FONT>     * &lt;p&gt;<a name="line.105"></a>
<FONT color="green">106</FONT>     * &lt;pre&gt;<a name="line.106"></a>
<FONT color="green">107</FONT>     * start time<a name="line.107"></a>
<FONT color="green">108</FONT>     *   |<a name="line.108"></a>
<FONT color="green">109</FONT>     *   v<a name="line.109"></a>
<FONT color="green">110</FONT>     *   0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 ...<a name="line.110"></a>
<FONT color="green">111</FONT>     * +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+...<a name="line.111"></a>
<FONT color="green">112</FONT>     * |  |  |  |  |  |EE|EE|  |  |  |  |  |EE|EE|  |  |  |  |  |EE|EE|<a name="line.112"></a>
<FONT color="green">113</FONT>     * +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+...<a name="line.113"></a>
<FONT color="green">114</FONT>     *  \____________/ \___/            \_/<a name="line.114"></a>
<FONT color="green">115</FONT>     *        \/         |               |<a name="line.115"></a>
<FONT color="green">116</FONT>     *     included   excluded        segment<a name="line.116"></a>
<FONT color="green">117</FONT>     *     segments   segments         size<a name="line.117"></a>
<FONT color="green">118</FONT>     *  \_________  _______/<a name="line.118"></a>
<FONT color="green">119</FONT>     *            \/<a name="line.119"></a>
<FONT color="green">120</FONT>     *       segment group<a name="line.120"></a>
<FONT color="green">121</FONT>     * &lt;/pre&gt;<a name="line.121"></a>
<FONT color="green">122</FONT>     * Legend:&lt;br&gt;<a name="line.122"></a>
<FONT color="green">123</FONT>     * &amp;lt;space&amp;gt; = Included segment&lt;br&gt;<a name="line.123"></a>
<FONT color="green">124</FONT>     * EE      = Excluded segments in the base timeline&lt;br&gt;<a name="line.124"></a>
<FONT color="green">125</FONT>     * &lt;p&gt;<a name="line.125"></a>
<FONT color="green">126</FONT>     * In the example, the following segment attributes are presented:<a name="line.126"></a>
<FONT color="green">127</FONT>     * &lt;ul&gt;<a name="line.127"></a>
<FONT color="green">128</FONT>     * &lt;li&gt;segment size: the size of each segment in ms.<a name="line.128"></a>
<FONT color="green">129</FONT>     * &lt;li&gt;start time: the start of the first segment of the first segment group to<a name="line.129"></a>
<FONT color="green">130</FONT>     *     consider.<a name="line.130"></a>
<FONT color="green">131</FONT>     * &lt;li&gt;included segments: the number of segments to include in the group.<a name="line.131"></a>
<FONT color="green">132</FONT>     * &lt;li&gt;excluded segments: the number of segments to exclude in the group.<a name="line.132"></a>
<FONT color="green">133</FONT>     * &lt;/ul&gt;<a name="line.133"></a>
<FONT color="green">134</FONT>     * &lt;p&gt;<a name="line.134"></a>
<FONT color="green">135</FONT>     * Exception Segments are allowed. These exception segments are defined as<a name="line.135"></a>
<FONT color="green">136</FONT>     * segments that would have been in the included segments of the Segment Group,<a name="line.136"></a>
<FONT color="green">137</FONT>     * but should be excluded for special reasons. In the previous working days<a name="line.137"></a>
<FONT color="green">138</FONT>     * SegmentedTimeline example, holidays would be considered exceptions.<a name="line.138"></a>
<FONT color="green">139</FONT>     * &lt;P&gt;<a name="line.139"></a>
<FONT color="green">140</FONT>     * Additionally the &lt;code&gt;startTime&lt;/code&gt;, or start of the first Segment of<a name="line.140"></a>
<FONT color="green">141</FONT>     * the smallest segment group needs to be defined. This startTime could be<a name="line.141"></a>
<FONT color="green">142</FONT>     * relative to January 1, 1970, 00:00:00 GMT or any other date. This creates a<a name="line.142"></a>
<FONT color="green">143</FONT>     * point of reference to start counting Segment Groups. For example, for the<a name="line.143"></a>
<FONT color="green">144</FONT>     * working days SegmentedTimeline, the &lt;code&gt;startTime&lt;/code&gt; could be<a name="line.144"></a>
<FONT color="green">145</FONT>     * 00:00:00 GMT of the first Monday after January 1, 1970. In this class, the<a name="line.145"></a>
<FONT color="green">146</FONT>     * constant FIRST_MONDAY_AFTER_1900 refers to a reference point of the first<a name="line.146"></a>
<FONT color="green">147</FONT>     * Monday of the last century.<a name="line.147"></a>
<FONT color="green">148</FONT>     * &lt;p&gt;<a name="line.148"></a>
<FONT color="green">149</FONT>     * A SegmentedTimeline can include a baseTimeline. This combination of<a name="line.149"></a>
<FONT color="green">150</FONT>     * timelines allows the creation of more complex timelines. For example, in<a name="line.150"></a>
<FONT color="green">151</FONT>     * order to implement a SegmentedTimeline for an intraday stock trading<a name="line.151"></a>
<FONT color="green">152</FONT>     * application, where the trading period is defined as 9:00 AM through 4:00 PM<a name="line.152"></a>
<FONT color="green">153</FONT>     * Monday through Friday, two SegmentedTimelines are used. The first one (the<a name="line.153"></a>
<FONT color="green">154</FONT>     * baseTimeline) would be a working day SegmentedTimeline (daily timeline<a name="line.154"></a>
<FONT color="green">155</FONT>     * Monday through Friday). On top of this baseTimeline, a second one is defined<a name="line.155"></a>
<FONT color="green">156</FONT>     * that maps the 9:00 AM to 4:00 PM period. Because the baseTimeline defines a<a name="line.156"></a>
<FONT color="green">157</FONT>     * timeline of Monday through Friday, the resulting (combined) timeline will<a name="line.157"></a>
<FONT color="green">158</FONT>     * expose the period 9:00 AM through 4:00 PM only on Monday through Friday,<a name="line.158"></a>
<FONT color="green">159</FONT>     * and will remove all other intermediate intervals.<a name="line.159"></a>
<FONT color="green">160</FONT>     * &lt;P&gt;<a name="line.160"></a>
<FONT color="green">161</FONT>     * Two factory methods newMondayThroughFridayTimeline() and<a name="line.161"></a>
<FONT color="green">162</FONT>     * newFifteenMinuteTimeline() are provided as examples to create special<a name="line.162"></a>
<FONT color="green">163</FONT>     * SegmentedTimelines.<a name="line.163"></a>
<FONT color="green">164</FONT>     *<a name="line.164"></a>
<FONT color="green">165</FONT>     * @see org.jfree.chart.axis.DateAxis<a name="line.165"></a>
<FONT color="green">166</FONT>     */<a name="line.166"></a>
<FONT color="green">167</FONT>    public class SegmentedTimeline implements Timeline, Cloneable, Serializable {<a name="line.167"></a>
<FONT color="green">168</FONT>    <a name="line.168"></a>
<FONT color="green">169</FONT>        /** For serialization. */<a name="line.169"></a>
<FONT color="green">170</FONT>        private static final long serialVersionUID = 1093779862539903110L;<a name="line.170"></a>
<FONT color="green">171</FONT>    <a name="line.171"></a>
<FONT color="green">172</FONT>        ////////////////////////////////////////////////////////////////////////////<a name="line.172"></a>
<FONT color="green">173</FONT>        // predetermined segments sizes<a name="line.173"></a>
<FONT color="green">174</FONT>        ////////////////////////////////////////////////////////////////////////////<a name="line.174"></a>
<FONT color="green">175</FONT>    <a name="line.175"></a>
<FONT color="green">176</FONT>        /** Defines a day segment size in ms. */<a name="line.176"></a>
<FONT color="green">177</FONT>        public static final long DAY_SEGMENT_SIZE = 24 * 60 * 60 * 1000;<a name="line.177"></a>
<FONT color="green">178</FONT>    <a name="line.178"></a>
<FONT color="green">179</FONT>        /** Defines a one hour segment size in ms. */<a name="line.179"></a>
<FONT color="green">180</FONT>        public static final long HOUR_SEGMENT_SIZE = 60 * 60 * 1000;<a name="line.180"></a>
<FONT color="green">181</FONT>    <a name="line.181"></a>
<FONT color="green">182</FONT>        /** Defines a 15-minute segment size in ms. */<a name="line.182"></a>
<FONT color="green">183</FONT>        public static final long FIFTEEN_MINUTE_SEGMENT_SIZE = 15 * 60 * 1000;<a name="line.183"></a>
<FONT color="green">184</FONT>    <a name="line.184"></a>
<FONT color="green">185</FONT>        /** Defines a one-minute segment size in ms. */<a name="line.185"></a>
<FONT color="green">186</FONT>        public static final long MINUTE_SEGMENT_SIZE = 60 * 1000;<a name="line.186"></a>
<FONT color="green">187</FONT>    <a name="line.187"></a>
<FONT color="green">188</FONT>        ////////////////////////////////////////////////////////////////////////////<a name="line.188"></a>
<FONT color="green">189</FONT>        // other constants<a name="line.189"></a>
<FONT color="green">190</FONT>        ////////////////////////////////////////////////////////////////////////////<a name="line.190"></a>
<FONT color="green">191</FONT>    <a name="line.191"></a>
<FONT color="green">192</FONT>        /**<a name="line.192"></a>
<FONT color="green">193</FONT>         * Utility constant that defines the startTime as the first monday after<a name="line.193"></a>
<FONT color="green">194</FONT>         * 1/1/1970.  This should be used when creating a SegmentedTimeline for<a name="line.194"></a>
<FONT color="green">195</FONT>         * Monday through Friday. See static block below for calculation of this<a name="line.195"></a>
<FONT color="green">196</FONT>         * constant.<a name="line.196"></a>
<FONT color="green">197</FONT>         *<a name="line.197"></a>
<FONT color="green">198</FONT>         * @deprecated As of 1.0.7.  This field doesn't take into account changes<a name="line.198"></a>
<FONT color="green">199</FONT>         *         to the default time zone.<a name="line.199"></a>
<FONT color="green">200</FONT>         */<a name="line.200"></a>
<FONT color="green">201</FONT>        public static long FIRST_MONDAY_AFTER_1900;<a name="line.201"></a>
<FONT color="green">202</FONT>    <a name="line.202"></a>
<FONT color="green">203</FONT>        /**<a name="line.203"></a>
<FONT color="green">204</FONT>         * Utility TimeZone object that has no DST and an offset equal to the<a name="line.204"></a>
<FONT color="green">205</FONT>         * default TimeZone. This allows easy arithmetic between days as each one<a name="line.205"></a>
<FONT color="green">206</FONT>         * will have equal size.<a name="line.206"></a>
<FONT color="green">207</FONT>         *<a name="line.207"></a>
<FONT color="green">208</FONT>         * @deprecated As of 1.0.7.  This field is initialised based on the<a name="line.208"></a>
<FONT color="green">209</FONT>         *         default time zone, and doesn't take into account subsequent<a name="line.209"></a>
<FONT color="green">210</FONT>         *         changes to the default.<a name="line.210"></a>
<FONT color="green">211</FONT>         */<a name="line.211"></a>
<FONT color="green">212</FONT>        public static TimeZone NO_DST_TIME_ZONE;<a name="line.212"></a>
<FONT color="green">213</FONT>    <a name="line.213"></a>
<FONT color="green">214</FONT>        /**<a name="line.214"></a>
<FONT color="green">215</FONT>         * This is the default time zone where the application is running. See<a name="line.215"></a>
<FONT color="green">216</FONT>         * getTime() below where we make use of certain transformations between<a name="line.216"></a>
<FONT color="green">217</FONT>         * times in the default time zone and the no-dst time zone used for our<a name="line.217"></a>
<FONT color="green">218</FONT>         * calculations.<a name="line.218"></a>
<FONT color="green">219</FONT>         *<a name="line.219"></a>
<FONT color="green">220</FONT>         * @deprecated As of 1.0.7.  When the default time zone is required,<a name="line.220"></a>
<FONT color="green">221</FONT>         *         just call &lt;code&gt;TimeZone.getDefault()&lt;/code&gt;.<a name="line.221"></a>
<FONT color="green">222</FONT>         */<a name="line.222"></a>
<FONT color="green">223</FONT>        public static TimeZone DEFAULT_TIME_ZONE = TimeZone.getDefault();<a name="line.223"></a>
<FONT color="green">224</FONT>    <a name="line.224"></a>
<FONT color="green">225</FONT>        /**<a name="line.225"></a>
<FONT color="green">226</FONT>         * This will be a utility calendar that has no DST but is shifted relative<a name="line.226"></a>
<FONT color="green">227</FONT>         * to the default time zone's offset.<a name="line.227"></a>
<FONT color="green">228</FONT>         */<a name="line.228"></a>
<FONT color="green">229</FONT>        private Calendar workingCalendarNoDST;<a name="line.229"></a>
<FONT color="green">230</FONT>    <a name="line.230"></a>
<FONT color="green">231</FONT>        /**<a name="line.231"></a>
<FONT color="green">232</FONT>         * This will be a utility calendar that used the default time zone.<a name="line.232"></a>
<FONT color="green">233</FONT>         */<a name="line.233"></a>
<FONT color="green">234</FONT>        private Calendar workingCalendar = Calendar.getInstance();<a name="line.234"></a>
<FONT color="green">235</FONT>    <a name="line.235"></a>
<FONT color="green">236</FONT>        ////////////////////////////////////////////////////////////////////////////<a name="line.236"></a>
<FONT color="green">237</FONT>        // private attributes<a name="line.237"></a>
<FONT color="green">238</FONT>        ////////////////////////////////////////////////////////////////////////////<a name="line.238"></a>
<FONT color="green">239</FONT>    <a name="line.239"></a>
<FONT color="green">240</FONT>        /** Segment size in ms. */<a name="line.240"></a>
<FONT color="green">241</FONT>        private long segmentSize;<a name="line.241"></a>
<FONT color="green">242</FONT>    <a name="line.242"></a>
<FONT color="green">243</FONT>        /** Number of consecutive segments to include in a segment group. */<a name="line.243"></a>
<FONT color="green">244</FONT>        private int segmentsIncluded;<a name="line.244"></a>
<FONT color="green">245</FONT>    <a name="line.245"></a>
<FONT color="green">246</FONT>        /** Number of consecutive segments to exclude in a segment group. */<a name="line.246"></a>
<FONT color="green">247</FONT>        private int segmentsExcluded;<a name="line.247"></a>
<FONT color="green">248</FONT>    <a name="line.248"></a>
<FONT color="green">249</FONT>        /** Number of segments in a group (segmentsIncluded + segmentsExcluded). */<a name="line.249"></a>
<FONT color="green">250</FONT>        private int groupSegmentCount;<a name="line.250"></a>
<FONT color="green">251</FONT>    <a name="line.251"></a>
<FONT color="green">252</FONT>        /**<a name="line.252"></a>
<FONT color="green">253</FONT>         * Start of time reference from time zero (1/1/1970).<a name="line.253"></a>
<FONT color="green">254</FONT>         * This is the start of segment #0.<a name="line.254"></a>
<FONT color="green">255</FONT>         */<a name="line.255"></a>
<FONT color="green">256</FONT>        private long startTime;<a name="line.256"></a>
<FONT color="green">257</FONT>    <a name="line.257"></a>
<FONT color="green">258</FONT>        /** Consecutive ms in segmentsIncluded (segmentsIncluded * segmentSize). */<a name="line.258"></a>
<FONT color="green">259</FONT>        private long segmentsIncludedSize;<a name="line.259"></a>
<FONT color="green">260</FONT>    <a name="line.260"></a>
<FONT color="green">261</FONT>        /** Consecutive ms in segmentsExcluded (segmentsExcluded * segmentSize). */<a name="line.261"></a>
<FONT color="green">262</FONT>        private long segmentsExcludedSize;<a name="line.262"></a>
<FONT color="green">263</FONT>    <a name="line.263"></a>
<FONT color="green">264</FONT>        /** ms in a segment group (segmentsIncludedSize + segmentsExcludedSize). */<a name="line.264"></a>
<FONT color="green">265</FONT>        private long segmentsGroupSize;<a name="line.265"></a>
<FONT color="green">266</FONT>    <a name="line.266"></a>
<FONT color="green">267</FONT>        /**<a name="line.267"></a>
<FONT color="green">268</FONT>         * List of exception segments (exceptions segments that would otherwise be<a name="line.268"></a>
<FONT color="green">269</FONT>         * included based on the periodic (included, excluded) grouping).<a name="line.269"></a>
<FONT color="green">270</FONT>         */<a name="line.270"></a>
<FONT color="green">271</FONT>        private List exceptionSegments = new ArrayList();<a name="line.271"></a>
<FONT color="green">272</FONT>    <a name="line.272"></a>
<FONT color="green">273</FONT>        /**<a name="line.273"></a>
<FONT color="green">274</FONT>         * This base timeline is used to specify exceptions at a higher level. For<a name="line.274"></a>
<FONT color="green">275</FONT>         * example, if we are a intraday timeline and want to exclude holidays,<a name="line.275"></a>
<FONT color="green">276</FONT>         * instead of having to exclude all intraday segments for the holiday,<a name="line.276"></a>
<FONT color="green">277</FONT>         * segments from this base timeline can be excluded. This baseTimeline is<a name="line.277"></a>
<FONT color="green">278</FONT>         * always optional and is only a convenience method.<a name="line.278"></a>
<FONT color="green">279</FONT>         * &lt;p&gt;<a name="line.279"></a>
<FONT color="green">280</FONT>         * Additionally, all excluded segments from this baseTimeline will be<a name="line.280"></a>
<FONT color="green">281</FONT>         * considered exceptions at this level.<a name="line.281"></a>
<FONT color="green">282</FONT>         */<a name="line.282"></a>
<FONT color="green">283</FONT>        private SegmentedTimeline baseTimeline;<a name="line.283"></a>
<FONT color="green">284</FONT>    <a name="line.284"></a>
<FONT color="green">285</FONT>        /** A flag that controls whether or not to adjust for daylight saving. */<a name="line.285"></a>
<FONT color="green">286</FONT>        private boolean adjustForDaylightSaving = false;<a name="line.286"></a>
<FONT color="green">287</FONT>    <a name="line.287"></a>
<FONT color="green">288</FONT>        ////////////////////////////////////////////////////////////////////////////<a name="line.288"></a>
<FONT color="green">289</FONT>        // static block<a name="line.289"></a>
<FONT color="green">290</FONT>        ////////////////////////////////////////////////////////////////////////////<a name="line.290"></a>
<FONT color="green">291</FONT>    <a name="line.291"></a>
<FONT color="green">292</FONT>        static {<a name="line.292"></a>
<FONT color="green">293</FONT>            // make a time zone with no DST for our Calendar calculations<a name="line.293"></a>
<FONT color="green">294</FONT>            int offset = TimeZone.getDefault().getRawOffset();<a name="line.294"></a>
<FONT color="green">295</FONT>            NO_DST_TIME_ZONE = new SimpleTimeZone(offset, "UTC-" + offset);<a name="line.295"></a>
<FONT color="green">296</FONT>    <a name="line.296"></a>
<FONT color="green">297</FONT>            // calculate midnight of first monday after 1/1/1900 relative to<a name="line.297"></a>
<FONT color="green">298</FONT>            // current locale<a name="line.298"></a>
<FONT color="green">299</FONT>            Calendar cal = new GregorianCalendar(NO_DST_TIME_ZONE);<a name="line.299"></a>
<FONT color="green">300</FONT>            cal.set(1900, 0, 1, 0, 0, 0);<a name="line.300"></a>
<FONT color="green">301</FONT>            cal.set(Calendar.MILLISECOND, 0);<a name="line.301"></a>
<FONT color="green">302</FONT>            while (cal.get(Calendar.DAY_OF_WEEK) != Calendar.MONDAY) {<a name="line.302"></a>
<FONT color="green">303</FONT>                cal.add(Calendar.DATE, 1);<a name="line.303"></a>
<FONT color="green">304</FONT>            }<a name="line.304"></a>
<FONT color="green">305</FONT>            // FIRST_MONDAY_AFTER_1900 = cal.getTime().getTime();<a name="line.305"></a>
<FONT color="green">306</FONT>            // preceding code won't work with JDK 1.3<a name="line.306"></a>
<FONT color="green">307</FONT>            FIRST_MONDAY_AFTER_1900 = cal.getTime().getTime();<a name="line.307"></a>
<FONT color="green">308</FONT>        }<a name="line.308"></a>
<FONT color="green">309</FONT>    <a name="line.309"></a>
<FONT color="green">310</FONT>        ////////////////////////////////////////////////////////////////////////////<a name="line.310"></a>
<FONT color="green">311</FONT>        // constructors and factory methods<a name="line.311"></a>
<FONT color="green">312</FONT>        ////////////////////////////////////////////////////////////////////////////<a name="line.312"></a>
<FONT color="green">313</FONT>    <a name="line.313"></a>
<FONT color="green">314</FONT>        /**<a name="line.314"></a>
<FONT color="green">315</FONT>         * Constructs a new segmented timeline, optionaly using another segmented<a name="line.315"></a>
<FONT color="green">316</FONT>         * timeline as its base. This chaining of SegmentedTimelines allows further<a name="line.316"></a>
<FONT color="green">317</FONT>         * segmentation into smaller timelines.<a name="line.317"></a>
<FONT color="green">318</FONT>         *<a name="line.318"></a>
<FONT color="green">319</FONT>         * If a base<a name="line.319"></a>
<FONT color="green">320</FONT>         *<a name="line.320"></a>
<FONT color="green">321</FONT>         * @param segmentSize the size of a segment in ms. This time unit will be<a name="line.321"></a>
<FONT color="green">322</FONT>         *        used to compute the included and excluded segments of the<a name="line.322"></a>
<FONT color="green">323</FONT>         *        timeline.<a name="line.323"></a>
<FONT color="green">324</FONT>         * @param segmentsIncluded Number of consecutive segments to include.<a name="line.324"></a>
<FONT color="green">325</FONT>         * @param segmentsExcluded Number of consecutive segments to exclude.<a name="line.325"></a>
<FONT color="green">326</FONT>         */<a name="line.326"></a>
<FONT color="green">327</FONT>        public SegmentedTimeline(long segmentSize,<a name="line.327"></a>
<FONT color="green">328</FONT>                                 int segmentsIncluded,<a name="line.328"></a>
<FONT color="green">329</FONT>                                 int segmentsExcluded) {<a name="line.329"></a>
<FONT color="green">330</FONT>    <a name="line.330"></a>
<FONT color="green">331</FONT>            this.segmentSize = segmentSize;<a name="line.331"></a>
<FONT color="green">332</FONT>            this.segmentsIncluded = segmentsIncluded;<a name="line.332"></a>
<FONT color="green">333</FONT>            this.segmentsExcluded = segmentsExcluded;<a name="line.333"></a>
<FONT color="green">334</FONT>    <a name="line.334"></a>
<FONT color="green">335</FONT>            this.groupSegmentCount = this.segmentsIncluded + this.segmentsExcluded;<a name="line.335"></a>
<FONT color="green">336</FONT>            this.segmentsIncludedSize = this.segmentsIncluded * this.segmentSize;<a name="line.336"></a>
<FONT color="green">337</FONT>            this.segmentsExcludedSize = this.segmentsExcluded * this.segmentSize;<a name="line.337"></a>
<FONT color="green">338</FONT>            this.segmentsGroupSize = this.segmentsIncludedSize<a name="line.338"></a>
<FONT color="green">339</FONT>                                     + this.segmentsExcludedSize;<a name="line.339"></a>
<FONT color="green">340</FONT>            int offset = TimeZone.getDefault().getRawOffset();<a name="line.340"></a>
<FONT color="green">341</FONT>            TimeZone z = new SimpleTimeZone(offset, "UTC-" + offset);<a name="line.341"></a>
<FONT color="green">342</FONT>            this.workingCalendarNoDST = new GregorianCalendar(z,<a name="line.342"></a>
<FONT color="green">343</FONT>                    Locale.getDefault());<a name="line.343"></a>
<FONT color="green">344</FONT>        }<a name="line.344"></a>
<FONT color="green">345</FONT>    <a name="line.345"></a>
<FONT color="green">346</FONT>        /**<a name="line.346"></a>
<FONT color="green">347</FONT>         * Returns the milliseconds for midnight of the first Monday after<a name="line.347"></a>
<FONT color="green">348</FONT>         * 1-Jan-1900, ignoring daylight savings.<a name="line.348"></a>
<FONT color="green">349</FONT>         *<a name="line.349"></a>
<FONT color="green">350</FONT>         * @return The milliseconds.<a name="line.350"></a>
<FONT color="green">351</FONT>         *<a name="line.351"></a>
<FONT color="green">352</FONT>         * @since 1.0.7<a name="line.352"></a>
<FONT color="green">353</FONT>         */<a name="line.353"></a>
<FONT color="green">354</FONT>        public static long firstMondayAfter1900() {<a name="line.354"></a>
<FONT color="green">355</FONT>            int offset = TimeZone.getDefault().getRawOffset();<a name="line.355"></a>
<FONT color="green">356</FONT>            TimeZone z = new SimpleTimeZone(offset, "UTC-" + offset);<a name="line.356"></a>
<FONT color="green">357</FONT>    <a name="line.357"></a>
<FONT color="green">358</FONT>            // calculate midnight of first monday after 1/1/1900 relative to<a name="line.358"></a>
<FONT color="green">359</FONT>            // current locale<a name="line.359"></a>
<FONT color="green">360</FONT>            Calendar cal = new GregorianCalendar(z);<a name="line.360"></a>
<FONT color="green">361</FONT>            cal.set(1900, 0, 1, 0, 0, 0);<a name="line.361"></a>
<FONT color="green">362</FONT>            cal.set(Calendar.MILLISECOND, 0);<a name="line.362"></a>
<FONT color="green">363</FONT>            while (cal.get(Calendar.DAY_OF_WEEK) != Calendar.MONDAY) {<a name="line.363"></a>
<FONT color="green">364</FONT>                cal.add(Calendar.DATE, 1);<a name="line.364"></a>
<FONT color="green">365</FONT>            }<a name="line.365"></a>
<FONT color="green">366</FONT>            //return cal.getTimeInMillis();<a name="line.366"></a>
<FONT color="green">367</FONT>            // preceding code won't work with JDK 1.3<a name="line.367"></a>
<FONT color="green">368</FONT>            return cal.getTime().getTime();<a name="line.368"></a>
<FONT color="green">369</FONT>        }<a name="line.369"></a>
<FONT color="green">370</FONT>    <a name="line.370"></a>
<FONT color="green">371</FONT>        /**<a name="line.371"></a>
<FONT color="green">372</FONT>         * Factory method to create a Monday through Friday SegmentedTimeline.<a name="line.372"></a>
<FONT color="green">373</FONT>         * &lt;P&gt;<a name="line.373"></a>
<FONT color="green">374</FONT>         * The &lt;code&gt;startTime&lt;/code&gt; of the resulting timeline will be midnight<a name="line.374"></a>
<FONT color="green">375</FONT>         * of the first Monday after 1/1/1900.<a name="line.375"></a>
<FONT color="green">376</FONT>         *<a name="line.376"></a>
<FONT color="green">377</FONT>         * @return A fully initialized SegmentedTimeline.<a name="line.377"></a>
<FONT color="green">378</FONT>         */<a name="line.378"></a>
<FONT color="green">379</FONT>        public static SegmentedTimeline newMondayThroughFridayTimeline() {<a name="line.379"></a>
<FONT color="green">380</FONT>            SegmentedTimeline timeline<a name="line.380"></a>
<FONT color="green">381</FONT>                = new SegmentedTimeline(DAY_SEGMENT_SIZE, 5, 2);<a name="line.381"></a>
<FONT color="green">382</FONT>            timeline.setStartTime(firstMondayAfter1900());<a name="line.382"></a>
<FONT color="green">383</FONT>            return timeline;<a name="line.383"></a>
<FONT color="green">384</FONT>        }<a name="line.384"></a>
<FONT color="green">385</FONT>    <a name="line.385"></a>
<FONT color="green">386</FONT>        /**<a name="line.386"></a>
<FONT color="green">387</FONT>         * Factory method to create a 15-min, 9:00 AM thought 4:00 PM, Monday<a name="line.387"></a>
<FONT color="green">388</FONT>         * through Friday SegmentedTimeline.<a name="line.388"></a>
<FONT color="green">389</FONT>         * &lt;P&gt;<a name="line.389"></a>
<FONT color="green">390</FONT>         * This timeline uses a segmentSize of FIFTEEN_MIN_SEGMENT_SIZE. The<a name="line.390"></a>
<FONT color="green">391</FONT>         * segment group is defined as 28 included segments (9:00 AM through<a name="line.391"></a>
<FONT color="green">392</FONT>         * 4:00 PM) and 68 excluded segments (4:00 PM through 9:00 AM the next day).<a name="line.392"></a>
<FONT color="green">393</FONT>         * &lt;P&gt;<a name="line.393"></a>
<FONT color="green">394</FONT>         * In order to exclude Saturdays and Sundays it uses a baseTimeline that<a name="line.394"></a>
<FONT color="green">395</FONT>         * only includes Monday through Friday days.<a name="line.395"></a>
<FONT color="green">396</FONT>         * &lt;P&gt;<a name="line.396"></a>
<FONT color="green">397</FONT>         * The &lt;code&gt;startTime&lt;/code&gt; of the resulting timeline will be 9:00 AM<a name="line.397"></a>
<FONT color="green">398</FONT>         * after the startTime of the baseTimeline. This will correspond to 9:00 AM<a name="line.398"></a>
<FONT color="green">399</FONT>         * of the first Monday after 1/1/1900.<a name="line.399"></a>
<FONT color="green">400</FONT>         *<a name="line.400"></a>
<FONT color="green">401</FONT>         * @return A fully initialized SegmentedTimeline.<a name="line.401"></a>
<FONT color="green">402</FONT>         */<a name="line.402"></a>
<FONT color="green">403</FONT>        public static SegmentedTimeline newFifteenMinuteTimeline() {<a name="line.403"></a>
<FONT color="green">404</FONT>            SegmentedTimeline timeline = new SegmentedTimeline(<a name="line.404"></a>
<FONT color="green">405</FONT>                    FIFTEEN_MINUTE_SEGMENT_SIZE, 28, 68);<a name="line.405"></a>
<FONT color="green">406</FONT>            timeline.setStartTime(firstMondayAfter1900() + 36<a name="line.406"></a>
<FONT color="green">407</FONT>                    * timeline.getSegmentSize());<a name="line.407"></a>
<FONT color="green">408</FONT>            timeline.setBaseTimeline(newMondayThroughFridayTimeline());<a name="line.408"></a>
<FONT color="green">409</FONT>            return timeline;<a name="line.409"></a>
<FONT color="green">410</FONT>        }<a name="line.410"></a>
<FONT color="green">411</FONT>    <a name="line.411"></a>
<FONT color="green">412</FONT>        /**<a name="line.412"></a>
<FONT color="green">413</FONT>         * Returns the flag that controls whether or not the daylight saving<a name="line.413"></a>
<FONT color="green">414</FONT>         * adjustment is applied.<a name="line.414"></a>
<FONT color="green">415</FONT>         *<a name="line.415"></a>
<FONT color="green">416</FONT>         * @return A boolean.<a name="line.416"></a>
<FONT color="green">417</FONT>         */<a name="line.417"></a>
<FONT color="green">418</FONT>        public boolean getAdjustForDaylightSaving() {<a name="line.418"></a>
<FONT color="green">419</FONT>            return this.adjustForDaylightSaving;<a name="line.419"></a>
<FONT color="green">420</FONT>        }<a name="line.420"></a>
<FONT color="green">421</FONT>    <a name="line.421"></a>
<FONT color="green">422</FONT>        /**<a name="line.422"></a>
<FONT color="green">423</FONT>         * Sets the flag that controls whether or not the daylight saving adjustment<a name="line.423"></a>
<FONT color="green">424</FONT>         * is applied.<a name="line.424"></a>
<FONT color="green">425</FONT>         *<a name="line.425"></a>
<FONT color="green">426</FONT>         * @param adjust  the flag.<a name="line.426"></a>
<FONT color="green">427</FONT>         */<a name="line.427"></a>
<FONT color="green">428</FONT>        public void setAdjustForDaylightSaving(boolean adjust) {<a name="line.428"></a>
<FONT color="green">429</FONT>            this.adjustForDaylightSaving = adjust;<a name="line.429"></a>
<FONT color="green">430</FONT>        }<a name="line.430"></a>
<FONT color="green">431</FONT>    <a name="line.431"></a>
<FONT color="green">432</FONT>        ////////////////////////////////////////////////////////////////////////////<a name="line.432"></a>
<FONT color="green">433</FONT>        // operations<a name="line.433"></a>
<FONT color="green">434</FONT>        ////////////////////////////////////////////////////////////////////////////<a name="line.434"></a>
<FONT color="green">435</FONT>    <a name="line.435"></a>
<FONT color="green">436</FONT>        /**<a name="line.436"></a>
<FONT color="green">437</FONT>         * Sets the start time for the timeline. This is the beginning of segment<a name="line.437"></a>
<FONT color="green">438</FONT>         * zero.<a name="line.438"></a>
<FONT color="green">439</FONT>         *<a name="line.439"></a>
<FONT color="green">440</FONT>         * @param millisecond  the start time (encoded as in java.util.Date).<a name="line.440"></a>
<FONT color="green">441</FONT>         */<a name="line.441"></a>
<FONT color="green">442</FONT>        public void setStartTime(long millisecond) {<a name="line.442"></a>
<FONT color="green">443</FONT>            this.startTime = millisecond;<a name="line.443"></a>
<FONT color="green">444</FONT>        }<a name="line.444"></a>
<FONT color="green">445</FONT>    <a name="line.445"></a>
<FONT color="green">446</FONT>        /**<a name="line.446"></a>
<FONT color="green">447</FONT>         * Returns the start time for the timeline. This is the beginning of<a name="line.447"></a>
<FONT color="green">448</FONT>         * segment zero.<a name="line.448"></a>
<FONT color="green">449</FONT>         *<a name="line.449"></a>
<FONT color="green">450</FONT>         * @return The start time.<a name="line.450"></a>
<FONT color="green">451</FONT>         */<a name="line.451"></a>
<FONT color="green">452</FONT>        public long getStartTime() {<a name="line.452"></a>
<FONT color="green">453</FONT>            return this.startTime;<a name="line.453"></a>
<FONT color="green">454</FONT>        }<a name="line.454"></a>
<FONT color="green">455</FONT>    <a name="line.455"></a>
<FONT color="green">456</FONT>        /**<a name="line.456"></a>
<FONT color="green">457</FONT>         * Returns the number of segments excluded per segment group.<a name="line.457"></a>
<FONT color="green">458</FONT>         *<a name="line.458"></a>
<FONT color="green">459</FONT>         * @return The number of segments excluded.<a name="line.459"></a>
<FONT color="green">460</FONT>         */<a name="line.460"></a>
<FONT color="green">461</FONT>        public int getSegmentsExcluded() {<a name="line.461"></a>
<FONT color="green">462</FONT>            return this.segmentsExcluded;<a name="line.462"></a>
<FONT color="green">463</FONT>        }<a name="line.463"></a>
<FONT color="green">464</FONT>    <a name="line.464"></a>
<FONT color="green">465</FONT>        /**<a name="line.465"></a>
<FONT color="green">466</FONT>         * Returns the size in milliseconds of the segments excluded per segment<a name="line.466"></a>
<FONT color="green">467</FONT>         * group.<a name="line.467"></a>
<FONT color="green">468</FONT>         *<a name="line.468"></a>
<FONT color="green">469</FONT>         * @return The size in milliseconds.<a name="line.469"></a>
<FONT color="green">470</FONT>         */<a name="line.470"></a>
<FONT color="green">471</FONT>        public long getSegmentsExcludedSize() {<a name="line.471"></a>
<FONT color="green">472</FONT>            return this.segmentsExcludedSize;<a name="line.472"></a>
<FONT color="green">473</FONT>        }<a name="line.473"></a>
<FONT color="green">474</FONT>    <a name="line.474"></a>
<FONT color="green">475</FONT>        /**<a name="line.475"></a>
<FONT color="green">476</FONT>         * Returns the number of segments in a segment group. This will be equal to<a name="line.476"></a>
<FONT color="green">477</FONT>         * segments included plus segments excluded.<a name="line.477"></a>
<FONT color="green">478</FONT>         *<a name="line.478"></a>
<FONT color="green">479</FONT>         * @return The number of segments.<a name="line.479"></a>
<FONT color="green">480</FONT>         */<a name="line.480"></a>
<FONT color="green">481</FONT>        public int getGroupSegmentCount() {<a name="line.481"></a>
<FONT color="green">482</FONT>            return this.groupSegmentCount;<a name="line.482"></a>
<FONT color="green">483</FONT>        }<a name="line.483"></a>
<FONT color="green">484</FONT>    <a name="line.484"></a>
<FONT color="green">485</FONT>        /**<a name="line.485"></a>
<FONT color="green">486</FONT>         * Returns the size in milliseconds of a segment group. This will be equal<a name="line.486"></a>
<FONT color="green">487</FONT>         * to size of the segments included plus the size of the segments excluded.<a name="line.487"></a>
<FONT color="green">488</FONT>         *<a name="line.488"></a>
<FONT color="green">489</FONT>         * @return The segment group size in milliseconds.<a name="line.489"></a>
<FONT color="green">490</FONT>         */<a name="line.490"></a>
<FONT color="green">491</FONT>        public long getSegmentsGroupSize() {<a name="line.491"></a>
<FONT color="green">492</FONT>            return this.segmentsGroupSize;<a name="line.492"></a>
<FONT color="green">493</FONT>        }<a name="line.493"></a>
<FONT color="green">494</FONT>    <a name="line.494"></a>
<FONT color="green">495</FONT>        /**<a name="line.495"></a>
<FONT color="green">496</FONT>         * Returns the number of segments included per segment group.<a name="line.496"></a>
<FONT color="green">497</FONT>         *<a name="line.497"></a>
<FONT color="green">498</FONT>         * @return The number of segments.<a name="line.498"></a>
<FONT color="green">499</FONT>         */<a name="line.499"></a>
<FONT color="green">500</FONT>        public int getSegmentsIncluded() {<a name="line.500"></a>
<FONT color="green">501</FONT>            return this.segmentsIncluded;<a name="line.501"></a>
<FONT color="green">502</FONT>        }<a name="line.502"></a>
<FONT color="green">503</FONT>    <a name="line.503"></a>
<FONT color="green">504</FONT>        /**<a name="line.504"></a>
<FONT color="green">505</FONT>         * Returns the size in ms of the segments included per segment group.<a name="line.505"></a>
<FONT color="green">506</FONT>         *<a name="line.506"></a>
<FONT color="green">507</FONT>         * @return The segment size in milliseconds.<a name="line.507"></a>
<FONT color="green">508</FONT>         */<a name="line.508"></a>
<FONT color="green">509</FONT>        public long getSegmentsIncludedSize() {<a name="line.509"></a>
<FONT color="green">510</FONT>            return this.segmentsIncludedSize;<a name="line.510"></a>
<FONT color="green">511</FONT>        }<a name="line.511"></a>
<FONT color="green">512</FONT>    <a name="line.512"></a>
<FONT color="green">513</FONT>        /**<a name="line.513"></a>
<FONT color="green">514</FONT>         * Returns the size of one segment in ms.<a name="line.514"></a>
<FONT color="green">515</FONT>         *<a name="line.515"></a>
<FONT color="green">516</FONT>         * @return The segment size in milliseconds.<a name="line.516"></a>
<FONT color="green">517</FONT>         */<a name="line.517"></a>
<FONT color="green">518</FONT>        public long getSegmentSize() {<a name="line.518"></a>
<FONT color="green">519</FONT>            return this.segmentSize;<a name="line.519"></a>
<FONT color="green">520</FONT>        }<a name="line.520"></a>
<FONT color="green">521</FONT>    <a name="line.521"></a>
<FONT color="green">522</FONT>        /**<a name="line.522"></a>
<FONT color="green">523</FONT>         * Returns a list of all the exception segments. This list is not<a name="line.523"></a>
<FONT color="green">524</FONT>         * modifiable.<a name="line.524"></a>
<FONT color="green">525</FONT>         *<a name="line.525"></a>
<FONT color="green">526</FONT>         * @return The exception segments.<a name="line.526"></a>
<FONT color="green">527</FONT>         */<a name="line.527"></a>
<FONT color="green">528</FONT>        public List getExceptionSegments() {<a name="line.528"></a>
<FONT color="green">529</FONT>            return Collections.unmodifiableList(this.exceptionSegments);<a name="line.529"></a>
<FONT color="green">530</FONT>        }<a name="line.530"></a>
<FONT color="green">531</FONT>    <a name="line.531"></a>
<FONT color="green">532</FONT>        /**<a name="line.532"></a>
<FONT color="green">533</FONT>         * Sets the exception segments list.<a name="line.533"></a>
<FONT color="green">534</FONT>         *<a name="line.534"></a>
<FONT color="green">535</FONT>         * @param exceptionSegments  the exception segments.<a name="line.535"></a>
<FONT color="green">536</FONT>         */<a name="line.536"></a>
<FONT color="green">537</FONT>        public void setExceptionSegments(List exceptionSegments) {<a name="line.537"></a>
<FONT color="green">538</FONT>            this.exceptionSegments = exceptionSegments;<a name="line.538"></a>
<FONT color="green">539</FONT>        }<a name="line.539"></a>
<FONT color="green">540</FONT>    <a name="line.540"></a>
<FONT color="green">541</FONT>        /**<a name="line.541"></a>
<FONT color="green">542</FONT>         * Returns our baseTimeline, or &lt;code&gt;null&lt;/code&gt; if none.<a name="line.542"></a>
<FONT color="green">543</FONT>         *<a name="line.543"></a>
<FONT color="green">544</FONT>         * @return The base timeline.<a name="line.544"></a>
<FONT color="green">545</FONT>         */<a name="line.545"></a>
<FONT color="green">546</FONT>        public SegmentedTimeline getBaseTimeline() {<a name="line.546"></a>
<FONT color="green">547</FONT>            return this.baseTimeline;<a name="line.547"></a>
<FONT color="green">548</FONT>        }<a name="line.548"></a>
<FONT color="green">549</FONT>    <a name="line.549"></a>
<FONT color="green">550</FONT>        /**<a name="line.550"></a>
<FONT color="green">551</FONT>         * Sets the base timeline.<a name="line.551"></a>
<FONT color="green">552</FONT>         *<a name="line.552"></a>
<FONT color="green">553</FONT>         * @param baseTimeline  the timeline.<a name="line.553"></a>
<FONT color="green">554</FONT>         */<a name="line.554"></a>
<FONT color="green">555</FONT>        public void setBaseTimeline(SegmentedTimeline baseTimeline) {<a name="line.555"></a>
<FONT color="green">556</FONT>    <a name="line.556"></a>
<FONT color="green">557</FONT>            // verify that baseTimeline is compatible with us<a name="line.557"></a>
<FONT color="green">558</FONT>            if (baseTimeline != null) {<a name="line.558"></a>
<FONT color="green">559</FONT>                if (baseTimeline.getSegmentSize() &lt; this.segmentSize) {<a name="line.559"></a>
<FONT color="green">560</FONT>                    throw new IllegalArgumentException(<a name="line.560"></a>
<FONT color="green">561</FONT>                            "baseTimeline.getSegmentSize() "<a name="line.561"></a>
<FONT color="green">562</FONT>                            + "is smaller than segmentSize");<a name="line.562"></a>
<FONT color="green">563</FONT>                }<a name="line.563"></a>
<FONT color="green">564</FONT>                else if (baseTimeline.getStartTime() &gt; this.startTime) {<a name="line.564"></a>
<FONT color="green">565</FONT>                    throw new IllegalArgumentException(<a name="line.565"></a>
<FONT color="green">566</FONT>                            "baseTimeline.getStartTime() is after startTime");<a name="line.566"></a>
<FONT color="green">567</FONT>                }<a name="line.567"></a>
<FONT color="green">568</FONT>                else if ((baseTimeline.getSegmentSize() % this.segmentSize) != 0) {<a name="line.568"></a>
<FONT color="green">569</FONT>                    throw new IllegalArgumentException(<a name="line.569"></a>
<FONT color="green">570</FONT>                            "baseTimeline.getSegmentSize() is not multiple of "<a name="line.570"></a>
<FONT color="green">571</FONT>                            + "segmentSize");<a name="line.571"></a>
<FONT color="green">572</FONT>                }<a name="line.572"></a>
<FONT color="green">573</FONT>                else if (((this.startTime<a name="line.573"></a>
<FONT color="green">574</FONT>                        - baseTimeline.getStartTime()) % this.segmentSize) != 0) {<a name="line.574"></a>
<FONT color="green">575</FONT>                    throw new IllegalArgumentException(<a name="line.575"></a>
<FONT color="green">576</FONT>                            "baseTimeline is not aligned");<a name="line.576"></a>
<FONT color="green">577</FONT>                }<a name="line.577"></a>
<FONT color="green">578</FONT>            }<a name="line.578"></a>
<FONT color="green">579</FONT>    <a name="line.579"></a>
<FONT color="green">580</FONT>            this.baseTimeline = baseTimeline;<a name="line.580"></a>
<FONT color="green">581</FONT>        }<a name="line.581"></a>
<FONT color="green">582</FONT>    <a name="line.582"></a>
<FONT color="green">583</FONT>        /**<a name="line.583"></a>
<FONT color="green">584</FONT>         * Translates a value relative to the domain value (all Dates) into a value<a name="line.584"></a>
<FONT color="green">585</FONT>         * relative to the segmented timeline. The values relative to the segmented<a name="line.585"></a>
<FONT color="green">586</FONT>         * timeline are all consecutives starting at zero at the startTime.<a name="line.586"></a>
<FONT color="green">587</FONT>         *<a name="line.587"></a>
<FONT color="green">588</FONT>         * @param millisecond  the millisecond (as encoded by java.util.Date).<a name="line.588"></a>
<FONT color="green">589</FONT>         *<a name="line.589"></a>
<FONT color="green">590</FONT>         * @return The timeline value.<a name="line.590"></a>
<FONT color="green">591</FONT>         */<a name="line.591"></a>
<FONT color="green">592</FONT>        public long toTimelineValue(long millisecond) {<a name="line.592"></a>
<FONT color="green">593</FONT>    <a name="line.593"></a>
<FONT color="green">594</FONT>            long result;<a name="line.594"></a>
<FONT color="green">595</FONT>            long rawMilliseconds = millisecond - this.startTime;<a name="line.595"></a>
<FONT color="green">596</FONT>            long groupMilliseconds = rawMilliseconds % this.segmentsGroupSize;<a name="line.596"></a>
<FONT color="green">597</FONT>            long groupIndex = rawMilliseconds / this.segmentsGroupSize;<a name="line.597"></a>
<FONT color="green">598</FONT>    <a name="line.598"></a>
<FONT color="green">599</FONT>            if (groupMilliseconds &gt;= this.segmentsIncludedSize) {<a name="line.599"></a>
<FONT color="green">600</FONT>                result = toTimelineValue(this.startTime + this.segmentsGroupSize<a name="line.600"></a>
<FONT color="green">601</FONT>                        * (groupIndex + 1));<a name="line.601"></a>
<FONT color="green">602</FONT>            }<a name="line.602"></a>
<FONT color="green">603</FONT>            else {<a name="line.603"></a>
<FONT color="green">604</FONT>                Segment segment = getSegment(millisecond);<a name="line.604"></a>
<FONT color="green">605</FONT>                if (segment.inExceptionSegments()) {<a name="line.605"></a>
<FONT color="green">606</FONT>                    int p;<a name="line.606"></a>
<FONT color="green">607</FONT>                    while ((p = binarySearchExceptionSegments(segment)) &gt;= 0) {<a name="line.607"></a>
<FONT color="green">608</FONT>                        segment = getSegment(millisecond = ((Segment)<a name="line.608"></a>
<FONT color="green">609</FONT>                                this.exceptionSegments.get(p)).getSegmentEnd() + 1);<a name="line.609"></a>
<FONT color="green">610</FONT>                    }<a name="line.610"></a>
<FONT color="green">611</FONT>                    result = toTimelineValue(millisecond);<a name="line.611"></a>
<FONT color="green">612</FONT>                }<a name="line.612"></a>
<FONT color="green">613</FONT>                else {<a name="line.613"></a>
<FONT color="green">614</FONT>                    long shiftedSegmentedValue = millisecond - this.startTime;<a name="line.614"></a>
<FONT color="green">615</FONT>                    long x = shiftedSegmentedValue % this.segmentsGroupSize;<a name="line.615"></a>
<FONT color="green">616</FONT>                    long y = shiftedSegmentedValue / this.segmentsGroupSize;<a name="line.616"></a>
<FONT color="green">617</FONT>    <a name="line.617"></a>
<FONT color="green">618</FONT>                    long wholeExceptionsBeforeDomainValue =<a name="line.618"></a>
<FONT color="green">619</FONT>                        getExceptionSegmentCount(this.startTime, millisecond - 1);<a name="line.619"></a>
<FONT color="green">620</FONT>    <a name="line.620"></a>
<FONT color="green">621</FONT>    //                long partialTimeInException = 0;<a name="line.621"></a>
<FONT color="green">622</FONT>    //                Segment ss = getSegment(millisecond);<a name="line.622"></a>
<FONT color="green">623</FONT>    //                if (ss.inExceptionSegments()) {<a name="line.623"></a>
<FONT color="green">624</FONT>    //                    partialTimeInException = millisecond<a name="line.624"></a>
<FONT color="green">625</FONT>                    //     - ss.getSegmentStart();<a name="line.625"></a>
<FONT color="green">626</FONT>    //                }<a name="line.626"></a>
<FONT color="green">627</FONT>    <a name="line.627"></a>
<FONT color="green">628</FONT>                    if (x &lt; this.segmentsIncludedSize) {<a name="line.628"></a>
<FONT color="green">629</FONT>                        result = this.segmentsIncludedSize * y<a name="line.629"></a>
<FONT color="green">630</FONT>                                 + x - wholeExceptionsBeforeDomainValue<a name="line.630"></a>
<FONT color="green">631</FONT>                                 * this.segmentSize;<a name="line.631"></a>
<FONT color="green">632</FONT>                                 // - partialTimeInException;<a name="line.632"></a>
<FONT color="green">633</FONT>                    }<a name="line.633"></a>
<FONT color="green">634</FONT>                    else {<a name="line.634"></a>
<FONT color="green">635</FONT>                        result = this.segmentsIncludedSize * (y + 1)<a name="line.635"></a>
<FONT color="green">636</FONT>                                 - wholeExceptionsBeforeDomainValue<a name="line.636"></a>
<FONT color="green">637</FONT>                                 * this.segmentSize;<a name="line.637"></a>
<FONT color="green">638</FONT>                                 // - partialTimeInException;<a name="line.638"></a>
<FONT color="green">639</FONT>                    }<a name="line.639"></a>
<FONT color="green">640</FONT>                }<a name="line.640"></a>
<FONT color="green">641</FONT>            }<a name="line.641"></a>
<FONT color="green">642</FONT>    <a name="line.642"></a>
<FONT color="green">643</FONT>            return result;<a name="line.643"></a>
<FONT color="green">644</FONT>        }<a name="line.644"></a>
<FONT color="green">645</FONT>    <a name="line.645"></a>
<FONT color="green">646</FONT>        /**<a name="line.646"></a>
<FONT color="green">647</FONT>         * Translates a date into a value relative to the segmented timeline. The<a name="line.647"></a>
<FONT color="green">648</FONT>         * values relative to the segmented timeline are all consecutives starting<a name="line.648"></a>
<FONT color="green">649</FONT>         * at zero at the startTime.<a name="line.649"></a>
<FONT color="green">650</FONT>         *<a name="line.650"></a>
<FONT color="green">651</FONT>         * @param date  date relative to the domain.<a name="line.651"></a>
<FONT color="green">652</FONT>         *<a name="line.652"></a>
<FONT color="green">653</FONT>         * @return The timeline value (in milliseconds).<a name="line.653"></a>
<FONT color="green">654</FONT>         */<a name="line.654"></a>
<FONT color="green">655</FONT>        public long toTimelineValue(Date date) {<a name="line.655"></a>
<FONT color="green">656</FONT>            return toTimelineValue(getTime(date));<a name="line.656"></a>
<FONT color="green">657</FONT>            //return toTimelineValue(dateDomainValue.getTime());<a name="line.657"></a>
<FONT color="green">658</FONT>        }<a name="line.658"></a>
<FONT color="green">659</FONT>    <a name="line.659"></a>
<FONT color="green">660</FONT>        /**<a name="line.660"></a>
<FONT color="green">661</FONT>         * Translates a value relative to the timeline into a millisecond.<a name="line.661"></a>
<FONT color="green">662</FONT>         *<a name="line.662"></a>
<FONT color="green">663</FONT>         * @param timelineValue  the timeline value (in milliseconds).<a name="line.663"></a>
<FONT color="green">664</FONT>         *<a name="line.664"></a>
<FONT color="green">665</FONT>         * @return The domain value (in milliseconds).<a name="line.665"></a>
<FONT color="green">666</FONT>         */<a name="line.666"></a>
<FONT color="green">667</FONT>        public long toMillisecond(long timelineValue) {<a name="line.667"></a>
<FONT color="green">668</FONT>    <a name="line.668"></a>
<FONT color="green">669</FONT>            // calculate the result as if no exceptions<a name="line.669"></a>
<FONT color="green">670</FONT>            Segment result = new Segment(this.startTime + timelineValue<a name="line.670"></a>
<FONT color="green">671</FONT>                    + (timelineValue / this.segmentsIncludedSize)<a name="line.671"></a>
<FONT color="green">672</FONT>                    * this.segmentsExcludedSize);<a name="line.672"></a>
<FONT color="green">673</FONT>    <a name="line.673"></a>
<FONT color="green">674</FONT>            long lastIndex = this.startTime;<a name="line.674"></a>
<FONT color="green">675</FONT>    <a name="line.675"></a>
<FONT color="green">676</FONT>            // adjust result for any exceptions in the result calculated<a name="line.676"></a>
<FONT color="green">677</FONT>            while (lastIndex &lt;= result.segmentStart) {<a name="line.677"></a>
<FONT color="green">678</FONT>    <a name="line.678"></a>
<FONT color="green">679</FONT>                // skip all whole exception segments in the range<a name="line.679"></a>
<FONT color="green">680</FONT>                long exceptionSegmentCount;<a name="line.680"></a>
<FONT color="green">681</FONT>                while ((exceptionSegmentCount = getExceptionSegmentCount(<a name="line.681"></a>
<FONT color="green">682</FONT>                     lastIndex, (result.millisecond / this.segmentSize)<a name="line.682"></a>
<FONT color="green">683</FONT>                     * this.segmentSize - 1)) &gt; 0<a name="line.683"></a>
<FONT color="green">684</FONT>                ) {<a name="line.684"></a>
<FONT color="green">685</FONT>                    lastIndex = result.segmentStart;<a name="line.685"></a>
<FONT color="green">686</FONT>                    // move forward exceptionSegmentCount segments skipping<a name="line.686"></a>
<FONT color="green">687</FONT>                    // excluded segments<a name="line.687"></a>
<FONT color="green">688</FONT>                    for (int i = 0; i &lt; exceptionSegmentCount; i++) {<a name="line.688"></a>
<FONT color="green">689</FONT>                        do {<a name="line.689"></a>
<FONT color="green">690</FONT>                            result.inc();<a name="line.690"></a>
<FONT color="green">691</FONT>                        }<a name="line.691"></a>
<FONT color="green">692</FONT>                        while (result.inExcludeSegments());<a name="line.692"></a>
<FONT color="green">693</FONT>                    }<a name="line.693"></a>
<FONT color="green">694</FONT>                }<a name="line.694"></a>
<FONT color="green">695</FONT>                lastIndex = result.segmentStart;<a name="line.695"></a>
<FONT color="green">696</FONT>    <a name="line.696"></a>
<FONT color="green">697</FONT>                // skip exception or excluded segments we may fall on<a name="line.697"></a>
<FONT color="green">698</FONT>                while (result.inExceptionSegments() || result.inExcludeSegments()) {<a name="line.698"></a>
<FONT color="green">699</FONT>                    result.inc();<a name="line.699"></a>
<FONT color="green">700</FONT>                    lastIndex += this.segmentSize;<a name="line.700"></a>
<FONT color="green">701</FONT>                }<a name="line.701"></a>
<FONT color="green">702</FONT>    <a name="line.702"></a>
<FONT color="green">703</FONT>                lastIndex++;<a name="line.703"></a>
<FONT color="green">704</FONT>            }<a name="line.704"></a>
<FONT color="green">705</FONT>    <a name="line.705"></a>
<FONT color="green">706</FONT>            return getTimeFromLong(result.millisecond);<a name="line.706"></a>
<FONT color="green">707</FONT>        }<a name="line.707"></a>
<FONT color="green">708</FONT>    <a name="line.708"></a>
<FONT color="green">709</FONT>        /**<a name="line.709"></a>
<FONT color="green">710</FONT>         * Converts a date/time value to take account of daylight savings time.<a name="line.710"></a>
<FONT color="green">711</FONT>         *<a name="line.711"></a>
<FONT color="green">712</FONT>         * @param date  the milliseconds.<a name="line.712"></a>
<FONT color="green">713</FONT>         *<a name="line.713"></a>
<FONT color="green">714</FONT>         * @return The milliseconds.<a name="line.714"></a>
<FONT color="green">715</FONT>         */<a name="line.715"></a>
<FONT color="green">716</FONT>        public long getTimeFromLong(long date) {<a name="line.716"></a>
<FONT color="green">717</FONT>            long result = date;<a name="line.717"></a>
<FONT color="green">718</FONT>            if (this.adjustForDaylightSaving) {<a name="line.718"></a>
<FONT color="green">719</FONT>                this.workingCalendarNoDST.setTime(new Date(date));<a name="line.719"></a>
<FONT color="green">720</FONT>                this.workingCalendar.set(<a name="line.720"></a>
<FONT color="green">721</FONT>                    this.workingCalendarNoDST.get(Calendar.YEAR),<a name="line.721"></a>
<FONT color="green">722</FONT>                    this.workingCalendarNoDST.get(Calendar.MONTH),<a name="line.722"></a>
<FONT color="green">723</FONT>                    this.workingCalendarNoDST.get(Calendar.DATE),<a name="line.723"></a>
<FONT color="green">724</FONT>                    this.workingCalendarNoDST.get(Calendar.HOUR_OF_DAY),<a name="line.724"></a>
<FONT color="green">725</FONT>                    this.workingCalendarNoDST.get(Calendar.MINUTE),<a name="line.725"></a>
<FONT color="green">726</FONT>                    this.workingCalendarNoDST.get(Calendar.SECOND)<a name="line.726"></a>
<FONT color="green">727</FONT>                );<a name="line.727"></a>
<FONT color="green">728</FONT>                this.workingCalendar.set(Calendar.MILLISECOND,<a name="line.728"></a>
<FONT color="green">729</FONT>                        this.workingCalendarNoDST.get(Calendar.MILLISECOND));<a name="line.729"></a>
<FONT color="green">730</FONT>                // result = this.workingCalendar.getTimeInMillis();<a name="line.730"></a>
<FONT color="green">731</FONT>                // preceding code won't work with JDK 1.3<a name="line.731"></a>
<FONT color="green">732</FONT>                result = this.workingCalendar.getTime().getTime();<a name="line.732"></a>
<FONT color="green">733</FONT>            }<a name="line.733"></a>
<FONT color="green">734</FONT>            return result;<a name="line.734"></a>
<FONT color="green">735</FONT>        }<a name="line.735"></a>
<FONT color="green">736</FONT>    <a name="line.736"></a>
<FONT color="green">737</FONT>        /**<a name="line.737"></a>
<FONT color="green">738</FONT>         * Returns &lt;code&gt;true&lt;/code&gt; if a value is contained in the timeline.<a name="line.738"></a>
<FONT color="green">739</FONT>         *<a name="line.739"></a>
<FONT color="green">740</FONT>         * @param millisecond  the value to verify.<a name="line.740"></a>
<FONT color="green">741</FONT>         *<a name="line.741"></a>
<FONT color="green">742</FONT>         * @return &lt;code&gt;true&lt;/code&gt; if value is contained in the timeline.<a name="line.742"></a>
<FONT color="green">743</FONT>         */<a name="line.743"></a>
<FONT color="green">744</FONT>        public boolean containsDomainValue(long millisecond) {<a name="line.744"></a>
<FONT color="green">745</FONT>            Segment segment = getSegment(millisecond);<a name="line.745"></a>
<FONT color="green">746</FONT>            return segment.inIncludeSegments();<a name="line.746"></a>
<FONT color="green">747</FONT>        }<a name="line.747"></a>
<FONT color="green">748</FONT>    <a name="line.748"></a>
<FONT color="green">749</FONT>        /**<a name="line.749"></a>
<FONT color="green">750</FONT>         * Returns &lt;code&gt;true&lt;/code&gt; if a value is contained in the timeline.<a name="line.750"></a>
<FONT color="green">751</FONT>         *<a name="line.751"></a>
<FONT color="green">752</FONT>         * @param date  date to verify<a name="line.752"></a>
<FONT color="green">753</FONT>         *<a name="line.753"></a>
<FONT color="green">754</FONT>         * @return &lt;code&gt;true&lt;/code&gt; if value is contained in the timeline<a name="line.754"></a>
<FONT color="green">755</FONT>         */<a name="line.755"></a>
<FONT color="green">756</FONT>        public boolean containsDomainValue(Date date) {<a name="line.756"></a>
<FONT color="green">757</FONT>            return containsDomainValue(getTime(date));<a name="line.757"></a>
<FONT color="green">758</FONT>        }<a name="line.758"></a>
<FONT color="green">759</FONT>    <a name="line.759"></a>
<FONT color="green">760</FONT>        /**<a name="line.760"></a>
<FONT color="green">761</FONT>         * Returns &lt;code&gt;true&lt;/code&gt; if a range of values are contained in the<a name="line.761"></a>
<FONT color="green">762</FONT>         * timeline. This is implemented verifying that all segments are in the<a name="line.762"></a>
<FONT color="green">763</FONT>         * range.<a name="line.763"></a>
<FONT color="green">764</FONT>         *<a name="line.764"></a>
<FONT color="green">765</FONT>         * @param domainValueStart start of the range to verify<a name="line.765"></a>
<FONT color="green">766</FONT>         * @param domainValueEnd end of the range to verify<a name="line.766"></a>
<FONT color="green">767</FONT>         *<a name="line.767"></a>
<FONT color="green">768</FONT>         * @return &lt;code&gt;true&lt;/code&gt; if the range is contained in the timeline<a name="line.768"></a>
<FONT color="green">769</FONT>         */<a name="line.769"></a>
<FONT color="green">770</FONT>        public boolean containsDomainRange(long domainValueStart,<a name="line.770"></a>
<FONT color="green">771</FONT>                                           long domainValueEnd) {<a name="line.771"></a>
<FONT color="green">772</FONT>            if (domainValueEnd &lt; domainValueStart) {<a name="line.772"></a>
<FONT color="green">773</FONT>                throw new IllegalArgumentException(<a name="line.773"></a>
<FONT color="green">774</FONT>                        "domainValueEnd (" + domainValueEnd<a name="line.774"></a>
<FONT color="green">775</FONT>                        + ") &lt; domainValueStart (" + domainValueStart + ")");<a name="line.775"></a>
<FONT color="green">776</FONT>            }<a name="line.776"></a>
<FONT color="green">777</FONT>            Segment segment = getSegment(domainValueStart);<a name="line.777"></a>
<FONT color="green">778</FONT>            boolean contains = true;<a name="line.778"></a>
<FONT color="green">779</FONT>            do {<a name="line.779"></a>
<FONT color="green">780</FONT>                contains = (segment.inIncludeSegments());<a name="line.780"></a>
<FONT color="green">781</FONT>                if (segment.contains(domainValueEnd)) {<a name="line.781"></a>
<FONT color="green">782</FONT>                    break;<a name="line.782"></a>
<FONT color="green">783</FONT>                }<a name="line.783"></a>
<FONT color="green">784</FONT>                else {<a name="line.784"></a>
<FONT color="green">785</FONT>                    segment.inc();<a name="line.785"></a>
<FONT color="green">786</FONT>                }<a name="line.786"></a>
<FONT color="green">787</FONT>            }<a name="line.787"></a>
<FONT color="green">788</FONT>            while (contains);<a name="line.788"></a>
<FONT color="green">789</FONT>            return (contains);<a name="line.789"></a>
<FONT color="green">790</FONT>        }<a name="line.790"></a>
<FONT color="green">791</FONT>    <a name="line.791"></a>
<FONT color="green">792</FONT>        /**<a name="line.792"></a>
<FONT color="green">793</FONT>         * Returns &lt;code&gt;true&lt;/code&gt; if a range of values are contained in the<a name="line.793"></a>
<FONT color="green">794</FONT>         * timeline. This is implemented verifying that all segments are in the<a name="line.794"></a>
<FONT color="green">795</FONT>         * range.<a name="line.795"></a>
<FONT color="green">796</FONT>         *<a name="line.796"></a>
<FONT color="green">797</FONT>         * @param dateDomainValueStart start of the range to verify<a name="line.797"></a>
<FONT color="green">798</FONT>         * @param dateDomainValueEnd end of the range to verify<a name="line.798"></a>
<FONT color="green">799</FONT>         *<a name="line.799"></a>
<FONT color="green">800</FONT>         * @return &lt;code&gt;true&lt;/code&gt; if the range is contained in the timeline<a name="line.800"></a>
<FONT color="green">801</FONT>         */<a name="line.801"></a>
<FONT color="green">802</FONT>        public boolean containsDomainRange(Date dateDomainValueStart,<a name="line.802"></a>
<FONT color="green">803</FONT>                                           Date dateDomainValueEnd) {<a name="line.803"></a>
<FONT color="green">804</FONT>            return containsDomainRange(getTime(dateDomainValueStart),<a name="line.804"></a>
<FONT color="green">805</FONT>                    getTime(dateDomainValueEnd));<a name="line.805"></a>
<FONT color="green">806</FONT>        }<a name="line.806"></a>
<FONT color="green">807</FONT>    <a name="line.807"></a>
<FONT color="green">808</FONT>        /**<a name="line.808"></a>
<FONT color="green">809</FONT>         * Adds a segment as an exception. An exception segment is defined as a<a name="line.809"></a>
<FONT color="green">810</FONT>         * segment to exclude from what would otherwise be considered a valid<a name="line.810"></a>
<FONT color="green">811</FONT>         * segment of the timeline.  An exception segment can not be contained<a name="line.811"></a>
<FONT color="green">812</FONT>         * inside an already excluded segment.  If so, no action will occur (the<a name="line.812"></a>
<FONT color="green">813</FONT>         * proposed exception segment will be discarded).<a name="line.813"></a>
<FONT color="green">814</FONT>         * &lt;p&gt;<a name="line.814"></a>
<FONT color="green">815</FONT>         * The segment is identified by a domainValue into any part of the segment.<a name="line.815"></a>
<FONT color="green">816</FONT>         * Therefore the segmentStart &lt;= domainValue &lt;= segmentEnd.<a name="line.816"></a>
<FONT color="green">817</FONT>         *<a name="line.817"></a>
<FONT color="green">818</FONT>         * @param millisecond  domain value to treat as an exception<a name="line.818"></a>
<FONT color="green">819</FONT>         */<a name="line.819"></a>
<FONT color="green">820</FONT>        public void addException(long millisecond) {<a name="line.820"></a>
<FONT color="green">821</FONT>            addException(new Segment(millisecond));<a name="line.821"></a>
<FONT color="green">822</FONT>        }<a name="line.822"></a>
<FONT color="green">823</FONT>    <a name="line.823"></a>
<FONT color="green">824</FONT>        /**<a name="line.824"></a>
<FONT color="green">825</FONT>         * Adds a segment range as an exception. An exception segment is defined as<a name="line.825"></a>
<FONT color="green">826</FONT>         * a segment to exclude from what would otherwise be considered a valid<a name="line.826"></a>
<FONT color="green">827</FONT>         * segment of the timeline.  An exception segment can not be contained<a name="line.827"></a>
<FONT color="green">828</FONT>         * inside an already excluded segment.  If so, no action will occur (the<a name="line.828"></a>
<FONT color="green">829</FONT>         * proposed exception segment will be discarded).<a name="line.829"></a>
<FONT color="green">830</FONT>         * &lt;p&gt;<a name="line.830"></a>
<FONT color="green">831</FONT>         * The segment range is identified by a domainValue that begins a valid<a name="line.831"></a>
<FONT color="green">832</FONT>         * segment and ends with a domainValue that ends a valid segment.<a name="line.832"></a>
<FONT color="green">833</FONT>         * Therefore the range will contain all segments whose segmentStart<a name="line.833"></a>
<FONT color="green">834</FONT>         * &lt;= domainValue and segmentEnd &lt;= toDomainValue.<a name="line.834"></a>
<FONT color="green">835</FONT>         *<a name="line.835"></a>
<FONT color="green">836</FONT>         * @param fromDomainValue  start of domain range to treat as an exception<a name="line.836"></a>
<FONT color="green">837</FONT>         * @param toDomainValue  end of domain range to treat as an exception<a name="line.837"></a>
<FONT color="green">838</FONT>         */<a name="line.838"></a>
<FONT color="green">839</FONT>        public void addException(long fromDomainValue, long toDomainValue) {<a name="line.839"></a>
<FONT color="green">840</FONT>            addException(new SegmentRange(fromDomainValue, toDomainValue));<a name="line.840"></a>
<FONT color="green">841</FONT>        }<a name="line.841"></a>
<FONT color="green">842</FONT>    <a name="line.842"></a>
<FONT color="green">843</FONT>        /**<a name="line.843"></a>
<FONT color="green">844</FONT>         * Adds a segment as an exception. An exception segment is defined as a<a name="line.844"></a>
<FONT color="green">845</FONT>         * segment to exclude from what would otherwise be considered a valid<a name="line.845"></a>
<FONT color="green">846</FONT>         * segment of the timeline.  An exception segment can not be contained<a name="line.846"></a>
<FONT color="green">847</FONT>         * inside an already excluded segment.  If so, no action will occur (the<a name="line.847"></a>
<FONT color="green">848</FONT>         * proposed exception segment will be discarded).<a name="line.848"></a>
<FONT color="green">849</FONT>         * &lt;p&gt;<a name="line.849"></a>
<FONT color="green">850</FONT>         * The segment is identified by a Date into any part of the segment.<a name="line.850"></a>
<FONT color="green">851</FONT>         *<a name="line.851"></a>
<FONT color="green">852</FONT>         * @param exceptionDate  Date into the segment to exclude.<a name="line.852"></a>
<FONT color="green">853</FONT>         */<a name="line.853"></a>
<FONT color="green">854</FONT>        public void addException(Date exceptionDate) {<a name="line.854"></a>
<FONT color="green">855</FONT>            addException(getTime(exceptionDate));<a name="line.855"></a>
<FONT color="green">856</FONT>            //addException(exceptionDate.getTime());<a name="line.856"></a>
<FONT color="green">857</FONT>        }<a name="line.857"></a>
<FONT color="green">858</FONT>    <a name="line.858"></a>
<FONT color="green">859</FONT>        /**<a name="line.859"></a>
<FONT color="green">860</FONT>         * Adds a list of dates as segment exceptions. Each exception segment is<a name="line.860"></a>
<FONT color="green">861</FONT>         * defined as a segment to exclude from what would otherwise be considered<a name="line.861"></a>
<FONT color="green">862</FONT>         * a valid segment of the timeline.  An exception segment can not be<a name="line.862"></a>
<FONT color="green">863</FONT>         * contained inside an already excluded segment.  If so, no action will<a name="line.863"></a>
<FONT color="green">864</FONT>         * occur (the proposed exception segment will be discarded).<a name="line.864"></a>
<FONT color="green">865</FONT>         * &lt;p&gt;<a name="line.865"></a>
<FONT color="green">866</FONT>         * The segment is identified by a Date into any part of the segment.<a name="line.866"></a>
<FONT color="green">867</FONT>         *<a name="line.867"></a>
<FONT color="green">868</FONT>         * @param exceptionList  List of Date objects that identify the segments to<a name="line.868"></a>
<FONT color="green">869</FONT>         *                       exclude.<a name="line.869"></a>
<FONT color="green">870</FONT>         */<a name="line.870"></a>
<FONT color="green">871</FONT>        public void addExceptions(List exceptionList) {<a name="line.871"></a>
<FONT color="green">872</FONT>            for (Iterator iter = exceptionList.iterator(); iter.hasNext();) {<a name="line.872"></a>
<FONT color="green">873</FONT>                addException((Date) iter.next());<a name="line.873"></a>
<FONT color="green">874</FONT>            }<a name="line.874"></a>
<FONT color="green">875</FONT>        }<a name="line.875"></a>
<FONT color="green">876</FONT>    <a name="line.876"></a>
<FONT color="green">877</FONT>        /**<a name="line.877"></a>
<FONT color="green">878</FONT>         * Adds a segment as an exception. An exception segment is defined as a<a name="line.878"></a>
<FONT color="green">879</FONT>         * segment to exclude from what would otherwise be considered a valid<a name="line.879"></a>
<FONT color="green">880</FONT>         * segment of the timeline.  An exception segment can not be contained<a name="line.880"></a>
<FONT color="green">881</FONT>         * inside an already excluded segment.  This is verified inside this<a name="line.881"></a>
<FONT color="green">882</FONT>         * method, and if so, no action will occur (the proposed exception segment<a name="line.882"></a>
<FONT color="green">883</FONT>         * will be discarded).<a name="line.883"></a>
<FONT color="green">884</FONT>         *<a name="line.884"></a>
<FONT color="green">885</FONT>         * @param segment  the segment to exclude.<a name="line.885"></a>
<FONT color="green">886</FONT>         */<a name="line.886"></a>
<FONT color="green">887</FONT>        private void addException(Segment segment) {<a name="line.887"></a>
<FONT color="green">888</FONT>             if (segment.inIncludeSegments()) {<a name="line.888"></a>
<FONT color="green">889</FONT>                 int p = binarySearchExceptionSegments(segment);<a name="line.889"></a>
<FONT color="green">890</FONT>                 this.exceptionSegments.add(-(p + 1), segment);<a name="line.890"></a>
<FONT color="green">891</FONT>             }<a name="line.891"></a>
<FONT color="green">892</FONT>        }<a name="line.892"></a>
<FONT color="green">893</FONT>    <a name="line.893"></a>
<FONT color="green">894</FONT>        /**<a name="line.894"></a>
<FONT color="green">895</FONT>         * Adds a segment relative to the baseTimeline as an exception. Because a<a name="line.895"></a>
<FONT color="green">896</FONT>         * base segment is normally larger than our segments, this may add one or<a name="line.896"></a>
<FONT color="green">897</FONT>         * more segment ranges to the exception list.<a name="line.897"></a>
<FONT color="green">898</FONT>         * &lt;p&gt;<a name="line.898"></a>
<FONT color="green">899</FONT>         * An exception segment is defined as a segment<a name="line.899"></a>
<FONT color="green">900</FONT>         * to exclude from what would otherwise be considered a valid segment of<a name="line.900"></a>
<FONT color="green">901</FONT>         * the timeline.  An exception segment can not be contained inside an<a name="line.901"></a>
<FONT color="green">902</FONT>         * already excluded segment.  If so, no action will occur (the proposed<a name="line.902"></a>
<FONT color="green">903</FONT>         * exception segment will be discarded).<a name="line.903"></a>
<FONT color="green">904</FONT>         * &lt;p&gt;<a name="line.904"></a>
<FONT color="green">905</FONT>         * The segment is identified by a domainValue into any part of the<a name="line.905"></a>
<FONT color="green">906</FONT>         * baseTimeline segment.<a name="line.906"></a>
<FONT color="green">907</FONT>         *<a name="line.907"></a>
<FONT color="green">908</FONT>         * @param domainValue  domain value to teat as a baseTimeline exception.<a name="line.908"></a>
<FONT color="green">909</FONT>         */<a name="line.909"></a>
<FONT color="green">910</FONT>        public void addBaseTimelineException(long domainValue) {<a name="line.910"></a>
<FONT color="green">911</FONT>    <a name="line.911"></a>
<FONT color="green">912</FONT>            Segment baseSegment = this.baseTimeline.getSegment(domainValue);<a name="line.912"></a>
<FONT color="green">913</FONT>            if (baseSegment.inIncludeSegments()) {<a name="line.913"></a>
<FONT color="green">914</FONT>    <a name="line.914"></a>
<FONT color="green">915</FONT>                // cycle through all the segments contained in the BaseTimeline<a name="line.915"></a>
<FONT color="green">916</FONT>                // exception segment<a name="line.916"></a>
<FONT color="green">917</FONT>                Segment segment = getSegment(baseSegment.getSegmentStart());<a name="line.917"></a>
<FONT color="green">918</FONT>                while (segment.getSegmentStart() &lt;= baseSegment.getSegmentEnd()) {<a name="line.918"></a>
<FONT color="green">919</FONT>                    if (segment.inIncludeSegments()) {<a name="line.919"></a>
<FONT color="green">920</FONT>    <a name="line.920"></a>
<FONT color="green">921</FONT>                        // find all consecutive included segments<a name="line.921"></a>
<FONT color="green">922</FONT>                        long fromDomainValue = segment.getSegmentStart();<a name="line.922"></a>
<FONT color="green">923</FONT>                        long toDomainValue;<a name="line.923"></a>
<FONT color="green">924</FONT>                        do {<a name="line.924"></a>
<FONT color="green">925</FONT>                            toDomainValue = segment.getSegmentEnd();<a name="line.925"></a>
<FONT color="green">926</FONT>                            segment.inc();<a name="line.926"></a>
<FONT color="green">927</FONT>                        }<a name="line.927"></a>
<FONT color="green">928</FONT>                        while (segment.inIncludeSegments());<a name="line.928"></a>
<FONT color="green">929</FONT>    <a name="line.929"></a>
<FONT color="green">930</FONT>                        // add the interval as an exception<a name="line.930"></a>
<FONT color="green">931</FONT>                        addException(fromDomainValue, toDomainValue);<a name="line.931"></a>
<FONT color="green">932</FONT>    <a name="line.932"></a>
<FONT color="green">933</FONT>                    }<a name="line.933"></a>
<FONT color="green">934</FONT>                    else {<a name="line.934"></a>
<FONT color="green">935</FONT>                        // this is not one of our included segment, skip it<a name="line.935"></a>
<FONT color="green">936</FONT>                        segment.inc();<a name="line.936"></a>
<FONT color="green">937</FONT>                    }<a name="line.937"></a>
<FONT color="green">938</FONT>                }<a name="line.938"></a>
<FONT color="green">939</FONT>            }<a name="line.939"></a>
<FONT color="green">940</FONT>        }<a name="line.940"></a>
<FONT color="green">941</FONT>    <a name="line.941"></a>
<FONT color="green">942</FONT>        /**<a name="line.942"></a>
<FONT color="green">943</FONT>         * Adds a segment relative to the baseTimeline as an exception. An<a name="line.943"></a>
<FONT color="green">944</FONT>         * exception segment is defined as a segment to exclude from what would<a name="line.944"></a>
<FONT color="green">945</FONT>         * otherwise be considered a valid segment of the timeline.  An exception<a name="line.945"></a>
<FONT color="green">946</FONT>         * segment can not be contained inside an already excluded segment. If so,<a name="line.946"></a>
<FONT color="green">947</FONT>         * no action will occure (the proposed exception segment will be discarded).<a name="line.947"></a>
<FONT color="green">948</FONT>         * &lt;p&gt;<a name="line.948"></a>
<FONT color="green">949</FONT>         * The segment is identified by a domainValue into any part of the segment.<a name="line.949"></a>
<FONT color="green">950</FONT>         * Therefore the segmentStart &lt;= domainValue &lt;= segmentEnd.<a name="line.950"></a>
<FONT color="green">951</FONT>         *<a name="line.951"></a>
<FONT color="green">952</FONT>         * @param date  date domain value to treat as a baseTimeline exception<a name="line.952"></a>
<FONT color="green">953</FONT>         */<a name="line.953"></a>
<FONT color="green">954</FONT>        public void addBaseTimelineException(Date date) {<a name="line.954"></a>
<FONT color="green">955</FONT>            addBaseTimelineException(getTime(date));<a name="line.955"></a>
<FONT color="green">956</FONT>        }<a name="line.956"></a>
<FONT color="green">957</FONT>    <a name="line.957"></a>
<FONT color="green">958</FONT>        /**<a name="line.958"></a>
<FONT color="green">959</FONT>         * Adds all excluded segments from the BaseTimeline as exceptions to our<a name="line.959"></a>
<FONT color="green">960</FONT>         * timeline. This allows us to combine two timelines for more complex<a name="line.960"></a>
<FONT color="green">961</FONT>         * calculations.<a name="line.961"></a>
<FONT color="green">962</FONT>         *<a name="line.962"></a>
<FONT color="green">963</FONT>         * @param fromBaseDomainValue Start of the range where exclusions will be<a name="line.963"></a>
<FONT color="green">964</FONT>         *                            extracted.<a name="line.964"></a>
<FONT color="green">965</FONT>         * @param toBaseDomainValue End of the range to process.<a name="line.965"></a>
<FONT color="green">966</FONT>         */<a name="line.966"></a>
<FONT color="green">967</FONT>        public void addBaseTimelineExclusions(long fromBaseDomainValue,<a name="line.967"></a>
<FONT color="green">968</FONT>                                              long toBaseDomainValue) {<a name="line.968"></a>
<FONT color="green">969</FONT>    <a name="line.969"></a>
<FONT color="green">970</FONT>            // find first excluded base segment starting fromDomainValue<a name="line.970"></a>
<FONT color="green">971</FONT>            Segment baseSegment = this.baseTimeline.getSegment(fromBaseDomainValue);<a name="line.971"></a>
<FONT color="green">972</FONT>            while (baseSegment.getSegmentStart() &lt;= toBaseDomainValue<a name="line.972"></a>
<FONT color="green">973</FONT>                   &amp;&amp; !baseSegment.inExcludeSegments()) {<a name="line.973"></a>
<FONT color="green">974</FONT>    <a name="line.974"></a>
<FONT color="green">975</FONT>                baseSegment.inc();<a name="line.975"></a>
<FONT color="green">976</FONT>    <a name="line.976"></a>
<FONT color="green">977</FONT>            }<a name="line.977"></a>
<FONT color="green">978</FONT>    <a name="line.978"></a>
<FONT color="green">979</FONT>            // cycle over all the base segments groups in the range<a name="line.979"></a>
<FONT color="green">980</FONT>            while (baseSegment.getSegmentStart() &lt;= toBaseDomainValue) {<a name="line.980"></a>
<FONT color="green">981</FONT>    <a name="line.981"></a>
<FONT color="green">982</FONT>                long baseExclusionRangeEnd = baseSegment.getSegmentStart()<a name="line.982"></a>
<FONT color="green">983</FONT>                     + this.baseTimeline.getSegmentsExcluded()<a name="line.983"></a>
<FONT color="green">984</FONT>                     * this.baseTimeline.getSegmentSize() - 1;<a name="line.984"></a>
<FONT color="green">985</FONT>    <a name="line.985"></a>
<FONT color="green">986</FONT>                // cycle through all the segments contained in the base exclusion<a name="line.986"></a>
<FONT color="green">987</FONT>                // area<a name="line.987"></a>
<FONT color="green">988</FONT>                Segment segment = getSegment(baseSegment.getSegmentStart());<a name="line.988"></a>
<FONT color="green">989</FONT>                while (segment.getSegmentStart() &lt;= baseExclusionRangeEnd) {<a name="line.989"></a>
<FONT color="green">990</FONT>                    if (segment.inIncludeSegments()) {<a name="line.990"></a>
<FONT color="green">991</FONT>    <a name="line.991"></a>
<FONT color="green">992</FONT>                        // find all consecutive included segments<a name="line.992"></a>
<FONT color="green">993</FONT>                        long fromDomainValue = segment.getSegmentStart();<a name="line.993"></a>
<FONT color="green">994</FONT>                        long toDomainValue;<a name="line.994"></a>
<FONT color="green">995</FONT>                        do {<a name="line.995"></a>
<FONT color="green">996</FONT>                            toDomainValue = segment.getSegmentEnd();<a name="line.996"></a>
<FONT color="green">997</FONT>                            segment.inc();<a name="line.997"></a>
<FONT color="green">998</FONT>                        }<a name="line.998"></a>
<FONT color="green">999</FONT>                        while (segment.inIncludeSegments());<a name="line.999"></a>
<FONT color="green">1000</FONT>    <a name="line.1000"></a>
<FONT color="green">1001</FONT>                        // add the interval as an exception<a name="line.1001"></a>
<FONT color="green">1002</FONT>                        addException(new BaseTimelineSegmentRange(<a name="line.1002"></a>
<FONT color="green">1003</FONT>                                fromDomainValue, toDomainValue));<a name="line.1003"></a>
<FONT color="green">1004</FONT>                    }<a name="line.1004"></a>
<FONT color="green">1005</FONT>                    else {<a name="line.1005"></a>
<FONT color="green">1006</FONT>                        // this is not one of our included segment, skip it<a name="line.1006"></a>
<FONT color="green">1007</FONT>                        segment.inc();<a name="line.1007"></a>
<FONT color="green">1008</FONT>                    }<a name="line.1008"></a>
<FONT color="green">1009</FONT>                }<a name="line.1009"></a>
<FONT color="green">1010</FONT>    <a name="line.1010"></a>
<FONT color="green">1011</FONT>                // go to next base segment group<a name="line.1011"></a>
<FONT color="green">1012</FONT>                baseSegment.inc(this.baseTimeline.getGroupSegmentCount());<a name="line.1012"></a>
<FONT color="green">1013</FONT>            }<a name="line.1013"></a>
<FONT color="green">1014</FONT>        }<a name="line.1014"></a>
<FONT color="green">1015</FONT>    <a name="line.1015"></a>
<FONT color="green">1016</FONT>        /**<a name="line.1016"></a>
<FONT color="green">1017</FONT>         * Returns the number of exception segments wholly contained in the<a name="line.1017"></a>
<FONT color="green">1018</FONT>         * (fromDomainValue, toDomainValue) interval.<a name="line.1018"></a>
<FONT color="green">1019</FONT>         *<a name="line.1019"></a>
<FONT color="green">1020</FONT>         * @param fromMillisecond  the beginning of the interval.<a name="line.1020"></a>
<FONT color="green">1021</FONT>         * @param toMillisecond  the end of the interval.<a name="line.1021"></a>
<FONT color="green">1022</FONT>         *<a name="line.1022"></a>
<FONT color="green">1023</FONT>         * @return Number of exception segments contained in the interval.<a name="line.1023"></a>
<FONT color="green">1024</FONT>         */<a name="line.1024"></a>
<FONT color="green">1025</FONT>        public long getExceptionSegmentCount(long fromMillisecond,<a name="line.1025"></a>
<FONT color="green">1026</FONT>                                             long toMillisecond) {<a name="line.1026"></a>
<FONT color="green">1027</FONT>            if (toMillisecond &lt; fromMillisecond) {<a name="line.1027"></a>
<FONT color="green">1028</FONT>                return (0);<a name="line.1028"></a>
<FONT color="green">1029</FONT>            }<a name="line.1029"></a>
<FONT color="green">1030</FONT>    <a name="line.1030"></a>
<FONT color="green">1031</FONT>            int n = 0;<a name="line.1031"></a>
<FONT color="green">1032</FONT>            for (Iterator iter = this.exceptionSegments.iterator();<a name="line.1032"></a>
<FONT color="green">1033</FONT>                 iter.hasNext();) {<a name="line.1033"></a>
<FONT color="green">1034</FONT>                Segment segment = (Segment) iter.next();<a name="line.1034"></a>
<FONT color="green">1035</FONT>                Segment intersection = segment.intersect(fromMillisecond,<a name="line.1035"></a>
<FONT color="green">1036</FONT>                        toMillisecond);<a name="line.1036"></a>
<FONT color="green">1037</FONT>                if (intersection != null) {<a name="line.1037"></a>
<FONT color="green">1038</FONT>                    n += intersection.getSegmentCount();<a name="line.1038"></a>
<FONT color="green">1039</FONT>                }<a name="line.1039"></a>
<FONT color="green">1040</FONT>            }<a name="line.1040"></a>
<FONT color="green">1041</FONT>    <a name="line.1041"></a>
<FONT color="green">1042</FONT>            return (n);<a name="line.1042"></a>
<FONT color="green">1043</FONT>        }<a name="line.1043"></a>
<FONT color="green">1044</FONT>    <a name="line.1044"></a>
<FONT color="green">1045</FONT>        /**<a name="line.1045"></a>
<FONT color="green">1046</FONT>         * Returns a segment that contains a domainValue. If the domainValue is<a name="line.1046"></a>
<FONT color="green">1047</FONT>         * not contained in the timeline (because it is not contained in the<a name="line.1047"></a>
<FONT color="green">1048</FONT>         * baseTimeline), a Segment that contains<a name="line.1048"></a>
<FONT color="green">1049</FONT>         * &lt;code&gt;index + segmentSize*m&lt;/code&gt; will be returned for the smallest<a name="line.1049"></a>
<FONT color="green">1050</FONT>         * &lt;code&gt;m&lt;/code&gt; possible.<a name="line.1050"></a>
<FONT color="green">1051</FONT>         *<a name="line.1051"></a>
<FONT color="green">1052</FONT>         * @param millisecond  index into the segment<a name="line.1052"></a>
<FONT color="green">1053</FONT>         *<a name="line.1053"></a>
<FONT color="green">1054</FONT>         * @return A Segment that contains index, or the next possible Segment.<a name="line.1054"></a>
<FONT color="green">1055</FONT>         */<a name="line.1055"></a>
<FONT color="green">1056</FONT>        public Segment getSegment(long millisecond) {<a name="line.1056"></a>
<FONT color="green">1057</FONT>            return new Segment(millisecond);<a name="line.1057"></a>
<FONT color="green">1058</FONT>        }<a name="line.1058"></a>
<FONT color="green">1059</FONT>    <a name="line.1059"></a>
<FONT color="green">1060</FONT>        /**<a name="line.1060"></a>
<FONT color="green">1061</FONT>         * Returns a segment that contains a date. For accurate calculations,<a name="line.1061"></a>
<FONT color="green">1062</FONT>         * the calendar should use TIME_ZONE for its calculation (or any other<a name="line.1062"></a>
<FONT color="green">1063</FONT>         * similar time zone).<a name="line.1063"></a>
<FONT color="green">1064</FONT>         *<a name="line.1064"></a>
<FONT color="green">1065</FONT>         * If the date is not contained in the timeline (because it is not<a name="line.1065"></a>
<FONT color="green">1066</FONT>         * contained in the baseTimeline), a Segment that contains<a name="line.1066"></a>
<FONT color="green">1067</FONT>         * &lt;code&gt;date + segmentSize*m&lt;/code&gt; will be returned for the smallest<a name="line.1067"></a>
<FONT color="green">1068</FONT>         * &lt;code&gt;m&lt;/code&gt; possible.<a name="line.1068"></a>
<FONT color="green">1069</FONT>         *<a name="line.1069"></a>
<FONT color="green">1070</FONT>         * @param date date into the segment<a name="line.1070"></a>
<FONT color="green">1071</FONT>         *<a name="line.1071"></a>
<FONT color="green">1072</FONT>         * @return A Segment that contains date, or the next possible Segment.<a name="line.1072"></a>
<FONT color="green">1073</FONT>         */<a name="line.1073"></a>
<FONT color="green">1074</FONT>        public Segment getSegment(Date date) {<a name="line.1074"></a>
<FONT color="green">1075</FONT>            return (getSegment(getTime(date)));<a name="line.1075"></a>
<FONT color="green">1076</FONT>        }<a name="line.1076"></a>
<FONT color="green">1077</FONT>    <a name="line.1077"></a>
<FONT color="green">1078</FONT>        /**<a name="line.1078"></a>
<FONT color="green">1079</FONT>         * Convenient method to test equality in two objects, taking into account<a name="line.1079"></a>
<FONT color="green">1080</FONT>         * nulls.<a name="line.1080"></a>
<FONT color="green">1081</FONT>         *<a name="line.1081"></a>
<FONT color="green">1082</FONT>         * @param o first object to compare<a name="line.1082"></a>
<FONT color="green">1083</FONT>         * @param p second object to compare<a name="line.1083"></a>
<FONT color="green">1084</FONT>         *<a name="line.1084"></a>
<FONT color="green">1085</FONT>         * @return &lt;code&gt;true&lt;/code&gt; if both objects are equal or both<a name="line.1085"></a>
<FONT color="green">1086</FONT>         *         &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.<a name="line.1086"></a>
<FONT color="green">1087</FONT>         */<a name="line.1087"></a>
<FONT color="green">1088</FONT>        private boolean equals(Object o, Object p) {<a name="line.1088"></a>
<FONT color="green">1089</FONT>            return (o == p || ((o != null) &amp;&amp; o.equals(p)));<a name="line.1089"></a>
<FONT color="green">1090</FONT>        }<a name="line.1090"></a>
<FONT color="green">1091</FONT>    <a name="line.1091"></a>
<FONT color="green">1092</FONT>        /**<a name="line.1092"></a>
<FONT color="green">1093</FONT>         * Returns true if we are equal to the parameter<a name="line.1093"></a>
<FONT color="green">1094</FONT>         *<a name="line.1094"></a>
<FONT color="green">1095</FONT>         * @param o Object to verify with us<a name="line.1095"></a>
<FONT color="green">1096</FONT>         *<a name="line.1096"></a>
<FONT color="green">1097</FONT>         * @return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;<a name="line.1097"></a>
<FONT color="green">1098</FONT>         */<a name="line.1098"></a>
<FONT color="green">1099</FONT>        public boolean equals(Object o) {<a name="line.1099"></a>
<FONT color="green">1100</FONT>            if (o instanceof SegmentedTimeline) {<a name="line.1100"></a>
<FONT color="green">1101</FONT>                SegmentedTimeline other = (SegmentedTimeline) o;<a name="line.1101"></a>
<FONT color="green">1102</FONT>    <a name="line.1102"></a>
<FONT color="green">1103</FONT>                boolean b0 = (this.segmentSize == other.getSegmentSize());<a name="line.1103"></a>
<FONT color="green">1104</FONT>                boolean b1 = (this.segmentsIncluded == other.getSegmentsIncluded());<a name="line.1104"></a>
<FONT color="green">1105</FONT>                boolean b2 = (this.segmentsExcluded == other.getSegmentsExcluded());<a name="line.1105"></a>
<FONT color="green">1106</FONT>                boolean b3 = (this.startTime == other.getStartTime());<a name="line.1106"></a>
<FONT color="green">1107</FONT>                boolean b4 = equals(this.exceptionSegments,<a name="line.1107"></a>
<FONT color="green">1108</FONT>                        other.getExceptionSegments());<a name="line.1108"></a>
<FONT color="green">1109</FONT>                return b0 &amp;&amp; b1 &amp;&amp; b2 &amp;&amp; b3 &amp;&amp; b4;<a name="line.1109"></a>
<FONT color="green">1110</FONT>            }<a name="line.1110"></a>
<FONT color="green">1111</FONT>            else {<a name="line.1111"></a>
<FONT color="green">1112</FONT>                return (false);<a name="line.1112"></a>
<FONT color="green">1113</FONT>            }<a name="line.1113"></a>
<FONT color="green">1114</FONT>        }<a name="line.1114"></a>
<FONT color="green">1115</FONT>    <a name="line.1115"></a>
<FONT color="green">1116</FONT>        /**<a name="line.1116"></a>
<FONT color="green">1117</FONT>         * Returns a hash code for this object.<a name="line.1117"></a>
<FONT color="green">1118</FONT>         *<a name="line.1118"></a>
<FONT color="green">1119</FONT>         * @return A hash code.<a name="line.1119"></a>
<FONT color="green">1120</FONT>         */<a name="line.1120"></a>
<FONT color="green">1121</FONT>        public int hashCode() {<a name="line.1121"></a>
<FONT color="green">1122</FONT>            int result = 19;<a name="line.1122"></a>
<FONT color="green">1123</FONT>            result = 37 * result<a name="line.1123"></a>
<FONT color="green">1124</FONT>                     + (int) (this.segmentSize ^ (this.segmentSize &gt;&gt;&gt; 32));<a name="line.1124"></a>
<FONT color="green">1125</FONT>            result = 37 * result + (int) (this.startTime ^ (this.startTime &gt;&gt;&gt; 32));<a name="line.1125"></a>
<FONT color="green">1126</FONT>            return result;<a name="line.1126"></a>
<FONT color="green">1127</FONT>        }<a name="line.1127"></a>
<FONT color="green">1128</FONT>    <a name="line.1128"></a>
<FONT color="green">1129</FONT>        /**<a name="line.1129"></a>
<FONT color="green">1130</FONT>         * Preforms a binary serach in the exceptionSegments sorted array. This<a name="line.1130"></a>
<FONT color="green">1131</FONT>         * array can contain Segments or SegmentRange objects.<a name="line.1131"></a>
<FONT color="green">1132</FONT>         *<a name="line.1132"></a>
<FONT color="green">1133</FONT>         * @param  segment the key to be searched for.<a name="line.1133"></a>
<FONT color="green">1134</FONT>         *<a name="line.1134"></a>
<FONT color="green">1135</FONT>         * @return index of the search segment, if it is contained in the list;<a name="line.1135"></a>
<FONT color="green">1136</FONT>         *         otherwise, &lt;tt&gt;(-(&lt;i&gt;insertion point&lt;/i&gt;) - 1)&lt;/tt&gt;.  The<a name="line.1136"></a>
<FONT color="green">1137</FONT>         *         &lt;i&gt;insertion point&lt;/i&gt; is defined as the point at which the<a name="line.1137"></a>
<FONT color="green">1138</FONT>         *         segment would be inserted into the list: the index of the first<a name="line.1138"></a>
<FONT color="green">1139</FONT>         *         element greater than the key, or &lt;tt&gt;list.size()&lt;/tt&gt;, if all<a name="line.1139"></a>
<FONT color="green">1140</FONT>         *         elements in the list are less than the specified segment.  Note<a name="line.1140"></a>
<FONT color="green">1141</FONT>         *         that this guarantees that the return value will be &amp;gt;= 0 if<a name="line.1141"></a>
<FONT color="green">1142</FONT>         *         and only if the key is found.<a name="line.1142"></a>
<FONT color="green">1143</FONT>         */<a name="line.1143"></a>
<FONT color="green">1144</FONT>        private int binarySearchExceptionSegments(Segment segment) {<a name="line.1144"></a>
<FONT color="green">1145</FONT>            int low = 0;<a name="line.1145"></a>
<FONT color="green">1146</FONT>            int high = this.exceptionSegments.size() - 1;<a name="line.1146"></a>
<FONT color="green">1147</FONT>    <a name="line.1147"></a>
<FONT color="green">1148</FONT>            while (low &lt;= high) {<a name="line.1148"></a>
<FONT color="green">1149</FONT>                int mid = (low + high) / 2;<a name="line.1149"></a>
<FONT color="green">1150</FONT>                Segment midSegment = (Segment) this.exceptionSegments.get(mid);<a name="line.1150"></a>
<FONT color="green">1151</FONT>    <a name="line.1151"></a>
<FONT color="green">1152</FONT>                // first test for equality (contains or contained)<a name="line.1152"></a>
<FONT color="green">1153</FONT>                if (segment.contains(midSegment) || midSegment.contains(segment)) {<a name="line.1153"></a>
<FONT color="green">1154</FONT>                    return mid;<a name="line.1154"></a>
<FONT color="green">1155</FONT>                }<a name="line.1155"></a>
<FONT color="green">1156</FONT>    <a name="line.1156"></a>
<FONT color="green">1157</FONT>                if (midSegment.before(segment)) {<a name="line.1157"></a>
<FONT color="green">1158</FONT>                    low = mid + 1;<a name="line.1158"></a>
<FONT color="green">1159</FONT>                }<a name="line.1159"></a>
<FONT color="green">1160</FONT>                else if (midSegment.after(segment)) {<a name="line.1160"></a>
<FONT color="green">1161</FONT>                    high = mid - 1;<a name="line.1161"></a>
<FONT color="green">1162</FONT>                }<a name="line.1162"></a>
<FONT color="green">1163</FONT>                else {<a name="line.1163"></a>
<FONT color="green">1164</FONT>                    throw new IllegalStateException("Invalid condition.");<a name="line.1164"></a>
<FONT color="green">1165</FONT>                }<a name="line.1165"></a>
<FONT color="green">1166</FONT>            }<a name="line.1166"></a>
<FONT color="green">1167</FONT>            return -(low + 1);  // key not found<a name="line.1167"></a>
<FONT color="green">1168</FONT>        }<a name="line.1168"></a>
<FONT color="green">1169</FONT>    <a name="line.1169"></a>
<FONT color="green">1170</FONT>        /**<a name="line.1170"></a>
<FONT color="green">1171</FONT>         * Special method that handles conversion between the Default Time Zone and<a name="line.1171"></a>
<FONT color="green">1172</FONT>         * a UTC time zone with no DST. This is needed so all days have the same<a name="line.1172"></a>
<FONT color="green">1173</FONT>         * size. This method is the prefered way of converting a Data into<a name="line.1173"></a>
<FONT color="green">1174</FONT>         * milliseconds for usage in this class.<a name="line.1174"></a>
<FONT color="green">1175</FONT>         *<a name="line.1175"></a>
<FONT color="green">1176</FONT>         * @param date Date to convert to long.<a name="line.1176"></a>
<FONT color="green">1177</FONT>         *<a name="line.1177"></a>
<FONT color="green">1178</FONT>         * @return The milliseconds.<a name="line.1178"></a>
<FONT color="green">1179</FONT>         */<a name="line.1179"></a>
<FONT color="green">1180</FONT>        public long getTime(Date date) {<a name="line.1180"></a>
<FONT color="green">1181</FONT>            long result = date.getTime();<a name="line.1181"></a>
<FONT color="green">1182</FONT>            if (this.adjustForDaylightSaving) {<a name="line.1182"></a>
<FONT color="green">1183</FONT>                this.workingCalendar.setTime(date);<a name="line.1183"></a>
<FONT color="green">1184</FONT>                this.workingCalendarNoDST.set(<a name="line.1184"></a>
<FONT color="green">1185</FONT>                        this.workingCalendar.get(Calendar.YEAR),<a name="line.1185"></a>
<FONT color="green">1186</FONT>                        this.workingCalendar.get(Calendar.MONTH),<a name="line.1186"></a>
<FONT color="green">1187</FONT>                        this.workingCalendar.get(Calendar.DATE),<a name="line.1187"></a>
<FONT color="green">1188</FONT>                        this.workingCalendar.get(Calendar.HOUR_OF_DAY),<a name="line.1188"></a>
<FONT color="green">1189</FONT>                        this.workingCalendar.get(Calendar.MINUTE),<a name="line.1189"></a>
<FONT color="green">1190</FONT>                        this.workingCalendar.get(Calendar.SECOND));<a name="line.1190"></a>
<FONT color="green">1191</FONT>                this.workingCalendarNoDST.set(Calendar.MILLISECOND,<a name="line.1191"></a>
<FONT color="green">1192</FONT>                        this.workingCalendar.get(Calendar.MILLISECOND));<a name="line.1192"></a>
<FONT color="green">1193</FONT>                Date revisedDate = this.workingCalendarNoDST.getTime();<a name="line.1193"></a>
<FONT color="green">1194</FONT>                result = revisedDate.getTime();<a name="line.1194"></a>
<FONT color="green">1195</FONT>            }<a name="line.1195"></a>
<FONT color="green">1196</FONT>    <a name="line.1196"></a>
<FONT color="green">1197</FONT>            return result;<a name="line.1197"></a>
<FONT color="green">1198</FONT>        }<a name="line.1198"></a>
<FONT color="green">1199</FONT>    <a name="line.1199"></a>
<FONT color="green">1200</FONT>        /**<a name="line.1200"></a>
<FONT color="green">1201</FONT>         * Converts a millisecond value into a {@link Date} object.<a name="line.1201"></a>
<FONT color="green">1202</FONT>         *<a name="line.1202"></a>
<FONT color="green">1203</FONT>         * @param value  the millisecond value.<a name="line.1203"></a>
<FONT color="green">1204</FONT>         *<a name="line.1204"></a>
<FONT color="green">1205</FONT>         * @return The date.<a name="line.1205"></a>
<FONT color="green">1206</FONT>         */<a name="line.1206"></a>
<FONT color="green">1207</FONT>        public Date getDate(long value) {<a name="line.1207"></a>
<FONT color="green">1208</FONT>            this.workingCalendarNoDST.setTime(new Date(value));<a name="line.1208"></a>
<FONT color="green">1209</FONT>            return (this.workingCalendarNoDST.getTime());<a name="line.1209"></a>
<FONT color="green">1210</FONT>        }<a name="line.1210"></a>
<FONT color="green">1211</FONT>    <a name="line.1211"></a>
<FONT color="green">1212</FONT>        /**<a name="line.1212"></a>
<FONT color="green">1213</FONT>         * Returns a clone of the timeline.<a name="line.1213"></a>
<FONT color="green">1214</FONT>         *<a name="line.1214"></a>
<FONT color="green">1215</FONT>         * @return A clone.<a name="line.1215"></a>
<FONT color="green">1216</FONT>         *<a name="line.1216"></a>
<FONT color="green">1217</FONT>         * @throws CloneNotSupportedException ??.<a name="line.1217"></a>
<FONT color="green">1218</FONT>         */<a name="line.1218"></a>
<FONT color="green">1219</FONT>        public Object clone() throws CloneNotSupportedException {<a name="line.1219"></a>
<FONT color="green">1220</FONT>            SegmentedTimeline clone = (SegmentedTimeline) super.clone();<a name="line.1220"></a>
<FONT color="green">1221</FONT>            return clone;<a name="line.1221"></a>
<FONT color="green">1222</FONT>        }<a name="line.1222"></a>
<FONT color="green">1223</FONT>    <a name="line.1223"></a>
<FONT color="green">1224</FONT>        /**<a name="line.1224"></a>
<FONT color="green">1225</FONT>         * Internal class to represent a valid segment for this timeline. A segment<a name="line.1225"></a>
<FONT color="green">1226</FONT>         * is valid on a timeline if it is part of its included, excluded or<a name="line.1226"></a>
<FONT color="green">1227</FONT>         * exception segments.<a name="line.1227"></a>
<FONT color="green">1228</FONT>         * &lt;p&gt;<a name="line.1228"></a>
<FONT color="green">1229</FONT>         * Each segment will know its segment number, segmentStart, segmentEnd and<a name="line.1229"></a>
<FONT color="green">1230</FONT>         * index inside the segment.<a name="line.1230"></a>
<FONT color="green">1231</FONT>         */<a name="line.1231"></a>
<FONT color="green">1232</FONT>        public class Segment implements Comparable, Cloneable, Serializable {<a name="line.1232"></a>
<FONT color="green">1233</FONT>    <a name="line.1233"></a>
<FONT color="green">1234</FONT>            /** The segment number. */<a name="line.1234"></a>
<FONT color="green">1235</FONT>            protected long segmentNumber;<a name="line.1235"></a>
<FONT color="green">1236</FONT>    <a name="line.1236"></a>
<FONT color="green">1237</FONT>            /** The segment start. */<a name="line.1237"></a>
<FONT color="green">1238</FONT>            protected long segmentStart;<a name="line.1238"></a>
<FONT color="green">1239</FONT>    <a name="line.1239"></a>
<FONT color="green">1240</FONT>            /** The segment end. */<a name="line.1240"></a>
<FONT color="green">1241</FONT>            protected long segmentEnd;<a name="line.1241"></a>
<FONT color="green">1242</FONT>    <a name="line.1242"></a>
<FONT color="green">1243</FONT>            /** A reference point within the segment. */<a name="line.1243"></a>
<FONT color="green">1244</FONT>            protected long millisecond;<a name="line.1244"></a>
<FONT color="green">1245</FONT>    <a name="line.1245"></a>
<FONT color="green">1246</FONT>            /**<a name="line.1246"></a>
<FONT color="green">1247</FONT>             * Protected constructor only used by sub-classes.<a name="line.1247"></a>
<FONT color="green">1248</FONT>             */<a name="line.1248"></a>
<FONT color="green">1249</FONT>            protected Segment() {<a name="line.1249"></a>
<FONT color="green">1250</FONT>                // empty<a name="line.1250"></a>
<FONT color="green">1251</FONT>            }<a name="line.1251"></a>
<FONT color="green">1252</FONT>    <a name="line.1252"></a>
<FONT color="green">1253</FONT>            /**<a name="line.1253"></a>
<FONT color="green">1254</FONT>             * Creates a segment for a given point in time.<a name="line.1254"></a>
<FONT color="green">1255</FONT>             *<a name="line.1255"></a>
<FONT color="green">1256</FONT>             * @param millisecond  the millisecond (as encoded by java.util.Date).<a name="line.1256"></a>
<FONT color="green">1257</FONT>             */<a name="line.1257"></a>
<FONT color="green">1258</FONT>            protected Segment(long millisecond) {<a name="line.1258"></a>
<FONT color="green">1259</FONT>                this.segmentNumber = calculateSegmentNumber(millisecond);<a name="line.1259"></a>
<FONT color="green">1260</FONT>                this.segmentStart = SegmentedTimeline.this.startTime<a name="line.1260"></a>
<FONT color="green">1261</FONT>                    + this.segmentNumber * SegmentedTimeline.this.segmentSize;<a name="line.1261"></a>
<FONT color="green">1262</FONT>                this.segmentEnd<a name="line.1262"></a>
<FONT color="green">1263</FONT>                    = this.segmentStart + SegmentedTimeline.this.segmentSize - 1;<a name="line.1263"></a>
<FONT color="green">1264</FONT>                this.millisecond = millisecond;<a name="line.1264"></a>
<FONT color="green">1265</FONT>            }<a name="line.1265"></a>
<FONT color="green">1266</FONT>    <a name="line.1266"></a>
<FONT color="green">1267</FONT>            /**<a name="line.1267"></a>
<FONT color="green">1268</FONT>             * Calculates the segment number for a given millisecond.<a name="line.1268"></a>
<FONT color="green">1269</FONT>             *<a name="line.1269"></a>
<FONT color="green">1270</FONT>             * @param millis  the millisecond (as encoded by java.util.Date).<a name="line.1270"></a>
<FONT color="green">1271</FONT>             *<a name="line.1271"></a>
<FONT color="green">1272</FONT>             * @return The segment number.<a name="line.1272"></a>
<FONT color="green">1273</FONT>             */<a name="line.1273"></a>
<FONT color="green">1274</FONT>            public long calculateSegmentNumber(long millis) {<a name="line.1274"></a>
<FONT color="green">1275</FONT>                if (millis &gt;= SegmentedTimeline.this.startTime) {<a name="line.1275"></a>
<FONT color="green">1276</FONT>                    return (millis - SegmentedTimeline.this.startTime)<a name="line.1276"></a>
<FONT color="green">1277</FONT>                        / SegmentedTimeline.this.segmentSize;<a name="line.1277"></a>
<FONT color="green">1278</FONT>                }<a name="line.1278"></a>
<FONT color="green">1279</FONT>                else {<a name="line.1279"></a>
<FONT color="green">1280</FONT>                    return ((millis - SegmentedTimeline.this.startTime)<a name="line.1280"></a>
<FONT color="green">1281</FONT>                        / SegmentedTimeline.this.segmentSize) - 1;<a name="line.1281"></a>
<FONT color="green">1282</FONT>                }<a name="line.1282"></a>
<FONT color="green">1283</FONT>            }<a name="line.1283"></a>
<FONT color="green">1284</FONT>    <a name="line.1284"></a>
<FONT color="green">1285</FONT>            /**<a name="line.1285"></a>
<FONT color="green">1286</FONT>             * Returns the segment number of this segment. Segments start at 0.<a name="line.1286"></a>
<FONT color="green">1287</FONT>             *<a name="line.1287"></a>
<FONT color="green">1288</FONT>             * @return The segment number.<a name="line.1288"></a>
<FONT color="green">1289</FONT>             */<a name="line.1289"></a>
<FONT color="green">1290</FONT>            public long getSegmentNumber() {<a name="line.1290"></a>
<FONT color="green">1291</FONT>                return this.segmentNumber;<a name="line.1291"></a>
<FONT color="green">1292</FONT>            }<a name="line.1292"></a>
<FONT color="green">1293</FONT>    <a name="line.1293"></a>
<FONT color="green">1294</FONT>            /**<a name="line.1294"></a>
<FONT color="green">1295</FONT>             * Returns always one (the number of segments contained in this<a name="line.1295"></a>
<FONT color="green">1296</FONT>             * segment).<a name="line.1296"></a>
<FONT color="green">1297</FONT>             *<a name="line.1297"></a>
<FONT color="green">1298</FONT>             * @return The segment count (always 1 for this class).<a name="line.1298"></a>
<FONT color="green">1299</FONT>             */<a name="line.1299"></a>
<FONT color="green">1300</FONT>            public long getSegmentCount() {<a name="line.1300"></a>
<FONT color="green">1301</FONT>                return 1;<a name="line.1301"></a>
<FONT color="green">1302</FONT>            }<a name="line.1302"></a>
<FONT color="green">1303</FONT>    <a name="line.1303"></a>
<FONT color="green">1304</FONT>            /**<a name="line.1304"></a>
<FONT color="green">1305</FONT>             * Gets the start of this segment in ms.<a name="line.1305"></a>
<FONT color="green">1306</FONT>             *<a name="line.1306"></a>
<FONT color="green">1307</FONT>             * @return The segment start.<a name="line.1307"></a>
<FONT color="green">1308</FONT>             */<a name="line.1308"></a>
<FONT color="green">1309</FONT>            public long getSegmentStart() {<a name="line.1309"></a>
<FONT color="green">1310</FONT>                return this.segmentStart;<a name="line.1310"></a>
<FONT color="green">1311</FONT>            }<a name="line.1311"></a>
<FONT color="green">1312</FONT>    <a name="line.1312"></a>
<FONT color="green">1313</FONT>            /**<a name="line.1313"></a>
<FONT color="green">1314</FONT>             * Gets the end of this segment in ms.<a name="line.1314"></a>
<FONT color="green">1315</FONT>             *<a name="line.1315"></a>
<FONT color="green">1316</FONT>             * @return The segment end.<a name="line.1316"></a>
<FONT color="green">1317</FONT>             */<a name="line.1317"></a>
<FONT color="green">1318</FONT>            public long getSegmentEnd() {<a name="line.1318"></a>
<FONT color="green">1319</FONT>                return this.segmentEnd;<a name="line.1319"></a>
<FONT color="green">1320</FONT>            }<a name="line.1320"></a>
<FONT color="green">1321</FONT>    <a name="line.1321"></a>
<FONT color="green">1322</FONT>            /**<a name="line.1322"></a>
<FONT color="green">1323</FONT>             * Returns the millisecond used to reference this segment (always<a name="line.1323"></a>
<FONT color="green">1324</FONT>             * between the segmentStart and segmentEnd).<a name="line.1324"></a>
<FONT color="green">1325</FONT>             *<a name="line.1325"></a>
<FONT color="green">1326</FONT>             * @return The millisecond.<a name="line.1326"></a>
<FONT color="green">1327</FONT>             */<a name="line.1327"></a>
<FONT color="green">1328</FONT>            public long getMillisecond() {<a name="line.1328"></a>
<FONT color="green">1329</FONT>                return this.millisecond;<a name="line.1329"></a>
<FONT color="green">1330</FONT>            }<a name="line.1330"></a>
<FONT color="green">1331</FONT>    <a name="line.1331"></a>
<FONT color="green">1332</FONT>            /**<a name="line.1332"></a>
<FONT color="green">1333</FONT>             * Returns a {@link java.util.Date} that represents the reference point<a name="line.1333"></a>
<FONT color="green">1334</FONT>             * for this segment.<a name="line.1334"></a>
<FONT color="green">1335</FONT>             *<a name="line.1335"></a>
<FONT color="green">1336</FONT>             * @return The date.<a name="line.1336"></a>
<FONT color="green">1337</FONT>             */<a name="line.1337"></a>
<FONT color="green">1338</FONT>            public Date getDate() {<a name="line.1338"></a>
<FONT color="green">1339</FONT>                return SegmentedTimeline.this.getDate(this.millisecond);<a name="line.1339"></a>
<FONT color="green">1340</FONT>            }<a name="line.1340"></a>
<FONT color="green">1341</FONT>    <a name="line.1341"></a>
<FONT color="green">1342</FONT>            /**<a name="line.1342"></a>
<FONT color="green">1343</FONT>             * Returns true if a particular millisecond is contained in this<a name="line.1343"></a>
<FONT color="green">1344</FONT>             * segment.<a name="line.1344"></a>
<FONT color="green">1345</FONT>             *<a name="line.1345"></a>
<FONT color="green">1346</FONT>             * @param millis  the millisecond to verify.<a name="line.1346"></a>
<FONT color="green">1347</FONT>             *<a name="line.1347"></a>
<FONT color="green">1348</FONT>             * @return &lt;code&gt;true&lt;/code&gt; if the millisecond is contained in the<a name="line.1348"></a>
<FONT color="green">1349</FONT>             *         segment.<a name="line.1349"></a>
<FONT color="green">1350</FONT>             */<a name="line.1350"></a>
<FONT color="green">1351</FONT>            public boolean contains(long millis) {<a name="line.1351"></a>
<FONT color="green">1352</FONT>                return (this.segmentStart &lt;= millis &amp;&amp; millis &lt;= this.segmentEnd);<a name="line.1352"></a>
<FONT color="green">1353</FONT>            }<a name="line.1353"></a>
<FONT color="green">1354</FONT>    <a name="line.1354"></a>
<FONT color="green">1355</FONT>            /**<a name="line.1355"></a>
<FONT color="green">1356</FONT>             * Returns &lt;code&gt;true&lt;/code&gt; if an interval is contained in this<a name="line.1356"></a>
<FONT color="green">1357</FONT>             * segment.<a name="line.1357"></a>
<FONT color="green">1358</FONT>             *<a name="line.1358"></a>
<FONT color="green">1359</FONT>             * @param from  the start of the interval.<a name="line.1359"></a>
<FONT color="green">1360</FONT>             * @param to  the end of the interval.<a name="line.1360"></a>
<FONT color="green">1361</FONT>             *<a name="line.1361"></a>
<FONT color="green">1362</FONT>             * @return &lt;code&gt;true&lt;/code&gt; if the interval is contained in the<a name="line.1362"></a>
<FONT color="green">1363</FONT>             *         segment.<a name="line.1363"></a>
<FONT color="green">1364</FONT>             */<a name="line.1364"></a>
<FONT color="green">1365</FONT>            public boolean contains(long from, long to) {<a name="line.1365"></a>
<FONT color="green">1366</FONT>                return (this.segmentStart &lt;= from &amp;&amp; to &lt;= this.segmentEnd);<a name="line.1366"></a>
<FONT color="green">1367</FONT>            }<a name="line.1367"></a>
<FONT color="green">1368</FONT>    <a name="line.1368"></a>
<FONT color="green">1369</FONT>            /**<a name="line.1369"></a>
<FONT color="green">1370</FONT>             * Returns &lt;code&gt;true&lt;/code&gt; if a segment is contained in this segment.<a name="line.1370"></a>
<FONT color="green">1371</FONT>             *<a name="line.1371"></a>
<FONT color="green">1372</FONT>             * @param segment  the segment to test for inclusion<a name="line.1372"></a>
<FONT color="green">1373</FONT>             *<a name="line.1373"></a>
<FONT color="green">1374</FONT>             * @return &lt;code&gt;true&lt;/code&gt; if the segment is contained in this<a name="line.1374"></a>
<FONT color="green">1375</FONT>             *         segment.<a name="line.1375"></a>
<FONT color="green">1376</FONT>             */<a name="line.1376"></a>
<FONT color="green">1377</FONT>            public boolean contains(Segment segment) {<a name="line.1377"></a>
<FONT color="green">1378</FONT>                return contains(segment.getSegmentStart(), segment.getSegmentEnd());<a name="line.1378"></a>
<FONT color="green">1379</FONT>            }<a name="line.1379"></a>
<FONT color="green">1380</FONT>    <a name="line.1380"></a>
<FONT color="green">1381</FONT>            /**<a name="line.1381"></a>
<FONT color="green">1382</FONT>             * Returns &lt;code&gt;true&lt;/code&gt; if this segment is contained in an<a name="line.1382"></a>
<FONT color="green">1383</FONT>             * interval.<a name="line.1383"></a>
<FONT color="green">1384</FONT>             *<a name="line.1384"></a>
<FONT color="green">1385</FONT>             * @param from  the start of the interval.<a name="line.1385"></a>
<FONT color="green">1386</FONT>             * @param to  the end of the interval.<a name="line.1386"></a>
<FONT color="green">1387</FONT>             *<a name="line.1387"></a>
<FONT color="green">1388</FONT>             * @return &lt;code&gt;true&lt;/code&gt; if this segment is contained in the<a name="line.1388"></a>
<FONT color="green">1389</FONT>             *         interval.<a name="line.1389"></a>
<FONT color="green">1390</FONT>             */<a name="line.1390"></a>
<FONT color="green">1391</FONT>            public boolean contained(long from, long to) {<a name="line.1391"></a>
<FONT color="green">1392</FONT>                return (from &lt;= this.segmentStart &amp;&amp; this.segmentEnd &lt;= to);<a name="line.1392"></a>
<FONT color="green">1393</FONT>            }<a name="line.1393"></a>
<FONT color="green">1394</FONT>    <a name="line.1394"></a>
<FONT color="green">1395</FONT>            /**<a name="line.1395"></a>
<FONT color="green">1396</FONT>             * Returns a segment that is the intersection of this segment and the<a name="line.1396"></a>
<FONT color="green">1397</FONT>             * interval.<a name="line.1397"></a>
<FONT color="green">1398</FONT>             *<a name="line.1398"></a>
<FONT color="green">1399</FONT>             * @param from  the start of the interval.<a name="line.1399"></a>
<FONT color="green">1400</FONT>             * @param to  the end of the interval.<a name="line.1400"></a>
<FONT color="green">1401</FONT>             *<a name="line.1401"></a>
<FONT color="green">1402</FONT>             * @return A segment.<a name="line.1402"></a>
<FONT color="green">1403</FONT>             */<a name="line.1403"></a>
<FONT color="green">1404</FONT>            public Segment intersect(long from, long to) {<a name="line.1404"></a>
<FONT color="green">1405</FONT>                if (from &lt;= this.segmentStart &amp;&amp; this.segmentEnd &lt;= to) {<a name="line.1405"></a>
<FONT color="green">1406</FONT>                    return this;<a name="line.1406"></a>
<FONT color="green">1407</FONT>                }<a name="line.1407"></a>
<FONT color="green">1408</FONT>                else {<a name="line.1408"></a>
<FONT color="green">1409</FONT>                    return null;<a name="line.1409"></a>
<FONT color="green">1410</FONT>                }<a name="line.1410"></a>
<FONT color="green">1411</FONT>            }<a name="line.1411"></a>
<FONT color="green">1412</FONT>    <a name="line.1412"></a>
<FONT color="green">1413</FONT>            /**<a name="line.1413"></a>
<FONT color="green">1414</FONT>             * Returns &lt;code&gt;true&lt;/code&gt; if this segment is wholly before another<a name="line.1414"></a>
<FONT color="green">1415</FONT>             * segment.<a name="line.1415"></a>
<FONT color="green">1416</FONT>             *<a name="line.1416"></a>
<FONT color="green">1417</FONT>             * @param other  the other segment.<a name="line.1417"></a>
<FONT color="green">1418</FONT>             *<a name="line.1418"></a>
<FONT color="green">1419</FONT>             * @return A boolean.<a name="line.1419"></a>
<FONT color="green">1420</FONT>             */<a name="line.1420"></a>
<FONT color="green">1421</FONT>            public boolean before(Segment other) {<a name="line.1421"></a>
<FONT color="green">1422</FONT>                return (this.segmentEnd &lt; other.getSegmentStart());<a name="line.1422"></a>
<FONT color="green">1423</FONT>            }<a name="line.1423"></a>
<FONT color="green">1424</FONT>    <a name="line.1424"></a>
<FONT color="green">1425</FONT>            /**<a name="line.1425"></a>
<FONT color="green">1426</FONT>             * Returns &lt;code&gt;true&lt;/code&gt; if this segment is wholly after another<a name="line.1426"></a>
<FONT color="green">1427</FONT>             * segment.<a name="line.1427"></a>
<FONT color="green">1428</FONT>             *<a name="line.1428"></a>
<FONT color="green">1429</FONT>             * @param other  the other segment.<a name="line.1429"></a>
<FONT color="green">1430</FONT>             *<a name="line.1430"></a>
<FONT color="green">1431</FONT>             * @return A boolean.<a name="line.1431"></a>
<FONT color="green">1432</FONT>             */<a name="line.1432"></a>
<FONT color="green">1433</FONT>            public boolean after(Segment other) {<a name="line.1433"></a>
<FONT color="green">1434</FONT>                return (this.segmentStart &gt; other.getSegmentEnd());<a name="line.1434"></a>
<FONT color="green">1435</FONT>            }<a name="line.1435"></a>
<FONT color="green">1436</FONT>    <a name="line.1436"></a>
<FONT color="green">1437</FONT>            /**<a name="line.1437"></a>
<FONT color="green">1438</FONT>             * Tests an object (usually another &lt;code&gt;Segment&lt;/code&gt;) for equality<a name="line.1438"></a>
<FONT color="green">1439</FONT>             * with this segment.<a name="line.1439"></a>
<FONT color="green">1440</FONT>             *<a name="line.1440"></a>
<FONT color="green">1441</FONT>             * @param object The other segment to compare with us<a name="line.1441"></a>
<FONT color="green">1442</FONT>             *<a name="line.1442"></a>
<FONT color="green">1443</FONT>             * @return &lt;code&gt;true&lt;/code&gt; if we are the same segment<a name="line.1443"></a>
<FONT color="green">1444</FONT>             */<a name="line.1444"></a>
<FONT color="green">1445</FONT>            public boolean equals(Object object) {<a name="line.1445"></a>
<FONT color="green">1446</FONT>                if (object instanceof Segment) {<a name="line.1446"></a>
<FONT color="green">1447</FONT>                    Segment other = (Segment) object;<a name="line.1447"></a>
<FONT color="green">1448</FONT>                    return (this.segmentNumber == other.getSegmentNumber()<a name="line.1448"></a>
<FONT color="green">1449</FONT>                            &amp;&amp; this.segmentStart == other.getSegmentStart()<a name="line.1449"></a>
<FONT color="green">1450</FONT>                            &amp;&amp; this.segmentEnd == other.getSegmentEnd()<a name="line.1450"></a>
<FONT color="green">1451</FONT>                            &amp;&amp; this.millisecond == other.getMillisecond());<a name="line.1451"></a>
<FONT color="green">1452</FONT>                }<a name="line.1452"></a>
<FONT color="green">1453</FONT>                else {<a name="line.1453"></a>
<FONT color="green">1454</FONT>                    return false;<a name="line.1454"></a>
<FONT color="green">1455</FONT>                }<a name="line.1455"></a>
<FONT color="green">1456</FONT>            }<a name="line.1456"></a>
<FONT color="green">1457</FONT>    <a name="line.1457"></a>
<FONT color="green">1458</FONT>            /**<a name="line.1458"></a>
<FONT color="green">1459</FONT>             * Returns a copy of ourselves or &lt;code&gt;null&lt;/code&gt; if there was an<a name="line.1459"></a>
<FONT color="green">1460</FONT>             * exception during cloning.<a name="line.1460"></a>
<FONT color="green">1461</FONT>             *<a name="line.1461"></a>
<FONT color="green">1462</FONT>             * @return A copy of this segment.<a name="line.1462"></a>
<FONT color="green">1463</FONT>             */<a name="line.1463"></a>
<FONT color="green">1464</FONT>            public Segment copy() {<a name="line.1464"></a>
<FONT color="green">1465</FONT>                try {<a name="line.1465"></a>
<FONT color="green">1466</FONT>                    return (Segment) this.clone();<a name="line.1466"></a>
<FONT color="green">1467</FONT>                }<a name="line.1467"></a>
<FONT color="green">1468</FONT>                catch (CloneNotSupportedException e) {<a name="line.1468"></a>
<FONT color="green">1469</FONT>                    return null;<a name="line.1469"></a>
<FONT color="green">1470</FONT>                }<a name="line.1470"></a>
<FONT color="green">1471</FONT>            }<a name="line.1471"></a>
<FONT color="green">1472</FONT>    <a name="line.1472"></a>
<FONT color="green">1473</FONT>            /**<a name="line.1473"></a>
<FONT color="green">1474</FONT>             * Will compare this Segment with another Segment (from Comparable<a name="line.1474"></a>
<FONT color="green">1475</FONT>             * interface).<a name="line.1475"></a>
<FONT color="green">1476</FONT>             *<a name="line.1476"></a>
<FONT color="green">1477</FONT>             * @param object The other Segment to compare with<a name="line.1477"></a>
<FONT color="green">1478</FONT>             *<a name="line.1478"></a>
<FONT color="green">1479</FONT>             * @return -1: this &lt; object, 0: this.equal(object) and<a name="line.1479"></a>
<FONT color="green">1480</FONT>             *         +1: this &gt; object<a name="line.1480"></a>
<FONT color="green">1481</FONT>             */<a name="line.1481"></a>
<FONT color="green">1482</FONT>            public int compareTo(Object object) {<a name="line.1482"></a>
<FONT color="green">1483</FONT>                Segment other = (Segment) object;<a name="line.1483"></a>
<FONT color="green">1484</FONT>                if (this.before(other)) {<a name="line.1484"></a>
<FONT color="green">1485</FONT>                    return -1;<a name="line.1485"></a>
<FONT color="green">1486</FONT>                }<a name="line.1486"></a>
<FONT color="green">1487</FONT>                else if (this.after(other)) {<a name="line.1487"></a>
<FONT color="green">1488</FONT>                    return +1;<a name="line.1488"></a>
<FONT color="green">1489</FONT>                }<a name="line.1489"></a>
<FONT color="green">1490</FONT>                else {<a name="line.1490"></a>
<FONT color="green">1491</FONT>                    return 0;<a name="line.1491"></a>
<FONT color="green">1492</FONT>                }<a name="line.1492"></a>
<FONT color="green">1493</FONT>            }<a name="line.1493"></a>
<FONT color="green">1494</FONT>    <a name="line.1494"></a>
<FONT color="green">1495</FONT>            /**<a name="line.1495"></a>
<FONT color="green">1496</FONT>             * Returns true if we are an included segment and we are not an<a name="line.1496"></a>
<FONT color="green">1497</FONT>             * exception.<a name="line.1497"></a>
<FONT color="green">1498</FONT>             *<a name="line.1498"></a>
<FONT color="green">1499</FONT>             * @return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.<a name="line.1499"></a>
<FONT color="green">1500</FONT>             */<a name="line.1500"></a>
<FONT color="green">1501</FONT>            public boolean inIncludeSegments() {<a name="line.1501"></a>
<FONT color="green">1502</FONT>                if (getSegmentNumberRelativeToGroup()<a name="line.1502"></a>
<FONT color="green">1503</FONT>                        &lt; SegmentedTimeline.this.segmentsIncluded) {<a name="line.1503"></a>
<FONT color="green">1504</FONT>                    return !inExceptionSegments();<a name="line.1504"></a>
<FONT color="green">1505</FONT>                }<a name="line.1505"></a>
<FONT color="green">1506</FONT>                else {<a name="line.1506"></a>
<FONT color="green">1507</FONT>                    return false;<a name="line.1507"></a>
<FONT color="green">1508</FONT>                }<a name="line.1508"></a>
<FONT color="green">1509</FONT>            }<a name="line.1509"></a>
<FONT color="green">1510</FONT>    <a name="line.1510"></a>
<FONT color="green">1511</FONT>            /**<a name="line.1511"></a>
<FONT color="green">1512</FONT>             * Returns true if we are an excluded segment.<a name="line.1512"></a>
<FONT color="green">1513</FONT>             *<a name="line.1513"></a>
<FONT color="green">1514</FONT>             * @return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.<a name="line.1514"></a>
<FONT color="green">1515</FONT>             */<a name="line.1515"></a>
<FONT color="green">1516</FONT>            public boolean inExcludeSegments() {<a name="line.1516"></a>
<FONT color="green">1517</FONT>                return getSegmentNumberRelativeToGroup()<a name="line.1517"></a>
<FONT color="green">1518</FONT>                        &gt;= SegmentedTimeline.this.segmentsIncluded;<a name="line.1518"></a>
<FONT color="green">1519</FONT>            }<a name="line.1519"></a>
<FONT color="green">1520</FONT>    <a name="line.1520"></a>
<FONT color="green">1521</FONT>            /**<a name="line.1521"></a>
<FONT color="green">1522</FONT>             * Calculate the segment number relative to the segment group. This<a name="line.1522"></a>
<FONT color="green">1523</FONT>             * will be a number between 0 and segmentsGroup-1. This value is<a name="line.1523"></a>
<FONT color="green">1524</FONT>             * calculated from the segmentNumber. Special care is taken for<a name="line.1524"></a>
<FONT color="green">1525</FONT>             * negative segmentNumbers.<a name="line.1525"></a>
<FONT color="green">1526</FONT>             *<a name="line.1526"></a>
<FONT color="green">1527</FONT>             * @return The segment number.<a name="line.1527"></a>
<FONT color="green">1528</FONT>             */<a name="line.1528"></a>
<FONT color="green">1529</FONT>            private long getSegmentNumberRelativeToGroup() {<a name="line.1529"></a>
<FONT color="green">1530</FONT>                long p = (this.segmentNumber<a name="line.1530"></a>
<FONT color="green">1531</FONT>                        % SegmentedTimeline.this.groupSegmentCount);<a name="line.1531"></a>
<FONT color="green">1532</FONT>                if (p &lt; 0) {<a name="line.1532"></a>
<FONT color="green">1533</FONT>                    p += SegmentedTimeline.this.groupSegmentCount;<a name="line.1533"></a>
<FONT color="green">1534</FONT>                }<a name="line.1534"></a>
<FONT color="green">1535</FONT>                return p;<a name="line.1535"></a>
<FONT color="green">1536</FONT>            }<a name="line.1536"></a>
<FONT color="green">1537</FONT>    <a name="line.1537"></a>
<FONT color="green">1538</FONT>            /**<a name="line.1538"></a>
<FONT color="green">1539</FONT>             * Returns true if we are an exception segment. This is implemented via<a name="line.1539"></a>
<FONT color="green">1540</FONT>             * a binary search on the exceptionSegments sorted list.<a name="line.1540"></a>
<FONT color="green">1541</FONT>             *<a name="line.1541"></a>
<FONT color="green">1542</FONT>             * If the segment is not listed as an exception in our list and we have<a name="line.1542"></a>
<FONT color="green">1543</FONT>             * a baseTimeline, a check is performed to see if the segment is inside<a name="line.1543"></a>
<FONT color="green">1544</FONT>             * an excluded segment from our base. If so, it is also considered an<a name="line.1544"></a>
<FONT color="green">1545</FONT>             * exception.<a name="line.1545"></a>
<FONT color="green">1546</FONT>             *<a name="line.1546"></a>
<FONT color="green">1547</FONT>             * @return &lt;code&gt;true&lt;/code&gt; if we are an exception segment.<a name="line.1547"></a>
<FONT color="green">1548</FONT>             */<a name="line.1548"></a>
<FONT color="green">1549</FONT>            public boolean inExceptionSegments() {<a name="line.1549"></a>
<FONT color="green">1550</FONT>                return binarySearchExceptionSegments(this) &gt;= 0;<a name="line.1550"></a>
<FONT color="green">1551</FONT>            }<a name="line.1551"></a>
<FONT color="green">1552</FONT>    <a name="line.1552"></a>
<FONT color="green">1553</FONT>            /**<a name="line.1553"></a>
<FONT color="green">1554</FONT>             * Increments the internal attributes of this segment by a number of<a name="line.1554"></a>
<FONT color="green">1555</FONT>             * segments.<a name="line.1555"></a>
<FONT color="green">1556</FONT>             *<a name="line.1556"></a>
<FONT color="green">1557</FONT>             * @param n Number of segments to increment.<a name="line.1557"></a>
<FONT color="green">1558</FONT>             */<a name="line.1558"></a>
<FONT color="green">1559</FONT>            public void inc(long n) {<a name="line.1559"></a>
<FONT color="green">1560</FONT>                this.segmentNumber += n;<a name="line.1560"></a>
<FONT color="green">1561</FONT>                long m = n * SegmentedTimeline.this.segmentSize;<a name="line.1561"></a>
<FONT color="green">1562</FONT>                this.segmentStart += m;<a name="line.1562"></a>
<FONT color="green">1563</FONT>                this.segmentEnd += m;<a name="line.1563"></a>
<FONT color="green">1564</FONT>                this.millisecond += m;<a name="line.1564"></a>
<FONT color="green">1565</FONT>            }<a name="line.1565"></a>
<FONT color="green">1566</FONT>    <a name="line.1566"></a>
<FONT color="green">1567</FONT>            /**<a name="line.1567"></a>
<FONT color="green">1568</FONT>             * Increments the internal attributes of this segment by one segment.<a name="line.1568"></a>
<FONT color="green">1569</FONT>             * The exact time incremented is segmentSize.<a name="line.1569"></a>
<FONT color="green">1570</FONT>             */<a name="line.1570"></a>
<FONT color="green">1571</FONT>            public void inc() {<a name="line.1571"></a>
<FONT color="green">1572</FONT>                inc(1);<a name="line.1572"></a>
<FONT color="green">1573</FONT>            }<a name="line.1573"></a>
<FONT color="green">1574</FONT>    <a name="line.1574"></a>
<FONT color="green">1575</FONT>            /**<a name="line.1575"></a>
<FONT color="green">1576</FONT>             * Decrements the internal attributes of this segment by a number of<a name="line.1576"></a>
<FONT color="green">1577</FONT>             * segments.<a name="line.1577"></a>
<FONT color="green">1578</FONT>             *<a name="line.1578"></a>
<FONT color="green">1579</FONT>             * @param n Number of segments to decrement.<a name="line.1579"></a>
<FONT color="green">1580</FONT>             */<a name="line.1580"></a>
<FONT color="green">1581</FONT>            public void dec(long n) {<a name="line.1581"></a>
<FONT color="green">1582</FONT>                this.segmentNumber -= n;<a name="line.1582"></a>
<FONT color="green">1583</FONT>                long m = n * SegmentedTimeline.this.segmentSize;<a name="line.1583"></a>
<FONT color="green">1584</FONT>                this.segmentStart -= m;<a name="line.1584"></a>
<FONT color="green">1585</FONT>                this.segmentEnd -= m;<a name="line.1585"></a>
<FONT color="green">1586</FONT>                this.millisecond -= m;<a name="line.1586"></a>
<FONT color="green">1587</FONT>            }<a name="line.1587"></a>
<FONT color="green">1588</FONT>    <a name="line.1588"></a>
<FONT color="green">1589</FONT>            /**<a name="line.1589"></a>
<FONT color="green">1590</FONT>             * Decrements the internal attributes of this segment by one segment.<a name="line.1590"></a>
<FONT color="green">1591</FONT>             * The exact time decremented is segmentSize.<a name="line.1591"></a>
<FONT color="green">1592</FONT>             */<a name="line.1592"></a>
<FONT color="green">1593</FONT>            public void dec() {<a name="line.1593"></a>
<FONT color="green">1594</FONT>                dec(1);<a name="line.1594"></a>
<FONT color="green">1595</FONT>            }<a name="line.1595"></a>
<FONT color="green">1596</FONT>    <a name="line.1596"></a>
<FONT color="green">1597</FONT>            /**<a name="line.1597"></a>
<FONT color="green">1598</FONT>             * Moves the index of this segment to the beginning if the segment.<a name="line.1598"></a>
<FONT color="green">1599</FONT>             */<a name="line.1599"></a>
<FONT color="green">1600</FONT>            public void moveIndexToStart() {<a name="line.1600"></a>
<FONT color="green">1601</FONT>                this.millisecond = this.segmentStart;<a name="line.1601"></a>
<FONT color="green">1602</FONT>            }<a name="line.1602"></a>
<FONT color="green">1603</FONT>    <a name="line.1603"></a>
<FONT color="green">1604</FONT>            /**<a name="line.1604"></a>
<FONT color="green">1605</FONT>             * Moves the index of this segment to the end of the segment.<a name="line.1605"></a>
<FONT color="green">1606</FONT>             */<a name="line.1606"></a>
<FONT color="green">1607</FONT>            public void moveIndexToEnd() {<a name="line.1607"></a>
<FONT color="green">1608</FONT>                this.millisecond = this.segmentEnd;<a name="line.1608"></a>
<FONT color="green">1609</FONT>            }<a name="line.1609"></a>
<FONT color="green">1610</FONT>    <a name="line.1610"></a>
<FONT color="green">1611</FONT>        }<a name="line.1611"></a>
<FONT color="green">1612</FONT>    <a name="line.1612"></a>
<FONT color="green">1613</FONT>        /**<a name="line.1613"></a>
<FONT color="green">1614</FONT>         * Private internal class to represent a range of segments. This class is<a name="line.1614"></a>
<FONT color="green">1615</FONT>         * mainly used to store in one object a range of exception segments. This<a name="line.1615"></a>
<FONT color="green">1616</FONT>         * optimizes certain timelines that use a small segment size (like an<a name="line.1616"></a>
<FONT color="green">1617</FONT>         * intraday timeline) allowing them to express a day exception as one<a name="line.1617"></a>
<FONT color="green">1618</FONT>         * SegmentRange instead of multi Segments.<a name="line.1618"></a>
<FONT color="green">1619</FONT>         */<a name="line.1619"></a>
<FONT color="green">1620</FONT>        protected class SegmentRange extends Segment {<a name="line.1620"></a>
<FONT color="green">1621</FONT>    <a name="line.1621"></a>
<FONT color="green">1622</FONT>            /** The number of segments in the range. */<a name="line.1622"></a>
<FONT color="green">1623</FONT>            private long segmentCount;<a name="line.1623"></a>
<FONT color="green">1624</FONT>    <a name="line.1624"></a>
<FONT color="green">1625</FONT>            /**<a name="line.1625"></a>
<FONT color="green">1626</FONT>             * Creates a SegmentRange between a start and end domain values.<a name="line.1626"></a>
<FONT color="green">1627</FONT>             *<a name="line.1627"></a>
<FONT color="green">1628</FONT>             * @param fromMillisecond  start of the range<a name="line.1628"></a>
<FONT color="green">1629</FONT>             * @param toMillisecond  end of the range<a name="line.1629"></a>
<FONT color="green">1630</FONT>             */<a name="line.1630"></a>
<FONT color="green">1631</FONT>            public SegmentRange(long fromMillisecond, long toMillisecond) {<a name="line.1631"></a>
<FONT color="green">1632</FONT>    <a name="line.1632"></a>
<FONT color="green">1633</FONT>                Segment start = getSegment(fromMillisecond);<a name="line.1633"></a>
<FONT color="green">1634</FONT>                Segment end = getSegment(toMillisecond);<a name="line.1634"></a>
<FONT color="green">1635</FONT>    //            if (start.getSegmentStart() != fromMillisecond<a name="line.1635"></a>
<FONT color="green">1636</FONT>    //                || end.getSegmentEnd() != toMillisecond) {<a name="line.1636"></a>
<FONT color="green">1637</FONT>    //                throw new IllegalArgumentException("Invalid Segment Range ["<a name="line.1637"></a>
<FONT color="green">1638</FONT>    //                    + fromMillisecond + "," + toMillisecond + "]");<a name="line.1638"></a>
<FONT color="green">1639</FONT>    //            }<a name="line.1639"></a>
<FONT color="green">1640</FONT>    <a name="line.1640"></a>
<FONT color="green">1641</FONT>                this.millisecond = fromMillisecond;<a name="line.1641"></a>
<FONT color="green">1642</FONT>                this.segmentNumber = calculateSegmentNumber(fromMillisecond);<a name="line.1642"></a>
<FONT color="green">1643</FONT>                this.segmentStart = start.segmentStart;<a name="line.1643"></a>
<FONT color="green">1644</FONT>                this.segmentEnd = end.segmentEnd;<a name="line.1644"></a>
<FONT color="green">1645</FONT>                this.segmentCount<a name="line.1645"></a>
<FONT color="green">1646</FONT>                    = (end.getSegmentNumber() - start.getSegmentNumber() + 1);<a name="line.1646"></a>
<FONT color="green">1647</FONT>            }<a name="line.1647"></a>
<FONT color="green">1648</FONT>    <a name="line.1648"></a>
<FONT color="green">1649</FONT>            /**<a name="line.1649"></a>
<FONT color="green">1650</FONT>             * Returns the number of segments contained in this range.<a name="line.1650"></a>
<FONT color="green">1651</FONT>             *<a name="line.1651"></a>
<FONT color="green">1652</FONT>             * @return The segment count.<a name="line.1652"></a>
<FONT color="green">1653</FONT>             */<a name="line.1653"></a>
<FONT color="green">1654</FONT>            public long getSegmentCount() {<a name="line.1654"></a>
<FONT color="green">1655</FONT>                return this.segmentCount;<a name="line.1655"></a>
<FONT color="green">1656</FONT>            }<a name="line.1656"></a>
<FONT color="green">1657</FONT>    <a name="line.1657"></a>
<FONT color="green">1658</FONT>            /**<a name="line.1658"></a>
<FONT color="green">1659</FONT>             * Returns a segment that is the intersection of this segment and the<a name="line.1659"></a>
<FONT color="green">1660</FONT>             * interval.<a name="line.1660"></a>
<FONT color="green">1661</FONT>             *<a name="line.1661"></a>
<FONT color="green">1662</FONT>             * @param from  the start of the interval.<a name="line.1662"></a>
<FONT color="green">1663</FONT>             * @param to  the end of the interval.<a name="line.1663"></a>
<FONT color="green">1664</FONT>             *<a name="line.1664"></a>
<FONT color="green">1665</FONT>             * @return The intersection.<a name="line.1665"></a>
<FONT color="green">1666</FONT>             */<a name="line.1666"></a>
<FONT color="green">1667</FONT>            public Segment intersect(long from, long to) {<a name="line.1667"></a>
<FONT color="green">1668</FONT>    <a name="line.1668"></a>
<FONT color="green">1669</FONT>                // Segment fromSegment = getSegment(from);<a name="line.1669"></a>
<FONT color="green">1670</FONT>                // fromSegment.inc();<a name="line.1670"></a>
<FONT color="green">1671</FONT>                // Segment toSegment = getSegment(to);<a name="line.1671"></a>
<FONT color="green">1672</FONT>                // toSegment.dec();<a name="line.1672"></a>
<FONT color="green">1673</FONT>                long start = Math.max(from, this.segmentStart);<a name="line.1673"></a>
<FONT color="green">1674</FONT>                long end = Math.min(to, this.segmentEnd);<a name="line.1674"></a>
<FONT color="green">1675</FONT>                // long start = Math.max(<a name="line.1675"></a>
<FONT color="green">1676</FONT>                //     fromSegment.getSegmentStart(), this.segmentStart<a name="line.1676"></a>
<FONT color="green">1677</FONT>                // );<a name="line.1677"></a>
<FONT color="green">1678</FONT>                // long end = Math.min(toSegment.getSegmentEnd(), this.segmentEnd);<a name="line.1678"></a>
<FONT color="green">1679</FONT>                if (start &lt;= end) {<a name="line.1679"></a>
<FONT color="green">1680</FONT>                    return new SegmentRange(start, end);<a name="line.1680"></a>
<FONT color="green">1681</FONT>                }<a name="line.1681"></a>
<FONT color="green">1682</FONT>                else {<a name="line.1682"></a>
<FONT color="green">1683</FONT>                    return null;<a name="line.1683"></a>
<FONT color="green">1684</FONT>                }<a name="line.1684"></a>
<FONT color="green">1685</FONT>            }<a name="line.1685"></a>
<FONT color="green">1686</FONT>    <a name="line.1686"></a>
<FONT color="green">1687</FONT>            /**<a name="line.1687"></a>
<FONT color="green">1688</FONT>             * Returns true if all Segments of this SegmentRenge are an included<a name="line.1688"></a>
<FONT color="green">1689</FONT>             * segment and are not an exception.<a name="line.1689"></a>
<FONT color="green">1690</FONT>             *<a name="line.1690"></a>
<FONT color="green">1691</FONT>             * @return &lt;code&gt;true&lt;/code&gt; or &lt;/code&gt;false&lt;/code&gt;.<a name="line.1691"></a>
<FONT color="green">1692</FONT>             */<a name="line.1692"></a>
<FONT color="green">1693</FONT>            public boolean inIncludeSegments() {<a name="line.1693"></a>
<FONT color="green">1694</FONT>                for (Segment segment = getSegment(this.segmentStart);<a name="line.1694"></a>
<FONT color="green">1695</FONT>                    segment.getSegmentStart() &lt; this.segmentEnd;<a name="line.1695"></a>
<FONT color="green">1696</FONT>                    segment.inc()) {<a name="line.1696"></a>
<FONT color="green">1697</FONT>                    if (!segment.inIncludeSegments()) {<a name="line.1697"></a>
<FONT color="green">1698</FONT>                        return (false);<a name="line.1698"></a>
<FONT color="green">1699</FONT>                    }<a name="line.1699"></a>
<FONT color="green">1700</FONT>                }<a name="line.1700"></a>
<FONT color="green">1701</FONT>                return true;<a name="line.1701"></a>
<FONT color="green">1702</FONT>            }<a name="line.1702"></a>
<FONT color="green">1703</FONT>    <a name="line.1703"></a>
<FONT color="green">1704</FONT>            /**<a name="line.1704"></a>
<FONT color="green">1705</FONT>             * Returns true if we are an excluded segment.<a name="line.1705"></a>
<FONT color="green">1706</FONT>             *<a name="line.1706"></a>
<FONT color="green">1707</FONT>             * @return &lt;code&gt;true&lt;/code&gt; or &lt;/code&gt;false&lt;/code&gt;.<a name="line.1707"></a>
<FONT color="green">1708</FONT>             */<a name="line.1708"></a>
<FONT color="green">1709</FONT>            public boolean inExcludeSegments() {<a name="line.1709"></a>
<FONT color="green">1710</FONT>                for (Segment segment = getSegment(this.segmentStart);<a name="line.1710"></a>
<FONT color="green">1711</FONT>                    segment.getSegmentStart() &lt; this.segmentEnd;<a name="line.1711"></a>
<FONT color="green">1712</FONT>                    segment.inc()) {<a name="line.1712"></a>
<FONT color="green">1713</FONT>                    if (!segment.inExceptionSegments()) {<a name="line.1713"></a>
<FONT color="green">1714</FONT>                        return (false);<a name="line.1714"></a>
<FONT color="green">1715</FONT>                    }<a name="line.1715"></a>
<FONT color="green">1716</FONT>                }<a name="line.1716"></a>
<FONT color="green">1717</FONT>                return true;<a name="line.1717"></a>
<FONT color="green">1718</FONT>            }<a name="line.1718"></a>
<FONT color="green">1719</FONT>    <a name="line.1719"></a>
<FONT color="green">1720</FONT>            /**<a name="line.1720"></a>
<FONT color="green">1721</FONT>             * Not implemented for SegmentRange. Always throws<a name="line.1721"></a>
<FONT color="green">1722</FONT>             * IllegalArgumentException.<a name="line.1722"></a>
<FONT color="green">1723</FONT>             *<a name="line.1723"></a>
<FONT color="green">1724</FONT>             * @param n Number of segments to increment.<a name="line.1724"></a>
<FONT color="green">1725</FONT>             */<a name="line.1725"></a>
<FONT color="green">1726</FONT>            public void inc(long n) {<a name="line.1726"></a>
<FONT color="green">1727</FONT>                throw new IllegalArgumentException(<a name="line.1727"></a>
<FONT color="green">1728</FONT>                        "Not implemented in SegmentRange");<a name="line.1728"></a>
<FONT color="green">1729</FONT>            }<a name="line.1729"></a>
<FONT color="green">1730</FONT>    <a name="line.1730"></a>
<FONT color="green">1731</FONT>        }<a name="line.1731"></a>
<FONT color="green">1732</FONT>    <a name="line.1732"></a>
<FONT color="green">1733</FONT>        /**<a name="line.1733"></a>
<FONT color="green">1734</FONT>         * Special &lt;code&gt;SegmentRange&lt;/code&gt; that came from the BaseTimeline.<a name="line.1734"></a>
<FONT color="green">1735</FONT>         */<a name="line.1735"></a>
<FONT color="green">1736</FONT>        protected class BaseTimelineSegmentRange extends SegmentRange {<a name="line.1736"></a>
<FONT color="green">1737</FONT>    <a name="line.1737"></a>
<FONT color="green">1738</FONT>            /**<a name="line.1738"></a>
<FONT color="green">1739</FONT>             * Constructor.<a name="line.1739"></a>
<FONT color="green">1740</FONT>             *<a name="line.1740"></a>
<FONT color="green">1741</FONT>             * @param fromDomainValue  the start value.<a name="line.1741"></a>
<FONT color="green">1742</FONT>             * @param toDomainValue  the end value.<a name="line.1742"></a>
<FONT color="green">1743</FONT>             */<a name="line.1743"></a>
<FONT color="green">1744</FONT>            public BaseTimelineSegmentRange(long fromDomainValue,<a name="line.1744"></a>
<FONT color="green">1745</FONT>                                            long toDomainValue) {<a name="line.1745"></a>
<FONT color="green">1746</FONT>                super(fromDomainValue, toDomainValue);<a name="line.1746"></a>
<FONT color="green">1747</FONT>            }<a name="line.1747"></a>
<FONT color="green">1748</FONT>    <a name="line.1748"></a>
<FONT color="green">1749</FONT>        }<a name="line.1749"></a>
<FONT color="green">1750</FONT>    <a name="line.1750"></a>
<FONT color="green">1751</FONT>    }<a name="line.1751"></a>




























































</PRE>
</BODY>
</HTML>
