<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ===========================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JFreeChart : a free chart library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ===========================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     *<a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jfreechart/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it<a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by<a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or<a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but<a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY<a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public<a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,<a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.<a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc.<a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     *<a name="line.26"></a>
<FONT color="green">027</FONT>     * -----------------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * GradientBarPainter.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * -----------------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C) Copyright 2008, by Object Refinery Limited.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  David Gilbert (for Object Refinery Limited);<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   -;<a name="line.33"></a>
<FONT color="green">034</FONT>     *<a name="line.34"></a>
<FONT color="green">035</FONT>     * Changes:<a name="line.35"></a>
<FONT color="green">036</FONT>     * --------<a name="line.36"></a>
<FONT color="green">037</FONT>     * 19-Jun-2008 : Version 1 (DG);<a name="line.37"></a>
<FONT color="green">038</FONT>     * 15-Aug-2008 : Use outline paint and shadow paint (DG);<a name="line.38"></a>
<FONT color="green">039</FONT>     *<a name="line.39"></a>
<FONT color="green">040</FONT>     */<a name="line.40"></a>
<FONT color="green">041</FONT>    <a name="line.41"></a>
<FONT color="green">042</FONT>    package org.jfree.chart.renderer.category;<a name="line.42"></a>
<FONT color="green">043</FONT>    <a name="line.43"></a>
<FONT color="green">044</FONT>    import java.awt.Color;<a name="line.44"></a>
<FONT color="green">045</FONT>    import java.awt.GradientPaint;<a name="line.45"></a>
<FONT color="green">046</FONT>    import java.awt.Graphics2D;<a name="line.46"></a>
<FONT color="green">047</FONT>    import java.awt.Paint;<a name="line.47"></a>
<FONT color="green">048</FONT>    import java.awt.Stroke;<a name="line.48"></a>
<FONT color="green">049</FONT>    import java.awt.geom.Rectangle2D;<a name="line.49"></a>
<FONT color="green">050</FONT>    import java.awt.geom.RectangularShape;<a name="line.50"></a>
<FONT color="green">051</FONT>    import java.io.Serializable;<a name="line.51"></a>
<FONT color="green">052</FONT>    <a name="line.52"></a>
<FONT color="green">053</FONT>    import org.jfree.chart.HashUtilities;<a name="line.53"></a>
<FONT color="green">054</FONT>    import org.jfree.ui.RectangleEdge;<a name="line.54"></a>
<FONT color="green">055</FONT>    <a name="line.55"></a>
<FONT color="green">056</FONT>    /**<a name="line.56"></a>
<FONT color="green">057</FONT>     * An implementation of the {@link BarPainter} interface that uses several<a name="line.57"></a>
<FONT color="green">058</FONT>     * gradient fills to enrich the appearance of the bars.<a name="line.58"></a>
<FONT color="green">059</FONT>     *<a name="line.59"></a>
<FONT color="green">060</FONT>     * @since 1.0.11<a name="line.60"></a>
<FONT color="green">061</FONT>     */<a name="line.61"></a>
<FONT color="green">062</FONT>    public class GradientBarPainter implements BarPainter, Serializable {<a name="line.62"></a>
<FONT color="green">063</FONT>    <a name="line.63"></a>
<FONT color="green">064</FONT>        /** The division point between the first and second gradient regions. */<a name="line.64"></a>
<FONT color="green">065</FONT>        private double g1;<a name="line.65"></a>
<FONT color="green">066</FONT>    <a name="line.66"></a>
<FONT color="green">067</FONT>        /** The division point between the second and third gradient regions. */<a name="line.67"></a>
<FONT color="green">068</FONT>        private double g2;<a name="line.68"></a>
<FONT color="green">069</FONT>    <a name="line.69"></a>
<FONT color="green">070</FONT>        /** The division point between the third and fourth gradient regions. */<a name="line.70"></a>
<FONT color="green">071</FONT>        private double g3;<a name="line.71"></a>
<FONT color="green">072</FONT>    <a name="line.72"></a>
<FONT color="green">073</FONT>        /**<a name="line.73"></a>
<FONT color="green">074</FONT>         * Creates a new instance.<a name="line.74"></a>
<FONT color="green">075</FONT>         */<a name="line.75"></a>
<FONT color="green">076</FONT>        public GradientBarPainter() {<a name="line.76"></a>
<FONT color="green">077</FONT>            this(0.10, 0.20, 0.80);<a name="line.77"></a>
<FONT color="green">078</FONT>        }<a name="line.78"></a>
<FONT color="green">079</FONT>    <a name="line.79"></a>
<FONT color="green">080</FONT>        /**<a name="line.80"></a>
<FONT color="green">081</FONT>         * Creates a new instance.<a name="line.81"></a>
<FONT color="green">082</FONT>         *<a name="line.82"></a>
<FONT color="green">083</FONT>         * @param g1<a name="line.83"></a>
<FONT color="green">084</FONT>         * @param g2<a name="line.84"></a>
<FONT color="green">085</FONT>         * @param g3<a name="line.85"></a>
<FONT color="green">086</FONT>         */<a name="line.86"></a>
<FONT color="green">087</FONT>        public GradientBarPainter(double g1, double g2, double g3) {<a name="line.87"></a>
<FONT color="green">088</FONT>            this.g1 = g1;<a name="line.88"></a>
<FONT color="green">089</FONT>            this.g2 = g2;<a name="line.89"></a>
<FONT color="green">090</FONT>            this.g3 = g3;<a name="line.90"></a>
<FONT color="green">091</FONT>        }<a name="line.91"></a>
<FONT color="green">092</FONT>    <a name="line.92"></a>
<FONT color="green">093</FONT>        /**<a name="line.93"></a>
<FONT color="green">094</FONT>         * Paints a single bar instance.<a name="line.94"></a>
<FONT color="green">095</FONT>         *<a name="line.95"></a>
<FONT color="green">096</FONT>         * @param g2  the graphics target.<a name="line.96"></a>
<FONT color="green">097</FONT>         * @param renderer  the renderer.<a name="line.97"></a>
<FONT color="green">098</FONT>         * @param row  the row index.<a name="line.98"></a>
<FONT color="green">099</FONT>         * @param column  the column index.<a name="line.99"></a>
<FONT color="green">100</FONT>         * @param bar  the bar<a name="line.100"></a>
<FONT color="green">101</FONT>         * @param base  indicates which side of the rectangle is the base of the<a name="line.101"></a>
<FONT color="green">102</FONT>         *              bar.<a name="line.102"></a>
<FONT color="green">103</FONT>         */<a name="line.103"></a>
<FONT color="green">104</FONT>        public void paintBar(Graphics2D g2, BarRenderer renderer, int row,<a name="line.104"></a>
<FONT color="green">105</FONT>                int column, RectangularShape bar, RectangleEdge base) {<a name="line.105"></a>
<FONT color="green">106</FONT>    <a name="line.106"></a>
<FONT color="green">107</FONT>            Paint itemPaint = renderer.getItemPaint(row, column);<a name="line.107"></a>
<FONT color="green">108</FONT>    <a name="line.108"></a>
<FONT color="green">109</FONT>            Color c0, c1;<a name="line.109"></a>
<FONT color="green">110</FONT>            if (itemPaint instanceof Color) {<a name="line.110"></a>
<FONT color="green">111</FONT>                c0 = (Color) itemPaint;<a name="line.111"></a>
<FONT color="green">112</FONT>                c1 = c0.brighter();<a name="line.112"></a>
<FONT color="green">113</FONT>            }<a name="line.113"></a>
<FONT color="green">114</FONT>            else if (itemPaint instanceof GradientPaint) {<a name="line.114"></a>
<FONT color="green">115</FONT>                GradientPaint gp = (GradientPaint) itemPaint;<a name="line.115"></a>
<FONT color="green">116</FONT>                c0 = gp.getColor1();<a name="line.116"></a>
<FONT color="green">117</FONT>                c1 = gp.getColor2();<a name="line.117"></a>
<FONT color="green">118</FONT>            }<a name="line.118"></a>
<FONT color="green">119</FONT>            else {<a name="line.119"></a>
<FONT color="green">120</FONT>                c0 = Color.blue;<a name="line.120"></a>
<FONT color="green">121</FONT>                c1 = Color.blue.brighter();<a name="line.121"></a>
<FONT color="green">122</FONT>            }<a name="line.122"></a>
<FONT color="green">123</FONT>    <a name="line.123"></a>
<FONT color="green">124</FONT>            // as a special case, if the bar colour has alpha == 0, we draw<a name="line.124"></a>
<FONT color="green">125</FONT>            // nothing.<a name="line.125"></a>
<FONT color="green">126</FONT>            if (c0.getAlpha() == 0) {<a name="line.126"></a>
<FONT color="green">127</FONT>                return;<a name="line.127"></a>
<FONT color="green">128</FONT>            }<a name="line.128"></a>
<FONT color="green">129</FONT>    <a name="line.129"></a>
<FONT color="green">130</FONT>            if (base == RectangleEdge.TOP || base == RectangleEdge.BOTTOM) {<a name="line.130"></a>
<FONT color="green">131</FONT>                Rectangle2D[] regions = splitVerticalBar(bar, this.g1, this.g2,<a name="line.131"></a>
<FONT color="green">132</FONT>                        this.g3);<a name="line.132"></a>
<FONT color="green">133</FONT>                GradientPaint gp = new GradientPaint((float) regions[0].getMinX(),<a name="line.133"></a>
<FONT color="green">134</FONT>                        0.0f, c0, (float) regions[0].getMaxX(), 0.0f, Color.white);<a name="line.134"></a>
<FONT color="green">135</FONT>                g2.setPaint(gp);<a name="line.135"></a>
<FONT color="green">136</FONT>                g2.fill(regions[0]);<a name="line.136"></a>
<FONT color="green">137</FONT>    <a name="line.137"></a>
<FONT color="green">138</FONT>                gp = new GradientPaint((float) regions[1].getMinX(), 0.0f,<a name="line.138"></a>
<FONT color="green">139</FONT>                        Color.white, (float) regions[1].getMaxX(), 0.0f, c0);<a name="line.139"></a>
<FONT color="green">140</FONT>                g2.setPaint(gp);<a name="line.140"></a>
<FONT color="green">141</FONT>                g2.fill(regions[1]);<a name="line.141"></a>
<FONT color="green">142</FONT>    <a name="line.142"></a>
<FONT color="green">143</FONT>                gp = new GradientPaint((float) regions[2].getMinX(), 0.0f, c0,<a name="line.143"></a>
<FONT color="green">144</FONT>                        (float) regions[2].getMaxX(), 0.0f, c1);<a name="line.144"></a>
<FONT color="green">145</FONT>                g2.setPaint(gp);<a name="line.145"></a>
<FONT color="green">146</FONT>                g2.fill(regions[2]);<a name="line.146"></a>
<FONT color="green">147</FONT>    <a name="line.147"></a>
<FONT color="green">148</FONT>                gp = new GradientPaint((float) regions[3].getMinX(), 0.0f, c1,<a name="line.148"></a>
<FONT color="green">149</FONT>                         (float) regions[3].getMaxX(), 0.0f, c0);<a name="line.149"></a>
<FONT color="green">150</FONT>                g2.setPaint(gp);<a name="line.150"></a>
<FONT color="green">151</FONT>                g2.fill(regions[3]);<a name="line.151"></a>
<FONT color="green">152</FONT>            }<a name="line.152"></a>
<FONT color="green">153</FONT>            else if (base == RectangleEdge.LEFT || base == RectangleEdge.RIGHT) {<a name="line.153"></a>
<FONT color="green">154</FONT>                Rectangle2D[] regions = splitHorizontalBar(bar, this.g1, this.g2,<a name="line.154"></a>
<FONT color="green">155</FONT>                        this.g3);<a name="line.155"></a>
<FONT color="green">156</FONT>                GradientPaint gp = new GradientPaint(0.0f,<a name="line.156"></a>
<FONT color="green">157</FONT>                        (float) regions[0].getMinY(), c0, 0.0f,<a name="line.157"></a>
<FONT color="green">158</FONT>                        (float) regions[0].getMaxX(), Color.white);<a name="line.158"></a>
<FONT color="green">159</FONT>                g2.setPaint(gp);<a name="line.159"></a>
<FONT color="green">160</FONT>                g2.fill(regions[0]);<a name="line.160"></a>
<FONT color="green">161</FONT>    <a name="line.161"></a>
<FONT color="green">162</FONT>                gp = new GradientPaint(0.0f, (float) regions[1].getMinY(),<a name="line.162"></a>
<FONT color="green">163</FONT>                        Color.white, 0.0f, (float) regions[1].getMaxY(), c0);<a name="line.163"></a>
<FONT color="green">164</FONT>                g2.setPaint(gp);<a name="line.164"></a>
<FONT color="green">165</FONT>                g2.fill(regions[1]);<a name="line.165"></a>
<FONT color="green">166</FONT>    <a name="line.166"></a>
<FONT color="green">167</FONT>                gp = new GradientPaint(0.0f, (float) regions[2].getMinY(), c0,<a name="line.167"></a>
<FONT color="green">168</FONT>                        0.0f, (float) regions[2].getMaxY(), c1);<a name="line.168"></a>
<FONT color="green">169</FONT>                g2.setPaint(gp);<a name="line.169"></a>
<FONT color="green">170</FONT>                g2.fill(regions[2]);<a name="line.170"></a>
<FONT color="green">171</FONT>    <a name="line.171"></a>
<FONT color="green">172</FONT>                gp = new GradientPaint(0.0f, (float) regions[3].getMinY(), c1,<a name="line.172"></a>
<FONT color="green">173</FONT>                         0.0f, (float) regions[3].getMaxY(), c0);<a name="line.173"></a>
<FONT color="green">174</FONT>                g2.setPaint(gp);<a name="line.174"></a>
<FONT color="green">175</FONT>                g2.fill(regions[3]);<a name="line.175"></a>
<FONT color="green">176</FONT>    <a name="line.176"></a>
<FONT color="green">177</FONT>            }<a name="line.177"></a>
<FONT color="green">178</FONT>    <a name="line.178"></a>
<FONT color="green">179</FONT>            // draw the outline...<a name="line.179"></a>
<FONT color="green">180</FONT>            if (renderer.isDrawBarOutline()<a name="line.180"></a>
<FONT color="green">181</FONT>                /*&amp;&amp; state.getBarWidth() &gt; renderer.BAR_OUTLINE_WIDTH_THRESHOLD*/) {<a name="line.181"></a>
<FONT color="green">182</FONT>                Stroke stroke = renderer.getItemOutlineStroke(row, column);<a name="line.182"></a>
<FONT color="green">183</FONT>                Paint paint = renderer.getItemOutlinePaint(row, column);<a name="line.183"></a>
<FONT color="green">184</FONT>                if (stroke != null &amp;&amp; paint != null) {<a name="line.184"></a>
<FONT color="green">185</FONT>                    g2.setStroke(stroke);<a name="line.185"></a>
<FONT color="green">186</FONT>                    g2.setPaint(paint);<a name="line.186"></a>
<FONT color="green">187</FONT>                    g2.draw(bar);<a name="line.187"></a>
<FONT color="green">188</FONT>                }<a name="line.188"></a>
<FONT color="green">189</FONT>            }<a name="line.189"></a>
<FONT color="green">190</FONT>    <a name="line.190"></a>
<FONT color="green">191</FONT>        }<a name="line.191"></a>
<FONT color="green">192</FONT>    <a name="line.192"></a>
<FONT color="green">193</FONT>        /**<a name="line.193"></a>
<FONT color="green">194</FONT>         * Paints a single bar instance.<a name="line.194"></a>
<FONT color="green">195</FONT>         *<a name="line.195"></a>
<FONT color="green">196</FONT>         * @param g2  the graphics target.<a name="line.196"></a>
<FONT color="green">197</FONT>         * @param renderer  the renderer.<a name="line.197"></a>
<FONT color="green">198</FONT>         * @param row  the row index.<a name="line.198"></a>
<FONT color="green">199</FONT>         * @param column  the column index.<a name="line.199"></a>
<FONT color="green">200</FONT>         * @param bar  the bar<a name="line.200"></a>
<FONT color="green">201</FONT>         * @param base  indicates which side of the rectangle is the base of the<a name="line.201"></a>
<FONT color="green">202</FONT>         *              bar.<a name="line.202"></a>
<FONT color="green">203</FONT>         * @param pegShadow  peg the shadow to the base of the bar?<a name="line.203"></a>
<FONT color="green">204</FONT>         */<a name="line.204"></a>
<FONT color="green">205</FONT>        public void paintBarShadow(Graphics2D g2, BarRenderer renderer, int row,<a name="line.205"></a>
<FONT color="green">206</FONT>                int column, RectangularShape bar, RectangleEdge base,<a name="line.206"></a>
<FONT color="green">207</FONT>                boolean pegShadow) {<a name="line.207"></a>
<FONT color="green">208</FONT>    <a name="line.208"></a>
<FONT color="green">209</FONT>            // handle a special case - if the bar colour has alpha == 0, it is<a name="line.209"></a>
<FONT color="green">210</FONT>            // invisible so we shouldn't draw any shadow<a name="line.210"></a>
<FONT color="green">211</FONT>            Paint itemPaint = renderer.getItemPaint(row, column);<a name="line.211"></a>
<FONT color="green">212</FONT>            if (itemPaint instanceof Color) {<a name="line.212"></a>
<FONT color="green">213</FONT>                Color c = (Color) itemPaint;<a name="line.213"></a>
<FONT color="green">214</FONT>                if (c.getAlpha() == 0) {<a name="line.214"></a>
<FONT color="green">215</FONT>                    return;<a name="line.215"></a>
<FONT color="green">216</FONT>                }<a name="line.216"></a>
<FONT color="green">217</FONT>            }<a name="line.217"></a>
<FONT color="green">218</FONT>    <a name="line.218"></a>
<FONT color="green">219</FONT>            RectangularShape shadow = createShadow(bar, renderer.getShadowXOffset(),<a name="line.219"></a>
<FONT color="green">220</FONT>                    renderer.getShadowYOffset(), base, pegShadow);<a name="line.220"></a>
<FONT color="green">221</FONT>            g2.setPaint(renderer.getShadowPaint());<a name="line.221"></a>
<FONT color="green">222</FONT>            g2.fill(shadow);<a name="line.222"></a>
<FONT color="green">223</FONT>    <a name="line.223"></a>
<FONT color="green">224</FONT>        }<a name="line.224"></a>
<FONT color="green">225</FONT>    <a name="line.225"></a>
<FONT color="green">226</FONT>        /**<a name="line.226"></a>
<FONT color="green">227</FONT>         * Creates a shadow for the bar.<a name="line.227"></a>
<FONT color="green">228</FONT>         *<a name="line.228"></a>
<FONT color="green">229</FONT>         * @param bar  the bar shape.<a name="line.229"></a>
<FONT color="green">230</FONT>         * @param xOffset  the x-offset for the shadow.<a name="line.230"></a>
<FONT color="green">231</FONT>         * @param yOffset  the y-offset for the shadow.<a name="line.231"></a>
<FONT color="green">232</FONT>         * @param base  the edge that is the base of the bar.<a name="line.232"></a>
<FONT color="green">233</FONT>         * @param pegShadow  peg the shadow to the base?<a name="line.233"></a>
<FONT color="green">234</FONT>         *<a name="line.234"></a>
<FONT color="green">235</FONT>         * @return A rectangle for the shadow.<a name="line.235"></a>
<FONT color="green">236</FONT>         */<a name="line.236"></a>
<FONT color="green">237</FONT>        private Rectangle2D createShadow(RectangularShape bar, double xOffset,<a name="line.237"></a>
<FONT color="green">238</FONT>                double yOffset, RectangleEdge base, boolean pegShadow) {<a name="line.238"></a>
<FONT color="green">239</FONT>            double x0 = bar.getMinX();<a name="line.239"></a>
<FONT color="green">240</FONT>            double x1 = bar.getMaxX();<a name="line.240"></a>
<FONT color="green">241</FONT>            double y0 = bar.getMinY();<a name="line.241"></a>
<FONT color="green">242</FONT>            double y1 = bar.getMaxY();<a name="line.242"></a>
<FONT color="green">243</FONT>            if (base == RectangleEdge.TOP) {<a name="line.243"></a>
<FONT color="green">244</FONT>                x0 += xOffset;<a name="line.244"></a>
<FONT color="green">245</FONT>                x1 += xOffset;<a name="line.245"></a>
<FONT color="green">246</FONT>                if (!pegShadow) {<a name="line.246"></a>
<FONT color="green">247</FONT>                    y0 += yOffset;<a name="line.247"></a>
<FONT color="green">248</FONT>                }<a name="line.248"></a>
<FONT color="green">249</FONT>                y1 += yOffset;<a name="line.249"></a>
<FONT color="green">250</FONT>            }<a name="line.250"></a>
<FONT color="green">251</FONT>            else if (base == RectangleEdge.BOTTOM) {<a name="line.251"></a>
<FONT color="green">252</FONT>                x0 += xOffset;<a name="line.252"></a>
<FONT color="green">253</FONT>                x1 += xOffset;<a name="line.253"></a>
<FONT color="green">254</FONT>                y0 += yOffset;<a name="line.254"></a>
<FONT color="green">255</FONT>                if (!pegShadow) {<a name="line.255"></a>
<FONT color="green">256</FONT>                    y1 += yOffset;<a name="line.256"></a>
<FONT color="green">257</FONT>                }<a name="line.257"></a>
<FONT color="green">258</FONT>            }<a name="line.258"></a>
<FONT color="green">259</FONT>            else if (base == RectangleEdge.LEFT) {<a name="line.259"></a>
<FONT color="green">260</FONT>                if (!pegShadow) {<a name="line.260"></a>
<FONT color="green">261</FONT>                    x0 += xOffset;<a name="line.261"></a>
<FONT color="green">262</FONT>                }<a name="line.262"></a>
<FONT color="green">263</FONT>                x1 += xOffset;<a name="line.263"></a>
<FONT color="green">264</FONT>                y0 += yOffset;<a name="line.264"></a>
<FONT color="green">265</FONT>                y1 += yOffset;<a name="line.265"></a>
<FONT color="green">266</FONT>            }<a name="line.266"></a>
<FONT color="green">267</FONT>            else if (base == RectangleEdge.RIGHT) {<a name="line.267"></a>
<FONT color="green">268</FONT>                x0 += xOffset;<a name="line.268"></a>
<FONT color="green">269</FONT>                if (!pegShadow) {<a name="line.269"></a>
<FONT color="green">270</FONT>                    x1 += xOffset;<a name="line.270"></a>
<FONT color="green">271</FONT>                }<a name="line.271"></a>
<FONT color="green">272</FONT>                y0 += yOffset;<a name="line.272"></a>
<FONT color="green">273</FONT>                y1 += yOffset;<a name="line.273"></a>
<FONT color="green">274</FONT>            }<a name="line.274"></a>
<FONT color="green">275</FONT>            return new Rectangle2D.Double(x0, y0, (x1 - x0), (y1 - y0));<a name="line.275"></a>
<FONT color="green">276</FONT>        }<a name="line.276"></a>
<FONT color="green">277</FONT>    <a name="line.277"></a>
<FONT color="green">278</FONT>        /**<a name="line.278"></a>
<FONT color="green">279</FONT>         * Splits a bar into subregions (elsewhere, these subregions will have<a name="line.279"></a>
<FONT color="green">280</FONT>         * different gradients applied to them).<a name="line.280"></a>
<FONT color="green">281</FONT>         *<a name="line.281"></a>
<FONT color="green">282</FONT>         * @param bar  the bar shape.<a name="line.282"></a>
<FONT color="green">283</FONT>         * @param a  the first division.<a name="line.283"></a>
<FONT color="green">284</FONT>         * @param b  the second division.<a name="line.284"></a>
<FONT color="green">285</FONT>         * @param c  the third division.<a name="line.285"></a>
<FONT color="green">286</FONT>         *<a name="line.286"></a>
<FONT color="green">287</FONT>         * @return An array containing four subregions.<a name="line.287"></a>
<FONT color="green">288</FONT>         */<a name="line.288"></a>
<FONT color="green">289</FONT>        private Rectangle2D[] splitVerticalBar(RectangularShape bar, double a,<a name="line.289"></a>
<FONT color="green">290</FONT>                double b, double c) {<a name="line.290"></a>
<FONT color="green">291</FONT>            Rectangle2D[] result = new Rectangle2D[4];<a name="line.291"></a>
<FONT color="green">292</FONT>            double x0 = bar.getMinX();<a name="line.292"></a>
<FONT color="green">293</FONT>            double x1 = Math.rint(x0 + (bar.getWidth() * a));<a name="line.293"></a>
<FONT color="green">294</FONT>            double x2 = Math.rint(x0 + (bar.getWidth() * b));<a name="line.294"></a>
<FONT color="green">295</FONT>            double x3 = Math.rint(x0 + (bar.getWidth() * c));<a name="line.295"></a>
<FONT color="green">296</FONT>            result[0] = new Rectangle2D.Double(bar.getMinX(), bar.getMinY(),<a name="line.296"></a>
<FONT color="green">297</FONT>                    x1 - x0, bar.getHeight());<a name="line.297"></a>
<FONT color="green">298</FONT>            result[1] = new Rectangle2D.Double(x1, bar.getMinY(), x2 - x1,<a name="line.298"></a>
<FONT color="green">299</FONT>                    bar.getHeight());<a name="line.299"></a>
<FONT color="green">300</FONT>            result[2] = new Rectangle2D.Double(x2, bar.getMinY(), x3 - x2,<a name="line.300"></a>
<FONT color="green">301</FONT>                    bar.getHeight());<a name="line.301"></a>
<FONT color="green">302</FONT>            result[3] = new Rectangle2D.Double(x3, bar.getMinY(),<a name="line.302"></a>
<FONT color="green">303</FONT>                    bar.getMaxX() - x3, bar.getHeight());<a name="line.303"></a>
<FONT color="green">304</FONT>            return result;<a name="line.304"></a>
<FONT color="green">305</FONT>        }<a name="line.305"></a>
<FONT color="green">306</FONT>    <a name="line.306"></a>
<FONT color="green">307</FONT>        /**<a name="line.307"></a>
<FONT color="green">308</FONT>         * Splits a bar into subregions (elsewhere, these subregions will have<a name="line.308"></a>
<FONT color="green">309</FONT>         * different gradients applied to them).<a name="line.309"></a>
<FONT color="green">310</FONT>         *<a name="line.310"></a>
<FONT color="green">311</FONT>         * @param bar  the bar shape.<a name="line.311"></a>
<FONT color="green">312</FONT>         * @param a  the first division.<a name="line.312"></a>
<FONT color="green">313</FONT>         * @param b  the second division.<a name="line.313"></a>
<FONT color="green">314</FONT>         * @param c  the third division.<a name="line.314"></a>
<FONT color="green">315</FONT>         *<a name="line.315"></a>
<FONT color="green">316</FONT>         * @return An array containing four subregions.<a name="line.316"></a>
<FONT color="green">317</FONT>         */<a name="line.317"></a>
<FONT color="green">318</FONT>        private Rectangle2D[] splitHorizontalBar(RectangularShape bar, double a,<a name="line.318"></a>
<FONT color="green">319</FONT>                double b, double c) {<a name="line.319"></a>
<FONT color="green">320</FONT>            Rectangle2D[] result = new Rectangle2D[4];<a name="line.320"></a>
<FONT color="green">321</FONT>            double y0 = bar.getMinY();<a name="line.321"></a>
<FONT color="green">322</FONT>            double y1 = Math.rint(y0 + (bar.getHeight() * a));<a name="line.322"></a>
<FONT color="green">323</FONT>            double y2 = Math.rint(y0 + (bar.getHeight() * b));<a name="line.323"></a>
<FONT color="green">324</FONT>            double y3 = Math.rint(y0 + (bar.getHeight() * c));<a name="line.324"></a>
<FONT color="green">325</FONT>            result[0] = new Rectangle2D.Double(bar.getMinX(), bar.getMinY(),<a name="line.325"></a>
<FONT color="green">326</FONT>                    bar.getWidth(), y1 - y0);<a name="line.326"></a>
<FONT color="green">327</FONT>            result[1] = new Rectangle2D.Double(bar.getMinX(), y1, bar.getWidth(),<a name="line.327"></a>
<FONT color="green">328</FONT>                    y2 - y1);<a name="line.328"></a>
<FONT color="green">329</FONT>            result[2] = new Rectangle2D.Double(bar.getMinX(), y2, bar.getWidth(),<a name="line.329"></a>
<FONT color="green">330</FONT>                    y3 - y2);<a name="line.330"></a>
<FONT color="green">331</FONT>            result[3] = new Rectangle2D.Double(bar.getMinX(), y3, bar.getWidth(),<a name="line.331"></a>
<FONT color="green">332</FONT>                    bar.getMaxY() - y3);<a name="line.332"></a>
<FONT color="green">333</FONT>            return result;<a name="line.333"></a>
<FONT color="green">334</FONT>        }<a name="line.334"></a>
<FONT color="green">335</FONT>    <a name="line.335"></a>
<FONT color="green">336</FONT>        /**<a name="line.336"></a>
<FONT color="green">337</FONT>         * Tests this instance for equality with an arbitrary object.<a name="line.337"></a>
<FONT color="green">338</FONT>         *<a name="line.338"></a>
<FONT color="green">339</FONT>         * @param obj  the obj (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.339"></a>
<FONT color="green">340</FONT>         *<a name="line.340"></a>
<FONT color="green">341</FONT>         * @return A boolean.<a name="line.341"></a>
<FONT color="green">342</FONT>         */<a name="line.342"></a>
<FONT color="green">343</FONT>        public boolean equals(Object obj) {<a name="line.343"></a>
<FONT color="green">344</FONT>            if (obj == this) {<a name="line.344"></a>
<FONT color="green">345</FONT>                return true;<a name="line.345"></a>
<FONT color="green">346</FONT>            }<a name="line.346"></a>
<FONT color="green">347</FONT>            if (!(obj instanceof GradientBarPainter)) {<a name="line.347"></a>
<FONT color="green">348</FONT>                return false;<a name="line.348"></a>
<FONT color="green">349</FONT>            }<a name="line.349"></a>
<FONT color="green">350</FONT>            GradientBarPainter that = (GradientBarPainter) obj;<a name="line.350"></a>
<FONT color="green">351</FONT>            if (this.g1 != that.g1) {<a name="line.351"></a>
<FONT color="green">352</FONT>                return false;<a name="line.352"></a>
<FONT color="green">353</FONT>            }<a name="line.353"></a>
<FONT color="green">354</FONT>            if (this.g2 != that.g2) {<a name="line.354"></a>
<FONT color="green">355</FONT>                return false;<a name="line.355"></a>
<FONT color="green">356</FONT>            }<a name="line.356"></a>
<FONT color="green">357</FONT>            if (this.g3 != that.g3) {<a name="line.357"></a>
<FONT color="green">358</FONT>                return false;<a name="line.358"></a>
<FONT color="green">359</FONT>            }<a name="line.359"></a>
<FONT color="green">360</FONT>            return true;<a name="line.360"></a>
<FONT color="green">361</FONT>        }<a name="line.361"></a>
<FONT color="green">362</FONT>    <a name="line.362"></a>
<FONT color="green">363</FONT>        /**<a name="line.363"></a>
<FONT color="green">364</FONT>         * Returns a hash code for this instance.<a name="line.364"></a>
<FONT color="green">365</FONT>         *<a name="line.365"></a>
<FONT color="green">366</FONT>         * @return A hash code.<a name="line.366"></a>
<FONT color="green">367</FONT>         */<a name="line.367"></a>
<FONT color="green">368</FONT>        public int hashCode() {<a name="line.368"></a>
<FONT color="green">369</FONT>            int hash = 37;<a name="line.369"></a>
<FONT color="green">370</FONT>            hash = HashUtilities.hashCode(hash, this.g1);<a name="line.370"></a>
<FONT color="green">371</FONT>            hash = HashUtilities.hashCode(hash, this.g2);<a name="line.371"></a>
<FONT color="green">372</FONT>            hash = HashUtilities.hashCode(hash, this.g3);<a name="line.372"></a>
<FONT color="green">373</FONT>            return hash;<a name="line.373"></a>
<FONT color="green">374</FONT>        }<a name="line.374"></a>
<FONT color="green">375</FONT>    <a name="line.375"></a>
<FONT color="green">376</FONT>    }<a name="line.376"></a>




























































</PRE>
</BODY>
</HTML>
