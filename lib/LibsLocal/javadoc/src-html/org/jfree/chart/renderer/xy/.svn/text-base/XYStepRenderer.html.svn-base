<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ===========================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JFreeChart : a free chart library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ===========================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2009, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     *<a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jfreechart/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it<a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by<a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or<a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but<a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY<a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public<a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,<a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.<a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc.<a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     *<a name="line.26"></a>
<FONT color="green">027</FONT>     * -------------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * XYStepRenderer.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * -------------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C) Copyright 2002-2009, by Roger Studner and Contributors.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  Roger Studner;<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   David Gilbert (for Object Refinery Limited);<a name="line.33"></a>
<FONT color="green">034</FONT>     *                   Matthias Rose;<a name="line.34"></a>
<FONT color="green">035</FONT>     *                   Gerald Struck (fix for bug 1569094);<a name="line.35"></a>
<FONT color="green">036</FONT>     *                   Ulrich Voigt (patch 1874890);<a name="line.36"></a>
<FONT color="green">037</FONT>     *                   Martin Hoeller (contribution to patch 1874890);<a name="line.37"></a>
<FONT color="green">038</FONT>     *<a name="line.38"></a>
<FONT color="green">039</FONT>     * Changes<a name="line.39"></a>
<FONT color="green">040</FONT>     * -------<a name="line.40"></a>
<FONT color="green">041</FONT>     * 13-May-2002 : Version 1, contributed by Roger Studner (DG);<a name="line.41"></a>
<FONT color="green">042</FONT>     * 25-Jun-2002 : Updated import statements (DG);<a name="line.42"></a>
<FONT color="green">043</FONT>     * 22-Jul-2002 : Added check for null data items (DG);<a name="line.43"></a>
<FONT color="green">044</FONT>     * 25-Mar-2003 : Implemented Serializable (DG);<a name="line.44"></a>
<FONT color="green">045</FONT>     * 01-May-2003 : Modified drawItem() method signature (DG);<a name="line.45"></a>
<FONT color="green">046</FONT>     * 20-Aug-2003 : Implemented Cloneable and PublicCloneable (DG);<a name="line.46"></a>
<FONT color="green">047</FONT>     * 16-Sep-2003 : Changed ChartRenderingInfo --&gt; PlotRenderingInfo (DG);<a name="line.47"></a>
<FONT color="green">048</FONT>     * 28-Oct-2003 : Added tooltips, code contributed by Matthias Rose<a name="line.48"></a>
<FONT color="green">049</FONT>     *               (RFE 824857) (DG);<a name="line.49"></a>
<FONT color="green">050</FONT>     * 10-Feb-2004 : Removed working line (use line from state object instead) (DG);<a name="line.50"></a>
<FONT color="green">051</FONT>     * 25-Feb-2004 : Replaced CrosshairInfo with CrosshairState.  Renamed<a name="line.51"></a>
<FONT color="green">052</FONT>     *               XYToolTipGenerator --&gt; XYItemLabelGenerator (DG);<a name="line.52"></a>
<FONT color="green">053</FONT>     * 19-Jan-2005 : Now accesses only primitives from dataset (DG);<a name="line.53"></a>
<FONT color="green">054</FONT>     * 15-Mar-2005 : Fix silly bug in drawItem() method (DG);<a name="line.54"></a>
<FONT color="green">055</FONT>     * 19-Sep-2005 : Extend XYLineAndShapeRenderer (fixes legend shapes), added<a name="line.55"></a>
<FONT color="green">056</FONT>     *               support for series visibility, and use getDefaultEntityRadius()<a name="line.56"></a>
<FONT color="green">057</FONT>     *               for entity hotspot size (DG);<a name="line.57"></a>
<FONT color="green">058</FONT>     * ------------- JFREECHART 1.0.x ---------------------------------------------<a name="line.58"></a>
<FONT color="green">059</FONT>     * 15-Jun-2006 : Added basic support for item labels (DG);<a name="line.59"></a>
<FONT color="green">060</FONT>     * 11-Oct-2006 : Fixed rendering with horizontal orientation (see bug 1569094),<a name="line.60"></a>
<FONT color="green">061</FONT>     *               thanks to Gerald Struck (DG);<a name="line.61"></a>
<FONT color="green">062</FONT>     * 06-Feb-2007 : Fixed bug 1086307, crosshairs with multiple axes (DG);<a name="line.62"></a>
<FONT color="green">063</FONT>     * 14-Feb-2008 : Applied patch 1874890 by Ulrich Voigt (with contribution from<a name="line.63"></a>
<FONT color="green">064</FONT>     *               Martin Hoeller) (DG);<a name="line.64"></a>
<FONT color="green">065</FONT>     * 14-May-2008 : Call addEntity() in drawItem() (DG);<a name="line.65"></a>
<FONT color="green">066</FONT>     * 24-Sep-2008 : Fixed bug 2113627 by utilising second pass to draw item<a name="line.66"></a>
<FONT color="green">067</FONT>     *               labels (DG);<a name="line.67"></a>
<FONT color="green">068</FONT>     *<a name="line.68"></a>
<FONT color="green">069</FONT>     */<a name="line.69"></a>
<FONT color="green">070</FONT>    <a name="line.70"></a>
<FONT color="green">071</FONT>    package org.jfree.chart.renderer.xy;<a name="line.71"></a>
<FONT color="green">072</FONT>    <a name="line.72"></a>
<FONT color="green">073</FONT>    import java.awt.Graphics2D;<a name="line.73"></a>
<FONT color="green">074</FONT>    import java.awt.Paint;<a name="line.74"></a>
<FONT color="green">075</FONT>    import java.awt.Stroke;<a name="line.75"></a>
<FONT color="green">076</FONT>    import java.awt.geom.Line2D;<a name="line.76"></a>
<FONT color="green">077</FONT>    import java.awt.geom.Rectangle2D;<a name="line.77"></a>
<FONT color="green">078</FONT>    import java.io.Serializable;<a name="line.78"></a>
<FONT color="green">079</FONT>    <a name="line.79"></a>
<FONT color="green">080</FONT>    import org.jfree.chart.HashUtilities;<a name="line.80"></a>
<FONT color="green">081</FONT>    import org.jfree.chart.axis.ValueAxis;<a name="line.81"></a>
<FONT color="green">082</FONT>    import org.jfree.chart.entity.EntityCollection;<a name="line.82"></a>
<FONT color="green">083</FONT>    import org.jfree.chart.event.RendererChangeEvent;<a name="line.83"></a>
<FONT color="green">084</FONT>    import org.jfree.chart.labels.XYToolTipGenerator;<a name="line.84"></a>
<FONT color="green">085</FONT>    import org.jfree.chart.plot.CrosshairState;<a name="line.85"></a>
<FONT color="green">086</FONT>    import org.jfree.chart.plot.PlotOrientation;<a name="line.86"></a>
<FONT color="green">087</FONT>    import org.jfree.chart.plot.PlotRenderingInfo;<a name="line.87"></a>
<FONT color="green">088</FONT>    import org.jfree.chart.plot.XYPlot;<a name="line.88"></a>
<FONT color="green">089</FONT>    import org.jfree.chart.urls.XYURLGenerator;<a name="line.89"></a>
<FONT color="green">090</FONT>    import org.jfree.data.xy.XYDataset;<a name="line.90"></a>
<FONT color="green">091</FONT>    import org.jfree.ui.RectangleEdge;<a name="line.91"></a>
<FONT color="green">092</FONT>    import org.jfree.util.PublicCloneable;<a name="line.92"></a>
<FONT color="green">093</FONT>    <a name="line.93"></a>
<FONT color="green">094</FONT>    /**<a name="line.94"></a>
<FONT color="green">095</FONT>     * Line/Step item renderer for an {@link XYPlot}.  This class draws lines<a name="line.95"></a>
<FONT color="green">096</FONT>     * between data points, only allowing horizontal or vertical lines (steps).<a name="line.96"></a>
<FONT color="green">097</FONT>     * The example shown here is generated by the<a name="line.97"></a>
<FONT color="green">098</FONT>     * &lt;code&gt;XYStepRendererDemo1.java&lt;/code&gt; program included in the JFreeChart<a name="line.98"></a>
<FONT color="green">099</FONT>     * demo collection:<a name="line.99"></a>
<FONT color="green">100</FONT>     * &lt;br&gt;&lt;br&gt;<a name="line.100"></a>
<FONT color="green">101</FONT>     * &lt;img src="../../../../../images/XYStepRendererSample.png"<a name="line.101"></a>
<FONT color="green">102</FONT>     * alt="XYStepRendererSample.png" /&gt;<a name="line.102"></a>
<FONT color="green">103</FONT>     */<a name="line.103"></a>
<FONT color="green">104</FONT>    public class XYStepRenderer extends XYLineAndShapeRenderer<a name="line.104"></a>
<FONT color="green">105</FONT>            implements XYItemRenderer, Cloneable, PublicCloneable, Serializable {<a name="line.105"></a>
<FONT color="green">106</FONT>    <a name="line.106"></a>
<FONT color="green">107</FONT>        /** For serialization. */<a name="line.107"></a>
<FONT color="green">108</FONT>        private static final long serialVersionUID = -8918141928884796108L;<a name="line.108"></a>
<FONT color="green">109</FONT>    <a name="line.109"></a>
<FONT color="green">110</FONT>        /**<a name="line.110"></a>
<FONT color="green">111</FONT>         * The factor (from 0.0 to 1.0) that determines the position of the<a name="line.111"></a>
<FONT color="green">112</FONT>         * step.<a name="line.112"></a>
<FONT color="green">113</FONT>         *<a name="line.113"></a>
<FONT color="green">114</FONT>         * @since 1.0.10.<a name="line.114"></a>
<FONT color="green">115</FONT>         */<a name="line.115"></a>
<FONT color="green">116</FONT>        private double stepPoint = 1.0d;<a name="line.116"></a>
<FONT color="green">117</FONT>    <a name="line.117"></a>
<FONT color="green">118</FONT>        /**<a name="line.118"></a>
<FONT color="green">119</FONT>         * Constructs a new renderer with no tooltip or URL generation.<a name="line.119"></a>
<FONT color="green">120</FONT>         */<a name="line.120"></a>
<FONT color="green">121</FONT>        public XYStepRenderer() {<a name="line.121"></a>
<FONT color="green">122</FONT>            this(null, null);<a name="line.122"></a>
<FONT color="green">123</FONT>        }<a name="line.123"></a>
<FONT color="green">124</FONT>    <a name="line.124"></a>
<FONT color="green">125</FONT>        /**<a name="line.125"></a>
<FONT color="green">126</FONT>         * Constructs a new renderer with the specified tool tip and URL<a name="line.126"></a>
<FONT color="green">127</FONT>         * generators.<a name="line.127"></a>
<FONT color="green">128</FONT>         *<a name="line.128"></a>
<FONT color="green">129</FONT>         * @param toolTipGenerator  the item label generator (&lt;code&gt;null&lt;/code&gt;<a name="line.129"></a>
<FONT color="green">130</FONT>         *     permitted).<a name="line.130"></a>
<FONT color="green">131</FONT>         * @param urlGenerator  the URL generator (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.131"></a>
<FONT color="green">132</FONT>         */<a name="line.132"></a>
<FONT color="green">133</FONT>        public XYStepRenderer(XYToolTipGenerator toolTipGenerator,<a name="line.133"></a>
<FONT color="green">134</FONT>                              XYURLGenerator urlGenerator) {<a name="line.134"></a>
<FONT color="green">135</FONT>            super();<a name="line.135"></a>
<FONT color="green">136</FONT>            setBaseToolTipGenerator(toolTipGenerator);<a name="line.136"></a>
<FONT color="green">137</FONT>            setURLGenerator(urlGenerator);<a name="line.137"></a>
<FONT color="green">138</FONT>            setBaseShapesVisible(false);<a name="line.138"></a>
<FONT color="green">139</FONT>        }<a name="line.139"></a>
<FONT color="green">140</FONT>    <a name="line.140"></a>
<FONT color="green">141</FONT>        /**<a name="line.141"></a>
<FONT color="green">142</FONT>         * Returns the fraction of the domain position between two points on which<a name="line.142"></a>
<FONT color="green">143</FONT>         * the step is drawn.  The default is 1.0d, which means the step is drawn<a name="line.143"></a>
<FONT color="green">144</FONT>         * at the domain position of the second`point. If the stepPoint is 0.5d the<a name="line.144"></a>
<FONT color="green">145</FONT>         * step is drawn at half between the two points.<a name="line.145"></a>
<FONT color="green">146</FONT>         *<a name="line.146"></a>
<FONT color="green">147</FONT>         * @return The fraction of the domain position between two points where the<a name="line.147"></a>
<FONT color="green">148</FONT>         *         step is drawn.<a name="line.148"></a>
<FONT color="green">149</FONT>         *<a name="line.149"></a>
<FONT color="green">150</FONT>         * @see #setStepPoint(double)<a name="line.150"></a>
<FONT color="green">151</FONT>         *<a name="line.151"></a>
<FONT color="green">152</FONT>         * @since 1.0.10<a name="line.152"></a>
<FONT color="green">153</FONT>         */<a name="line.153"></a>
<FONT color="green">154</FONT>        public double getStepPoint() {<a name="line.154"></a>
<FONT color="green">155</FONT>            return this.stepPoint;<a name="line.155"></a>
<FONT color="green">156</FONT>        }<a name="line.156"></a>
<FONT color="green">157</FONT>    <a name="line.157"></a>
<FONT color="green">158</FONT>        /**<a name="line.158"></a>
<FONT color="green">159</FONT>         * Sets the step point and sends a {@link RendererChangeEvent} to all<a name="line.159"></a>
<FONT color="green">160</FONT>         * registered listeners.<a name="line.160"></a>
<FONT color="green">161</FONT>         *<a name="line.161"></a>
<FONT color="green">162</FONT>         * @param stepPoint  the step point (in the range 0.0 to 1.0)<a name="line.162"></a>
<FONT color="green">163</FONT>         *<a name="line.163"></a>
<FONT color="green">164</FONT>         * @see #getStepPoint()<a name="line.164"></a>
<FONT color="green">165</FONT>         *<a name="line.165"></a>
<FONT color="green">166</FONT>         * @since 1.0.10<a name="line.166"></a>
<FONT color="green">167</FONT>         */<a name="line.167"></a>
<FONT color="green">168</FONT>        public void setStepPoint(double stepPoint) {<a name="line.168"></a>
<FONT color="green">169</FONT>            if (stepPoint &lt; 0.0d || stepPoint &gt; 1.0d) {<a name="line.169"></a>
<FONT color="green">170</FONT>                throw new IllegalArgumentException(<a name="line.170"></a>
<FONT color="green">171</FONT>                        "Requires stepPoint in [0.0;1.0]");<a name="line.171"></a>
<FONT color="green">172</FONT>            }<a name="line.172"></a>
<FONT color="green">173</FONT>            this.stepPoint = stepPoint;<a name="line.173"></a>
<FONT color="green">174</FONT>            fireChangeEvent();<a name="line.174"></a>
<FONT color="green">175</FONT>        }<a name="line.175"></a>
<FONT color="green">176</FONT>    <a name="line.176"></a>
<FONT color="green">177</FONT>        /**<a name="line.177"></a>
<FONT color="green">178</FONT>         * Draws the visual representation of a single data item.<a name="line.178"></a>
<FONT color="green">179</FONT>         *<a name="line.179"></a>
<FONT color="green">180</FONT>         * @param g2  the graphics device.<a name="line.180"></a>
<FONT color="green">181</FONT>         * @param state  the renderer state.<a name="line.181"></a>
<FONT color="green">182</FONT>         * @param dataArea  the area within which the data is being drawn.<a name="line.182"></a>
<FONT color="green">183</FONT>         * @param info  collects information about the drawing.<a name="line.183"></a>
<FONT color="green">184</FONT>         * @param plot  the plot (can be used to obtain standard color<a name="line.184"></a>
<FONT color="green">185</FONT>         *              information etc).<a name="line.185"></a>
<FONT color="green">186</FONT>         * @param domainAxis  the domain axis.<a name="line.186"></a>
<FONT color="green">187</FONT>         * @param rangeAxis  the vertical axis.<a name="line.187"></a>
<FONT color="green">188</FONT>         * @param dataset  the dataset.<a name="line.188"></a>
<FONT color="green">189</FONT>         * @param series  the series index (zero-based).<a name="line.189"></a>
<FONT color="green">190</FONT>         * @param item  the item index (zero-based).<a name="line.190"></a>
<FONT color="green">191</FONT>         * @param crosshairState  crosshair information for the plot<a name="line.191"></a>
<FONT color="green">192</FONT>         *                        (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.192"></a>
<FONT color="green">193</FONT>         * @param pass  the pass index.<a name="line.193"></a>
<FONT color="green">194</FONT>         */<a name="line.194"></a>
<FONT color="green">195</FONT>        public void drawItem(Graphics2D g2,<a name="line.195"></a>
<FONT color="green">196</FONT>                             XYItemRendererState state,<a name="line.196"></a>
<FONT color="green">197</FONT>                             Rectangle2D dataArea,<a name="line.197"></a>
<FONT color="green">198</FONT>                             PlotRenderingInfo info,<a name="line.198"></a>
<FONT color="green">199</FONT>                             XYPlot plot,<a name="line.199"></a>
<FONT color="green">200</FONT>                             ValueAxis domainAxis,<a name="line.200"></a>
<FONT color="green">201</FONT>                             ValueAxis rangeAxis,<a name="line.201"></a>
<FONT color="green">202</FONT>                             XYDataset dataset,<a name="line.202"></a>
<FONT color="green">203</FONT>                             int series,<a name="line.203"></a>
<FONT color="green">204</FONT>                             int item,<a name="line.204"></a>
<FONT color="green">205</FONT>                             CrosshairState crosshairState,<a name="line.205"></a>
<FONT color="green">206</FONT>                             int pass) {<a name="line.206"></a>
<FONT color="green">207</FONT>    <a name="line.207"></a>
<FONT color="green">208</FONT>            // do nothing if item is not visible<a name="line.208"></a>
<FONT color="green">209</FONT>            if (!getItemVisible(series, item)) {<a name="line.209"></a>
<FONT color="green">210</FONT>                return;<a name="line.210"></a>
<FONT color="green">211</FONT>            }<a name="line.211"></a>
<FONT color="green">212</FONT>    <a name="line.212"></a>
<FONT color="green">213</FONT>            PlotOrientation orientation = plot.getOrientation();<a name="line.213"></a>
<FONT color="green">214</FONT>    <a name="line.214"></a>
<FONT color="green">215</FONT>            Paint seriesPaint = getItemPaint(series, item);<a name="line.215"></a>
<FONT color="green">216</FONT>            Stroke seriesStroke = getItemStroke(series, item);<a name="line.216"></a>
<FONT color="green">217</FONT>            g2.setPaint(seriesPaint);<a name="line.217"></a>
<FONT color="green">218</FONT>            g2.setStroke(seriesStroke);<a name="line.218"></a>
<FONT color="green">219</FONT>    <a name="line.219"></a>
<FONT color="green">220</FONT>            // get the data point...<a name="line.220"></a>
<FONT color="green">221</FONT>            double x1 = dataset.getXValue(series, item);<a name="line.221"></a>
<FONT color="green">222</FONT>            double y1 = dataset.getYValue(series, item);<a name="line.222"></a>
<FONT color="green">223</FONT>    <a name="line.223"></a>
<FONT color="green">224</FONT>            RectangleEdge xAxisLocation = plot.getDomainAxisEdge();<a name="line.224"></a>
<FONT color="green">225</FONT>            RectangleEdge yAxisLocation = plot.getRangeAxisEdge();<a name="line.225"></a>
<FONT color="green">226</FONT>            double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);<a name="line.226"></a>
<FONT color="green">227</FONT>            double transY1 = (Double.isNaN(y1) ? Double.NaN<a name="line.227"></a>
<FONT color="green">228</FONT>                    : rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));<a name="line.228"></a>
<FONT color="green">229</FONT>    <a name="line.229"></a>
<FONT color="green">230</FONT>            if (pass == 0 &amp;&amp; item &gt; 0) {<a name="line.230"></a>
<FONT color="green">231</FONT>                // get the previous data point...<a name="line.231"></a>
<FONT color="green">232</FONT>                double x0 = dataset.getXValue(series, item - 1);<a name="line.232"></a>
<FONT color="green">233</FONT>                double y0 = dataset.getYValue(series, item - 1);<a name="line.233"></a>
<FONT color="green">234</FONT>                double transX0 = domainAxis.valueToJava2D(x0, dataArea,<a name="line.234"></a>
<FONT color="green">235</FONT>                        xAxisLocation);<a name="line.235"></a>
<FONT color="green">236</FONT>                double transY0 = (Double.isNaN(y0) ? Double.NaN<a name="line.236"></a>
<FONT color="green">237</FONT>                        : rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));<a name="line.237"></a>
<FONT color="green">238</FONT>    <a name="line.238"></a>
<FONT color="green">239</FONT>                if (orientation == PlotOrientation.HORIZONTAL) {<a name="line.239"></a>
<FONT color="green">240</FONT>                    if (transY0 == transY1) {<a name="line.240"></a>
<FONT color="green">241</FONT>                        // this represents the situation<a name="line.241"></a>
<FONT color="green">242</FONT>                        // for drawing a horizontal bar.<a name="line.242"></a>
<FONT color="green">243</FONT>                        drawLine(g2, state.workingLine, transY0, transX0, transY1,<a name="line.243"></a>
<FONT color="green">244</FONT>                                transX1);<a name="line.244"></a>
<FONT color="green">245</FONT>                    }<a name="line.245"></a>
<FONT color="green">246</FONT>                    else {  //this handles the need to perform a 'step'.<a name="line.246"></a>
<FONT color="green">247</FONT>    <a name="line.247"></a>
<FONT color="green">248</FONT>                        // calculate the step point<a name="line.248"></a>
<FONT color="green">249</FONT>                        double transXs = transX0 + (getStepPoint()<a name="line.249"></a>
<FONT color="green">250</FONT>                                * (transX1 - transX0));<a name="line.250"></a>
<FONT color="green">251</FONT>                        drawLine(g2, state.workingLine, transY0, transX0, transY0,<a name="line.251"></a>
<FONT color="green">252</FONT>                                transXs);<a name="line.252"></a>
<FONT color="green">253</FONT>                        drawLine(g2, state.workingLine, transY0, transXs, transY1,<a name="line.253"></a>
<FONT color="green">254</FONT>                                transXs);<a name="line.254"></a>
<FONT color="green">255</FONT>                        drawLine(g2, state.workingLine, transY1, transXs, transY1,<a name="line.255"></a>
<FONT color="green">256</FONT>                                transX1);<a name="line.256"></a>
<FONT color="green">257</FONT>                    }<a name="line.257"></a>
<FONT color="green">258</FONT>                }<a name="line.258"></a>
<FONT color="green">259</FONT>                else if (orientation == PlotOrientation.VERTICAL) {<a name="line.259"></a>
<FONT color="green">260</FONT>                    if (transY0 == transY1) { // this represents the situation<a name="line.260"></a>
<FONT color="green">261</FONT>                                              // for drawing a horizontal bar.<a name="line.261"></a>
<FONT color="green">262</FONT>                        drawLine(g2, state.workingLine, transX0, transY0, transX1,<a name="line.262"></a>
<FONT color="green">263</FONT>                                transY1);<a name="line.263"></a>
<FONT color="green">264</FONT>                    }<a name="line.264"></a>
<FONT color="green">265</FONT>                    else {  //this handles the need to perform a 'step'.<a name="line.265"></a>
<FONT color="green">266</FONT>                        // calculate the step point<a name="line.266"></a>
<FONT color="green">267</FONT>                        double transXs = transX0 + (getStepPoint()<a name="line.267"></a>
<FONT color="green">268</FONT>                                * (transX1 - transX0));<a name="line.268"></a>
<FONT color="green">269</FONT>                        drawLine(g2, state.workingLine, transX0, transY0, transXs,<a name="line.269"></a>
<FONT color="green">270</FONT>                                transY0);<a name="line.270"></a>
<FONT color="green">271</FONT>                        drawLine(g2, state.workingLine, transXs, transY0, transXs,<a name="line.271"></a>
<FONT color="green">272</FONT>                                transY1);<a name="line.272"></a>
<FONT color="green">273</FONT>                        drawLine(g2, state.workingLine, transXs, transY1, transX1,<a name="line.273"></a>
<FONT color="green">274</FONT>                                transY1);<a name="line.274"></a>
<FONT color="green">275</FONT>                    }<a name="line.275"></a>
<FONT color="green">276</FONT>                }<a name="line.276"></a>
<FONT color="green">277</FONT>    <a name="line.277"></a>
<FONT color="green">278</FONT>                // submit this data item as a candidate for the crosshair point<a name="line.278"></a>
<FONT color="green">279</FONT>                int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);<a name="line.279"></a>
<FONT color="green">280</FONT>                int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);<a name="line.280"></a>
<FONT color="green">281</FONT>                updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,<a name="line.281"></a>
<FONT color="green">282</FONT>                        rangeAxisIndex, transX1, transY1, orientation);<a name="line.282"></a>
<FONT color="green">283</FONT>    <a name="line.283"></a>
<FONT color="green">284</FONT>                // collect entity and tool tip information...<a name="line.284"></a>
<FONT color="green">285</FONT>                EntityCollection entities = state.getEntityCollection();<a name="line.285"></a>
<FONT color="green">286</FONT>                if (entities != null) {<a name="line.286"></a>
<FONT color="green">287</FONT>                    addEntity(entities, null, dataset, series, item, transX1,<a name="line.287"></a>
<FONT color="green">288</FONT>                            transY1);<a name="line.288"></a>
<FONT color="green">289</FONT>                }<a name="line.289"></a>
<FONT color="green">290</FONT>    <a name="line.290"></a>
<FONT color="green">291</FONT>            }<a name="line.291"></a>
<FONT color="green">292</FONT>    <a name="line.292"></a>
<FONT color="green">293</FONT>            if (pass == 1) {<a name="line.293"></a>
<FONT color="green">294</FONT>                // draw the item label if there is one...<a name="line.294"></a>
<FONT color="green">295</FONT>                if (isItemLabelVisible(series, item)) {<a name="line.295"></a>
<FONT color="green">296</FONT>                    double xx = transX1;<a name="line.296"></a>
<FONT color="green">297</FONT>                    double yy = transY1;<a name="line.297"></a>
<FONT color="green">298</FONT>                    if (orientation == PlotOrientation.HORIZONTAL) {<a name="line.298"></a>
<FONT color="green">299</FONT>                        xx = transY1;<a name="line.299"></a>
<FONT color="green">300</FONT>                        yy = transX1;<a name="line.300"></a>
<FONT color="green">301</FONT>                    }<a name="line.301"></a>
<FONT color="green">302</FONT>                    drawItemLabel(g2, orientation, dataset, series, item, xx, yy,<a name="line.302"></a>
<FONT color="green">303</FONT>                            (y1 &lt; 0.0));<a name="line.303"></a>
<FONT color="green">304</FONT>                }<a name="line.304"></a>
<FONT color="green">305</FONT>            }<a name="line.305"></a>
<FONT color="green">306</FONT>        }<a name="line.306"></a>
<FONT color="green">307</FONT>    <a name="line.307"></a>
<FONT color="green">308</FONT>        /**<a name="line.308"></a>
<FONT color="green">309</FONT>         * A utility method that draws a line but only if none of the coordinates<a name="line.309"></a>
<FONT color="green">310</FONT>         * are NaN values.<a name="line.310"></a>
<FONT color="green">311</FONT>         *<a name="line.311"></a>
<FONT color="green">312</FONT>         * @param g2  the graphics target.<a name="line.312"></a>
<FONT color="green">313</FONT>         * @param line  the line object.<a name="line.313"></a>
<FONT color="green">314</FONT>         * @param x0  the x-coordinate for the starting point of the line.<a name="line.314"></a>
<FONT color="green">315</FONT>         * @param y0  the y-coordinate for the starting point of the line.<a name="line.315"></a>
<FONT color="green">316</FONT>         * @param x1  the x-coordinate for the ending point of the line.<a name="line.316"></a>
<FONT color="green">317</FONT>         * @param y1  the y-coordinate for the ending point of the line.<a name="line.317"></a>
<FONT color="green">318</FONT>         */<a name="line.318"></a>
<FONT color="green">319</FONT>        private void drawLine(Graphics2D g2, Line2D line, double x0, double y0,<a name="line.319"></a>
<FONT color="green">320</FONT>                double x1, double y1) {<a name="line.320"></a>
<FONT color="green">321</FONT>            if (Double.isNaN(x0) || Double.isNaN(x1) || Double.isNaN(y0)<a name="line.321"></a>
<FONT color="green">322</FONT>                    || Double.isNaN(y1)) {<a name="line.322"></a>
<FONT color="green">323</FONT>                return;<a name="line.323"></a>
<FONT color="green">324</FONT>            }<a name="line.324"></a>
<FONT color="green">325</FONT>            line.setLine(x0, y0, x1, y1);<a name="line.325"></a>
<FONT color="green">326</FONT>            g2.draw(line);<a name="line.326"></a>
<FONT color="green">327</FONT>        }<a name="line.327"></a>
<FONT color="green">328</FONT>    <a name="line.328"></a>
<FONT color="green">329</FONT>        /**<a name="line.329"></a>
<FONT color="green">330</FONT>         * Tests this renderer for equality with an arbitrary object.<a name="line.330"></a>
<FONT color="green">331</FONT>         *<a name="line.331"></a>
<FONT color="green">332</FONT>         * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.332"></a>
<FONT color="green">333</FONT>         *<a name="line.333"></a>
<FONT color="green">334</FONT>         * @return A boolean.<a name="line.334"></a>
<FONT color="green">335</FONT>         */<a name="line.335"></a>
<FONT color="green">336</FONT>        public boolean equals(Object obj) {<a name="line.336"></a>
<FONT color="green">337</FONT>            if (obj == this) {<a name="line.337"></a>
<FONT color="green">338</FONT>                return true;<a name="line.338"></a>
<FONT color="green">339</FONT>            }<a name="line.339"></a>
<FONT color="green">340</FONT>            if (!(obj instanceof XYLineAndShapeRenderer)) {<a name="line.340"></a>
<FONT color="green">341</FONT>                return false;<a name="line.341"></a>
<FONT color="green">342</FONT>            }<a name="line.342"></a>
<FONT color="green">343</FONT>            XYStepRenderer that = (XYStepRenderer) obj;<a name="line.343"></a>
<FONT color="green">344</FONT>            if (this.stepPoint != that.stepPoint) {<a name="line.344"></a>
<FONT color="green">345</FONT>                return false;<a name="line.345"></a>
<FONT color="green">346</FONT>            }<a name="line.346"></a>
<FONT color="green">347</FONT>            return super.equals(obj);<a name="line.347"></a>
<FONT color="green">348</FONT>        }<a name="line.348"></a>
<FONT color="green">349</FONT>    <a name="line.349"></a>
<FONT color="green">350</FONT>        /**<a name="line.350"></a>
<FONT color="green">351</FONT>         * Returns a hash code for this instance.<a name="line.351"></a>
<FONT color="green">352</FONT>         *<a name="line.352"></a>
<FONT color="green">353</FONT>         * @return A hash code.<a name="line.353"></a>
<FONT color="green">354</FONT>         */<a name="line.354"></a>
<FONT color="green">355</FONT>        public int hashCode() {<a name="line.355"></a>
<FONT color="green">356</FONT>            return HashUtilities.hashCode(super.hashCode(), this.stepPoint);<a name="line.356"></a>
<FONT color="green">357</FONT>        }<a name="line.357"></a>
<FONT color="green">358</FONT>    <a name="line.358"></a>
<FONT color="green">359</FONT>        /**<a name="line.359"></a>
<FONT color="green">360</FONT>         * Returns a clone of the renderer.<a name="line.360"></a>
<FONT color="green">361</FONT>         *<a name="line.361"></a>
<FONT color="green">362</FONT>         * @return A clone.<a name="line.362"></a>
<FONT color="green">363</FONT>         *<a name="line.363"></a>
<FONT color="green">364</FONT>         * @throws CloneNotSupportedException  if the renderer cannot be cloned.<a name="line.364"></a>
<FONT color="green">365</FONT>         */<a name="line.365"></a>
<FONT color="green">366</FONT>        public Object clone() throws CloneNotSupportedException {<a name="line.366"></a>
<FONT color="green">367</FONT>            return super.clone();<a name="line.367"></a>
<FONT color="green">368</FONT>        }<a name="line.368"></a>
<FONT color="green">369</FONT>    <a name="line.369"></a>
<FONT color="green">370</FONT>    }<a name="line.370"></a>




























































</PRE>
</BODY>
</HTML>
