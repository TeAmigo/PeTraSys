<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ===========================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JFreeChart : a free chart library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ===========================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     *<a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jfreechart/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it<a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by<a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or<a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but<a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY<a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public<a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,<a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.<a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc.<a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     *<a name="line.26"></a>
<FONT color="green">027</FONT>     * -----------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * AreaRenderer.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * -----------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C) Copyright 2002-2008, by Jon Iles and Contributors.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  Jon Iles;<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   David Gilbert (for Object Refinery Limited);<a name="line.33"></a>
<FONT color="green">034</FONT>     *                   Christian W. Zuckschwerdt;<a name="line.34"></a>
<FONT color="green">035</FONT>     *<a name="line.35"></a>
<FONT color="green">036</FONT>     * Changes:<a name="line.36"></a>
<FONT color="green">037</FONT>     * --------<a name="line.37"></a>
<FONT color="green">038</FONT>     * 21-May-2002 : Version 1, contributed by John Iles (DG);<a name="line.38"></a>
<FONT color="green">039</FONT>     * 29-May-2002 : Now extends AbstractCategoryItemRenderer (DG);<a name="line.39"></a>
<FONT color="green">040</FONT>     * 11-Jun-2002 : Updated Javadoc comments (DG);<a name="line.40"></a>
<FONT color="green">041</FONT>     * 25-Jun-2002 : Removed unnecessary imports (DG);<a name="line.41"></a>
<FONT color="green">042</FONT>     * 01-Oct-2002 : Fixed errors reported by Checkstyle (DG);<a name="line.42"></a>
<FONT color="green">043</FONT>     * 10-Oct-2002 : Added constructors and basic entity support (DG);<a name="line.43"></a>
<FONT color="green">044</FONT>     * 24-Oct-2002 : Amendments for changes in CategoryDataset interface and<a name="line.44"></a>
<FONT color="green">045</FONT>     *               CategoryToolTipGenerator interface (DG);<a name="line.45"></a>
<FONT color="green">046</FONT>     * 05-Nov-2002 : Replaced references to CategoryDataset with TableDataset (DG);<a name="line.46"></a>
<FONT color="green">047</FONT>     * 06-Nov-2002 : Renamed drawCategoryItem() --&gt; drawItem() and now using axis<a name="line.47"></a>
<FONT color="green">048</FONT>     *               for category spacing.  Renamed AreaCategoryItemRenderer<a name="line.48"></a>
<FONT color="green">049</FONT>     *               --&gt; AreaRenderer (DG);<a name="line.49"></a>
<FONT color="green">050</FONT>     * 17-Jan-2003 : Moved plot classes into a separate package (DG);<a name="line.50"></a>
<FONT color="green">051</FONT>     * 25-Mar-2003 : Implemented Serializable (DG);<a name="line.51"></a>
<FONT color="green">052</FONT>     * 10-Apr-2003 : Changed CategoryDataset to KeyedValues2DDataset in<a name="line.52"></a>
<FONT color="green">053</FONT>     *               drawItem() method (DG);<a name="line.53"></a>
<FONT color="green">054</FONT>     * 12-May-2003 : Modified to take into account the plot orientation (DG);<a name="line.54"></a>
<FONT color="green">055</FONT>     * 30-Jul-2003 : Modified entity constructor (CZ);<a name="line.55"></a>
<FONT color="green">056</FONT>     * 13-Aug-2003 : Implemented Cloneable (DG);<a name="line.56"></a>
<FONT color="green">057</FONT>     * 07-Oct-2003 : Added renderer state (DG);<a name="line.57"></a>
<FONT color="green">058</FONT>     * 05-Nov-2004 : Modified drawItem() signature (DG);<a name="line.58"></a>
<FONT color="green">059</FONT>     * 20-Apr-2005 : Apply tooltips and URLs to legend items (DG);<a name="line.59"></a>
<FONT color="green">060</FONT>     * 09-Jun-2005 : Use addItemEntity() method from superclass (DG);<a name="line.60"></a>
<FONT color="green">061</FONT>     * ------------- JFREECHART 1.0.x ---------------------------------------------<a name="line.61"></a>
<FONT color="green">062</FONT>     * 11-Oct-2006 : Fixed bug in equals() method (DG);<a name="line.62"></a>
<FONT color="green">063</FONT>     * 30-Nov-2006 : Added checks for series visibility (DG);<a name="line.63"></a>
<FONT color="green">064</FONT>     * 20-Apr-2007 : Updated getLegendItem() for renderer change (DG);<a name="line.64"></a>
<FONT color="green">065</FONT>     * 17-May-2007 : Set datasetIndex and seriesIndex in getLegendItem() (DG);<a name="line.65"></a>
<FONT color="green">066</FONT>     * 18-May-2007 : Set dataset and seriesKey for LegendItem (DG);<a name="line.66"></a>
<FONT color="green">067</FONT>     * 17-Jun-2008 : Apply legend shape, font and paint attributes (DG);<a name="line.67"></a>
<FONT color="green">068</FONT>     * 26-Jun-2008 : Added crosshair support (DG);<a name="line.68"></a>
<FONT color="green">069</FONT>     *<a name="line.69"></a>
<FONT color="green">070</FONT>     */<a name="line.70"></a>
<FONT color="green">071</FONT>    <a name="line.71"></a>
<FONT color="green">072</FONT>    package org.jfree.chart.renderer.category;<a name="line.72"></a>
<FONT color="green">073</FONT>    <a name="line.73"></a>
<FONT color="green">074</FONT>    import java.awt.Graphics2D;<a name="line.74"></a>
<FONT color="green">075</FONT>    import java.awt.Paint;<a name="line.75"></a>
<FONT color="green">076</FONT>    import java.awt.Shape;<a name="line.76"></a>
<FONT color="green">077</FONT>    import java.awt.Stroke;<a name="line.77"></a>
<FONT color="green">078</FONT>    import java.awt.geom.GeneralPath;<a name="line.78"></a>
<FONT color="green">079</FONT>    import java.awt.geom.Rectangle2D;<a name="line.79"></a>
<FONT color="green">080</FONT>    import java.io.Serializable;<a name="line.80"></a>
<FONT color="green">081</FONT>    <a name="line.81"></a>
<FONT color="green">082</FONT>    import org.jfree.chart.LegendItem;<a name="line.82"></a>
<FONT color="green">083</FONT>    import org.jfree.chart.axis.CategoryAxis;<a name="line.83"></a>
<FONT color="green">084</FONT>    import org.jfree.chart.axis.ValueAxis;<a name="line.84"></a>
<FONT color="green">085</FONT>    import org.jfree.chart.entity.EntityCollection;<a name="line.85"></a>
<FONT color="green">086</FONT>    import org.jfree.chart.event.RendererChangeEvent;<a name="line.86"></a>
<FONT color="green">087</FONT>    import org.jfree.chart.plot.CategoryPlot;<a name="line.87"></a>
<FONT color="green">088</FONT>    import org.jfree.chart.plot.PlotOrientation;<a name="line.88"></a>
<FONT color="green">089</FONT>    import org.jfree.chart.renderer.AreaRendererEndType;<a name="line.89"></a>
<FONT color="green">090</FONT>    import org.jfree.data.category.CategoryDataset;<a name="line.90"></a>
<FONT color="green">091</FONT>    import org.jfree.ui.RectangleEdge;<a name="line.91"></a>
<FONT color="green">092</FONT>    import org.jfree.util.PublicCloneable;<a name="line.92"></a>
<FONT color="green">093</FONT>    <a name="line.93"></a>
<FONT color="green">094</FONT>    /**<a name="line.94"></a>
<FONT color="green">095</FONT>     * A category item renderer that draws area charts.  You can use this renderer<a name="line.95"></a>
<FONT color="green">096</FONT>     * with the {@link CategoryPlot} class.  The example shown here is generated<a name="line.96"></a>
<FONT color="green">097</FONT>     * by the &lt;code&gt;AreaChartDemo1.java&lt;/code&gt; program included in the JFreeChart<a name="line.97"></a>
<FONT color="green">098</FONT>     * Demo Collection:<a name="line.98"></a>
<FONT color="green">099</FONT>     * &lt;br&gt;&lt;br&gt;<a name="line.99"></a>
<FONT color="green">100</FONT>     * &lt;img src="../../../../../images/AreaRendererSample.png"<a name="line.100"></a>
<FONT color="green">101</FONT>     * alt="AreaRendererSample.png" /&gt;<a name="line.101"></a>
<FONT color="green">102</FONT>     */<a name="line.102"></a>
<FONT color="green">103</FONT>    public class AreaRenderer extends AbstractCategoryItemRenderer<a name="line.103"></a>
<FONT color="green">104</FONT>            implements Cloneable, PublicCloneable, Serializable {<a name="line.104"></a>
<FONT color="green">105</FONT>    <a name="line.105"></a>
<FONT color="green">106</FONT>        /** For serialization. */<a name="line.106"></a>
<FONT color="green">107</FONT>        private static final long serialVersionUID = -4231878281385812757L;<a name="line.107"></a>
<FONT color="green">108</FONT>    <a name="line.108"></a>
<FONT color="green">109</FONT>        /** A flag that controls how the ends of the areas are drawn. */<a name="line.109"></a>
<FONT color="green">110</FONT>        private AreaRendererEndType endType;<a name="line.110"></a>
<FONT color="green">111</FONT>    <a name="line.111"></a>
<FONT color="green">112</FONT>        /**<a name="line.112"></a>
<FONT color="green">113</FONT>         * Creates a new renderer.<a name="line.113"></a>
<FONT color="green">114</FONT>         */<a name="line.114"></a>
<FONT color="green">115</FONT>        public AreaRenderer() {<a name="line.115"></a>
<FONT color="green">116</FONT>            super();<a name="line.116"></a>
<FONT color="green">117</FONT>            this.endType = AreaRendererEndType.TAPER;<a name="line.117"></a>
<FONT color="green">118</FONT>            setBaseLegendShape(new Rectangle2D.Double(-4.0, -4.0, 8.0, 8.0));<a name="line.118"></a>
<FONT color="green">119</FONT>        }<a name="line.119"></a>
<FONT color="green">120</FONT>    <a name="line.120"></a>
<FONT color="green">121</FONT>        /**<a name="line.121"></a>
<FONT color="green">122</FONT>         * Returns a token that controls how the renderer draws the end points.<a name="line.122"></a>
<FONT color="green">123</FONT>         * The default value is {@link AreaRendererEndType#TAPER}.<a name="line.123"></a>
<FONT color="green">124</FONT>         *<a name="line.124"></a>
<FONT color="green">125</FONT>         * @return The end type (never &lt;code&gt;null&lt;/code&gt;).<a name="line.125"></a>
<FONT color="green">126</FONT>         *<a name="line.126"></a>
<FONT color="green">127</FONT>         * @see #setEndType<a name="line.127"></a>
<FONT color="green">128</FONT>         */<a name="line.128"></a>
<FONT color="green">129</FONT>        public AreaRendererEndType getEndType() {<a name="line.129"></a>
<FONT color="green">130</FONT>            return this.endType;<a name="line.130"></a>
<FONT color="green">131</FONT>        }<a name="line.131"></a>
<FONT color="green">132</FONT>    <a name="line.132"></a>
<FONT color="green">133</FONT>        /**<a name="line.133"></a>
<FONT color="green">134</FONT>         * Sets a token that controls how the renderer draws the end points, and<a name="line.134"></a>
<FONT color="green">135</FONT>         * sends a {@link RendererChangeEvent} to all registered listeners.<a name="line.135"></a>
<FONT color="green">136</FONT>         *<a name="line.136"></a>
<FONT color="green">137</FONT>         * @param type  the end type (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.137"></a>
<FONT color="green">138</FONT>         *<a name="line.138"></a>
<FONT color="green">139</FONT>         * @see #getEndType()<a name="line.139"></a>
<FONT color="green">140</FONT>         */<a name="line.140"></a>
<FONT color="green">141</FONT>        public void setEndType(AreaRendererEndType type) {<a name="line.141"></a>
<FONT color="green">142</FONT>            if (type == null) {<a name="line.142"></a>
<FONT color="green">143</FONT>                throw new IllegalArgumentException("Null 'type' argument.");<a name="line.143"></a>
<FONT color="green">144</FONT>            }<a name="line.144"></a>
<FONT color="green">145</FONT>            this.endType = type;<a name="line.145"></a>
<FONT color="green">146</FONT>            fireChangeEvent();<a name="line.146"></a>
<FONT color="green">147</FONT>        }<a name="line.147"></a>
<FONT color="green">148</FONT>    <a name="line.148"></a>
<FONT color="green">149</FONT>        /**<a name="line.149"></a>
<FONT color="green">150</FONT>         * Returns a legend item for a series.<a name="line.150"></a>
<FONT color="green">151</FONT>         *<a name="line.151"></a>
<FONT color="green">152</FONT>         * @param datasetIndex  the dataset index (zero-based).<a name="line.152"></a>
<FONT color="green">153</FONT>         * @param series  the series index (zero-based).<a name="line.153"></a>
<FONT color="green">154</FONT>         *<a name="line.154"></a>
<FONT color="green">155</FONT>         * @return The legend item.<a name="line.155"></a>
<FONT color="green">156</FONT>         */<a name="line.156"></a>
<FONT color="green">157</FONT>        public LegendItem getLegendItem(int datasetIndex, int series) {<a name="line.157"></a>
<FONT color="green">158</FONT>    <a name="line.158"></a>
<FONT color="green">159</FONT>            // if there is no plot, there is no dataset to access...<a name="line.159"></a>
<FONT color="green">160</FONT>            CategoryPlot cp = getPlot();<a name="line.160"></a>
<FONT color="green">161</FONT>            if (cp == null) {<a name="line.161"></a>
<FONT color="green">162</FONT>                return null;<a name="line.162"></a>
<FONT color="green">163</FONT>            }<a name="line.163"></a>
<FONT color="green">164</FONT>    <a name="line.164"></a>
<FONT color="green">165</FONT>            // check that a legend item needs to be displayed...<a name="line.165"></a>
<FONT color="green">166</FONT>            if (!isSeriesVisible(series) || !isSeriesVisibleInLegend(series)) {<a name="line.166"></a>
<FONT color="green">167</FONT>                return null;<a name="line.167"></a>
<FONT color="green">168</FONT>            }<a name="line.168"></a>
<FONT color="green">169</FONT>    <a name="line.169"></a>
<FONT color="green">170</FONT>            CategoryDataset dataset = cp.getDataset(datasetIndex);<a name="line.170"></a>
<FONT color="green">171</FONT>            String label = getLegendItemLabelGenerator().generateLabel(dataset,<a name="line.171"></a>
<FONT color="green">172</FONT>                    series);<a name="line.172"></a>
<FONT color="green">173</FONT>            String description = label;<a name="line.173"></a>
<FONT color="green">174</FONT>            String toolTipText = null;<a name="line.174"></a>
<FONT color="green">175</FONT>            if (getLegendItemToolTipGenerator() != null) {<a name="line.175"></a>
<FONT color="green">176</FONT>                toolTipText = getLegendItemToolTipGenerator().generateLabel(<a name="line.176"></a>
<FONT color="green">177</FONT>                        dataset, series);<a name="line.177"></a>
<FONT color="green">178</FONT>            }<a name="line.178"></a>
<FONT color="green">179</FONT>            String urlText = null;<a name="line.179"></a>
<FONT color="green">180</FONT>            if (getLegendItemURLGenerator() != null) {<a name="line.180"></a>
<FONT color="green">181</FONT>                urlText = getLegendItemURLGenerator().generateLabel(dataset,<a name="line.181"></a>
<FONT color="green">182</FONT>                        series);<a name="line.182"></a>
<FONT color="green">183</FONT>            }<a name="line.183"></a>
<FONT color="green">184</FONT>            Shape shape = lookupLegendShape(series);<a name="line.184"></a>
<FONT color="green">185</FONT>            Paint paint = lookupSeriesPaint(series);<a name="line.185"></a>
<FONT color="green">186</FONT>            Paint outlinePaint = lookupSeriesOutlinePaint(series);<a name="line.186"></a>
<FONT color="green">187</FONT>            Stroke outlineStroke = lookupSeriesOutlineStroke(series);<a name="line.187"></a>
<FONT color="green">188</FONT>    <a name="line.188"></a>
<FONT color="green">189</FONT>            LegendItem result = new LegendItem(label, description, toolTipText,<a name="line.189"></a>
<FONT color="green">190</FONT>                    urlText, shape, paint, outlineStroke, outlinePaint);<a name="line.190"></a>
<FONT color="green">191</FONT>            result.setLabelFont(lookupLegendTextFont(series));<a name="line.191"></a>
<FONT color="green">192</FONT>            Paint labelPaint = lookupLegendTextPaint(series);<a name="line.192"></a>
<FONT color="green">193</FONT>            if (labelPaint != null) {<a name="line.193"></a>
<FONT color="green">194</FONT>                result.setLabelPaint(labelPaint);<a name="line.194"></a>
<FONT color="green">195</FONT>            }<a name="line.195"></a>
<FONT color="green">196</FONT>            result.setDataset(dataset);<a name="line.196"></a>
<FONT color="green">197</FONT>            result.setDatasetIndex(datasetIndex);<a name="line.197"></a>
<FONT color="green">198</FONT>            result.setSeriesKey(dataset.getRowKey(series));<a name="line.198"></a>
<FONT color="green">199</FONT>            result.setSeriesIndex(series);<a name="line.199"></a>
<FONT color="green">200</FONT>            return result;<a name="line.200"></a>
<FONT color="green">201</FONT>    <a name="line.201"></a>
<FONT color="green">202</FONT>        }<a name="line.202"></a>
<FONT color="green">203</FONT>    <a name="line.203"></a>
<FONT color="green">204</FONT>        /**<a name="line.204"></a>
<FONT color="green">205</FONT>         * Draw a single data item.<a name="line.205"></a>
<FONT color="green">206</FONT>         *<a name="line.206"></a>
<FONT color="green">207</FONT>         * @param g2  the graphics device.<a name="line.207"></a>
<FONT color="green">208</FONT>         * @param state  the renderer state.<a name="line.208"></a>
<FONT color="green">209</FONT>         * @param dataArea  the data plot area.<a name="line.209"></a>
<FONT color="green">210</FONT>         * @param plot  the plot.<a name="line.210"></a>
<FONT color="green">211</FONT>         * @param domainAxis  the domain axis.<a name="line.211"></a>
<FONT color="green">212</FONT>         * @param rangeAxis  the range axis.<a name="line.212"></a>
<FONT color="green">213</FONT>         * @param dataset  the dataset.<a name="line.213"></a>
<FONT color="green">214</FONT>         * @param row  the row index (zero-based).<a name="line.214"></a>
<FONT color="green">215</FONT>         * @param column  the column index (zero-based).<a name="line.215"></a>
<FONT color="green">216</FONT>         * @param pass  the pass index.<a name="line.216"></a>
<FONT color="green">217</FONT>         */<a name="line.217"></a>
<FONT color="green">218</FONT>        public void drawItem(Graphics2D g2,<a name="line.218"></a>
<FONT color="green">219</FONT>                             CategoryItemRendererState state,<a name="line.219"></a>
<FONT color="green">220</FONT>                             Rectangle2D dataArea,<a name="line.220"></a>
<FONT color="green">221</FONT>                             CategoryPlot plot,<a name="line.221"></a>
<FONT color="green">222</FONT>                             CategoryAxis domainAxis,<a name="line.222"></a>
<FONT color="green">223</FONT>                             ValueAxis rangeAxis,<a name="line.223"></a>
<FONT color="green">224</FONT>                             CategoryDataset dataset,<a name="line.224"></a>
<FONT color="green">225</FONT>                             int row,<a name="line.225"></a>
<FONT color="green">226</FONT>                             int column,<a name="line.226"></a>
<FONT color="green">227</FONT>                             int pass) {<a name="line.227"></a>
<FONT color="green">228</FONT>    <a name="line.228"></a>
<FONT color="green">229</FONT>            // do nothing if item is not visible<a name="line.229"></a>
<FONT color="green">230</FONT>            if (!getItemVisible(row, column)) {<a name="line.230"></a>
<FONT color="green">231</FONT>                return;<a name="line.231"></a>
<FONT color="green">232</FONT>            }<a name="line.232"></a>
<FONT color="green">233</FONT>    <a name="line.233"></a>
<FONT color="green">234</FONT>            // plot non-null values only...<a name="line.234"></a>
<FONT color="green">235</FONT>            Number value = dataset.getValue(row, column);<a name="line.235"></a>
<FONT color="green">236</FONT>            if (value != null) {<a name="line.236"></a>
<FONT color="green">237</FONT>                PlotOrientation orientation = plot.getOrientation();<a name="line.237"></a>
<FONT color="green">238</FONT>                RectangleEdge axisEdge = plot.getDomainAxisEdge();<a name="line.238"></a>
<FONT color="green">239</FONT>                int count = dataset.getColumnCount();<a name="line.239"></a>
<FONT color="green">240</FONT>                float x0 = (float) domainAxis.getCategoryStart(column, count,<a name="line.240"></a>
<FONT color="green">241</FONT>                        dataArea, axisEdge);<a name="line.241"></a>
<FONT color="green">242</FONT>                float x1 = (float) domainAxis.getCategoryMiddle(column, count,<a name="line.242"></a>
<FONT color="green">243</FONT>                        dataArea, axisEdge);<a name="line.243"></a>
<FONT color="green">244</FONT>                float x2 = (float) domainAxis.getCategoryEnd(column, count,<a name="line.244"></a>
<FONT color="green">245</FONT>                        dataArea, axisEdge);<a name="line.245"></a>
<FONT color="green">246</FONT>    <a name="line.246"></a>
<FONT color="green">247</FONT>                x0 = Math.round(x0);<a name="line.247"></a>
<FONT color="green">248</FONT>                x1 = Math.round(x1);<a name="line.248"></a>
<FONT color="green">249</FONT>                x2 = Math.round(x2);<a name="line.249"></a>
<FONT color="green">250</FONT>    <a name="line.250"></a>
<FONT color="green">251</FONT>                if (this.endType == AreaRendererEndType.TRUNCATE) {<a name="line.251"></a>
<FONT color="green">252</FONT>                    if (column == 0) {<a name="line.252"></a>
<FONT color="green">253</FONT>                        x0 = x1;<a name="line.253"></a>
<FONT color="green">254</FONT>                    }<a name="line.254"></a>
<FONT color="green">255</FONT>                    else if (column == getColumnCount() - 1) {<a name="line.255"></a>
<FONT color="green">256</FONT>                        x2 = x1;<a name="line.256"></a>
<FONT color="green">257</FONT>                    }<a name="line.257"></a>
<FONT color="green">258</FONT>                }<a name="line.258"></a>
<FONT color="green">259</FONT>    <a name="line.259"></a>
<FONT color="green">260</FONT>                double yy1 = value.doubleValue();<a name="line.260"></a>
<FONT color="green">261</FONT>    <a name="line.261"></a>
<FONT color="green">262</FONT>                double yy0 = 0.0;<a name="line.262"></a>
<FONT color="green">263</FONT>                if (column &gt; 0) {<a name="line.263"></a>
<FONT color="green">264</FONT>                    Number n0 = dataset.getValue(row, column - 1);<a name="line.264"></a>
<FONT color="green">265</FONT>                    if (n0 != null) {<a name="line.265"></a>
<FONT color="green">266</FONT>                        yy0 = (n0.doubleValue() + yy1) / 2.0;<a name="line.266"></a>
<FONT color="green">267</FONT>                    }<a name="line.267"></a>
<FONT color="green">268</FONT>                }<a name="line.268"></a>
<FONT color="green">269</FONT>    <a name="line.269"></a>
<FONT color="green">270</FONT>                double yy2 = 0.0;<a name="line.270"></a>
<FONT color="green">271</FONT>                if (column &lt; dataset.getColumnCount() - 1) {<a name="line.271"></a>
<FONT color="green">272</FONT>                    Number n2 = dataset.getValue(row, column + 1);<a name="line.272"></a>
<FONT color="green">273</FONT>                    if (n2 != null) {<a name="line.273"></a>
<FONT color="green">274</FONT>                        yy2 = (n2.doubleValue() + yy1) / 2.0;<a name="line.274"></a>
<FONT color="green">275</FONT>                    }<a name="line.275"></a>
<FONT color="green">276</FONT>                }<a name="line.276"></a>
<FONT color="green">277</FONT>    <a name="line.277"></a>
<FONT color="green">278</FONT>                RectangleEdge edge = plot.getRangeAxisEdge();<a name="line.278"></a>
<FONT color="green">279</FONT>                float y0 = (float) rangeAxis.valueToJava2D(yy0, dataArea, edge);<a name="line.279"></a>
<FONT color="green">280</FONT>                float y1 = (float) rangeAxis.valueToJava2D(yy1, dataArea, edge);<a name="line.280"></a>
<FONT color="green">281</FONT>                float y2 = (float) rangeAxis.valueToJava2D(yy2, dataArea, edge);<a name="line.281"></a>
<FONT color="green">282</FONT>                float yz = (float) rangeAxis.valueToJava2D(0.0, dataArea, edge);<a name="line.282"></a>
<FONT color="green">283</FONT>    <a name="line.283"></a>
<FONT color="green">284</FONT>                g2.setPaint(getItemPaint(row, column));<a name="line.284"></a>
<FONT color="green">285</FONT>                g2.setStroke(getItemStroke(row, column));<a name="line.285"></a>
<FONT color="green">286</FONT>    <a name="line.286"></a>
<FONT color="green">287</FONT>                GeneralPath area = new GeneralPath();<a name="line.287"></a>
<FONT color="green">288</FONT>    <a name="line.288"></a>
<FONT color="green">289</FONT>                if (orientation == PlotOrientation.VERTICAL) {<a name="line.289"></a>
<FONT color="green">290</FONT>                    area.moveTo(x0, yz);<a name="line.290"></a>
<FONT color="green">291</FONT>                    area.lineTo(x0, y0);<a name="line.291"></a>
<FONT color="green">292</FONT>                    area.lineTo(x1, y1);<a name="line.292"></a>
<FONT color="green">293</FONT>                    area.lineTo(x2, y2);<a name="line.293"></a>
<FONT color="green">294</FONT>                    area.lineTo(x2, yz);<a name="line.294"></a>
<FONT color="green">295</FONT>                }<a name="line.295"></a>
<FONT color="green">296</FONT>                else if (orientation == PlotOrientation.HORIZONTAL) {<a name="line.296"></a>
<FONT color="green">297</FONT>                    area.moveTo(yz, x0);<a name="line.297"></a>
<FONT color="green">298</FONT>                    area.lineTo(y0, x0);<a name="line.298"></a>
<FONT color="green">299</FONT>                    area.lineTo(y1, x1);<a name="line.299"></a>
<FONT color="green">300</FONT>                    area.lineTo(y2, x2);<a name="line.300"></a>
<FONT color="green">301</FONT>                    area.lineTo(yz, x2);<a name="line.301"></a>
<FONT color="green">302</FONT>                }<a name="line.302"></a>
<FONT color="green">303</FONT>                area.closePath();<a name="line.303"></a>
<FONT color="green">304</FONT>    <a name="line.304"></a>
<FONT color="green">305</FONT>                g2.setPaint(getItemPaint(row, column));<a name="line.305"></a>
<FONT color="green">306</FONT>                g2.fill(area);<a name="line.306"></a>
<FONT color="green">307</FONT>    <a name="line.307"></a>
<FONT color="green">308</FONT>                // draw the item labels if there are any...<a name="line.308"></a>
<FONT color="green">309</FONT>                if (isItemLabelVisible(row, column)) {<a name="line.309"></a>
<FONT color="green">310</FONT>                    drawItemLabel(g2, orientation, dataset, row, column, x1, y1,<a name="line.310"></a>
<FONT color="green">311</FONT>                            (value.doubleValue() &lt; 0.0));<a name="line.311"></a>
<FONT color="green">312</FONT>                }<a name="line.312"></a>
<FONT color="green">313</FONT>    <a name="line.313"></a>
<FONT color="green">314</FONT>                // submit the current data point as a crosshair candidate<a name="line.314"></a>
<FONT color="green">315</FONT>                int datasetIndex = plot.indexOf(dataset);<a name="line.315"></a>
<FONT color="green">316</FONT>                updateCrosshairValues(state.getCrosshairState(),<a name="line.316"></a>
<FONT color="green">317</FONT>                        dataset.getRowKey(row), dataset.getColumnKey(column),<a name="line.317"></a>
<FONT color="green">318</FONT>                        yy1, datasetIndex, x1, y1, orientation);<a name="line.318"></a>
<FONT color="green">319</FONT>    <a name="line.319"></a>
<FONT color="green">320</FONT>                // add an item entity, if this information is being collected<a name="line.320"></a>
<FONT color="green">321</FONT>                EntityCollection entities = state.getEntityCollection();<a name="line.321"></a>
<FONT color="green">322</FONT>                if (entities != null) {<a name="line.322"></a>
<FONT color="green">323</FONT>                    addItemEntity(entities, dataset, row, column, area);<a name="line.323"></a>
<FONT color="green">324</FONT>                }<a name="line.324"></a>
<FONT color="green">325</FONT>            }<a name="line.325"></a>
<FONT color="green">326</FONT>    <a name="line.326"></a>
<FONT color="green">327</FONT>        }<a name="line.327"></a>
<FONT color="green">328</FONT>    <a name="line.328"></a>
<FONT color="green">329</FONT>        /**<a name="line.329"></a>
<FONT color="green">330</FONT>         * Tests this instance for equality with an arbitrary object.<a name="line.330"></a>
<FONT color="green">331</FONT>         *<a name="line.331"></a>
<FONT color="green">332</FONT>         * @param obj  the object to test (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.332"></a>
<FONT color="green">333</FONT>         *<a name="line.333"></a>
<FONT color="green">334</FONT>         * @return A boolean.<a name="line.334"></a>
<FONT color="green">335</FONT>         */<a name="line.335"></a>
<FONT color="green">336</FONT>        public boolean equals(Object obj) {<a name="line.336"></a>
<FONT color="green">337</FONT>            if (obj == this) {<a name="line.337"></a>
<FONT color="green">338</FONT>                return true;<a name="line.338"></a>
<FONT color="green">339</FONT>            }<a name="line.339"></a>
<FONT color="green">340</FONT>            if (!(obj instanceof AreaRenderer)) {<a name="line.340"></a>
<FONT color="green">341</FONT>                return false;<a name="line.341"></a>
<FONT color="green">342</FONT>            }<a name="line.342"></a>
<FONT color="green">343</FONT>            AreaRenderer that = (AreaRenderer) obj;<a name="line.343"></a>
<FONT color="green">344</FONT>            if (!this.endType.equals(that.endType)) {<a name="line.344"></a>
<FONT color="green">345</FONT>                return false;<a name="line.345"></a>
<FONT color="green">346</FONT>            }<a name="line.346"></a>
<FONT color="green">347</FONT>            return super.equals(obj);<a name="line.347"></a>
<FONT color="green">348</FONT>        }<a name="line.348"></a>
<FONT color="green">349</FONT>    <a name="line.349"></a>
<FONT color="green">350</FONT>        /**<a name="line.350"></a>
<FONT color="green">351</FONT>         * Returns an independent copy of the renderer.<a name="line.351"></a>
<FONT color="green">352</FONT>         *<a name="line.352"></a>
<FONT color="green">353</FONT>         * @return A clone.<a name="line.353"></a>
<FONT color="green">354</FONT>         *<a name="line.354"></a>
<FONT color="green">355</FONT>         * @throws CloneNotSupportedException  should not happen.<a name="line.355"></a>
<FONT color="green">356</FONT>         */<a name="line.356"></a>
<FONT color="green">357</FONT>        public Object clone() throws CloneNotSupportedException {<a name="line.357"></a>
<FONT color="green">358</FONT>            return super.clone();<a name="line.358"></a>
<FONT color="green">359</FONT>        }<a name="line.359"></a>
<FONT color="green">360</FONT>    <a name="line.360"></a>
<FONT color="green">361</FONT>    }<a name="line.361"></a>




























































</PRE>
</BODY>
</HTML>
