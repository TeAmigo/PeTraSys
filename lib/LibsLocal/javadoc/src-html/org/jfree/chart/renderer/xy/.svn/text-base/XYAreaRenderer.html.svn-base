<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ===========================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JFreeChart : a free chart library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ===========================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     *<a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jfreechart/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it<a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by<a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or<a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but<a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY<a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public<a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,<a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.<a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc.<a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     *<a name="line.26"></a>
<FONT color="green">027</FONT>     * -------------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * XYAreaRenderer.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * -------------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C) Copyright 2002-2008, by Hari and Contributors.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  Hari (ourhari@hotmail.com);<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   David Gilbert (for Object Refinery Limited);<a name="line.33"></a>
<FONT color="green">034</FONT>     *                   Richard Atkinson;<a name="line.34"></a>
<FONT color="green">035</FONT>     *                   Christian W. Zuckschwerdt;<a name="line.35"></a>
<FONT color="green">036</FONT>     *<a name="line.36"></a>
<FONT color="green">037</FONT>     * Changes:<a name="line.37"></a>
<FONT color="green">038</FONT>     * --------<a name="line.38"></a>
<FONT color="green">039</FONT>     * 03-Apr-2002 : Version 1, contributed by Hari.  This class is based on the<a name="line.39"></a>
<FONT color="green">040</FONT>     *               StandardXYItemRenderer class (DG);<a name="line.40"></a>
<FONT color="green">041</FONT>     * 09-Apr-2002 : Removed the translated zero from the drawItem method -<a name="line.41"></a>
<FONT color="green">042</FONT>     *               overridden the initialise() method to calculate it (DG);<a name="line.42"></a>
<FONT color="green">043</FONT>     * 30-May-2002 : Added tool tip generator to constructor to match super<a name="line.43"></a>
<FONT color="green">044</FONT>     *               class (DG);<a name="line.44"></a>
<FONT color="green">045</FONT>     * 25-Jun-2002 : Removed unnecessary local variable (DG);<a name="line.45"></a>
<FONT color="green">046</FONT>     * 05-Aug-2002 : Small modification to drawItem method to support URLs for HTML<a name="line.46"></a>
<FONT color="green">047</FONT>     *               image maps (RA);<a name="line.47"></a>
<FONT color="green">048</FONT>     * 01-Oct-2002 : Fixed errors reported by Checkstyle (DG);<a name="line.48"></a>
<FONT color="green">049</FONT>     * 07-Nov-2002 : Renamed AreaXYItemRenderer --&gt; XYAreaRenderer (DG);<a name="line.49"></a>
<FONT color="green">050</FONT>     * 25-Mar-2003 : Implemented Serializable (DG);<a name="line.50"></a>
<FONT color="green">051</FONT>     * 01-May-2003 : Modified drawItem() method signature (DG);<a name="line.51"></a>
<FONT color="green">052</FONT>     * 27-Jul-2003 : Made line and polygon properties protected rather than<a name="line.52"></a>
<FONT color="green">053</FONT>     *               private (RA);<a name="line.53"></a>
<FONT color="green">054</FONT>     * 30-Jul-2003 : Modified entity constructor (CZ);<a name="line.54"></a>
<FONT color="green">055</FONT>     * 20-Aug-2003 : Implemented Cloneable and PublicCloneable (DG);<a name="line.55"></a>
<FONT color="green">056</FONT>     * 16-Sep-2003 : Changed ChartRenderingInfo --&gt; PlotRenderingInfo (DG);<a name="line.56"></a>
<FONT color="green">057</FONT>     * 07-Oct-2003 : Added renderer state (DG);<a name="line.57"></a>
<FONT color="green">058</FONT>     * 08-Dec-2003 : Modified hotspot for chart entity (DG);<a name="line.58"></a>
<FONT color="green">059</FONT>     * 10-Feb-2004 : Changed the drawItem() method to make cut-and-paste overriding<a name="line.59"></a>
<FONT color="green">060</FONT>     *               easier.  Also moved state class into this class (DG);<a name="line.60"></a>
<FONT color="green">061</FONT>     * 25-Feb-2004 : Replaced CrosshairInfo with CrosshairState.  Renamed<a name="line.61"></a>
<FONT color="green">062</FONT>     *               XYToolTipGenerator --&gt; XYItemLabelGenerator (DG);<a name="line.62"></a>
<FONT color="green">063</FONT>     * 15-Jul-2004 : Switched getX() with getXValue() and getY() with<a name="line.63"></a>
<FONT color="green">064</FONT>     *               getYValue() (DG);<a name="line.64"></a>
<FONT color="green">065</FONT>     * 11-Nov-2004 : Now uses ShapeUtilities to translate shapes (DG);<a name="line.65"></a>
<FONT color="green">066</FONT>     * 19-Jan-2005 : Now accesses primitives only from dataset (DG);<a name="line.66"></a>
<FONT color="green">067</FONT>     * 21-Mar-2005 : Override getLegendItem() and equals() methods (DG);<a name="line.67"></a>
<FONT color="green">068</FONT>     * 20-Apr-2005 : Use generators for legend tooltips and URLs (DG);<a name="line.68"></a>
<FONT color="green">069</FONT>     * ------------- JFREECHART 1.0.x ---------------------------------------------<a name="line.69"></a>
<FONT color="green">070</FONT>     * 06-Feb-2007 : Fixed bug 1086307, crosshairs with multiple axes (DG);<a name="line.70"></a>
<FONT color="green">071</FONT>     * 14-Feb-2007 : Fixed bug in clone() (DG);<a name="line.71"></a>
<FONT color="green">072</FONT>     * 20-Apr-2007 : Updated getLegendItem() for renderer change (DG);<a name="line.72"></a>
<FONT color="green">073</FONT>     * 04-May-2007 : Set processVisibleItemsOnly flag to false (DG);<a name="line.73"></a>
<FONT color="green">074</FONT>     * 17-May-2007 : Set datasetIndex and seriesIndex in getLegendItem() (DG);<a name="line.74"></a>
<FONT color="green">075</FONT>     * 18-May-2007 : Set dataset and seriesKey for LegendItem (DG);<a name="line.75"></a>
<FONT color="green">076</FONT>     * 17-Jun-2008 : Apply legend font and paint attributes (DG);<a name="line.76"></a>
<FONT color="green">077</FONT>     * 31-Dec-2008 : Fix for bug 2471906 - dashed outlines performance issue (DG);<a name="line.77"></a>
<FONT color="green">078</FONT>     *<a name="line.78"></a>
<FONT color="green">079</FONT>     */<a name="line.79"></a>
<FONT color="green">080</FONT>    <a name="line.80"></a>
<FONT color="green">081</FONT>    package org.jfree.chart.renderer.xy;<a name="line.81"></a>
<FONT color="green">082</FONT>    <a name="line.82"></a>
<FONT color="green">083</FONT>    import java.awt.BasicStroke;<a name="line.83"></a>
<FONT color="green">084</FONT>    import java.awt.Graphics2D;<a name="line.84"></a>
<FONT color="green">085</FONT>    import java.awt.Paint;<a name="line.85"></a>
<FONT color="green">086</FONT>    import java.awt.Polygon;<a name="line.86"></a>
<FONT color="green">087</FONT>    import java.awt.Shape;<a name="line.87"></a>
<FONT color="green">088</FONT>    import java.awt.Stroke;<a name="line.88"></a>
<FONT color="green">089</FONT>    import java.awt.geom.Area;<a name="line.89"></a>
<FONT color="green">090</FONT>    import java.awt.geom.GeneralPath;<a name="line.90"></a>
<FONT color="green">091</FONT>    import java.awt.geom.Line2D;<a name="line.91"></a>
<FONT color="green">092</FONT>    import java.awt.geom.Rectangle2D;<a name="line.92"></a>
<FONT color="green">093</FONT>    import java.io.IOException;<a name="line.93"></a>
<FONT color="green">094</FONT>    import java.io.ObjectInputStream;<a name="line.94"></a>
<FONT color="green">095</FONT>    import java.io.ObjectOutputStream;<a name="line.95"></a>
<FONT color="green">096</FONT>    <a name="line.96"></a>
<FONT color="green">097</FONT>    import org.jfree.chart.LegendItem;<a name="line.97"></a>
<FONT color="green">098</FONT>    import org.jfree.chart.axis.ValueAxis;<a name="line.98"></a>
<FONT color="green">099</FONT>    import org.jfree.chart.entity.EntityCollection;<a name="line.99"></a>
<FONT color="green">100</FONT>    import org.jfree.chart.event.RendererChangeEvent;<a name="line.100"></a>
<FONT color="green">101</FONT>    import org.jfree.chart.labels.XYSeriesLabelGenerator;<a name="line.101"></a>
<FONT color="green">102</FONT>    import org.jfree.chart.labels.XYToolTipGenerator;<a name="line.102"></a>
<FONT color="green">103</FONT>    import org.jfree.chart.plot.CrosshairState;<a name="line.103"></a>
<FONT color="green">104</FONT>    import org.jfree.chart.plot.PlotOrientation;<a name="line.104"></a>
<FONT color="green">105</FONT>    import org.jfree.chart.plot.PlotRenderingInfo;<a name="line.105"></a>
<FONT color="green">106</FONT>    import org.jfree.chart.plot.XYPlot;<a name="line.106"></a>
<FONT color="green">107</FONT>    import org.jfree.chart.urls.XYURLGenerator;<a name="line.107"></a>
<FONT color="green">108</FONT>    import org.jfree.data.xy.XYDataset;<a name="line.108"></a>
<FONT color="green">109</FONT>    import org.jfree.io.SerialUtilities;<a name="line.109"></a>
<FONT color="green">110</FONT>    import org.jfree.util.PublicCloneable;<a name="line.110"></a>
<FONT color="green">111</FONT>    import org.jfree.util.ShapeUtilities;<a name="line.111"></a>
<FONT color="green">112</FONT>    <a name="line.112"></a>
<FONT color="green">113</FONT>    /**<a name="line.113"></a>
<FONT color="green">114</FONT>     * Area item renderer for an {@link XYPlot}.  This class can draw (a) shapes at<a name="line.114"></a>
<FONT color="green">115</FONT>     * each point, or (b) lines between points, or (c) both shapes and lines,<a name="line.115"></a>
<FONT color="green">116</FONT>     * or (d) filled areas, or (e) filled areas and shapes. The example shown here<a name="line.116"></a>
<FONT color="green">117</FONT>     * is generated by the &lt;code&gt;XYAreaRendererDemo1.java&lt;/code&gt; program included<a name="line.117"></a>
<FONT color="green">118</FONT>     * in the JFreeChart demo collection:<a name="line.118"></a>
<FONT color="green">119</FONT>     * &lt;br&gt;&lt;br&gt;<a name="line.119"></a>
<FONT color="green">120</FONT>     * &lt;img src="../../../../../images/XYAreaRendererSample.png"<a name="line.120"></a>
<FONT color="green">121</FONT>     * alt="XYAreaRendererSample.png" /&gt;<a name="line.121"></a>
<FONT color="green">122</FONT>     */<a name="line.122"></a>
<FONT color="green">123</FONT>    public class XYAreaRenderer extends AbstractXYItemRenderer<a name="line.123"></a>
<FONT color="green">124</FONT>            implements XYItemRenderer, PublicCloneable {<a name="line.124"></a>
<FONT color="green">125</FONT>    <a name="line.125"></a>
<FONT color="green">126</FONT>        /** For serialization. */<a name="line.126"></a>
<FONT color="green">127</FONT>        private static final long serialVersionUID = -4481971353973876747L;<a name="line.127"></a>
<FONT color="green">128</FONT>    <a name="line.128"></a>
<FONT color="green">129</FONT>        /**<a name="line.129"></a>
<FONT color="green">130</FONT>         * A state object used by this renderer.<a name="line.130"></a>
<FONT color="green">131</FONT>         */<a name="line.131"></a>
<FONT color="green">132</FONT>        static class XYAreaRendererState extends XYItemRendererState {<a name="line.132"></a>
<FONT color="green">133</FONT>    <a name="line.133"></a>
<FONT color="green">134</FONT>            /** Working storage for the area under one series. */<a name="line.134"></a>
<FONT color="green">135</FONT>            public Polygon area;<a name="line.135"></a>
<FONT color="green">136</FONT>    <a name="line.136"></a>
<FONT color="green">137</FONT>            /** Working line that can be recycled. */<a name="line.137"></a>
<FONT color="green">138</FONT>            public Line2D line;<a name="line.138"></a>
<FONT color="green">139</FONT>    <a name="line.139"></a>
<FONT color="green">140</FONT>            /**<a name="line.140"></a>
<FONT color="green">141</FONT>             * Creates a new state.<a name="line.141"></a>
<FONT color="green">142</FONT>             *<a name="line.142"></a>
<FONT color="green">143</FONT>             * @param info  the plot rendering info.<a name="line.143"></a>
<FONT color="green">144</FONT>             */<a name="line.144"></a>
<FONT color="green">145</FONT>            public XYAreaRendererState(PlotRenderingInfo info) {<a name="line.145"></a>
<FONT color="green">146</FONT>                super(info);<a name="line.146"></a>
<FONT color="green">147</FONT>                this.area = new Polygon();<a name="line.147"></a>
<FONT color="green">148</FONT>                this.line = new Line2D.Double();<a name="line.148"></a>
<FONT color="green">149</FONT>            }<a name="line.149"></a>
<FONT color="green">150</FONT>    <a name="line.150"></a>
<FONT color="green">151</FONT>        }<a name="line.151"></a>
<FONT color="green">152</FONT>    <a name="line.152"></a>
<FONT color="green">153</FONT>        /** Useful constant for specifying the type of rendering (shapes only). */<a name="line.153"></a>
<FONT color="green">154</FONT>        public static final int SHAPES = 1;<a name="line.154"></a>
<FONT color="green">155</FONT>    <a name="line.155"></a>
<FONT color="green">156</FONT>        /** Useful constant for specifying the type of rendering (lines only). */<a name="line.156"></a>
<FONT color="green">157</FONT>        public static final int LINES = 2;<a name="line.157"></a>
<FONT color="green">158</FONT>    <a name="line.158"></a>
<FONT color="green">159</FONT>        /**<a name="line.159"></a>
<FONT color="green">160</FONT>         * Useful constant for specifying the type of rendering (shapes and lines).<a name="line.160"></a>
<FONT color="green">161</FONT>         */<a name="line.161"></a>
<FONT color="green">162</FONT>        public static final int SHAPES_AND_LINES = 3;<a name="line.162"></a>
<FONT color="green">163</FONT>    <a name="line.163"></a>
<FONT color="green">164</FONT>        /** Useful constant for specifying the type of rendering (area only). */<a name="line.164"></a>
<FONT color="green">165</FONT>        public static final int AREA = 4;<a name="line.165"></a>
<FONT color="green">166</FONT>    <a name="line.166"></a>
<FONT color="green">167</FONT>        /**<a name="line.167"></a>
<FONT color="green">168</FONT>         * Useful constant for specifying the type of rendering (area and shapes).<a name="line.168"></a>
<FONT color="green">169</FONT>         */<a name="line.169"></a>
<FONT color="green">170</FONT>        public static final int AREA_AND_SHAPES = 5;<a name="line.170"></a>
<FONT color="green">171</FONT>    <a name="line.171"></a>
<FONT color="green">172</FONT>        /** A flag indicating whether or not shapes are drawn at each XY point. */<a name="line.172"></a>
<FONT color="green">173</FONT>        private boolean plotShapes;<a name="line.173"></a>
<FONT color="green">174</FONT>    <a name="line.174"></a>
<FONT color="green">175</FONT>        /** A flag indicating whether or not lines are drawn between XY points. */<a name="line.175"></a>
<FONT color="green">176</FONT>        private boolean plotLines;<a name="line.176"></a>
<FONT color="green">177</FONT>    <a name="line.177"></a>
<FONT color="green">178</FONT>        /** A flag indicating whether or not Area are drawn at each XY point. */<a name="line.178"></a>
<FONT color="green">179</FONT>        private boolean plotArea;<a name="line.179"></a>
<FONT color="green">180</FONT>    <a name="line.180"></a>
<FONT color="green">181</FONT>        /** A flag that controls whether or not the outline is shown. */<a name="line.181"></a>
<FONT color="green">182</FONT>        private boolean showOutline;<a name="line.182"></a>
<FONT color="green">183</FONT>    <a name="line.183"></a>
<FONT color="green">184</FONT>        /**<a name="line.184"></a>
<FONT color="green">185</FONT>         * The shape used to represent an area in each legend item (this should<a name="line.185"></a>
<FONT color="green">186</FONT>         * never be &lt;code&gt;null&lt;/code&gt;).<a name="line.186"></a>
<FONT color="green">187</FONT>         */<a name="line.187"></a>
<FONT color="green">188</FONT>        private transient Shape legendArea;<a name="line.188"></a>
<FONT color="green">189</FONT>    <a name="line.189"></a>
<FONT color="green">190</FONT>        /**<a name="line.190"></a>
<FONT color="green">191</FONT>         * Constructs a new renderer.<a name="line.191"></a>
<FONT color="green">192</FONT>         */<a name="line.192"></a>
<FONT color="green">193</FONT>        public XYAreaRenderer() {<a name="line.193"></a>
<FONT color="green">194</FONT>            this(AREA);<a name="line.194"></a>
<FONT color="green">195</FONT>        }<a name="line.195"></a>
<FONT color="green">196</FONT>    <a name="line.196"></a>
<FONT color="green">197</FONT>        /**<a name="line.197"></a>
<FONT color="green">198</FONT>         * Constructs a new renderer.<a name="line.198"></a>
<FONT color="green">199</FONT>         *<a name="line.199"></a>
<FONT color="green">200</FONT>         * @param type  the type of the renderer.<a name="line.200"></a>
<FONT color="green">201</FONT>         */<a name="line.201"></a>
<FONT color="green">202</FONT>        public XYAreaRenderer(int type) {<a name="line.202"></a>
<FONT color="green">203</FONT>            this(type, null, null);<a name="line.203"></a>
<FONT color="green">204</FONT>        }<a name="line.204"></a>
<FONT color="green">205</FONT>    <a name="line.205"></a>
<FONT color="green">206</FONT>        /**<a name="line.206"></a>
<FONT color="green">207</FONT>         * Constructs a new renderer.  To specify the type of renderer, use one of<a name="line.207"></a>
<FONT color="green">208</FONT>         * the constants: &lt;code&gt;SHAPES&lt;/code&gt;, &lt;code&gt;LINES&lt;/code&gt;,<a name="line.208"></a>
<FONT color="green">209</FONT>         * &lt;code&gt;SHAPES_AND_LINES&lt;/code&gt;, &lt;code&gt;AREA&lt;/code&gt; or<a name="line.209"></a>
<FONT color="green">210</FONT>         * &lt;code&gt;AREA_AND_SHAPES&lt;/code&gt;.<a name="line.210"></a>
<FONT color="green">211</FONT>         *<a name="line.211"></a>
<FONT color="green">212</FONT>         * @param type  the type of renderer.<a name="line.212"></a>
<FONT color="green">213</FONT>         * @param toolTipGenerator  the tool tip generator to use<a name="line.213"></a>
<FONT color="green">214</FONT>         *                          (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.214"></a>
<FONT color="green">215</FONT>         * @param urlGenerator  the URL generator (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.215"></a>
<FONT color="green">216</FONT>         */<a name="line.216"></a>
<FONT color="green">217</FONT>        public XYAreaRenderer(int type, XYToolTipGenerator toolTipGenerator,<a name="line.217"></a>
<FONT color="green">218</FONT>                              XYURLGenerator urlGenerator) {<a name="line.218"></a>
<FONT color="green">219</FONT>    <a name="line.219"></a>
<FONT color="green">220</FONT>            super();<a name="line.220"></a>
<FONT color="green">221</FONT>            setBaseToolTipGenerator(toolTipGenerator);<a name="line.221"></a>
<FONT color="green">222</FONT>            setURLGenerator(urlGenerator);<a name="line.222"></a>
<FONT color="green">223</FONT>    <a name="line.223"></a>
<FONT color="green">224</FONT>            if (type == SHAPES) {<a name="line.224"></a>
<FONT color="green">225</FONT>                this.plotShapes = true;<a name="line.225"></a>
<FONT color="green">226</FONT>            }<a name="line.226"></a>
<FONT color="green">227</FONT>            if (type == LINES) {<a name="line.227"></a>
<FONT color="green">228</FONT>                this.plotLines = true;<a name="line.228"></a>
<FONT color="green">229</FONT>            }<a name="line.229"></a>
<FONT color="green">230</FONT>            if (type == SHAPES_AND_LINES) {<a name="line.230"></a>
<FONT color="green">231</FONT>                this.plotShapes = true;<a name="line.231"></a>
<FONT color="green">232</FONT>                this.plotLines = true;<a name="line.232"></a>
<FONT color="green">233</FONT>            }<a name="line.233"></a>
<FONT color="green">234</FONT>            if (type == AREA) {<a name="line.234"></a>
<FONT color="green">235</FONT>                this.plotArea = true;<a name="line.235"></a>
<FONT color="green">236</FONT>            }<a name="line.236"></a>
<FONT color="green">237</FONT>            if (type == AREA_AND_SHAPES) {<a name="line.237"></a>
<FONT color="green">238</FONT>                this.plotArea = true;<a name="line.238"></a>
<FONT color="green">239</FONT>                this.plotShapes = true;<a name="line.239"></a>
<FONT color="green">240</FONT>            }<a name="line.240"></a>
<FONT color="green">241</FONT>            this.showOutline = false;<a name="line.241"></a>
<FONT color="green">242</FONT>            GeneralPath area = new GeneralPath();<a name="line.242"></a>
<FONT color="green">243</FONT>            area.moveTo(0.0f, -4.0f);<a name="line.243"></a>
<FONT color="green">244</FONT>            area.lineTo(3.0f, -2.0f);<a name="line.244"></a>
<FONT color="green">245</FONT>            area.lineTo(4.0f, 4.0f);<a name="line.245"></a>
<FONT color="green">246</FONT>            area.lineTo(-4.0f, 4.0f);<a name="line.246"></a>
<FONT color="green">247</FONT>            area.lineTo(-3.0f, -2.0f);<a name="line.247"></a>
<FONT color="green">248</FONT>            area.closePath();<a name="line.248"></a>
<FONT color="green">249</FONT>            this.legendArea = area;<a name="line.249"></a>
<FONT color="green">250</FONT>    <a name="line.250"></a>
<FONT color="green">251</FONT>        }<a name="line.251"></a>
<FONT color="green">252</FONT>    <a name="line.252"></a>
<FONT color="green">253</FONT>        /**<a name="line.253"></a>
<FONT color="green">254</FONT>         * Returns true if shapes are being plotted by the renderer.<a name="line.254"></a>
<FONT color="green">255</FONT>         *<a name="line.255"></a>
<FONT color="green">256</FONT>         * @return &lt;code&gt;true&lt;/code&gt; if shapes are being plotted by the renderer.<a name="line.256"></a>
<FONT color="green">257</FONT>         */<a name="line.257"></a>
<FONT color="green">258</FONT>        public boolean getPlotShapes() {<a name="line.258"></a>
<FONT color="green">259</FONT>            return this.plotShapes;<a name="line.259"></a>
<FONT color="green">260</FONT>        }<a name="line.260"></a>
<FONT color="green">261</FONT>    <a name="line.261"></a>
<FONT color="green">262</FONT>        /**<a name="line.262"></a>
<FONT color="green">263</FONT>         * Returns true if lines are being plotted by the renderer.<a name="line.263"></a>
<FONT color="green">264</FONT>         *<a name="line.264"></a>
<FONT color="green">265</FONT>         * @return &lt;code&gt;true&lt;/code&gt; if lines are being plotted by the renderer.<a name="line.265"></a>
<FONT color="green">266</FONT>         */<a name="line.266"></a>
<FONT color="green">267</FONT>        public boolean getPlotLines() {<a name="line.267"></a>
<FONT color="green">268</FONT>            return this.plotLines;<a name="line.268"></a>
<FONT color="green">269</FONT>        }<a name="line.269"></a>
<FONT color="green">270</FONT>    <a name="line.270"></a>
<FONT color="green">271</FONT>        /**<a name="line.271"></a>
<FONT color="green">272</FONT>         * Returns true if Area is being plotted by the renderer.<a name="line.272"></a>
<FONT color="green">273</FONT>         *<a name="line.273"></a>
<FONT color="green">274</FONT>         * @return &lt;code&gt;true&lt;/code&gt; if Area is being plotted by the renderer.<a name="line.274"></a>
<FONT color="green">275</FONT>         */<a name="line.275"></a>
<FONT color="green">276</FONT>        public boolean getPlotArea() {<a name="line.276"></a>
<FONT color="green">277</FONT>            return this.plotArea;<a name="line.277"></a>
<FONT color="green">278</FONT>        }<a name="line.278"></a>
<FONT color="green">279</FONT>    <a name="line.279"></a>
<FONT color="green">280</FONT>        /**<a name="line.280"></a>
<FONT color="green">281</FONT>         * Returns a flag that controls whether or not outlines of the areas are<a name="line.281"></a>
<FONT color="green">282</FONT>         * drawn.<a name="line.282"></a>
<FONT color="green">283</FONT>         *<a name="line.283"></a>
<FONT color="green">284</FONT>         * @return The flag.<a name="line.284"></a>
<FONT color="green">285</FONT>         *<a name="line.285"></a>
<FONT color="green">286</FONT>         * @see #setOutline(boolean)<a name="line.286"></a>
<FONT color="green">287</FONT>         */<a name="line.287"></a>
<FONT color="green">288</FONT>        public boolean isOutline() {<a name="line.288"></a>
<FONT color="green">289</FONT>            return this.showOutline;<a name="line.289"></a>
<FONT color="green">290</FONT>        }<a name="line.290"></a>
<FONT color="green">291</FONT>    <a name="line.291"></a>
<FONT color="green">292</FONT>        /**<a name="line.292"></a>
<FONT color="green">293</FONT>         * Sets a flag that controls whether or not outlines of the areas are drawn<a name="line.293"></a>
<FONT color="green">294</FONT>         * and sends a {@link RendererChangeEvent} to all registered listeners.<a name="line.294"></a>
<FONT color="green">295</FONT>         *<a name="line.295"></a>
<FONT color="green">296</FONT>         * @param show  the flag.<a name="line.296"></a>
<FONT color="green">297</FONT>         *<a name="line.297"></a>
<FONT color="green">298</FONT>         * @see #isOutline()<a name="line.298"></a>
<FONT color="green">299</FONT>         */<a name="line.299"></a>
<FONT color="green">300</FONT>        public void setOutline(boolean show) {<a name="line.300"></a>
<FONT color="green">301</FONT>            this.showOutline = show;<a name="line.301"></a>
<FONT color="green">302</FONT>            fireChangeEvent();<a name="line.302"></a>
<FONT color="green">303</FONT>        }<a name="line.303"></a>
<FONT color="green">304</FONT>    <a name="line.304"></a>
<FONT color="green">305</FONT>        /**<a name="line.305"></a>
<FONT color="green">306</FONT>         * Returns the shape used to represent an area in the legend.<a name="line.306"></a>
<FONT color="green">307</FONT>         *<a name="line.307"></a>
<FONT color="green">308</FONT>         * @return The legend area (never &lt;code&gt;null&lt;/code&gt;).<a name="line.308"></a>
<FONT color="green">309</FONT>         */<a name="line.309"></a>
<FONT color="green">310</FONT>        public Shape getLegendArea() {<a name="line.310"></a>
<FONT color="green">311</FONT>            return this.legendArea;<a name="line.311"></a>
<FONT color="green">312</FONT>        }<a name="line.312"></a>
<FONT color="green">313</FONT>    <a name="line.313"></a>
<FONT color="green">314</FONT>        /**<a name="line.314"></a>
<FONT color="green">315</FONT>         * Sets the shape used as an area in each legend item and sends a<a name="line.315"></a>
<FONT color="green">316</FONT>         * {@link RendererChangeEvent} to all registered listeners.<a name="line.316"></a>
<FONT color="green">317</FONT>         *<a name="line.317"></a>
<FONT color="green">318</FONT>         * @param area  the area (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.318"></a>
<FONT color="green">319</FONT>         */<a name="line.319"></a>
<FONT color="green">320</FONT>        public void setLegendArea(Shape area) {<a name="line.320"></a>
<FONT color="green">321</FONT>            if (area == null) {<a name="line.321"></a>
<FONT color="green">322</FONT>                throw new IllegalArgumentException("Null 'area' argument.");<a name="line.322"></a>
<FONT color="green">323</FONT>            }<a name="line.323"></a>
<FONT color="green">324</FONT>            this.legendArea = area;<a name="line.324"></a>
<FONT color="green">325</FONT>            fireChangeEvent();<a name="line.325"></a>
<FONT color="green">326</FONT>        }<a name="line.326"></a>
<FONT color="green">327</FONT>    <a name="line.327"></a>
<FONT color="green">328</FONT>        /**<a name="line.328"></a>
<FONT color="green">329</FONT>         * Initialises the renderer and returns a state object that should be<a name="line.329"></a>
<FONT color="green">330</FONT>         * passed to all subsequent calls to the drawItem() method.<a name="line.330"></a>
<FONT color="green">331</FONT>         *<a name="line.331"></a>
<FONT color="green">332</FONT>         * @param g2  the graphics device.<a name="line.332"></a>
<FONT color="green">333</FONT>         * @param dataArea  the area inside the axes.<a name="line.333"></a>
<FONT color="green">334</FONT>         * @param plot  the plot.<a name="line.334"></a>
<FONT color="green">335</FONT>         * @param data  the data.<a name="line.335"></a>
<FONT color="green">336</FONT>         * @param info  an optional info collection object to return data back to<a name="line.336"></a>
<FONT color="green">337</FONT>         *              the caller.<a name="line.337"></a>
<FONT color="green">338</FONT>         *<a name="line.338"></a>
<FONT color="green">339</FONT>         * @return A state object for use by the renderer.<a name="line.339"></a>
<FONT color="green">340</FONT>         */<a name="line.340"></a>
<FONT color="green">341</FONT>        public XYItemRendererState initialise(Graphics2D g2, Rectangle2D dataArea,<a name="line.341"></a>
<FONT color="green">342</FONT>                XYPlot plot, XYDataset data, PlotRenderingInfo info) {<a name="line.342"></a>
<FONT color="green">343</FONT>            XYAreaRendererState state = new XYAreaRendererState(info);<a name="line.343"></a>
<FONT color="green">344</FONT>    <a name="line.344"></a>
<FONT color="green">345</FONT>            // in the rendering process, there is special handling for item<a name="line.345"></a>
<FONT color="green">346</FONT>            // zero, so we can't support processing of visible data items only<a name="line.346"></a>
<FONT color="green">347</FONT>            state.setProcessVisibleItemsOnly(false);<a name="line.347"></a>
<FONT color="green">348</FONT>            return state;<a name="line.348"></a>
<FONT color="green">349</FONT>        }<a name="line.349"></a>
<FONT color="green">350</FONT>    <a name="line.350"></a>
<FONT color="green">351</FONT>        /**<a name="line.351"></a>
<FONT color="green">352</FONT>         * Returns a default legend item for the specified series.  Subclasses<a name="line.352"></a>
<FONT color="green">353</FONT>         * should override this method to generate customised items.<a name="line.353"></a>
<FONT color="green">354</FONT>         *<a name="line.354"></a>
<FONT color="green">355</FONT>         * @param datasetIndex  the dataset index (zero-based).<a name="line.355"></a>
<FONT color="green">356</FONT>         * @param series  the series index (zero-based).<a name="line.356"></a>
<FONT color="green">357</FONT>         *<a name="line.357"></a>
<FONT color="green">358</FONT>         * @return A legend item for the series.<a name="line.358"></a>
<FONT color="green">359</FONT>         */<a name="line.359"></a>
<FONT color="green">360</FONT>        public LegendItem getLegendItem(int datasetIndex, int series) {<a name="line.360"></a>
<FONT color="green">361</FONT>            LegendItem result = null;<a name="line.361"></a>
<FONT color="green">362</FONT>            XYPlot xyplot = getPlot();<a name="line.362"></a>
<FONT color="green">363</FONT>            if (xyplot != null) {<a name="line.363"></a>
<FONT color="green">364</FONT>                XYDataset dataset = xyplot.getDataset(datasetIndex);<a name="line.364"></a>
<FONT color="green">365</FONT>                if (dataset != null) {<a name="line.365"></a>
<FONT color="green">366</FONT>                    XYSeriesLabelGenerator lg = getLegendItemLabelGenerator();<a name="line.366"></a>
<FONT color="green">367</FONT>                    String label = lg.generateLabel(dataset, series);<a name="line.367"></a>
<FONT color="green">368</FONT>                    String description = label;<a name="line.368"></a>
<FONT color="green">369</FONT>                    String toolTipText = null;<a name="line.369"></a>
<FONT color="green">370</FONT>                    if (getLegendItemToolTipGenerator() != null) {<a name="line.370"></a>
<FONT color="green">371</FONT>                        toolTipText = getLegendItemToolTipGenerator().generateLabel(<a name="line.371"></a>
<FONT color="green">372</FONT>                                dataset, series);<a name="line.372"></a>
<FONT color="green">373</FONT>                    }<a name="line.373"></a>
<FONT color="green">374</FONT>                    String urlText = null;<a name="line.374"></a>
<FONT color="green">375</FONT>                    if (getLegendItemURLGenerator() != null) {<a name="line.375"></a>
<FONT color="green">376</FONT>                        urlText = getLegendItemURLGenerator().generateLabel(<a name="line.376"></a>
<FONT color="green">377</FONT>                                dataset, series);<a name="line.377"></a>
<FONT color="green">378</FONT>                    }<a name="line.378"></a>
<FONT color="green">379</FONT>                    Paint paint = lookupSeriesPaint(series);<a name="line.379"></a>
<FONT color="green">380</FONT>                    result = new LegendItem(label, description, toolTipText,<a name="line.380"></a>
<FONT color="green">381</FONT>                            urlText, this.legendArea, paint);<a name="line.381"></a>
<FONT color="green">382</FONT>                    result.setLabelFont(lookupLegendTextFont(series));<a name="line.382"></a>
<FONT color="green">383</FONT>                    Paint labelPaint = lookupLegendTextPaint(series);<a name="line.383"></a>
<FONT color="green">384</FONT>                    if (labelPaint != null) {<a name="line.384"></a>
<FONT color="green">385</FONT>                        result.setLabelPaint(labelPaint);<a name="line.385"></a>
<FONT color="green">386</FONT>                    }<a name="line.386"></a>
<FONT color="green">387</FONT>                    result.setDataset(dataset);<a name="line.387"></a>
<FONT color="green">388</FONT>                    result.setDatasetIndex(datasetIndex);<a name="line.388"></a>
<FONT color="green">389</FONT>                    result.setSeriesKey(dataset.getSeriesKey(series));<a name="line.389"></a>
<FONT color="green">390</FONT>                    result.setSeriesIndex(series);<a name="line.390"></a>
<FONT color="green">391</FONT>                }<a name="line.391"></a>
<FONT color="green">392</FONT>            }<a name="line.392"></a>
<FONT color="green">393</FONT>            return result;<a name="line.393"></a>
<FONT color="green">394</FONT>        }<a name="line.394"></a>
<FONT color="green">395</FONT>    <a name="line.395"></a>
<FONT color="green">396</FONT>        /**<a name="line.396"></a>
<FONT color="green">397</FONT>         * Draws the visual representation of a single data item.<a name="line.397"></a>
<FONT color="green">398</FONT>         *<a name="line.398"></a>
<FONT color="green">399</FONT>         * @param g2  the graphics device.<a name="line.399"></a>
<FONT color="green">400</FONT>         * @param state  the renderer state.<a name="line.400"></a>
<FONT color="green">401</FONT>         * @param dataArea  the area within which the data is being drawn.<a name="line.401"></a>
<FONT color="green">402</FONT>         * @param info  collects information about the drawing.<a name="line.402"></a>
<FONT color="green">403</FONT>         * @param plot  the plot (can be used to obtain standard color information<a name="line.403"></a>
<FONT color="green">404</FONT>         *              etc).<a name="line.404"></a>
<FONT color="green">405</FONT>         * @param domainAxis  the domain axis.<a name="line.405"></a>
<FONT color="green">406</FONT>         * @param rangeAxis  the range axis.<a name="line.406"></a>
<FONT color="green">407</FONT>         * @param dataset  the dataset.<a name="line.407"></a>
<FONT color="green">408</FONT>         * @param series  the series index (zero-based).<a name="line.408"></a>
<FONT color="green">409</FONT>         * @param item  the item index (zero-based).<a name="line.409"></a>
<FONT color="green">410</FONT>         * @param crosshairState  crosshair information for the plot<a name="line.410"></a>
<FONT color="green">411</FONT>         *                        (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.411"></a>
<FONT color="green">412</FONT>         * @param pass  the pass index.<a name="line.412"></a>
<FONT color="green">413</FONT>         */<a name="line.413"></a>
<FONT color="green">414</FONT>        public void drawItem(Graphics2D g2, XYItemRendererState state,<a name="line.414"></a>
<FONT color="green">415</FONT>                Rectangle2D dataArea, PlotRenderingInfo info, XYPlot plot,<a name="line.415"></a>
<FONT color="green">416</FONT>                ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset,<a name="line.416"></a>
<FONT color="green">417</FONT>                int series, int item, CrosshairState crosshairState, int pass) {<a name="line.417"></a>
<FONT color="green">418</FONT>    <a name="line.418"></a>
<FONT color="green">419</FONT>            if (!getItemVisible(series, item)) {<a name="line.419"></a>
<FONT color="green">420</FONT>                return;<a name="line.420"></a>
<FONT color="green">421</FONT>            }<a name="line.421"></a>
<FONT color="green">422</FONT>            XYAreaRendererState areaState = (XYAreaRendererState) state;<a name="line.422"></a>
<FONT color="green">423</FONT>    <a name="line.423"></a>
<FONT color="green">424</FONT>            // get the data point...<a name="line.424"></a>
<FONT color="green">425</FONT>            double x1 = dataset.getXValue(series, item);<a name="line.425"></a>
<FONT color="green">426</FONT>            double y1 = dataset.getYValue(series, item);<a name="line.426"></a>
<FONT color="green">427</FONT>            if (Double.isNaN(y1)) {<a name="line.427"></a>
<FONT color="green">428</FONT>                y1 = 0.0;<a name="line.428"></a>
<FONT color="green">429</FONT>            }<a name="line.429"></a>
<FONT color="green">430</FONT>            double transX1 = domainAxis.valueToJava2D(x1, dataArea,<a name="line.430"></a>
<FONT color="green">431</FONT>                    plot.getDomainAxisEdge());<a name="line.431"></a>
<FONT color="green">432</FONT>            double transY1 = rangeAxis.valueToJava2D(y1, dataArea,<a name="line.432"></a>
<FONT color="green">433</FONT>                    plot.getRangeAxisEdge());<a name="line.433"></a>
<FONT color="green">434</FONT>    <a name="line.434"></a>
<FONT color="green">435</FONT>            // get the previous point and the next point so we can calculate a<a name="line.435"></a>
<FONT color="green">436</FONT>            // "hot spot" for the area (used by the chart entity)...<a name="line.436"></a>
<FONT color="green">437</FONT>            int itemCount = dataset.getItemCount(series);<a name="line.437"></a>
<FONT color="green">438</FONT>            double x0 = dataset.getXValue(series, Math.max(item - 1, 0));<a name="line.438"></a>
<FONT color="green">439</FONT>            double y0 = dataset.getYValue(series, Math.max(item - 1, 0));<a name="line.439"></a>
<FONT color="green">440</FONT>            if (Double.isNaN(y0)) {<a name="line.440"></a>
<FONT color="green">441</FONT>                y0 = 0.0;<a name="line.441"></a>
<FONT color="green">442</FONT>            }<a name="line.442"></a>
<FONT color="green">443</FONT>            double transX0 = domainAxis.valueToJava2D(x0, dataArea,<a name="line.443"></a>
<FONT color="green">444</FONT>                    plot.getDomainAxisEdge());<a name="line.444"></a>
<FONT color="green">445</FONT>            double transY0 = rangeAxis.valueToJava2D(y0, dataArea,<a name="line.445"></a>
<FONT color="green">446</FONT>                    plot.getRangeAxisEdge());<a name="line.446"></a>
<FONT color="green">447</FONT>    <a name="line.447"></a>
<FONT color="green">448</FONT>            double x2 = dataset.getXValue(series, Math.min(item + 1,<a name="line.448"></a>
<FONT color="green">449</FONT>                    itemCount - 1));<a name="line.449"></a>
<FONT color="green">450</FONT>            double y2 = dataset.getYValue(series, Math.min(item + 1,<a name="line.450"></a>
<FONT color="green">451</FONT>                    itemCount - 1));<a name="line.451"></a>
<FONT color="green">452</FONT>            if (Double.isNaN(y2)) {<a name="line.452"></a>
<FONT color="green">453</FONT>                y2 = 0.0;<a name="line.453"></a>
<FONT color="green">454</FONT>            }<a name="line.454"></a>
<FONT color="green">455</FONT>            double transX2 = domainAxis.valueToJava2D(x2, dataArea,<a name="line.455"></a>
<FONT color="green">456</FONT>                    plot.getDomainAxisEdge());<a name="line.456"></a>
<FONT color="green">457</FONT>            double transY2 = rangeAxis.valueToJava2D(y2, dataArea,<a name="line.457"></a>
<FONT color="green">458</FONT>                    plot.getRangeAxisEdge());<a name="line.458"></a>
<FONT color="green">459</FONT>    <a name="line.459"></a>
<FONT color="green">460</FONT>            double transZero = rangeAxis.valueToJava2D(0.0, dataArea,<a name="line.460"></a>
<FONT color="green">461</FONT>                    plot.getRangeAxisEdge());<a name="line.461"></a>
<FONT color="green">462</FONT>            Polygon hotspot = null;<a name="line.462"></a>
<FONT color="green">463</FONT>            if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {<a name="line.463"></a>
<FONT color="green">464</FONT>                hotspot = new Polygon();<a name="line.464"></a>
<FONT color="green">465</FONT>                hotspot.addPoint((int) transZero,<a name="line.465"></a>
<FONT color="green">466</FONT>                        (int) ((transX0 + transX1) / 2.0));<a name="line.466"></a>
<FONT color="green">467</FONT>                hotspot.addPoint((int) ((transY0 + transY1) / 2.0),<a name="line.467"></a>
<FONT color="green">468</FONT>                        (int) ((transX0 + transX1) / 2.0));<a name="line.468"></a>
<FONT color="green">469</FONT>                hotspot.addPoint((int) transY1, (int) transX1);<a name="line.469"></a>
<FONT color="green">470</FONT>                hotspot.addPoint((int) ((transY1 + transY2) / 2.0),<a name="line.470"></a>
<FONT color="green">471</FONT>                        (int) ((transX1 + transX2) / 2.0));<a name="line.471"></a>
<FONT color="green">472</FONT>                hotspot.addPoint((int) transZero,<a name="line.472"></a>
<FONT color="green">473</FONT>                        (int) ((transX1 + transX2) / 2.0));<a name="line.473"></a>
<FONT color="green">474</FONT>            }<a name="line.474"></a>
<FONT color="green">475</FONT>            else {  // vertical orientation<a name="line.475"></a>
<FONT color="green">476</FONT>                hotspot = new Polygon();<a name="line.476"></a>
<FONT color="green">477</FONT>                hotspot.addPoint((int) ((transX0 + transX1) / 2.0),<a name="line.477"></a>
<FONT color="green">478</FONT>                        (int) transZero);<a name="line.478"></a>
<FONT color="green">479</FONT>                hotspot.addPoint((int) ((transX0 + transX1) / 2.0),<a name="line.479"></a>
<FONT color="green">480</FONT>                        (int) ((transY0 + transY1) / 2.0));<a name="line.480"></a>
<FONT color="green">481</FONT>                hotspot.addPoint((int) transX1, (int) transY1);<a name="line.481"></a>
<FONT color="green">482</FONT>                hotspot.addPoint((int) ((transX1 + transX2) / 2.0),<a name="line.482"></a>
<FONT color="green">483</FONT>                        (int) ((transY1 + transY2) / 2.0));<a name="line.483"></a>
<FONT color="green">484</FONT>                hotspot.addPoint((int) ((transX1 + transX2) / 2.0),<a name="line.484"></a>
<FONT color="green">485</FONT>                        (int) transZero);<a name="line.485"></a>
<FONT color="green">486</FONT>            }<a name="line.486"></a>
<FONT color="green">487</FONT>    <a name="line.487"></a>
<FONT color="green">488</FONT>            if (item == 0) {  // create a new area polygon for the series<a name="line.488"></a>
<FONT color="green">489</FONT>                areaState.area = new Polygon();<a name="line.489"></a>
<FONT color="green">490</FONT>                // the first point is (x, 0)<a name="line.490"></a>
<FONT color="green">491</FONT>                double zero = rangeAxis.valueToJava2D(0.0, dataArea,<a name="line.491"></a>
<FONT color="green">492</FONT>                        plot.getRangeAxisEdge());<a name="line.492"></a>
<FONT color="green">493</FONT>                if (plot.getOrientation() == PlotOrientation.VERTICAL) {<a name="line.493"></a>
<FONT color="green">494</FONT>                    areaState.area.addPoint((int) transX1, (int) zero);<a name="line.494"></a>
<FONT color="green">495</FONT>                }<a name="line.495"></a>
<FONT color="green">496</FONT>                else if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {<a name="line.496"></a>
<FONT color="green">497</FONT>                    areaState.area.addPoint((int) zero, (int) transX1);<a name="line.497"></a>
<FONT color="green">498</FONT>                }<a name="line.498"></a>
<FONT color="green">499</FONT>            }<a name="line.499"></a>
<FONT color="green">500</FONT>    <a name="line.500"></a>
<FONT color="green">501</FONT>            // Add each point to Area (x, y)<a name="line.501"></a>
<FONT color="green">502</FONT>            if (plot.getOrientation() == PlotOrientation.VERTICAL) {<a name="line.502"></a>
<FONT color="green">503</FONT>                areaState.area.addPoint((int) transX1, (int) transY1);<a name="line.503"></a>
<FONT color="green">504</FONT>            }<a name="line.504"></a>
<FONT color="green">505</FONT>            else if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {<a name="line.505"></a>
<FONT color="green">506</FONT>                areaState.area.addPoint((int) transY1, (int) transX1);<a name="line.506"></a>
<FONT color="green">507</FONT>            }<a name="line.507"></a>
<FONT color="green">508</FONT>    <a name="line.508"></a>
<FONT color="green">509</FONT>            PlotOrientation orientation = plot.getOrientation();<a name="line.509"></a>
<FONT color="green">510</FONT>            Paint paint = getItemPaint(series, item);<a name="line.510"></a>
<FONT color="green">511</FONT>            Stroke stroke = getItemStroke(series, item);<a name="line.511"></a>
<FONT color="green">512</FONT>            g2.setPaint(paint);<a name="line.512"></a>
<FONT color="green">513</FONT>            g2.setStroke(stroke);<a name="line.513"></a>
<FONT color="green">514</FONT>    <a name="line.514"></a>
<FONT color="green">515</FONT>            Shape shape = null;<a name="line.515"></a>
<FONT color="green">516</FONT>            if (getPlotShapes()) {<a name="line.516"></a>
<FONT color="green">517</FONT>                shape = getItemShape(series, item);<a name="line.517"></a>
<FONT color="green">518</FONT>                if (orientation == PlotOrientation.VERTICAL) {<a name="line.518"></a>
<FONT color="green">519</FONT>                    shape = ShapeUtilities.createTranslatedShape(shape, transX1,<a name="line.519"></a>
<FONT color="green">520</FONT>                            transY1);<a name="line.520"></a>
<FONT color="green">521</FONT>                }<a name="line.521"></a>
<FONT color="green">522</FONT>                else if (orientation == PlotOrientation.HORIZONTAL) {<a name="line.522"></a>
<FONT color="green">523</FONT>                    shape = ShapeUtilities.createTranslatedShape(shape, transY1,<a name="line.523"></a>
<FONT color="green">524</FONT>                            transX1);<a name="line.524"></a>
<FONT color="green">525</FONT>                }<a name="line.525"></a>
<FONT color="green">526</FONT>                g2.draw(shape);<a name="line.526"></a>
<FONT color="green">527</FONT>            }<a name="line.527"></a>
<FONT color="green">528</FONT>    <a name="line.528"></a>
<FONT color="green">529</FONT>            if (getPlotLines()) {<a name="line.529"></a>
<FONT color="green">530</FONT>                if (item &gt; 0) {<a name="line.530"></a>
<FONT color="green">531</FONT>                    if (plot.getOrientation() == PlotOrientation.VERTICAL) {<a name="line.531"></a>
<FONT color="green">532</FONT>                        areaState.line.setLine(transX0, transY0, transX1, transY1);<a name="line.532"></a>
<FONT color="green">533</FONT>                    }<a name="line.533"></a>
<FONT color="green">534</FONT>                    else if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {<a name="line.534"></a>
<FONT color="green">535</FONT>                        areaState.line.setLine(transY0, transX0, transY1, transX1);<a name="line.535"></a>
<FONT color="green">536</FONT>                    }<a name="line.536"></a>
<FONT color="green">537</FONT>                    g2.draw(areaState.line);<a name="line.537"></a>
<FONT color="green">538</FONT>                }<a name="line.538"></a>
<FONT color="green">539</FONT>            }<a name="line.539"></a>
<FONT color="green">540</FONT>    <a name="line.540"></a>
<FONT color="green">541</FONT>            // Check if the item is the last item for the series.<a name="line.541"></a>
<FONT color="green">542</FONT>            // and number of items &gt; 0.  We can't draw an area for a single point.<a name="line.542"></a>
<FONT color="green">543</FONT>            if (getPlotArea() &amp;&amp; item &gt; 0 &amp;&amp; item == (itemCount - 1)) {<a name="line.543"></a>
<FONT color="green">544</FONT>    <a name="line.544"></a>
<FONT color="green">545</FONT>                if (orientation == PlotOrientation.VERTICAL) {<a name="line.545"></a>
<FONT color="green">546</FONT>                    // Add the last point (x,0)<a name="line.546"></a>
<FONT color="green">547</FONT>                    areaState.area.addPoint((int) transX1, (int) transZero);<a name="line.547"></a>
<FONT color="green">548</FONT>                }<a name="line.548"></a>
<FONT color="green">549</FONT>                else if (orientation == PlotOrientation.HORIZONTAL) {<a name="line.549"></a>
<FONT color="green">550</FONT>                    // Add the last point (x,0)<a name="line.550"></a>
<FONT color="green">551</FONT>                    areaState.area.addPoint((int) transZero, (int) transX1);<a name="line.551"></a>
<FONT color="green">552</FONT>                }<a name="line.552"></a>
<FONT color="green">553</FONT>    <a name="line.553"></a>
<FONT color="green">554</FONT>                g2.fill(areaState.area);<a name="line.554"></a>
<FONT color="green">555</FONT>    <a name="line.555"></a>
<FONT color="green">556</FONT>                // draw an outline around the Area.<a name="line.556"></a>
<FONT color="green">557</FONT>                if (isOutline()) {<a name="line.557"></a>
<FONT color="green">558</FONT>                    Shape area = areaState.area;<a name="line.558"></a>
<FONT color="green">559</FONT>    <a name="line.559"></a>
<FONT color="green">560</FONT>                    // Java2D has some issues drawing dashed lines around "large"<a name="line.560"></a>
<FONT color="green">561</FONT>                    // geometrical shapes - for example, see bug 6620013 in the<a name="line.561"></a>
<FONT color="green">562</FONT>                    // Java bug database.  So, we'll check if the outline is<a name="line.562"></a>
<FONT color="green">563</FONT>                    // dashed and, if it is, do our own clipping before drawing<a name="line.563"></a>
<FONT color="green">564</FONT>                    // the outline...<a name="line.564"></a>
<FONT color="green">565</FONT>                    Stroke outlineStroke = lookupSeriesOutlineStroke(series);<a name="line.565"></a>
<FONT color="green">566</FONT>                    if (outlineStroke instanceof BasicStroke) {<a name="line.566"></a>
<FONT color="green">567</FONT>                        BasicStroke bs = (BasicStroke) outlineStroke;<a name="line.567"></a>
<FONT color="green">568</FONT>                        if (bs.getDashArray() != null) {<a name="line.568"></a>
<FONT color="green">569</FONT>                            Area poly = new Area(areaState.area);<a name="line.569"></a>
<FONT color="green">570</FONT>                            // we make the clip region slightly larger than the<a name="line.570"></a>
<FONT color="green">571</FONT>                            // dataArea so that the clipped edges don't show lines<a name="line.571"></a>
<FONT color="green">572</FONT>                            // on the chart<a name="line.572"></a>
<FONT color="green">573</FONT>                            Area clip = new Area(new Rectangle2D.Double(<a name="line.573"></a>
<FONT color="green">574</FONT>                                    dataArea.getX() - 5.0, dataArea.getY() - 5.0,<a name="line.574"></a>
<FONT color="green">575</FONT>                                    dataArea.getWidth() + 10.0,<a name="line.575"></a>
<FONT color="green">576</FONT>                                    dataArea.getHeight() + 10.0));<a name="line.576"></a>
<FONT color="green">577</FONT>                            poly.intersect(clip);<a name="line.577"></a>
<FONT color="green">578</FONT>                            area = poly;<a name="line.578"></a>
<FONT color="green">579</FONT>                        }<a name="line.579"></a>
<FONT color="green">580</FONT>                    } // end of workaround<a name="line.580"></a>
<FONT color="green">581</FONT>    <a name="line.581"></a>
<FONT color="green">582</FONT>                    g2.setStroke(outlineStroke);<a name="line.582"></a>
<FONT color="green">583</FONT>                    g2.setPaint(lookupSeriesOutlinePaint(series));<a name="line.583"></a>
<FONT color="green">584</FONT>                    g2.draw(area);<a name="line.584"></a>
<FONT color="green">585</FONT>                }<a name="line.585"></a>
<FONT color="green">586</FONT>            }<a name="line.586"></a>
<FONT color="green">587</FONT>    <a name="line.587"></a>
<FONT color="green">588</FONT>            int domainAxisIndex = plot.getDomainAxisIndex(domainAxis);<a name="line.588"></a>
<FONT color="green">589</FONT>            int rangeAxisIndex = plot.getRangeAxisIndex(rangeAxis);<a name="line.589"></a>
<FONT color="green">590</FONT>            updateCrosshairValues(crosshairState, x1, y1, domainAxisIndex,<a name="line.590"></a>
<FONT color="green">591</FONT>                    rangeAxisIndex, transX1, transY1, orientation);<a name="line.591"></a>
<FONT color="green">592</FONT>    <a name="line.592"></a>
<FONT color="green">593</FONT>            // collect entity and tool tip information...<a name="line.593"></a>
<FONT color="green">594</FONT>            EntityCollection entities = state.getEntityCollection();<a name="line.594"></a>
<FONT color="green">595</FONT>            if (entities != null &amp;&amp; hotspot != null) {<a name="line.595"></a>
<FONT color="green">596</FONT>                addEntity(entities, hotspot, dataset, series, item, 0.0, 0.0);<a name="line.596"></a>
<FONT color="green">597</FONT>            }<a name="line.597"></a>
<FONT color="green">598</FONT>    <a name="line.598"></a>
<FONT color="green">599</FONT>        }<a name="line.599"></a>
<FONT color="green">600</FONT>    <a name="line.600"></a>
<FONT color="green">601</FONT>        /**<a name="line.601"></a>
<FONT color="green">602</FONT>         * Returns a clone of the renderer.<a name="line.602"></a>
<FONT color="green">603</FONT>         *<a name="line.603"></a>
<FONT color="green">604</FONT>         * @return A clone.<a name="line.604"></a>
<FONT color="green">605</FONT>         *<a name="line.605"></a>
<FONT color="green">606</FONT>         * @throws CloneNotSupportedException  if the renderer cannot be cloned.<a name="line.606"></a>
<FONT color="green">607</FONT>         */<a name="line.607"></a>
<FONT color="green">608</FONT>        public Object clone() throws CloneNotSupportedException {<a name="line.608"></a>
<FONT color="green">609</FONT>            XYAreaRenderer clone = (XYAreaRenderer) super.clone();<a name="line.609"></a>
<FONT color="green">610</FONT>            clone.legendArea = ShapeUtilities.clone(this.legendArea);<a name="line.610"></a>
<FONT color="green">611</FONT>            return clone;<a name="line.611"></a>
<FONT color="green">612</FONT>        }<a name="line.612"></a>
<FONT color="green">613</FONT>    <a name="line.613"></a>
<FONT color="green">614</FONT>        /**<a name="line.614"></a>
<FONT color="green">615</FONT>         * Tests this renderer for equality with an arbitrary object.<a name="line.615"></a>
<FONT color="green">616</FONT>         *<a name="line.616"></a>
<FONT color="green">617</FONT>         * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.617"></a>
<FONT color="green">618</FONT>         *<a name="line.618"></a>
<FONT color="green">619</FONT>         * @return A boolean.<a name="line.619"></a>
<FONT color="green">620</FONT>         */<a name="line.620"></a>
<FONT color="green">621</FONT>        public boolean equals(Object obj) {<a name="line.621"></a>
<FONT color="green">622</FONT>            if (obj == this) {<a name="line.622"></a>
<FONT color="green">623</FONT>                return true;<a name="line.623"></a>
<FONT color="green">624</FONT>            }<a name="line.624"></a>
<FONT color="green">625</FONT>            if (!(obj instanceof XYAreaRenderer)) {<a name="line.625"></a>
<FONT color="green">626</FONT>                return false;<a name="line.626"></a>
<FONT color="green">627</FONT>            }<a name="line.627"></a>
<FONT color="green">628</FONT>            XYAreaRenderer that = (XYAreaRenderer) obj;<a name="line.628"></a>
<FONT color="green">629</FONT>            if (this.plotArea != that.plotArea) {<a name="line.629"></a>
<FONT color="green">630</FONT>                return false;<a name="line.630"></a>
<FONT color="green">631</FONT>            }<a name="line.631"></a>
<FONT color="green">632</FONT>            if (this.plotLines != that.plotLines) {<a name="line.632"></a>
<FONT color="green">633</FONT>                return false;<a name="line.633"></a>
<FONT color="green">634</FONT>            }<a name="line.634"></a>
<FONT color="green">635</FONT>            if (this.plotShapes != that.plotShapes) {<a name="line.635"></a>
<FONT color="green">636</FONT>                return false;<a name="line.636"></a>
<FONT color="green">637</FONT>            }<a name="line.637"></a>
<FONT color="green">638</FONT>            if (this.showOutline != that.showOutline) {<a name="line.638"></a>
<FONT color="green">639</FONT>                return false;<a name="line.639"></a>
<FONT color="green">640</FONT>            }<a name="line.640"></a>
<FONT color="green">641</FONT>            if (!ShapeUtilities.equal(this.legendArea, that.legendArea)) {<a name="line.641"></a>
<FONT color="green">642</FONT>                return false;<a name="line.642"></a>
<FONT color="green">643</FONT>            }<a name="line.643"></a>
<FONT color="green">644</FONT>            return true;<a name="line.644"></a>
<FONT color="green">645</FONT>        }<a name="line.645"></a>
<FONT color="green">646</FONT>    <a name="line.646"></a>
<FONT color="green">647</FONT>        /**<a name="line.647"></a>
<FONT color="green">648</FONT>         * Provides serialization support.<a name="line.648"></a>
<FONT color="green">649</FONT>         *<a name="line.649"></a>
<FONT color="green">650</FONT>         * @param stream  the input stream.<a name="line.650"></a>
<FONT color="green">651</FONT>         *<a name="line.651"></a>
<FONT color="green">652</FONT>         * @throws IOException  if there is an I/O error.<a name="line.652"></a>
<FONT color="green">653</FONT>         * @throws ClassNotFoundException  if there is a classpath problem.<a name="line.653"></a>
<FONT color="green">654</FONT>         */<a name="line.654"></a>
<FONT color="green">655</FONT>        private void readObject(ObjectInputStream stream)<a name="line.655"></a>
<FONT color="green">656</FONT>                throws IOException, ClassNotFoundException {<a name="line.656"></a>
<FONT color="green">657</FONT>            stream.defaultReadObject();<a name="line.657"></a>
<FONT color="green">658</FONT>            this.legendArea = SerialUtilities.readShape(stream);<a name="line.658"></a>
<FONT color="green">659</FONT>        }<a name="line.659"></a>
<FONT color="green">660</FONT>    <a name="line.660"></a>
<FONT color="green">661</FONT>        /**<a name="line.661"></a>
<FONT color="green">662</FONT>         * Provides serialization support.<a name="line.662"></a>
<FONT color="green">663</FONT>         *<a name="line.663"></a>
<FONT color="green">664</FONT>         * @param stream  the output stream.<a name="line.664"></a>
<FONT color="green">665</FONT>         *<a name="line.665"></a>
<FONT color="green">666</FONT>         * @throws IOException  if there is an I/O error.<a name="line.666"></a>
<FONT color="green">667</FONT>         */<a name="line.667"></a>
<FONT color="green">668</FONT>        private void writeObject(ObjectOutputStream stream) throws IOException {<a name="line.668"></a>
<FONT color="green">669</FONT>            stream.defaultWriteObject();<a name="line.669"></a>
<FONT color="green">670</FONT>            SerialUtilities.writeShape(this.legendArea, stream);<a name="line.670"></a>
<FONT color="green">671</FONT>        }<a name="line.671"></a>
<FONT color="green">672</FONT>    }<a name="line.672"></a>




























































</PRE>
</BODY>
</HTML>
