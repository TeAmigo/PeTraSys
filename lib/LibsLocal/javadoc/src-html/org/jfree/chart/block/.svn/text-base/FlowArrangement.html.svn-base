<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ===========================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JFreeChart : a free chart library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ===========================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     *<a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jfreechart/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it<a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by<a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or<a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but<a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY<a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public<a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,<a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.<a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc.<a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     *<a name="line.26"></a>
<FONT color="green">027</FONT>     * --------------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * FlowArrangement.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * --------------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C) Copyright 2004-2008, by Object Refinery Limited.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  David Gilbert (for Object Refinery Limited);<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   -;<a name="line.33"></a>
<FONT color="green">034</FONT>     *<a name="line.34"></a>
<FONT color="green">035</FONT>     * Changes:<a name="line.35"></a>
<FONT color="green">036</FONT>     * --------<a name="line.36"></a>
<FONT color="green">037</FONT>     * 22-Oct-2004 : Version 1 (DG);<a name="line.37"></a>
<FONT color="green">038</FONT>     * 04-Feb-2005 : Implemented equals() and made serializable (DG);<a name="line.38"></a>
<FONT color="green">039</FONT>     * 08-Feb-2005 : Updated for changes in RectangleConstraint (DG);<a name="line.39"></a>
<FONT color="green">040</FONT>     *<a name="line.40"></a>
<FONT color="green">041</FONT>     */<a name="line.41"></a>
<FONT color="green">042</FONT>    <a name="line.42"></a>
<FONT color="green">043</FONT>    package org.jfree.chart.block;<a name="line.43"></a>
<FONT color="green">044</FONT>    <a name="line.44"></a>
<FONT color="green">045</FONT>    import java.awt.Graphics2D;<a name="line.45"></a>
<FONT color="green">046</FONT>    import java.awt.geom.Rectangle2D;<a name="line.46"></a>
<FONT color="green">047</FONT>    import java.io.Serializable;<a name="line.47"></a>
<FONT color="green">048</FONT>    import java.util.ArrayList;<a name="line.48"></a>
<FONT color="green">049</FONT>    import java.util.List;<a name="line.49"></a>
<FONT color="green">050</FONT>    <a name="line.50"></a>
<FONT color="green">051</FONT>    import org.jfree.ui.HorizontalAlignment;<a name="line.51"></a>
<FONT color="green">052</FONT>    import org.jfree.ui.Size2D;<a name="line.52"></a>
<FONT color="green">053</FONT>    import org.jfree.ui.VerticalAlignment;<a name="line.53"></a>
<FONT color="green">054</FONT>    <a name="line.54"></a>
<FONT color="green">055</FONT>    /**<a name="line.55"></a>
<FONT color="green">056</FONT>     * Arranges blocks in a flow layout.  This class is immutable.<a name="line.56"></a>
<FONT color="green">057</FONT>     */<a name="line.57"></a>
<FONT color="green">058</FONT>    public class FlowArrangement implements Arrangement, Serializable {<a name="line.58"></a>
<FONT color="green">059</FONT>    <a name="line.59"></a>
<FONT color="green">060</FONT>        /** For serialization. */<a name="line.60"></a>
<FONT color="green">061</FONT>        private static final long serialVersionUID = 4543632485478613800L;<a name="line.61"></a>
<FONT color="green">062</FONT>    <a name="line.62"></a>
<FONT color="green">063</FONT>        /** The horizontal alignment of blocks. */<a name="line.63"></a>
<FONT color="green">064</FONT>        private HorizontalAlignment horizontalAlignment;<a name="line.64"></a>
<FONT color="green">065</FONT>    <a name="line.65"></a>
<FONT color="green">066</FONT>        /** The vertical alignment of blocks within each row. */<a name="line.66"></a>
<FONT color="green">067</FONT>        private VerticalAlignment verticalAlignment;<a name="line.67"></a>
<FONT color="green">068</FONT>    <a name="line.68"></a>
<FONT color="green">069</FONT>        /** The horizontal gap between items within rows. */<a name="line.69"></a>
<FONT color="green">070</FONT>        private double horizontalGap;<a name="line.70"></a>
<FONT color="green">071</FONT>    <a name="line.71"></a>
<FONT color="green">072</FONT>        /** The vertical gap between rows. */<a name="line.72"></a>
<FONT color="green">073</FONT>        private double verticalGap;<a name="line.73"></a>
<FONT color="green">074</FONT>    <a name="line.74"></a>
<FONT color="green">075</FONT>        /**<a name="line.75"></a>
<FONT color="green">076</FONT>         * Creates a new instance.<a name="line.76"></a>
<FONT color="green">077</FONT>         */<a name="line.77"></a>
<FONT color="green">078</FONT>        public FlowArrangement() {<a name="line.78"></a>
<FONT color="green">079</FONT>            this(HorizontalAlignment.CENTER, VerticalAlignment.CENTER, 2.0, 2.0);<a name="line.79"></a>
<FONT color="green">080</FONT>        }<a name="line.80"></a>
<FONT color="green">081</FONT>    <a name="line.81"></a>
<FONT color="green">082</FONT>        /**<a name="line.82"></a>
<FONT color="green">083</FONT>         * Creates a new instance.<a name="line.83"></a>
<FONT color="green">084</FONT>         *<a name="line.84"></a>
<FONT color="green">085</FONT>         * @param hAlign  the horizontal alignment (currently ignored).<a name="line.85"></a>
<FONT color="green">086</FONT>         * @param vAlign  the vertical alignment (currently ignored).<a name="line.86"></a>
<FONT color="green">087</FONT>         * @param hGap  the horizontal gap.<a name="line.87"></a>
<FONT color="green">088</FONT>         * @param vGap  the vertical gap.<a name="line.88"></a>
<FONT color="green">089</FONT>         */<a name="line.89"></a>
<FONT color="green">090</FONT>        public FlowArrangement(HorizontalAlignment hAlign, VerticalAlignment vAlign,<a name="line.90"></a>
<FONT color="green">091</FONT>                               double hGap, double vGap) {<a name="line.91"></a>
<FONT color="green">092</FONT>            this.horizontalAlignment = hAlign;<a name="line.92"></a>
<FONT color="green">093</FONT>            this.verticalAlignment = vAlign;<a name="line.93"></a>
<FONT color="green">094</FONT>            this.horizontalGap = hGap;<a name="line.94"></a>
<FONT color="green">095</FONT>            this.verticalGap = vGap;<a name="line.95"></a>
<FONT color="green">096</FONT>        }<a name="line.96"></a>
<FONT color="green">097</FONT>    <a name="line.97"></a>
<FONT color="green">098</FONT>        /**<a name="line.98"></a>
<FONT color="green">099</FONT>         * Adds a block to be managed by this instance.  This method is usually<a name="line.99"></a>
<FONT color="green">100</FONT>         * called by the {@link BlockContainer}, you shouldn't need to call it<a name="line.100"></a>
<FONT color="green">101</FONT>         * directly.<a name="line.101"></a>
<FONT color="green">102</FONT>         *<a name="line.102"></a>
<FONT color="green">103</FONT>         * @param block  the block.<a name="line.103"></a>
<FONT color="green">104</FONT>         * @param key  a key that controls the position of the block.<a name="line.104"></a>
<FONT color="green">105</FONT>         */<a name="line.105"></a>
<FONT color="green">106</FONT>        public void add(Block block, Object key) {<a name="line.106"></a>
<FONT color="green">107</FONT>            // since the flow layout is relatively straightforward,<a name="line.107"></a>
<FONT color="green">108</FONT>            // no information needs to be recorded here<a name="line.108"></a>
<FONT color="green">109</FONT>        }<a name="line.109"></a>
<FONT color="green">110</FONT>    <a name="line.110"></a>
<FONT color="green">111</FONT>        /**<a name="line.111"></a>
<FONT color="green">112</FONT>         * Calculates and sets the bounds of all the items in the specified<a name="line.112"></a>
<FONT color="green">113</FONT>         * container, subject to the given constraint.  The &lt;code&gt;Graphics2D&lt;/code&gt;<a name="line.113"></a>
<FONT color="green">114</FONT>         * can be used by some items (particularly items containing text) to<a name="line.114"></a>
<FONT color="green">115</FONT>         * calculate sizing parameters.<a name="line.115"></a>
<FONT color="green">116</FONT>         *<a name="line.116"></a>
<FONT color="green">117</FONT>         * @param container  the container whose items are being arranged.<a name="line.117"></a>
<FONT color="green">118</FONT>         * @param constraint  the size constraint.<a name="line.118"></a>
<FONT color="green">119</FONT>         * @param g2  the graphics device.<a name="line.119"></a>
<FONT color="green">120</FONT>         *<a name="line.120"></a>
<FONT color="green">121</FONT>         * @return The size of the container after arrangement of the contents.<a name="line.121"></a>
<FONT color="green">122</FONT>         */<a name="line.122"></a>
<FONT color="green">123</FONT>        public Size2D arrange(BlockContainer container, Graphics2D g2,<a name="line.123"></a>
<FONT color="green">124</FONT>                              RectangleConstraint constraint) {<a name="line.124"></a>
<FONT color="green">125</FONT>    <a name="line.125"></a>
<FONT color="green">126</FONT>            LengthConstraintType w = constraint.getWidthConstraintType();<a name="line.126"></a>
<FONT color="green">127</FONT>            LengthConstraintType h = constraint.getHeightConstraintType();<a name="line.127"></a>
<FONT color="green">128</FONT>            if (w == LengthConstraintType.NONE) {<a name="line.128"></a>
<FONT color="green">129</FONT>                if (h == LengthConstraintType.NONE) {<a name="line.129"></a>
<FONT color="green">130</FONT>                    return arrangeNN(container, g2);<a name="line.130"></a>
<FONT color="green">131</FONT>                }<a name="line.131"></a>
<FONT color="green">132</FONT>                else if (h == LengthConstraintType.FIXED) {<a name="line.132"></a>
<FONT color="green">133</FONT>                    return arrangeNF(container, g2, constraint);<a name="line.133"></a>
<FONT color="green">134</FONT>                }<a name="line.134"></a>
<FONT color="green">135</FONT>                else if (h == LengthConstraintType.RANGE) {<a name="line.135"></a>
<FONT color="green">136</FONT>                    throw new RuntimeException("Not implemented.");<a name="line.136"></a>
<FONT color="green">137</FONT>                }<a name="line.137"></a>
<FONT color="green">138</FONT>            }<a name="line.138"></a>
<FONT color="green">139</FONT>            else if (w == LengthConstraintType.FIXED) {<a name="line.139"></a>
<FONT color="green">140</FONT>                if (h == LengthConstraintType.NONE) {<a name="line.140"></a>
<FONT color="green">141</FONT>                    return arrangeFN(container, g2, constraint);<a name="line.141"></a>
<FONT color="green">142</FONT>                }<a name="line.142"></a>
<FONT color="green">143</FONT>                else if (h == LengthConstraintType.FIXED) {<a name="line.143"></a>
<FONT color="green">144</FONT>                    return arrangeFF(container, g2, constraint);<a name="line.144"></a>
<FONT color="green">145</FONT>                }<a name="line.145"></a>
<FONT color="green">146</FONT>                else if (h == LengthConstraintType.RANGE) {<a name="line.146"></a>
<FONT color="green">147</FONT>                    return arrangeFR(container, g2, constraint);<a name="line.147"></a>
<FONT color="green">148</FONT>                }<a name="line.148"></a>
<FONT color="green">149</FONT>            }<a name="line.149"></a>
<FONT color="green">150</FONT>            else if (w == LengthConstraintType.RANGE) {<a name="line.150"></a>
<FONT color="green">151</FONT>                if (h == LengthConstraintType.NONE) {<a name="line.151"></a>
<FONT color="green">152</FONT>                    return arrangeRN(container, g2, constraint);<a name="line.152"></a>
<FONT color="green">153</FONT>                }<a name="line.153"></a>
<FONT color="green">154</FONT>                else if (h == LengthConstraintType.FIXED) {<a name="line.154"></a>
<FONT color="green">155</FONT>                    return arrangeRF(container, g2, constraint);<a name="line.155"></a>
<FONT color="green">156</FONT>                }<a name="line.156"></a>
<FONT color="green">157</FONT>                else if (h == LengthConstraintType.RANGE) {<a name="line.157"></a>
<FONT color="green">158</FONT>                    return arrangeRR(container, g2, constraint);<a name="line.158"></a>
<FONT color="green">159</FONT>                }<a name="line.159"></a>
<FONT color="green">160</FONT>            }<a name="line.160"></a>
<FONT color="green">161</FONT>            throw new RuntimeException("Unrecognised constraint type.");<a name="line.161"></a>
<FONT color="green">162</FONT>    <a name="line.162"></a>
<FONT color="green">163</FONT>        }<a name="line.163"></a>
<FONT color="green">164</FONT>    <a name="line.164"></a>
<FONT color="green">165</FONT>        /**<a name="line.165"></a>
<FONT color="green">166</FONT>         * Arranges the blocks in the container with a fixed width and no height<a name="line.166"></a>
<FONT color="green">167</FONT>         * constraint.<a name="line.167"></a>
<FONT color="green">168</FONT>         *<a name="line.168"></a>
<FONT color="green">169</FONT>         * @param container  the container.<a name="line.169"></a>
<FONT color="green">170</FONT>         * @param constraint  the constraint.<a name="line.170"></a>
<FONT color="green">171</FONT>         * @param g2  the graphics device.<a name="line.171"></a>
<FONT color="green">172</FONT>         *<a name="line.172"></a>
<FONT color="green">173</FONT>         * @return The size.<a name="line.173"></a>
<FONT color="green">174</FONT>         */<a name="line.174"></a>
<FONT color="green">175</FONT>        protected Size2D arrangeFN(BlockContainer container, Graphics2D g2,<a name="line.175"></a>
<FONT color="green">176</FONT>                                   RectangleConstraint constraint) {<a name="line.176"></a>
<FONT color="green">177</FONT>    <a name="line.177"></a>
<FONT color="green">178</FONT>            List blocks = container.getBlocks();<a name="line.178"></a>
<FONT color="green">179</FONT>            double width = constraint.getWidth();<a name="line.179"></a>
<FONT color="green">180</FONT>    <a name="line.180"></a>
<FONT color="green">181</FONT>            double x = 0.0;<a name="line.181"></a>
<FONT color="green">182</FONT>            double y = 0.0;<a name="line.182"></a>
<FONT color="green">183</FONT>            double maxHeight = 0.0;<a name="line.183"></a>
<FONT color="green">184</FONT>            List itemsInRow = new ArrayList();<a name="line.184"></a>
<FONT color="green">185</FONT>            for (int i = 0; i &lt; blocks.size(); i++) {<a name="line.185"></a>
<FONT color="green">186</FONT>                Block block = (Block) blocks.get(i);<a name="line.186"></a>
<FONT color="green">187</FONT>                Size2D size = block.arrange(g2, RectangleConstraint.NONE);<a name="line.187"></a>
<FONT color="green">188</FONT>                if (x + size.width &lt;= width) {<a name="line.188"></a>
<FONT color="green">189</FONT>                    itemsInRow.add(block);<a name="line.189"></a>
<FONT color="green">190</FONT>                    block.setBounds(<a name="line.190"></a>
<FONT color="green">191</FONT>                        new Rectangle2D.Double(x, y, size.width, size.height)<a name="line.191"></a>
<FONT color="green">192</FONT>                    );<a name="line.192"></a>
<FONT color="green">193</FONT>                    x = x + size.width + this.horizontalGap;<a name="line.193"></a>
<FONT color="green">194</FONT>                    maxHeight = Math.max(maxHeight, size.height);<a name="line.194"></a>
<FONT color="green">195</FONT>                }<a name="line.195"></a>
<FONT color="green">196</FONT>                else {<a name="line.196"></a>
<FONT color="green">197</FONT>                    if (itemsInRow.isEmpty()) {<a name="line.197"></a>
<FONT color="green">198</FONT>                        // place in this row (truncated) anyway<a name="line.198"></a>
<FONT color="green">199</FONT>                        block.setBounds(<a name="line.199"></a>
<FONT color="green">200</FONT>                            new Rectangle2D.Double(<a name="line.200"></a>
<FONT color="green">201</FONT>                                x, y, Math.min(size.width, width - x), size.height<a name="line.201"></a>
<FONT color="green">202</FONT>                            )<a name="line.202"></a>
<FONT color="green">203</FONT>                        );<a name="line.203"></a>
<FONT color="green">204</FONT>                        x = 0.0;<a name="line.204"></a>
<FONT color="green">205</FONT>                        y = y + size.height + this.verticalGap;<a name="line.205"></a>
<FONT color="green">206</FONT>                    }<a name="line.206"></a>
<FONT color="green">207</FONT>                    else {<a name="line.207"></a>
<FONT color="green">208</FONT>                        // start new row<a name="line.208"></a>
<FONT color="green">209</FONT>                        itemsInRow.clear();<a name="line.209"></a>
<FONT color="green">210</FONT>                        x = 0.0;<a name="line.210"></a>
<FONT color="green">211</FONT>                        y = y + maxHeight + this.verticalGap;<a name="line.211"></a>
<FONT color="green">212</FONT>                        maxHeight = size.height;<a name="line.212"></a>
<FONT color="green">213</FONT>                        block.setBounds(<a name="line.213"></a>
<FONT color="green">214</FONT>                            new Rectangle2D.Double(<a name="line.214"></a>
<FONT color="green">215</FONT>                                x, y, Math.min(size.width, width), size.height<a name="line.215"></a>
<FONT color="green">216</FONT>                            )<a name="line.216"></a>
<FONT color="green">217</FONT>                        );<a name="line.217"></a>
<FONT color="green">218</FONT>                        x = size.width + this.horizontalGap;<a name="line.218"></a>
<FONT color="green">219</FONT>                        itemsInRow.add(block);<a name="line.219"></a>
<FONT color="green">220</FONT>                    }<a name="line.220"></a>
<FONT color="green">221</FONT>                }<a name="line.221"></a>
<FONT color="green">222</FONT>            }<a name="line.222"></a>
<FONT color="green">223</FONT>            return new Size2D(constraint.getWidth(), y + maxHeight);<a name="line.223"></a>
<FONT color="green">224</FONT>        }<a name="line.224"></a>
<FONT color="green">225</FONT>    <a name="line.225"></a>
<FONT color="green">226</FONT>        /**<a name="line.226"></a>
<FONT color="green">227</FONT>         * Arranges the blocks in the container with a fixed width and a range<a name="line.227"></a>
<FONT color="green">228</FONT>         * constraint on the height.<a name="line.228"></a>
<FONT color="green">229</FONT>         *<a name="line.229"></a>
<FONT color="green">230</FONT>         * @param container  the container.<a name="line.230"></a>
<FONT color="green">231</FONT>         * @param constraint  the constraint.<a name="line.231"></a>
<FONT color="green">232</FONT>         * @param g2  the graphics device.<a name="line.232"></a>
<FONT color="green">233</FONT>         *<a name="line.233"></a>
<FONT color="green">234</FONT>         * @return The size following the arrangement.<a name="line.234"></a>
<FONT color="green">235</FONT>         */<a name="line.235"></a>
<FONT color="green">236</FONT>        protected Size2D arrangeFR(BlockContainer container, Graphics2D g2,<a name="line.236"></a>
<FONT color="green">237</FONT>                                   RectangleConstraint constraint) {<a name="line.237"></a>
<FONT color="green">238</FONT>    <a name="line.238"></a>
<FONT color="green">239</FONT>            Size2D s = arrangeFN(container, g2, constraint);<a name="line.239"></a>
<FONT color="green">240</FONT>            if (constraint.getHeightRange().contains(s.height)) {<a name="line.240"></a>
<FONT color="green">241</FONT>                return s;<a name="line.241"></a>
<FONT color="green">242</FONT>            }<a name="line.242"></a>
<FONT color="green">243</FONT>            else {<a name="line.243"></a>
<FONT color="green">244</FONT>                RectangleConstraint c = constraint.toFixedHeight(<a name="line.244"></a>
<FONT color="green">245</FONT>                    constraint.getHeightRange().constrain(s.getHeight())<a name="line.245"></a>
<FONT color="green">246</FONT>                );<a name="line.246"></a>
<FONT color="green">247</FONT>                return arrangeFF(container, g2, c);<a name="line.247"></a>
<FONT color="green">248</FONT>            }<a name="line.248"></a>
<FONT color="green">249</FONT>        }<a name="line.249"></a>
<FONT color="green">250</FONT>    <a name="line.250"></a>
<FONT color="green">251</FONT>        /**<a name="line.251"></a>
<FONT color="green">252</FONT>         * Arranges the blocks in the container with the overall height and width<a name="line.252"></a>
<FONT color="green">253</FONT>         * specified as fixed constraints.<a name="line.253"></a>
<FONT color="green">254</FONT>         *<a name="line.254"></a>
<FONT color="green">255</FONT>         * @param container  the container.<a name="line.255"></a>
<FONT color="green">256</FONT>         * @param constraint  the constraint.<a name="line.256"></a>
<FONT color="green">257</FONT>         * @param g2  the graphics device.<a name="line.257"></a>
<FONT color="green">258</FONT>         *<a name="line.258"></a>
<FONT color="green">259</FONT>         * @return The size following the arrangement.<a name="line.259"></a>
<FONT color="green">260</FONT>         */<a name="line.260"></a>
<FONT color="green">261</FONT>        protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,<a name="line.261"></a>
<FONT color="green">262</FONT>                                   RectangleConstraint constraint) {<a name="line.262"></a>
<FONT color="green">263</FONT>    <a name="line.263"></a>
<FONT color="green">264</FONT>            // TODO: implement this properly<a name="line.264"></a>
<FONT color="green">265</FONT>            return arrangeFN(container, g2, constraint);<a name="line.265"></a>
<FONT color="green">266</FONT>        }<a name="line.266"></a>
<FONT color="green">267</FONT>    <a name="line.267"></a>
<FONT color="green">268</FONT>        /**<a name="line.268"></a>
<FONT color="green">269</FONT>         * Arranges the blocks with the overall width and height to fit within<a name="line.269"></a>
<FONT color="green">270</FONT>         * specified ranges.<a name="line.270"></a>
<FONT color="green">271</FONT>         *<a name="line.271"></a>
<FONT color="green">272</FONT>         * @param container  the container.<a name="line.272"></a>
<FONT color="green">273</FONT>         * @param constraint  the constraint.<a name="line.273"></a>
<FONT color="green">274</FONT>         * @param g2  the graphics device.<a name="line.274"></a>
<FONT color="green">275</FONT>         *<a name="line.275"></a>
<FONT color="green">276</FONT>         * @return The size after the arrangement.<a name="line.276"></a>
<FONT color="green">277</FONT>         */<a name="line.277"></a>
<FONT color="green">278</FONT>        protected Size2D arrangeRR(BlockContainer container, Graphics2D g2,<a name="line.278"></a>
<FONT color="green">279</FONT>                                   RectangleConstraint constraint) {<a name="line.279"></a>
<FONT color="green">280</FONT>    <a name="line.280"></a>
<FONT color="green">281</FONT>            // first arrange without constraints, and see if this fits within<a name="line.281"></a>
<FONT color="green">282</FONT>            // the required ranges...<a name="line.282"></a>
<FONT color="green">283</FONT>            Size2D s1 = arrangeNN(container, g2);<a name="line.283"></a>
<FONT color="green">284</FONT>            if (constraint.getWidthRange().contains(s1.width)) {<a name="line.284"></a>
<FONT color="green">285</FONT>                return s1;  // TODO: we didn't check the height yet<a name="line.285"></a>
<FONT color="green">286</FONT>            }<a name="line.286"></a>
<FONT color="green">287</FONT>            else {<a name="line.287"></a>
<FONT color="green">288</FONT>                RectangleConstraint c = constraint.toFixedWidth(<a name="line.288"></a>
<FONT color="green">289</FONT>                    constraint.getWidthRange().getUpperBound()<a name="line.289"></a>
<FONT color="green">290</FONT>                );<a name="line.290"></a>
<FONT color="green">291</FONT>                return arrangeFR(container, g2, c);<a name="line.291"></a>
<FONT color="green">292</FONT>            }<a name="line.292"></a>
<FONT color="green">293</FONT>        }<a name="line.293"></a>
<FONT color="green">294</FONT>    <a name="line.294"></a>
<FONT color="green">295</FONT>        /**<a name="line.295"></a>
<FONT color="green">296</FONT>         * Arranges the blocks in the container with a range constraint on the<a name="line.296"></a>
<FONT color="green">297</FONT>         * width and a fixed height.<a name="line.297"></a>
<FONT color="green">298</FONT>         *<a name="line.298"></a>
<FONT color="green">299</FONT>         * @param container  the container.<a name="line.299"></a>
<FONT color="green">300</FONT>         * @param constraint  the constraint.<a name="line.300"></a>
<FONT color="green">301</FONT>         * @param g2  the graphics device.<a name="line.301"></a>
<FONT color="green">302</FONT>         *<a name="line.302"></a>
<FONT color="green">303</FONT>         * @return The size following the arrangement.<a name="line.303"></a>
<FONT color="green">304</FONT>         */<a name="line.304"></a>
<FONT color="green">305</FONT>        protected Size2D arrangeRF(BlockContainer container, Graphics2D g2,<a name="line.305"></a>
<FONT color="green">306</FONT>                                   RectangleConstraint constraint) {<a name="line.306"></a>
<FONT color="green">307</FONT>    <a name="line.307"></a>
<FONT color="green">308</FONT>            Size2D s = arrangeNF(container, g2, constraint);<a name="line.308"></a>
<FONT color="green">309</FONT>            if (constraint.getWidthRange().contains(s.width)) {<a name="line.309"></a>
<FONT color="green">310</FONT>                return s;<a name="line.310"></a>
<FONT color="green">311</FONT>            }<a name="line.311"></a>
<FONT color="green">312</FONT>            else {<a name="line.312"></a>
<FONT color="green">313</FONT>                RectangleConstraint c = constraint.toFixedWidth(<a name="line.313"></a>
<FONT color="green">314</FONT>                    constraint.getWidthRange().constrain(s.getWidth())<a name="line.314"></a>
<FONT color="green">315</FONT>                );<a name="line.315"></a>
<FONT color="green">316</FONT>                return arrangeFF(container, g2, c);<a name="line.316"></a>
<FONT color="green">317</FONT>            }<a name="line.317"></a>
<FONT color="green">318</FONT>        }<a name="line.318"></a>
<FONT color="green">319</FONT>    <a name="line.319"></a>
<FONT color="green">320</FONT>        /**<a name="line.320"></a>
<FONT color="green">321</FONT>         * Arranges the block with a range constraint on the width, and no<a name="line.321"></a>
<FONT color="green">322</FONT>         * constraint on the height.<a name="line.322"></a>
<FONT color="green">323</FONT>         *<a name="line.323"></a>
<FONT color="green">324</FONT>         * @param container  the container.<a name="line.324"></a>
<FONT color="green">325</FONT>         * @param constraint  the constraint.<a name="line.325"></a>
<FONT color="green">326</FONT>         * @param g2  the graphics device.<a name="line.326"></a>
<FONT color="green">327</FONT>         *<a name="line.327"></a>
<FONT color="green">328</FONT>         * @return The size following the arrangement.<a name="line.328"></a>
<FONT color="green">329</FONT>         */<a name="line.329"></a>
<FONT color="green">330</FONT>        protected Size2D arrangeRN(BlockContainer container, Graphics2D g2,<a name="line.330"></a>
<FONT color="green">331</FONT>                                   RectangleConstraint constraint) {<a name="line.331"></a>
<FONT color="green">332</FONT>            // first arrange without constraints, then see if the width fits<a name="line.332"></a>
<FONT color="green">333</FONT>            // within the required range...if not, call arrangeFN() at max width<a name="line.333"></a>
<FONT color="green">334</FONT>            Size2D s1 = arrangeNN(container, g2);<a name="line.334"></a>
<FONT color="green">335</FONT>            if (constraint.getWidthRange().contains(s1.width)) {<a name="line.335"></a>
<FONT color="green">336</FONT>                return s1;<a name="line.336"></a>
<FONT color="green">337</FONT>            }<a name="line.337"></a>
<FONT color="green">338</FONT>            else {<a name="line.338"></a>
<FONT color="green">339</FONT>                RectangleConstraint c = constraint.toFixedWidth(<a name="line.339"></a>
<FONT color="green">340</FONT>                    constraint.getWidthRange().getUpperBound()<a name="line.340"></a>
<FONT color="green">341</FONT>                );<a name="line.341"></a>
<FONT color="green">342</FONT>                return arrangeFN(container, g2, c);<a name="line.342"></a>
<FONT color="green">343</FONT>            }<a name="line.343"></a>
<FONT color="green">344</FONT>        }<a name="line.344"></a>
<FONT color="green">345</FONT>    <a name="line.345"></a>
<FONT color="green">346</FONT>        /**<a name="line.346"></a>
<FONT color="green">347</FONT>         * Arranges the blocks without any constraints.  This puts all blocks<a name="line.347"></a>
<FONT color="green">348</FONT>         * into a single row.<a name="line.348"></a>
<FONT color="green">349</FONT>         *<a name="line.349"></a>
<FONT color="green">350</FONT>         * @param container  the container.<a name="line.350"></a>
<FONT color="green">351</FONT>         * @param g2  the graphics device.<a name="line.351"></a>
<FONT color="green">352</FONT>         *<a name="line.352"></a>
<FONT color="green">353</FONT>         * @return The size after the arrangement.<a name="line.353"></a>
<FONT color="green">354</FONT>         */<a name="line.354"></a>
<FONT color="green">355</FONT>        protected Size2D arrangeNN(BlockContainer container, Graphics2D g2) {<a name="line.355"></a>
<FONT color="green">356</FONT>            double x = 0.0;<a name="line.356"></a>
<FONT color="green">357</FONT>            double width = 0.0;<a name="line.357"></a>
<FONT color="green">358</FONT>            double maxHeight = 0.0;<a name="line.358"></a>
<FONT color="green">359</FONT>            List blocks = container.getBlocks();<a name="line.359"></a>
<FONT color="green">360</FONT>            int blockCount = blocks.size();<a name="line.360"></a>
<FONT color="green">361</FONT>            if (blockCount &gt; 0) {<a name="line.361"></a>
<FONT color="green">362</FONT>                Size2D[] sizes = new Size2D[blocks.size()];<a name="line.362"></a>
<FONT color="green">363</FONT>                for (int i = 0; i &lt; blocks.size(); i++) {<a name="line.363"></a>
<FONT color="green">364</FONT>                    Block block = (Block) blocks.get(i);<a name="line.364"></a>
<FONT color="green">365</FONT>                    sizes[i] = block.arrange(g2, RectangleConstraint.NONE);<a name="line.365"></a>
<FONT color="green">366</FONT>                    width = width + sizes[i].getWidth();<a name="line.366"></a>
<FONT color="green">367</FONT>                    maxHeight = Math.max(sizes[i].height, maxHeight);<a name="line.367"></a>
<FONT color="green">368</FONT>                    block.setBounds(<a name="line.368"></a>
<FONT color="green">369</FONT>                        new Rectangle2D.Double(<a name="line.369"></a>
<FONT color="green">370</FONT>                            x, 0.0, sizes[i].width, sizes[i].height<a name="line.370"></a>
<FONT color="green">371</FONT>                        )<a name="line.371"></a>
<FONT color="green">372</FONT>                    );<a name="line.372"></a>
<FONT color="green">373</FONT>                    x = x + sizes[i].width + this.horizontalGap;<a name="line.373"></a>
<FONT color="green">374</FONT>                }<a name="line.374"></a>
<FONT color="green">375</FONT>                if (blockCount &gt; 1) {<a name="line.375"></a>
<FONT color="green">376</FONT>                    width = width + this.horizontalGap * (blockCount - 1);<a name="line.376"></a>
<FONT color="green">377</FONT>                }<a name="line.377"></a>
<FONT color="green">378</FONT>                if (this.verticalAlignment != VerticalAlignment.TOP) {<a name="line.378"></a>
<FONT color="green">379</FONT>                    for (int i = 0; i &lt; blocks.size(); i++) {<a name="line.379"></a>
<FONT color="green">380</FONT>                        //Block b = (Block) blocks.get(i);<a name="line.380"></a>
<FONT color="green">381</FONT>                        if (this.verticalAlignment == VerticalAlignment.CENTER) {<a name="line.381"></a>
<FONT color="green">382</FONT>                            //TODO: shift block down by half<a name="line.382"></a>
<FONT color="green">383</FONT>                        }<a name="line.383"></a>
<FONT color="green">384</FONT>                        else if (this.verticalAlignment<a name="line.384"></a>
<FONT color="green">385</FONT>                                == VerticalAlignment.BOTTOM) {<a name="line.385"></a>
<FONT color="green">386</FONT>                            //TODO: shift block down to bottom<a name="line.386"></a>
<FONT color="green">387</FONT>                        }<a name="line.387"></a>
<FONT color="green">388</FONT>                    }<a name="line.388"></a>
<FONT color="green">389</FONT>                }<a name="line.389"></a>
<FONT color="green">390</FONT>            }<a name="line.390"></a>
<FONT color="green">391</FONT>            return new Size2D(width, maxHeight);<a name="line.391"></a>
<FONT color="green">392</FONT>        }<a name="line.392"></a>
<FONT color="green">393</FONT>    <a name="line.393"></a>
<FONT color="green">394</FONT>        /**<a name="line.394"></a>
<FONT color="green">395</FONT>         * Arranges the blocks with no width constraint and a fixed height<a name="line.395"></a>
<FONT color="green">396</FONT>         * constraint.  This puts all blocks into a single row.<a name="line.396"></a>
<FONT color="green">397</FONT>         *<a name="line.397"></a>
<FONT color="green">398</FONT>         * @param container  the container.<a name="line.398"></a>
<FONT color="green">399</FONT>         * @param constraint  the constraint.<a name="line.399"></a>
<FONT color="green">400</FONT>         * @param g2  the graphics device.<a name="line.400"></a>
<FONT color="green">401</FONT>         *<a name="line.401"></a>
<FONT color="green">402</FONT>         * @return The size after the arrangement.<a name="line.402"></a>
<FONT color="green">403</FONT>         */<a name="line.403"></a>
<FONT color="green">404</FONT>        protected Size2D arrangeNF(BlockContainer container, Graphics2D g2,<a name="line.404"></a>
<FONT color="green">405</FONT>                                   RectangleConstraint constraint) {<a name="line.405"></a>
<FONT color="green">406</FONT>            // TODO: for now we are ignoring the height constraint<a name="line.406"></a>
<FONT color="green">407</FONT>            return arrangeNN(container, g2);<a name="line.407"></a>
<FONT color="green">408</FONT>        }<a name="line.408"></a>
<FONT color="green">409</FONT>    <a name="line.409"></a>
<FONT color="green">410</FONT>        /**<a name="line.410"></a>
<FONT color="green">411</FONT>         * Clears any cached information.<a name="line.411"></a>
<FONT color="green">412</FONT>         */<a name="line.412"></a>
<FONT color="green">413</FONT>        public void clear() {<a name="line.413"></a>
<FONT color="green">414</FONT>            // no action required.<a name="line.414"></a>
<FONT color="green">415</FONT>        }<a name="line.415"></a>
<FONT color="green">416</FONT>    <a name="line.416"></a>
<FONT color="green">417</FONT>        /**<a name="line.417"></a>
<FONT color="green">418</FONT>         * Tests this instance for equality with an arbitrary object.<a name="line.418"></a>
<FONT color="green">419</FONT>         *<a name="line.419"></a>
<FONT color="green">420</FONT>         * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.420"></a>
<FONT color="green">421</FONT>         *<a name="line.421"></a>
<FONT color="green">422</FONT>         * @return A boolean.<a name="line.422"></a>
<FONT color="green">423</FONT>         */<a name="line.423"></a>
<FONT color="green">424</FONT>        public boolean equals(Object obj) {<a name="line.424"></a>
<FONT color="green">425</FONT>            if (obj == this) {<a name="line.425"></a>
<FONT color="green">426</FONT>                return true;<a name="line.426"></a>
<FONT color="green">427</FONT>            }<a name="line.427"></a>
<FONT color="green">428</FONT>            if (!(obj instanceof FlowArrangement)) {<a name="line.428"></a>
<FONT color="green">429</FONT>                return false;<a name="line.429"></a>
<FONT color="green">430</FONT>            }<a name="line.430"></a>
<FONT color="green">431</FONT>            FlowArrangement that = (FlowArrangement) obj;<a name="line.431"></a>
<FONT color="green">432</FONT>            if (this.horizontalAlignment != that.horizontalAlignment) {<a name="line.432"></a>
<FONT color="green">433</FONT>                return false;<a name="line.433"></a>
<FONT color="green">434</FONT>            }<a name="line.434"></a>
<FONT color="green">435</FONT>            if (this.verticalAlignment != that.verticalAlignment) {<a name="line.435"></a>
<FONT color="green">436</FONT>                return false;<a name="line.436"></a>
<FONT color="green">437</FONT>            }<a name="line.437"></a>
<FONT color="green">438</FONT>            if (this.horizontalGap != that.horizontalGap) {<a name="line.438"></a>
<FONT color="green">439</FONT>                return false;<a name="line.439"></a>
<FONT color="green">440</FONT>            }<a name="line.440"></a>
<FONT color="green">441</FONT>            if (this.verticalGap != that.verticalGap) {<a name="line.441"></a>
<FONT color="green">442</FONT>                return false;<a name="line.442"></a>
<FONT color="green">443</FONT>            }<a name="line.443"></a>
<FONT color="green">444</FONT>            return true;<a name="line.444"></a>
<FONT color="green">445</FONT>        }<a name="line.445"></a>
<FONT color="green">446</FONT>    <a name="line.446"></a>
<FONT color="green">447</FONT>    }<a name="line.447"></a>




























































</PRE>
</BODY>
</HTML>
