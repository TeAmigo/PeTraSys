<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ========================================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JCommon : a free general purpose class library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ========================================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     *<a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jcommon/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it<a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by<a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or<a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but<a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY<a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public<a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,<a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.<a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc.<a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     *<a name="line.26"></a>
<FONT color="green">027</FONT>     * ---------------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * ReadOnlyIterator.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * ---------------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C)opyright 2003-2008, by Thomas Morgner and Contributors.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  Thomas Morgner;<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   David Gilbert (for Object Refinery Limited);<a name="line.33"></a>
<FONT color="green">034</FONT>     *<a name="line.34"></a>
<FONT color="green">035</FONT>     * $Id: ResourceBundleSupport.java,v 1.12 2008/12/18 09:57:32 mungady Exp $<a name="line.35"></a>
<FONT color="green">036</FONT>     *<a name="line.36"></a>
<FONT color="green">037</FONT>     * Changes<a name="line.37"></a>
<FONT color="green">038</FONT>     * -------<a name="line.38"></a>
<FONT color="green">039</FONT>     * 18-Dec-2008 : Use ResourceBundleWrapper - see JFreeChart patch 1607918 by<a name="line.39"></a>
<FONT color="green">040</FONT>     *               Jess Thrysoee (DG);<a name="line.40"></a>
<FONT color="green">041</FONT>     *<a name="line.41"></a>
<FONT color="green">042</FONT>     */<a name="line.42"></a>
<FONT color="green">043</FONT>    <a name="line.43"></a>
<FONT color="green">044</FONT>    package org.jfree.util;<a name="line.44"></a>
<FONT color="green">045</FONT>    <a name="line.45"></a>
<FONT color="green">046</FONT>    import java.awt.Image;<a name="line.46"></a>
<FONT color="green">047</FONT>    import java.awt.Toolkit;<a name="line.47"></a>
<FONT color="green">048</FONT>    import java.awt.event.InputEvent;<a name="line.48"></a>
<FONT color="green">049</FONT>    import java.awt.event.KeyEvent;<a name="line.49"></a>
<FONT color="green">050</FONT>    import java.awt.image.BufferedImage;<a name="line.50"></a>
<FONT color="green">051</FONT>    import java.lang.reflect.Field;<a name="line.51"></a>
<FONT color="green">052</FONT>    import java.net.URL;<a name="line.52"></a>
<FONT color="green">053</FONT>    import java.text.MessageFormat;<a name="line.53"></a>
<FONT color="green">054</FONT>    import java.util.Arrays;<a name="line.54"></a>
<FONT color="green">055</FONT>    import java.util.Locale;<a name="line.55"></a>
<FONT color="green">056</FONT>    import java.util.MissingResourceException;<a name="line.56"></a>
<FONT color="green">057</FONT>    import java.util.ResourceBundle;<a name="line.57"></a>
<FONT color="green">058</FONT>    import java.util.TreeMap;<a name="line.58"></a>
<FONT color="green">059</FONT>    import java.util.TreeSet;<a name="line.59"></a>
<FONT color="green">060</FONT>    <a name="line.60"></a>
<FONT color="green">061</FONT>    import javax.swing.Icon;<a name="line.61"></a>
<FONT color="green">062</FONT>    import javax.swing.ImageIcon;<a name="line.62"></a>
<FONT color="green">063</FONT>    import javax.swing.JMenu;<a name="line.63"></a>
<FONT color="green">064</FONT>    import javax.swing.KeyStroke;<a name="line.64"></a>
<FONT color="green">065</FONT>    <a name="line.65"></a>
<FONT color="green">066</FONT>    /**<a name="line.66"></a>
<FONT color="green">067</FONT>     * An utility class to ease up using property-file resource bundles.<a name="line.67"></a>
<FONT color="green">068</FONT>     * &lt;p/&gt;<a name="line.68"></a>
<FONT color="green">069</FONT>     * The class support references within the resource bundle set to minimize the<a name="line.69"></a>
<FONT color="green">070</FONT>     * occurence of duplicate keys. References are given in the format:<a name="line.70"></a>
<FONT color="green">071</FONT>     * &lt;pre&gt;<a name="line.71"></a>
<FONT color="green">072</FONT>     * a.key.name=@referenced.key<a name="line.72"></a>
<FONT color="green">073</FONT>     * &lt;/pre&gt;<a name="line.73"></a>
<FONT color="green">074</FONT>     * &lt;p/&gt;<a name="line.74"></a>
<FONT color="green">075</FONT>     * A lookup to a key in an other resource bundle should be written by<a name="line.75"></a>
<FONT color="green">076</FONT>     * &lt;pre&gt;<a name="line.76"></a>
<FONT color="green">077</FONT>     * a.key.name=@@resourcebundle_name@referenced.key<a name="line.77"></a>
<FONT color="green">078</FONT>     * &lt;/pre&gt;<a name="line.78"></a>
<FONT color="green">079</FONT>     *<a name="line.79"></a>
<FONT color="green">080</FONT>     * @author Thomas Morgner<a name="line.80"></a>
<FONT color="green">081</FONT>     */<a name="line.81"></a>
<FONT color="green">082</FONT>    public class ResourceBundleSupport<a name="line.82"></a>
<FONT color="green">083</FONT>    {<a name="line.83"></a>
<FONT color="green">084</FONT>      /**<a name="line.84"></a>
<FONT color="green">085</FONT>       * The resource bundle that will be used for local lookups.<a name="line.85"></a>
<FONT color="green">086</FONT>       */<a name="line.86"></a>
<FONT color="green">087</FONT>      private ResourceBundle resources;<a name="line.87"></a>
<FONT color="green">088</FONT>    <a name="line.88"></a>
<FONT color="green">089</FONT>      /**<a name="line.89"></a>
<FONT color="green">090</FONT>       * A cache for string values, as looking up the cache is faster than looking<a name="line.90"></a>
<FONT color="green">091</FONT>       * up the value in the bundle.<a name="line.91"></a>
<FONT color="green">092</FONT>       */<a name="line.92"></a>
<FONT color="green">093</FONT>      private TreeMap cache;<a name="line.93"></a>
<FONT color="green">094</FONT>      /**<a name="line.94"></a>
<FONT color="green">095</FONT>       * The current lookup path when performing non local lookups. This prevents<a name="line.95"></a>
<FONT color="green">096</FONT>       * infinite loops during such lookups.<a name="line.96"></a>
<FONT color="green">097</FONT>       */<a name="line.97"></a>
<FONT color="green">098</FONT>      private TreeSet lookupPath;<a name="line.98"></a>
<FONT color="green">099</FONT>    <a name="line.99"></a>
<FONT color="green">100</FONT>      /**<a name="line.100"></a>
<FONT color="green">101</FONT>       * The name of the local resource bundle.<a name="line.101"></a>
<FONT color="green">102</FONT>       */<a name="line.102"></a>
<FONT color="green">103</FONT>      private String resourceBase;<a name="line.103"></a>
<FONT color="green">104</FONT>    <a name="line.104"></a>
<FONT color="green">105</FONT>      /**<a name="line.105"></a>
<FONT color="green">106</FONT>       * The locale for this bundle.<a name="line.106"></a>
<FONT color="green">107</FONT>       */<a name="line.107"></a>
<FONT color="green">108</FONT>      private Locale locale;<a name="line.108"></a>
<FONT color="green">109</FONT>    <a name="line.109"></a>
<FONT color="green">110</FONT>      /**<a name="line.110"></a>
<FONT color="green">111</FONT>       * Creates a new instance.<a name="line.111"></a>
<FONT color="green">112</FONT>       *<a name="line.112"></a>
<FONT color="green">113</FONT>       * @param locale  the locale.<a name="line.113"></a>
<FONT color="green">114</FONT>       * @param baseName the base name of the resource bundle, a fully qualified<a name="line.114"></a>
<FONT color="green">115</FONT>       *                 class name<a name="line.115"></a>
<FONT color="green">116</FONT>       */<a name="line.116"></a>
<FONT color="green">117</FONT>      public ResourceBundleSupport(final Locale locale, final String baseName)<a name="line.117"></a>
<FONT color="green">118</FONT>      {<a name="line.118"></a>
<FONT color="green">119</FONT>        this(locale, ResourceBundleWrapper.getBundle(baseName, locale), baseName);<a name="line.119"></a>
<FONT color="green">120</FONT>      }<a name="line.120"></a>
<FONT color="green">121</FONT>    <a name="line.121"></a>
<FONT color="green">122</FONT>      /**<a name="line.122"></a>
<FONT color="green">123</FONT>       * Creates a new instance.<a name="line.123"></a>
<FONT color="green">124</FONT>       *<a name="line.124"></a>
<FONT color="green">125</FONT>       * @param locale         the locale for which this resource bundle is<a name="line.125"></a>
<FONT color="green">126</FONT>       *                       created.<a name="line.126"></a>
<FONT color="green">127</FONT>       * @param resourceBundle the resourcebundle<a name="line.127"></a>
<FONT color="green">128</FONT>       * @param baseName       the base name of the resource bundle, a fully<a name="line.128"></a>
<FONT color="green">129</FONT>       *                       qualified class name<a name="line.129"></a>
<FONT color="green">130</FONT>       */<a name="line.130"></a>
<FONT color="green">131</FONT>      protected ResourceBundleSupport(final Locale locale,<a name="line.131"></a>
<FONT color="green">132</FONT>                                      final ResourceBundle resourceBundle,<a name="line.132"></a>
<FONT color="green">133</FONT>                                      final String baseName)<a name="line.133"></a>
<FONT color="green">134</FONT>      {<a name="line.134"></a>
<FONT color="green">135</FONT>        if (locale == null)<a name="line.135"></a>
<FONT color="green">136</FONT>        {<a name="line.136"></a>
<FONT color="green">137</FONT>          throw new NullPointerException("Locale must not be null");<a name="line.137"></a>
<FONT color="green">138</FONT>        }<a name="line.138"></a>
<FONT color="green">139</FONT>        if (resourceBundle == null)<a name="line.139"></a>
<FONT color="green">140</FONT>        {<a name="line.140"></a>
<FONT color="green">141</FONT>          throw new NullPointerException("Resources must not be null");<a name="line.141"></a>
<FONT color="green">142</FONT>        }<a name="line.142"></a>
<FONT color="green">143</FONT>        if (baseName == null)<a name="line.143"></a>
<FONT color="green">144</FONT>        {<a name="line.144"></a>
<FONT color="green">145</FONT>          throw new NullPointerException("BaseName must not be null");<a name="line.145"></a>
<FONT color="green">146</FONT>        }<a name="line.146"></a>
<FONT color="green">147</FONT>        this.locale = locale;<a name="line.147"></a>
<FONT color="green">148</FONT>        this.resources = resourceBundle;<a name="line.148"></a>
<FONT color="green">149</FONT>        this.resourceBase = baseName;<a name="line.149"></a>
<FONT color="green">150</FONT>        this.cache = new TreeMap();<a name="line.150"></a>
<FONT color="green">151</FONT>        this.lookupPath = new TreeSet();<a name="line.151"></a>
<FONT color="green">152</FONT>      }<a name="line.152"></a>
<FONT color="green">153</FONT>    <a name="line.153"></a>
<FONT color="green">154</FONT>      /**<a name="line.154"></a>
<FONT color="green">155</FONT>       * Creates a new instance.<a name="line.155"></a>
<FONT color="green">156</FONT>       *<a name="line.156"></a>
<FONT color="green">157</FONT>       * @param locale         the locale for which the resource bundle is<a name="line.157"></a>
<FONT color="green">158</FONT>       *                       created.<a name="line.158"></a>
<FONT color="green">159</FONT>       * @param resourceBundle the resourcebundle<a name="line.159"></a>
<FONT color="green">160</FONT>       */<a name="line.160"></a>
<FONT color="green">161</FONT>      public ResourceBundleSupport(final Locale locale,<a name="line.161"></a>
<FONT color="green">162</FONT>                                   final ResourceBundle resourceBundle)<a name="line.162"></a>
<FONT color="green">163</FONT>      {<a name="line.163"></a>
<FONT color="green">164</FONT>        this(locale, resourceBundle, resourceBundle.toString());<a name="line.164"></a>
<FONT color="green">165</FONT>      }<a name="line.165"></a>
<FONT color="green">166</FONT>    <a name="line.166"></a>
<FONT color="green">167</FONT>      /**<a name="line.167"></a>
<FONT color="green">168</FONT>       * Creates a new instance.<a name="line.168"></a>
<FONT color="green">169</FONT>       *<a name="line.169"></a>
<FONT color="green">170</FONT>       * @param baseName the base name of the resource bundle, a fully qualified<a name="line.170"></a>
<FONT color="green">171</FONT>       *                 class name<a name="line.171"></a>
<FONT color="green">172</FONT>       */<a name="line.172"></a>
<FONT color="green">173</FONT>      public ResourceBundleSupport(final String baseName)<a name="line.173"></a>
<FONT color="green">174</FONT>      {<a name="line.174"></a>
<FONT color="green">175</FONT>        this(Locale.getDefault(), ResourceBundleWrapper.getBundle(baseName),<a name="line.175"></a>
<FONT color="green">176</FONT>                baseName);<a name="line.176"></a>
<FONT color="green">177</FONT>      }<a name="line.177"></a>
<FONT color="green">178</FONT>    <a name="line.178"></a>
<FONT color="green">179</FONT>      /**<a name="line.179"></a>
<FONT color="green">180</FONT>       * Creates a new instance.<a name="line.180"></a>
<FONT color="green">181</FONT>       *<a name="line.181"></a>
<FONT color="green">182</FONT>       * @param resourceBundle the resourcebundle<a name="line.182"></a>
<FONT color="green">183</FONT>       * @param baseName       the base name of the resource bundle, a fully<a name="line.183"></a>
<FONT color="green">184</FONT>       *                       qualified class name<a name="line.184"></a>
<FONT color="green">185</FONT>       */<a name="line.185"></a>
<FONT color="green">186</FONT>      protected ResourceBundleSupport(final ResourceBundle resourceBundle,<a name="line.186"></a>
<FONT color="green">187</FONT>                                      final String baseName)<a name="line.187"></a>
<FONT color="green">188</FONT>      {<a name="line.188"></a>
<FONT color="green">189</FONT>        this(Locale.getDefault(), resourceBundle, baseName);<a name="line.189"></a>
<FONT color="green">190</FONT>      }<a name="line.190"></a>
<FONT color="green">191</FONT>    <a name="line.191"></a>
<FONT color="green">192</FONT>      /**<a name="line.192"></a>
<FONT color="green">193</FONT>       * Creates a new instance.<a name="line.193"></a>
<FONT color="green">194</FONT>       *<a name="line.194"></a>
<FONT color="green">195</FONT>       * @param resourceBundle the resourcebundle<a name="line.195"></a>
<FONT color="green">196</FONT>       */<a name="line.196"></a>
<FONT color="green">197</FONT>      public ResourceBundleSupport(final ResourceBundle resourceBundle)<a name="line.197"></a>
<FONT color="green">198</FONT>      {<a name="line.198"></a>
<FONT color="green">199</FONT>        this(Locale.getDefault(), resourceBundle, resourceBundle.toString());<a name="line.199"></a>
<FONT color="green">200</FONT>      }<a name="line.200"></a>
<FONT color="green">201</FONT>    <a name="line.201"></a>
<FONT color="green">202</FONT>      /**<a name="line.202"></a>
<FONT color="green">203</FONT>       * The base name of the resource bundle.<a name="line.203"></a>
<FONT color="green">204</FONT>       *<a name="line.204"></a>
<FONT color="green">205</FONT>       * @return the resource bundle's name.<a name="line.205"></a>
<FONT color="green">206</FONT>       */<a name="line.206"></a>
<FONT color="green">207</FONT>      protected final String getResourceBase()<a name="line.207"></a>
<FONT color="green">208</FONT>      {<a name="line.208"></a>
<FONT color="green">209</FONT>        return this.resourceBase;<a name="line.209"></a>
<FONT color="green">210</FONT>      }<a name="line.210"></a>
<FONT color="green">211</FONT>    <a name="line.211"></a>
<FONT color="green">212</FONT>      /**<a name="line.212"></a>
<FONT color="green">213</FONT>       * Gets a string for the given key from this resource bundle or one of its<a name="line.213"></a>
<FONT color="green">214</FONT>       * parents. If the key is a link, the link is resolved and the referenced<a name="line.214"></a>
<FONT color="green">215</FONT>       * string is returned instead.<a name="line.215"></a>
<FONT color="green">216</FONT>       *<a name="line.216"></a>
<FONT color="green">217</FONT>       * @param key the key for the desired string<a name="line.217"></a>
<FONT color="green">218</FONT>       * @return the string for the given key<a name="line.218"></a>
<FONT color="green">219</FONT>       * @throws NullPointerException     if &lt;code&gt;key&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;<a name="line.219"></a>
<FONT color="green">220</FONT>       * @throws MissingResourceException if no object for the given key can be<a name="line.220"></a>
<FONT color="green">221</FONT>       *                                  found<a name="line.221"></a>
<FONT color="green">222</FONT>       * @throws ClassCastException       if the object found for the given key is<a name="line.222"></a>
<FONT color="green">223</FONT>       *                                  not a string<a name="line.223"></a>
<FONT color="green">224</FONT>       */<a name="line.224"></a>
<FONT color="green">225</FONT>      public synchronized String getString(final String key)<a name="line.225"></a>
<FONT color="green">226</FONT>      {<a name="line.226"></a>
<FONT color="green">227</FONT>        final String retval = (String) this.cache.get(key);<a name="line.227"></a>
<FONT color="green">228</FONT>        if (retval != null)<a name="line.228"></a>
<FONT color="green">229</FONT>        {<a name="line.229"></a>
<FONT color="green">230</FONT>          return retval;<a name="line.230"></a>
<FONT color="green">231</FONT>        }<a name="line.231"></a>
<FONT color="green">232</FONT>        this.lookupPath.clear();<a name="line.232"></a>
<FONT color="green">233</FONT>        return internalGetString(key);<a name="line.233"></a>
<FONT color="green">234</FONT>      }<a name="line.234"></a>
<FONT color="green">235</FONT>    <a name="line.235"></a>
<FONT color="green">236</FONT>      /**<a name="line.236"></a>
<FONT color="green">237</FONT>       * Performs the lookup for the given key. If the key points to a link the<a name="line.237"></a>
<FONT color="green">238</FONT>       * link is resolved and that key is looked up instead.<a name="line.238"></a>
<FONT color="green">239</FONT>       *<a name="line.239"></a>
<FONT color="green">240</FONT>       * @param key the key for the string<a name="line.240"></a>
<FONT color="green">241</FONT>       * @return the string for the given key<a name="line.241"></a>
<FONT color="green">242</FONT>       */<a name="line.242"></a>
<FONT color="green">243</FONT>      protected String internalGetString(final String key)<a name="line.243"></a>
<FONT color="green">244</FONT>      {<a name="line.244"></a>
<FONT color="green">245</FONT>        if (this.lookupPath.contains(key))<a name="line.245"></a>
<FONT color="green">246</FONT>        {<a name="line.246"></a>
<FONT color="green">247</FONT>          throw new MissingResourceException<a name="line.247"></a>
<FONT color="green">248</FONT>              ("InfiniteLoop in resource lookup",<a name="line.248"></a>
<FONT color="green">249</FONT>                  getResourceBase(), this.lookupPath.toString());<a name="line.249"></a>
<FONT color="green">250</FONT>        }<a name="line.250"></a>
<FONT color="green">251</FONT>        final String fromResBundle = this.resources.getString(key);<a name="line.251"></a>
<FONT color="green">252</FONT>        if (fromResBundle.startsWith("@@"))<a name="line.252"></a>
<FONT color="green">253</FONT>        {<a name="line.253"></a>
<FONT color="green">254</FONT>          // global forward ...<a name="line.254"></a>
<FONT color="green">255</FONT>          final int idx = fromResBundle.indexOf('@', 2);<a name="line.255"></a>
<FONT color="green">256</FONT>          if (idx == -1)<a name="line.256"></a>
<FONT color="green">257</FONT>          {<a name="line.257"></a>
<FONT color="green">258</FONT>            throw new MissingResourceException<a name="line.258"></a>
<FONT color="green">259</FONT>                ("Invalid format for global lookup key.", getResourceBase(), key);<a name="line.259"></a>
<FONT color="green">260</FONT>          }<a name="line.260"></a>
<FONT color="green">261</FONT>          try<a name="line.261"></a>
<FONT color="green">262</FONT>          {<a name="line.262"></a>
<FONT color="green">263</FONT>            final ResourceBundle res = ResourceBundleWrapper.getBundle<a name="line.263"></a>
<FONT color="green">264</FONT>                (fromResBundle.substring(2, idx));<a name="line.264"></a>
<FONT color="green">265</FONT>            return res.getString(fromResBundle.substring(idx + 1));<a name="line.265"></a>
<FONT color="green">266</FONT>          }<a name="line.266"></a>
<FONT color="green">267</FONT>          catch (Exception e)<a name="line.267"></a>
<FONT color="green">268</FONT>          {<a name="line.268"></a>
<FONT color="green">269</FONT>            Log.error("Error during global lookup", e);<a name="line.269"></a>
<FONT color="green">270</FONT>            throw new MissingResourceException<a name="line.270"></a>
<FONT color="green">271</FONT>                ("Error during global lookup", getResourceBase(), key);<a name="line.271"></a>
<FONT color="green">272</FONT>          }<a name="line.272"></a>
<FONT color="green">273</FONT>        }<a name="line.273"></a>
<FONT color="green">274</FONT>        else if (fromResBundle.startsWith("@"))<a name="line.274"></a>
<FONT color="green">275</FONT>        {<a name="line.275"></a>
<FONT color="green">276</FONT>          // local forward ...<a name="line.276"></a>
<FONT color="green">277</FONT>          final String newKey = fromResBundle.substring(1);<a name="line.277"></a>
<FONT color="green">278</FONT>          this.lookupPath.add(key);<a name="line.278"></a>
<FONT color="green">279</FONT>          final String retval = internalGetString(newKey);<a name="line.279"></a>
<FONT color="green">280</FONT>    <a name="line.280"></a>
<FONT color="green">281</FONT>          this.cache.put(key, retval);<a name="line.281"></a>
<FONT color="green">282</FONT>          return retval;<a name="line.282"></a>
<FONT color="green">283</FONT>        }<a name="line.283"></a>
<FONT color="green">284</FONT>        else<a name="line.284"></a>
<FONT color="green">285</FONT>        {<a name="line.285"></a>
<FONT color="green">286</FONT>          this.cache.put(key, fromResBundle);<a name="line.286"></a>
<FONT color="green">287</FONT>          return fromResBundle;<a name="line.287"></a>
<FONT color="green">288</FONT>        }<a name="line.288"></a>
<FONT color="green">289</FONT>      }<a name="line.289"></a>
<FONT color="green">290</FONT>    <a name="line.290"></a>
<FONT color="green">291</FONT>      /**<a name="line.291"></a>
<FONT color="green">292</FONT>       * Returns an scaled icon suitable for buttons or menus.<a name="line.292"></a>
<FONT color="green">293</FONT>       *<a name="line.293"></a>
<FONT color="green">294</FONT>       * @param key   the name of the resource bundle key<a name="line.294"></a>
<FONT color="green">295</FONT>       * @param large true, if the image should be scaled to 24x24, or false for<a name="line.295"></a>
<FONT color="green">296</FONT>       *              16x16<a name="line.296"></a>
<FONT color="green">297</FONT>       * @return the icon.<a name="line.297"></a>
<FONT color="green">298</FONT>       */<a name="line.298"></a>
<FONT color="green">299</FONT>      public Icon getIcon(final String key, final boolean large)<a name="line.299"></a>
<FONT color="green">300</FONT>      {<a name="line.300"></a>
<FONT color="green">301</FONT>        final String name = getString(key);<a name="line.301"></a>
<FONT color="green">302</FONT>        return createIcon(name, true, large);<a name="line.302"></a>
<FONT color="green">303</FONT>      }<a name="line.303"></a>
<FONT color="green">304</FONT>    <a name="line.304"></a>
<FONT color="green">305</FONT>      /**<a name="line.305"></a>
<FONT color="green">306</FONT>       * Returns an unscaled icon.<a name="line.306"></a>
<FONT color="green">307</FONT>       *<a name="line.307"></a>
<FONT color="green">308</FONT>       * @param key the name of the resource bundle key<a name="line.308"></a>
<FONT color="green">309</FONT>       * @return the icon.<a name="line.309"></a>
<FONT color="green">310</FONT>       */<a name="line.310"></a>
<FONT color="green">311</FONT>      public Icon getIcon(final String key)<a name="line.311"></a>
<FONT color="green">312</FONT>      {<a name="line.312"></a>
<FONT color="green">313</FONT>        final String name = getString(key);<a name="line.313"></a>
<FONT color="green">314</FONT>        return createIcon(name, false, false);<a name="line.314"></a>
<FONT color="green">315</FONT>      }<a name="line.315"></a>
<FONT color="green">316</FONT>    <a name="line.316"></a>
<FONT color="green">317</FONT>      /**<a name="line.317"></a>
<FONT color="green">318</FONT>       * Returns the mnemonic stored at the given resourcebundle key. The mnemonic<a name="line.318"></a>
<FONT color="green">319</FONT>       * should be either the symbolic name of one of the KeyEvent.VK_* constants<a name="line.319"></a>
<FONT color="green">320</FONT>       * (without the 'VK_') or the character for that key.<a name="line.320"></a>
<FONT color="green">321</FONT>       * &lt;p/&gt;<a name="line.321"></a>
<FONT color="green">322</FONT>       * For the enter key, the resource bundle would therefore either contain<a name="line.322"></a>
<FONT color="green">323</FONT>       * "ENTER" or "\n".<a name="line.323"></a>
<FONT color="green">324</FONT>       * &lt;pre&gt;<a name="line.324"></a>
<FONT color="green">325</FONT>       * a.resourcebundle.key=ENTER<a name="line.325"></a>
<FONT color="green">326</FONT>       * an.other.resourcebundle.key=\n<a name="line.326"></a>
<FONT color="green">327</FONT>       * &lt;/pre&gt;<a name="line.327"></a>
<FONT color="green">328</FONT>       *<a name="line.328"></a>
<FONT color="green">329</FONT>       * @param key the resourcebundle key<a name="line.329"></a>
<FONT color="green">330</FONT>       * @return the mnemonic<a name="line.330"></a>
<FONT color="green">331</FONT>       */<a name="line.331"></a>
<FONT color="green">332</FONT>      public Integer getMnemonic(final String key)<a name="line.332"></a>
<FONT color="green">333</FONT>      {<a name="line.333"></a>
<FONT color="green">334</FONT>        final String name = getString(key);<a name="line.334"></a>
<FONT color="green">335</FONT>        return createMnemonic(name);<a name="line.335"></a>
<FONT color="green">336</FONT>      }<a name="line.336"></a>
<FONT color="green">337</FONT>    <a name="line.337"></a>
<FONT color="green">338</FONT>      /**<a name="line.338"></a>
<FONT color="green">339</FONT>       * Returns an optional mnemonic.<a name="line.339"></a>
<FONT color="green">340</FONT>       *<a name="line.340"></a>
<FONT color="green">341</FONT>       * @param key  the key.<a name="line.341"></a>
<FONT color="green">342</FONT>       *<a name="line.342"></a>
<FONT color="green">343</FONT>       * @return The mnemonic.<a name="line.343"></a>
<FONT color="green">344</FONT>       */<a name="line.344"></a>
<FONT color="green">345</FONT>      public Integer getOptionalMnemonic(final String key)<a name="line.345"></a>
<FONT color="green">346</FONT>      {<a name="line.346"></a>
<FONT color="green">347</FONT>        final String name = getString(key);<a name="line.347"></a>
<FONT color="green">348</FONT>        if (name != null &amp;&amp; name.length() &gt; 0)<a name="line.348"></a>
<FONT color="green">349</FONT>        {<a name="line.349"></a>
<FONT color="green">350</FONT>          return createMnemonic(name);<a name="line.350"></a>
<FONT color="green">351</FONT>        }<a name="line.351"></a>
<FONT color="green">352</FONT>        return null;<a name="line.352"></a>
<FONT color="green">353</FONT>      }<a name="line.353"></a>
<FONT color="green">354</FONT>    <a name="line.354"></a>
<FONT color="green">355</FONT>      /**<a name="line.355"></a>
<FONT color="green">356</FONT>       * Returns the keystroke stored at the given resourcebundle key.<a name="line.356"></a>
<FONT color="green">357</FONT>       * &lt;p/&gt;<a name="line.357"></a>
<FONT color="green">358</FONT>       * The keystroke will be composed of a simple key press and the plattform's<a name="line.358"></a>
<FONT color="green">359</FONT>       * MenuKeyMask.<a name="line.359"></a>
<FONT color="green">360</FONT>       * &lt;p/&gt;<a name="line.360"></a>
<FONT color="green">361</FONT>       * The keystrokes character key should be either the symbolic name of one of<a name="line.361"></a>
<FONT color="green">362</FONT>       * the KeyEvent.VK_* constants or the character for that key.<a name="line.362"></a>
<FONT color="green">363</FONT>       * &lt;p/&gt;<a name="line.363"></a>
<FONT color="green">364</FONT>       * For the 'A' key, the resource bundle would therefore either contain<a name="line.364"></a>
<FONT color="green">365</FONT>       * "VK_A" or "a".<a name="line.365"></a>
<FONT color="green">366</FONT>       * &lt;pre&gt;<a name="line.366"></a>
<FONT color="green">367</FONT>       * a.resourcebundle.key=VK_A<a name="line.367"></a>
<FONT color="green">368</FONT>       * an.other.resourcebundle.key=a<a name="line.368"></a>
<FONT color="green">369</FONT>       * &lt;/pre&gt;<a name="line.369"></a>
<FONT color="green">370</FONT>       *<a name="line.370"></a>
<FONT color="green">371</FONT>       * @param key the resourcebundle key<a name="line.371"></a>
<FONT color="green">372</FONT>       * @return the mnemonic<a name="line.372"></a>
<FONT color="green">373</FONT>       * @see Toolkit#getMenuShortcutKeyMask()<a name="line.373"></a>
<FONT color="green">374</FONT>       */<a name="line.374"></a>
<FONT color="green">375</FONT>      public KeyStroke getKeyStroke(final String key)<a name="line.375"></a>
<FONT color="green">376</FONT>      {<a name="line.376"></a>
<FONT color="green">377</FONT>        return getKeyStroke(key, getMenuKeyMask());<a name="line.377"></a>
<FONT color="green">378</FONT>      }<a name="line.378"></a>
<FONT color="green">379</FONT>    <a name="line.379"></a>
<FONT color="green">380</FONT>      /**<a name="line.380"></a>
<FONT color="green">381</FONT>       * Returns an optional key stroke.<a name="line.381"></a>
<FONT color="green">382</FONT>       *<a name="line.382"></a>
<FONT color="green">383</FONT>       * @param key  the key.<a name="line.383"></a>
<FONT color="green">384</FONT>       *<a name="line.384"></a>
<FONT color="green">385</FONT>       * @return The key stroke.<a name="line.385"></a>
<FONT color="green">386</FONT>       */<a name="line.386"></a>
<FONT color="green">387</FONT>      public KeyStroke getOptionalKeyStroke(final String key)<a name="line.387"></a>
<FONT color="green">388</FONT>      {<a name="line.388"></a>
<FONT color="green">389</FONT>        return getOptionalKeyStroke(key, getMenuKeyMask());<a name="line.389"></a>
<FONT color="green">390</FONT>      }<a name="line.390"></a>
<FONT color="green">391</FONT>    <a name="line.391"></a>
<FONT color="green">392</FONT>      /**<a name="line.392"></a>
<FONT color="green">393</FONT>       * Returns the keystroke stored at the given resourcebundle key.<a name="line.393"></a>
<FONT color="green">394</FONT>       * &lt;p/&gt;<a name="line.394"></a>
<FONT color="green">395</FONT>       * The keystroke will be composed of a simple key press and the given<a name="line.395"></a>
<FONT color="green">396</FONT>       * KeyMask. If the KeyMask is zero, a plain Keystroke is returned.<a name="line.396"></a>
<FONT color="green">397</FONT>       * &lt;p/&gt;<a name="line.397"></a>
<FONT color="green">398</FONT>       * The keystrokes character key should be either the symbolic name of one of<a name="line.398"></a>
<FONT color="green">399</FONT>       * the KeyEvent.VK_* constants or the character for that key.<a name="line.399"></a>
<FONT color="green">400</FONT>       * &lt;p/&gt;<a name="line.400"></a>
<FONT color="green">401</FONT>       * For the 'A' key, the resource bundle would therefore either contain<a name="line.401"></a>
<FONT color="green">402</FONT>       * "VK_A" or "a".<a name="line.402"></a>
<FONT color="green">403</FONT>       * &lt;pre&gt;<a name="line.403"></a>
<FONT color="green">404</FONT>       * a.resourcebundle.key=VK_A<a name="line.404"></a>
<FONT color="green">405</FONT>       * an.other.resourcebundle.key=a<a name="line.405"></a>
<FONT color="green">406</FONT>       * &lt;/pre&gt;<a name="line.406"></a>
<FONT color="green">407</FONT>       *<a name="line.407"></a>
<FONT color="green">408</FONT>       * @param key the resourcebundle key.<a name="line.408"></a>
<FONT color="green">409</FONT>       * @param mask  the mask.<a name="line.409"></a>
<FONT color="green">410</FONT>       *<a name="line.410"></a>
<FONT color="green">411</FONT>       * @return the mnemonic<a name="line.411"></a>
<FONT color="green">412</FONT>       * @see Toolkit#getMenuShortcutKeyMask()<a name="line.412"></a>
<FONT color="green">413</FONT>       */<a name="line.413"></a>
<FONT color="green">414</FONT>      public KeyStroke getKeyStroke(final String key, final int mask)<a name="line.414"></a>
<FONT color="green">415</FONT>      {<a name="line.415"></a>
<FONT color="green">416</FONT>        final String name = getString(key);<a name="line.416"></a>
<FONT color="green">417</FONT>        return KeyStroke.getKeyStroke(createMnemonic(name).intValue(), mask);<a name="line.417"></a>
<FONT color="green">418</FONT>      }<a name="line.418"></a>
<FONT color="green">419</FONT>    <a name="line.419"></a>
<FONT color="green">420</FONT>      /**<a name="line.420"></a>
<FONT color="green">421</FONT>       * Returns an optional key stroke.<a name="line.421"></a>
<FONT color="green">422</FONT>       *<a name="line.422"></a>
<FONT color="green">423</FONT>       * @param key  the key.<a name="line.423"></a>
<FONT color="green">424</FONT>       * @param mask  the mask.<a name="line.424"></a>
<FONT color="green">425</FONT>       *<a name="line.425"></a>
<FONT color="green">426</FONT>       * @return The key stroke.<a name="line.426"></a>
<FONT color="green">427</FONT>       */<a name="line.427"></a>
<FONT color="green">428</FONT>      public KeyStroke getOptionalKeyStroke(final String key, final int mask)<a name="line.428"></a>
<FONT color="green">429</FONT>      {<a name="line.429"></a>
<FONT color="green">430</FONT>        final String name = getString(key);<a name="line.430"></a>
<FONT color="green">431</FONT>    <a name="line.431"></a>
<FONT color="green">432</FONT>        if (name != null &amp;&amp; name.length() &gt; 0)<a name="line.432"></a>
<FONT color="green">433</FONT>        {<a name="line.433"></a>
<FONT color="green">434</FONT>          return KeyStroke.getKeyStroke(createMnemonic(name).intValue(), mask);<a name="line.434"></a>
<FONT color="green">435</FONT>        }<a name="line.435"></a>
<FONT color="green">436</FONT>        return null;<a name="line.436"></a>
<FONT color="green">437</FONT>      }<a name="line.437"></a>
<FONT color="green">438</FONT>    <a name="line.438"></a>
<FONT color="green">439</FONT>      /**<a name="line.439"></a>
<FONT color="green">440</FONT>       * Returns a JMenu created from a resource bundle definition.<a name="line.440"></a>
<FONT color="green">441</FONT>       * &lt;p/&gt;<a name="line.441"></a>
<FONT color="green">442</FONT>       * The menu definition consists of two keys, the name of the menu and the<a name="line.442"></a>
<FONT color="green">443</FONT>       * mnemonic for that menu. Both keys share a common prefix, which is<a name="line.443"></a>
<FONT color="green">444</FONT>       * extended by ".name" for the name of the menu and ".mnemonic" for the<a name="line.444"></a>
<FONT color="green">445</FONT>       * mnemonic.<a name="line.445"></a>
<FONT color="green">446</FONT>       * &lt;p/&gt;<a name="line.446"></a>
<FONT color="green">447</FONT>       * &lt;pre&gt;<a name="line.447"></a>
<FONT color="green">448</FONT>       * # define the file menu<a name="line.448"></a>
<FONT color="green">449</FONT>       * menu.file.name=File<a name="line.449"></a>
<FONT color="green">450</FONT>       * menu.file.mnemonic=F<a name="line.450"></a>
<FONT color="green">451</FONT>       * &lt;/pre&gt;<a name="line.451"></a>
<FONT color="green">452</FONT>       * The menu definition above can be used to create the menu by calling<a name="line.452"></a>
<FONT color="green">453</FONT>       * &lt;code&gt;createMenu ("menu.file")&lt;/code&gt;.<a name="line.453"></a>
<FONT color="green">454</FONT>       *<a name="line.454"></a>
<FONT color="green">455</FONT>       * @param keyPrefix the common prefix for that menu<a name="line.455"></a>
<FONT color="green">456</FONT>       * @return the created menu<a name="line.456"></a>
<FONT color="green">457</FONT>       */<a name="line.457"></a>
<FONT color="green">458</FONT>      public JMenu createMenu(final String keyPrefix)<a name="line.458"></a>
<FONT color="green">459</FONT>      {<a name="line.459"></a>
<FONT color="green">460</FONT>        final JMenu retval = new JMenu();<a name="line.460"></a>
<FONT color="green">461</FONT>        retval.setText(getString(keyPrefix + ".name"));<a name="line.461"></a>
<FONT color="green">462</FONT>        retval.setMnemonic(getMnemonic(keyPrefix + ".mnemonic").intValue());<a name="line.462"></a>
<FONT color="green">463</FONT>        return retval;<a name="line.463"></a>
<FONT color="green">464</FONT>      }<a name="line.464"></a>
<FONT color="green">465</FONT>    <a name="line.465"></a>
<FONT color="green">466</FONT>      /**<a name="line.466"></a>
<FONT color="green">467</FONT>       * Returns a URL pointing to a resource located in the classpath. The<a name="line.467"></a>
<FONT color="green">468</FONT>       * resource is looked up using the given key.<a name="line.468"></a>
<FONT color="green">469</FONT>       * &lt;p/&gt;<a name="line.469"></a>
<FONT color="green">470</FONT>       * Example: The load a file named 'logo.gif' which is stored in a java<a name="line.470"></a>
<FONT color="green">471</FONT>       * package named 'org.jfree.resources':<a name="line.471"></a>
<FONT color="green">472</FONT>       * &lt;pre&gt;<a name="line.472"></a>
<FONT color="green">473</FONT>       * mainmenu.logo=org/jfree/resources/logo.gif<a name="line.473"></a>
<FONT color="green">474</FONT>       * &lt;/pre&gt;<a name="line.474"></a>
<FONT color="green">475</FONT>       * The URL for that file can be queried with: &lt;code&gt;getResource("mainmenu.logo");&lt;/code&gt;.<a name="line.475"></a>
<FONT color="green">476</FONT>       *<a name="line.476"></a>
<FONT color="green">477</FONT>       * @param key the key for the resource<a name="line.477"></a>
<FONT color="green">478</FONT>       * @return the resource URL<a name="line.478"></a>
<FONT color="green">479</FONT>       */<a name="line.479"></a>
<FONT color="green">480</FONT>      public URL getResourceURL(final String key)<a name="line.480"></a>
<FONT color="green">481</FONT>      {<a name="line.481"></a>
<FONT color="green">482</FONT>        final String name = getString(key);<a name="line.482"></a>
<FONT color="green">483</FONT>        final URL in = ObjectUtilities.getResource(name, ResourceBundleSupport.class);<a name="line.483"></a>
<FONT color="green">484</FONT>        if (in == null)<a name="line.484"></a>
<FONT color="green">485</FONT>        {<a name="line.485"></a>
<FONT color="green">486</FONT>          Log.warn("Unable to find file in the class path: " + name + "; key=" + key);<a name="line.486"></a>
<FONT color="green">487</FONT>        }<a name="line.487"></a>
<FONT color="green">488</FONT>        return in;<a name="line.488"></a>
<FONT color="green">489</FONT>      }<a name="line.489"></a>
<FONT color="green">490</FONT>    <a name="line.490"></a>
<FONT color="green">491</FONT>    <a name="line.491"></a>
<FONT color="green">492</FONT>      /**<a name="line.492"></a>
<FONT color="green">493</FONT>       * Attempts to load an image from classpath. If this fails, an empty image<a name="line.493"></a>
<FONT color="green">494</FONT>       * icon is returned.<a name="line.494"></a>
<FONT color="green">495</FONT>       *<a name="line.495"></a>
<FONT color="green">496</FONT>       * @param resourceName the name of the image. The name should be a global<a name="line.496"></a>
<FONT color="green">497</FONT>       *                     resource name.<a name="line.497"></a>
<FONT color="green">498</FONT>       * @param scale        true, if the image should be scaled, false otherwise<a name="line.498"></a>
<FONT color="green">499</FONT>       * @param large        true, if the image should be scaled to 24x24, or<a name="line.499"></a>
<FONT color="green">500</FONT>       *                     false for 16x16<a name="line.500"></a>
<FONT color="green">501</FONT>       * @return the image icon.<a name="line.501"></a>
<FONT color="green">502</FONT>       */<a name="line.502"></a>
<FONT color="green">503</FONT>      private ImageIcon createIcon(final String resourceName, final boolean scale,<a name="line.503"></a>
<FONT color="green">504</FONT>                                   final boolean large)<a name="line.504"></a>
<FONT color="green">505</FONT>      {<a name="line.505"></a>
<FONT color="green">506</FONT>        final URL in = ObjectUtilities.getResource(resourceName, ResourceBundleSupport.class);<a name="line.506"></a>
<FONT color="green">507</FONT>        ;<a name="line.507"></a>
<FONT color="green">508</FONT>        if (in == null)<a name="line.508"></a>
<FONT color="green">509</FONT>        {<a name="line.509"></a>
<FONT color="green">510</FONT>          Log.warn("Unable to find file in the class path: " + resourceName);<a name="line.510"></a>
<FONT color="green">511</FONT>          return new ImageIcon(createTransparentImage(1, 1));<a name="line.511"></a>
<FONT color="green">512</FONT>        }<a name="line.512"></a>
<FONT color="green">513</FONT>        final Image img = Toolkit.getDefaultToolkit().createImage(in);<a name="line.513"></a>
<FONT color="green">514</FONT>        if (img == null)<a name="line.514"></a>
<FONT color="green">515</FONT>        {<a name="line.515"></a>
<FONT color="green">516</FONT>          Log.warn("Unable to instantiate the image: " + resourceName);<a name="line.516"></a>
<FONT color="green">517</FONT>          return new ImageIcon(createTransparentImage(1, 1));<a name="line.517"></a>
<FONT color="green">518</FONT>        }<a name="line.518"></a>
<FONT color="green">519</FONT>        if (scale)<a name="line.519"></a>
<FONT color="green">520</FONT>        {<a name="line.520"></a>
<FONT color="green">521</FONT>          if (large)<a name="line.521"></a>
<FONT color="green">522</FONT>          {<a name="line.522"></a>
<FONT color="green">523</FONT>            return new ImageIcon(img.getScaledInstance(24, 24, Image.SCALE_SMOOTH));<a name="line.523"></a>
<FONT color="green">524</FONT>          }<a name="line.524"></a>
<FONT color="green">525</FONT>          return new ImageIcon(img.getScaledInstance(16, 16, Image.SCALE_SMOOTH));<a name="line.525"></a>
<FONT color="green">526</FONT>        }<a name="line.526"></a>
<FONT color="green">527</FONT>        return new ImageIcon(img);<a name="line.527"></a>
<FONT color="green">528</FONT>      }<a name="line.528"></a>
<FONT color="green">529</FONT>    <a name="line.529"></a>
<FONT color="green">530</FONT>      /**<a name="line.530"></a>
<FONT color="green">531</FONT>       * Creates the Mnemonic from the given String. The String consists of the<a name="line.531"></a>
<FONT color="green">532</FONT>       * name of the VK constants of the class KeyEvent without VK_*.<a name="line.532"></a>
<FONT color="green">533</FONT>       *<a name="line.533"></a>
<FONT color="green">534</FONT>       * @param keyString the string<a name="line.534"></a>
<FONT color="green">535</FONT>       * @return the mnemonic as integer<a name="line.535"></a>
<FONT color="green">536</FONT>       */<a name="line.536"></a>
<FONT color="green">537</FONT>      private Integer createMnemonic(final String keyString)<a name="line.537"></a>
<FONT color="green">538</FONT>      {<a name="line.538"></a>
<FONT color="green">539</FONT>        if (keyString == null)<a name="line.539"></a>
<FONT color="green">540</FONT>        {<a name="line.540"></a>
<FONT color="green">541</FONT>          throw new NullPointerException("Key is null.");<a name="line.541"></a>
<FONT color="green">542</FONT>        }<a name="line.542"></a>
<FONT color="green">543</FONT>        if (keyString.length() == 0)<a name="line.543"></a>
<FONT color="green">544</FONT>        {<a name="line.544"></a>
<FONT color="green">545</FONT>          throw new IllegalArgumentException("Key is empty.");<a name="line.545"></a>
<FONT color="green">546</FONT>        }<a name="line.546"></a>
<FONT color="green">547</FONT>        int character = keyString.charAt(0);<a name="line.547"></a>
<FONT color="green">548</FONT>        if (keyString.startsWith("VK_"))<a name="line.548"></a>
<FONT color="green">549</FONT>        {<a name="line.549"></a>
<FONT color="green">550</FONT>          try<a name="line.550"></a>
<FONT color="green">551</FONT>          {<a name="line.551"></a>
<FONT color="green">552</FONT>            final Field f = KeyEvent.class.getField(keyString);<a name="line.552"></a>
<FONT color="green">553</FONT>            final Integer keyCode = (Integer) f.get(null);<a name="line.553"></a>
<FONT color="green">554</FONT>            character = keyCode.intValue();<a name="line.554"></a>
<FONT color="green">555</FONT>          }<a name="line.555"></a>
<FONT color="green">556</FONT>          catch (Exception nsfe)<a name="line.556"></a>
<FONT color="green">557</FONT>          {<a name="line.557"></a>
<FONT color="green">558</FONT>            // ignore the exception ...<a name="line.558"></a>
<FONT color="green">559</FONT>          }<a name="line.559"></a>
<FONT color="green">560</FONT>        }<a name="line.560"></a>
<FONT color="green">561</FONT>        return new Integer(character);<a name="line.561"></a>
<FONT color="green">562</FONT>      }<a name="line.562"></a>
<FONT color="green">563</FONT>    <a name="line.563"></a>
<FONT color="green">564</FONT>      /**<a name="line.564"></a>
<FONT color="green">565</FONT>       * Returns the plattforms default menu shortcut keymask.<a name="line.565"></a>
<FONT color="green">566</FONT>       *<a name="line.566"></a>
<FONT color="green">567</FONT>       * @return the default key mask.<a name="line.567"></a>
<FONT color="green">568</FONT>       */<a name="line.568"></a>
<FONT color="green">569</FONT>      private int getMenuKeyMask()<a name="line.569"></a>
<FONT color="green">570</FONT>      {<a name="line.570"></a>
<FONT color="green">571</FONT>        try<a name="line.571"></a>
<FONT color="green">572</FONT>        {<a name="line.572"></a>
<FONT color="green">573</FONT>          return Toolkit.getDefaultToolkit().getMenuShortcutKeyMask();<a name="line.573"></a>
<FONT color="green">574</FONT>        }<a name="line.574"></a>
<FONT color="green">575</FONT>        catch (UnsupportedOperationException he)<a name="line.575"></a>
<FONT color="green">576</FONT>        {<a name="line.576"></a>
<FONT color="green">577</FONT>          // headless exception extends UnsupportedOperation exception,<a name="line.577"></a>
<FONT color="green">578</FONT>          // but the HeadlessException is not defined in older JDKs...<a name="line.578"></a>
<FONT color="green">579</FONT>          return InputEvent.CTRL_MASK;<a name="line.579"></a>
<FONT color="green">580</FONT>        }<a name="line.580"></a>
<FONT color="green">581</FONT>      }<a name="line.581"></a>
<FONT color="green">582</FONT>    <a name="line.582"></a>
<FONT color="green">583</FONT>      /**<a name="line.583"></a>
<FONT color="green">584</FONT>       * Creates a transparent image.  These can be used for aligning menu items.<a name="line.584"></a>
<FONT color="green">585</FONT>       *<a name="line.585"></a>
<FONT color="green">586</FONT>       * @param width  the width.<a name="line.586"></a>
<FONT color="green">587</FONT>       * @param height the height.<a name="line.587"></a>
<FONT color="green">588</FONT>       * @return the created transparent image.<a name="line.588"></a>
<FONT color="green">589</FONT>       */<a name="line.589"></a>
<FONT color="green">590</FONT>      private BufferedImage createTransparentImage(final int width,<a name="line.590"></a>
<FONT color="green">591</FONT>                                                   final int height)<a name="line.591"></a>
<FONT color="green">592</FONT>      {<a name="line.592"></a>
<FONT color="green">593</FONT>        final BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);<a name="line.593"></a>
<FONT color="green">594</FONT>        final int[] data = img.getRGB(0, 0, width, height, null, 0, width);<a name="line.594"></a>
<FONT color="green">595</FONT>        Arrays.fill(data, 0x00000000);<a name="line.595"></a>
<FONT color="green">596</FONT>        img.setRGB(0, 0, width, height, data, 0, width);<a name="line.596"></a>
<FONT color="green">597</FONT>        return img;<a name="line.597"></a>
<FONT color="green">598</FONT>      }<a name="line.598"></a>
<FONT color="green">599</FONT>    <a name="line.599"></a>
<FONT color="green">600</FONT>      /**<a name="line.600"></a>
<FONT color="green">601</FONT>       * Creates a transparent icon. The Icon can be used for aligning menu<a name="line.601"></a>
<FONT color="green">602</FONT>       * items.<a name="line.602"></a>
<FONT color="green">603</FONT>       *<a name="line.603"></a>
<FONT color="green">604</FONT>       * @param width  the width of the new icon<a name="line.604"></a>
<FONT color="green">605</FONT>       * @param height the height of the new icon<a name="line.605"></a>
<FONT color="green">606</FONT>       * @return the created transparent icon.<a name="line.606"></a>
<FONT color="green">607</FONT>       */<a name="line.607"></a>
<FONT color="green">608</FONT>      public Icon createTransparentIcon(final int width, final int height)<a name="line.608"></a>
<FONT color="green">609</FONT>      {<a name="line.609"></a>
<FONT color="green">610</FONT>        return new ImageIcon(createTransparentImage(width, height));<a name="line.610"></a>
<FONT color="green">611</FONT>      }<a name="line.611"></a>
<FONT color="green">612</FONT>    <a name="line.612"></a>
<FONT color="green">613</FONT>      /**<a name="line.613"></a>
<FONT color="green">614</FONT>       * Formats the message stored in the resource bundle (using a<a name="line.614"></a>
<FONT color="green">615</FONT>       * MessageFormat).<a name="line.615"></a>
<FONT color="green">616</FONT>       *<a name="line.616"></a>
<FONT color="green">617</FONT>       * @param key       the resourcebundle key<a name="line.617"></a>
<FONT color="green">618</FONT>       * @param parameter the parameter for the message<a name="line.618"></a>
<FONT color="green">619</FONT>       * @return the formated string<a name="line.619"></a>
<FONT color="green">620</FONT>       */<a name="line.620"></a>
<FONT color="green">621</FONT>      public String formatMessage(final String key, final Object parameter)<a name="line.621"></a>
<FONT color="green">622</FONT>      {<a name="line.622"></a>
<FONT color="green">623</FONT>        return formatMessage(key, new Object[]{parameter});<a name="line.623"></a>
<FONT color="green">624</FONT>      }<a name="line.624"></a>
<FONT color="green">625</FONT>    <a name="line.625"></a>
<FONT color="green">626</FONT>      /**<a name="line.626"></a>
<FONT color="green">627</FONT>       * Formats the message stored in the resource bundle (using a<a name="line.627"></a>
<FONT color="green">628</FONT>       * MessageFormat).<a name="line.628"></a>
<FONT color="green">629</FONT>       *<a name="line.629"></a>
<FONT color="green">630</FONT>       * @param key  the resourcebundle key<a name="line.630"></a>
<FONT color="green">631</FONT>       * @param par1 the first parameter for the message<a name="line.631"></a>
<FONT color="green">632</FONT>       * @param par2 the second parameter for the message<a name="line.632"></a>
<FONT color="green">633</FONT>       * @return the formated string<a name="line.633"></a>
<FONT color="green">634</FONT>       */<a name="line.634"></a>
<FONT color="green">635</FONT>      public String formatMessage(final String key,<a name="line.635"></a>
<FONT color="green">636</FONT>                                  final Object par1,<a name="line.636"></a>
<FONT color="green">637</FONT>                                  final Object par2)<a name="line.637"></a>
<FONT color="green">638</FONT>      {<a name="line.638"></a>
<FONT color="green">639</FONT>        return formatMessage(key, new Object[]{par1, par2});<a name="line.639"></a>
<FONT color="green">640</FONT>      }<a name="line.640"></a>
<FONT color="green">641</FONT>    <a name="line.641"></a>
<FONT color="green">642</FONT>      /**<a name="line.642"></a>
<FONT color="green">643</FONT>       * Formats the message stored in the resource bundle (using a<a name="line.643"></a>
<FONT color="green">644</FONT>       * MessageFormat).<a name="line.644"></a>
<FONT color="green">645</FONT>       *<a name="line.645"></a>
<FONT color="green">646</FONT>       * @param key        the resourcebundle key<a name="line.646"></a>
<FONT color="green">647</FONT>       * @param parameters the parameter collection for the message<a name="line.647"></a>
<FONT color="green">648</FONT>       * @return the formated string<a name="line.648"></a>
<FONT color="green">649</FONT>       */<a name="line.649"></a>
<FONT color="green">650</FONT>      public String formatMessage(final String key, final Object[] parameters)<a name="line.650"></a>
<FONT color="green">651</FONT>      {<a name="line.651"></a>
<FONT color="green">652</FONT>        final MessageFormat format = new MessageFormat(getString(key));<a name="line.652"></a>
<FONT color="green">653</FONT>        format.setLocale(getLocale());<a name="line.653"></a>
<FONT color="green">654</FONT>        return format.format(parameters);<a name="line.654"></a>
<FONT color="green">655</FONT>      }<a name="line.655"></a>
<FONT color="green">656</FONT>    <a name="line.656"></a>
<FONT color="green">657</FONT>      /**<a name="line.657"></a>
<FONT color="green">658</FONT>       * Returns the current locale for this resource bundle.<a name="line.658"></a>
<FONT color="green">659</FONT>       *<a name="line.659"></a>
<FONT color="green">660</FONT>       * @return the locale.<a name="line.660"></a>
<FONT color="green">661</FONT>       */<a name="line.661"></a>
<FONT color="green">662</FONT>      public Locale getLocale()<a name="line.662"></a>
<FONT color="green">663</FONT>      {<a name="line.663"></a>
<FONT color="green">664</FONT>        return this.locale;<a name="line.664"></a>
<FONT color="green">665</FONT>      }<a name="line.665"></a>
<FONT color="green">666</FONT>    }<a name="line.666"></a>




























































</PRE>
</BODY>
</HTML>
