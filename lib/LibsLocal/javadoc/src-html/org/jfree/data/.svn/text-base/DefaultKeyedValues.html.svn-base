<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ===========================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JFreeChart : a free chart library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ===========================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     *<a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jfreechart/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it<a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by<a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or<a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but<a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY<a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public<a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,<a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.<a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc.<a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     *<a name="line.26"></a>
<FONT color="green">027</FONT>     * -----------------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * DefaultKeyedValues.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * -----------------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C) Copyright 2002-2008, by Object Refinery Limited.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  David Gilbert (for Object Refinery Limited);<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   Thomas Morgner;<a name="line.33"></a>
<FONT color="green">034</FONT>     *<a name="line.34"></a>
<FONT color="green">035</FONT>     * Changes:<a name="line.35"></a>
<FONT color="green">036</FONT>     * --------<a name="line.36"></a>
<FONT color="green">037</FONT>     * 31-Oct-2002 : Version 1 (DG);<a name="line.37"></a>
<FONT color="green">038</FONT>     * 11-Feb-2003 : Fixed bug in getValue(key) method for unrecognised key (DG);<a name="line.38"></a>
<FONT color="green">039</FONT>     * 05-Mar-2003 : Added methods to sort stored data 'by key' or 'by value' (DG);<a name="line.39"></a>
<FONT color="green">040</FONT>     * 13-Mar-2003 : Implemented Serializable (DG);<a name="line.40"></a>
<FONT color="green">041</FONT>     * 08-Apr-2003 : Modified removeValue(Comparable) method to fix bug 717049 (DG);<a name="line.41"></a>
<FONT color="green">042</FONT>     * 18-Aug-2003 : Implemented Cloneable (DG);<a name="line.42"></a>
<FONT color="green">043</FONT>     * 27-Aug-2003 : Moved SortOrder from org.jfree.data --&gt; org.jfree.util (DG);<a name="line.43"></a>
<FONT color="green">044</FONT>     * 09-Feb-2004 : Modified getIndex() method - see bug report 893256 (DG);<a name="line.44"></a>
<FONT color="green">045</FONT>     * 15-Sep-2004 : Updated clone() method and added PublicCloneable<a name="line.45"></a>
<FONT color="green">046</FONT>     *               interface (DG);<a name="line.46"></a>
<FONT color="green">047</FONT>     * 25-Nov-2004 : Small update to the clone() implementation (DG);<a name="line.47"></a>
<FONT color="green">048</FONT>     * 24-Feb-2005 : Added methods addValue(Comparable, double) and<a name="line.48"></a>
<FONT color="green">049</FONT>     *               setValue(Comparable, double) for convenience (DG);<a name="line.49"></a>
<FONT color="green">050</FONT>     * ------------- JFREECHART 1.0.x ---------------------------------------------<a name="line.50"></a>
<FONT color="green">051</FONT>     * 31-Jul-2006 : Added a clear() method (DG);<a name="line.51"></a>
<FONT color="green">052</FONT>     * 01-Aug-2006 : Added argument check to getIndex() method (DG);<a name="line.52"></a>
<FONT color="green">053</FONT>     * 30-Apr-2007 : Added insertValue() methods (DG);<a name="line.53"></a>
<FONT color="green">054</FONT>     * 31-Oct-2007 : Performance improvements by using separate lists for keys and<a name="line.54"></a>
<FONT color="green">055</FONT>     *               values (TM);<a name="line.55"></a>
<FONT color="green">056</FONT>     * 21-Nov-2007 : Fixed bug in removeValue() method from previous patch (DG);<a name="line.56"></a>
<FONT color="green">057</FONT>     *<a name="line.57"></a>
<FONT color="green">058</FONT>     */<a name="line.58"></a>
<FONT color="green">059</FONT>    <a name="line.59"></a>
<FONT color="green">060</FONT>    package org.jfree.data;<a name="line.60"></a>
<FONT color="green">061</FONT>    <a name="line.61"></a>
<FONT color="green">062</FONT>    import java.io.Serializable;<a name="line.62"></a>
<FONT color="green">063</FONT>    import java.util.ArrayList;<a name="line.63"></a>
<FONT color="green">064</FONT>    import java.util.Arrays;<a name="line.64"></a>
<FONT color="green">065</FONT>    import java.util.Comparator;<a name="line.65"></a>
<FONT color="green">066</FONT>    import java.util.HashMap;<a name="line.66"></a>
<FONT color="green">067</FONT>    import java.util.List;<a name="line.67"></a>
<FONT color="green">068</FONT>    <a name="line.68"></a>
<FONT color="green">069</FONT>    import org.jfree.util.PublicCloneable;<a name="line.69"></a>
<FONT color="green">070</FONT>    import org.jfree.util.SortOrder;<a name="line.70"></a>
<FONT color="green">071</FONT>    <a name="line.71"></a>
<FONT color="green">072</FONT>    /**<a name="line.72"></a>
<FONT color="green">073</FONT>     * An ordered list of (key, value) items.  This class provides a default<a name="line.73"></a>
<FONT color="green">074</FONT>     * implementation of the {@link KeyedValues} interface.<a name="line.74"></a>
<FONT color="green">075</FONT>     */<a name="line.75"></a>
<FONT color="green">076</FONT>    public class DefaultKeyedValues implements KeyedValues, Cloneable,<a name="line.76"></a>
<FONT color="green">077</FONT>            PublicCloneable, Serializable {<a name="line.77"></a>
<FONT color="green">078</FONT>    <a name="line.78"></a>
<FONT color="green">079</FONT>        /** For serialization. */<a name="line.79"></a>
<FONT color="green">080</FONT>        private static final long serialVersionUID = 8468154364608194797L;<a name="line.80"></a>
<FONT color="green">081</FONT>    <a name="line.81"></a>
<FONT color="green">082</FONT>        /** Storage for the keys. */<a name="line.82"></a>
<FONT color="green">083</FONT>        private ArrayList keys;<a name="line.83"></a>
<FONT color="green">084</FONT>    <a name="line.84"></a>
<FONT color="green">085</FONT>        /** Storage for the values. */<a name="line.85"></a>
<FONT color="green">086</FONT>        private ArrayList values;<a name="line.86"></a>
<FONT color="green">087</FONT>    <a name="line.87"></a>
<FONT color="green">088</FONT>        /**<a name="line.88"></a>
<FONT color="green">089</FONT>         * Contains (key, Integer) mappings, where the Integer is the index for<a name="line.89"></a>
<FONT color="green">090</FONT>         * the key in the list.<a name="line.90"></a>
<FONT color="green">091</FONT>         */<a name="line.91"></a>
<FONT color="green">092</FONT>        private HashMap indexMap;<a name="line.92"></a>
<FONT color="green">093</FONT>    <a name="line.93"></a>
<FONT color="green">094</FONT>      /**<a name="line.94"></a>
<FONT color="green">095</FONT>         * Creates a new collection (initially empty).<a name="line.95"></a>
<FONT color="green">096</FONT>         */<a name="line.96"></a>
<FONT color="green">097</FONT>        public DefaultKeyedValues() {<a name="line.97"></a>
<FONT color="green">098</FONT>            this.keys = new ArrayList();<a name="line.98"></a>
<FONT color="green">099</FONT>            this.values = new ArrayList();<a name="line.99"></a>
<FONT color="green">100</FONT>            this.indexMap = new HashMap();<a name="line.100"></a>
<FONT color="green">101</FONT>        }<a name="line.101"></a>
<FONT color="green">102</FONT>    <a name="line.102"></a>
<FONT color="green">103</FONT>        /**<a name="line.103"></a>
<FONT color="green">104</FONT>         * Returns the number of items (values) in the collection.<a name="line.104"></a>
<FONT color="green">105</FONT>         *<a name="line.105"></a>
<FONT color="green">106</FONT>         * @return The item count.<a name="line.106"></a>
<FONT color="green">107</FONT>         */<a name="line.107"></a>
<FONT color="green">108</FONT>        public int getItemCount() {<a name="line.108"></a>
<FONT color="green">109</FONT>            return this.indexMap.size();<a name="line.109"></a>
<FONT color="green">110</FONT>        }<a name="line.110"></a>
<FONT color="green">111</FONT>    <a name="line.111"></a>
<FONT color="green">112</FONT>        /**<a name="line.112"></a>
<FONT color="green">113</FONT>         * Returns a value.<a name="line.113"></a>
<FONT color="green">114</FONT>         *<a name="line.114"></a>
<FONT color="green">115</FONT>         * @param item  the item of interest (zero-based index).<a name="line.115"></a>
<FONT color="green">116</FONT>         *<a name="line.116"></a>
<FONT color="green">117</FONT>         * @return The value (possibly &lt;code&gt;null&lt;/code&gt;).<a name="line.117"></a>
<FONT color="green">118</FONT>         *<a name="line.118"></a>
<FONT color="green">119</FONT>         * @throws IndexOutOfBoundsException if &lt;code&gt;item&lt;/code&gt; is out of bounds.<a name="line.119"></a>
<FONT color="green">120</FONT>         */<a name="line.120"></a>
<FONT color="green">121</FONT>        public Number getValue(int item) {<a name="line.121"></a>
<FONT color="green">122</FONT>            return (Number) this.values.get(item);<a name="line.122"></a>
<FONT color="green">123</FONT>        }<a name="line.123"></a>
<FONT color="green">124</FONT>    <a name="line.124"></a>
<FONT color="green">125</FONT>        /**<a name="line.125"></a>
<FONT color="green">126</FONT>         * Returns a key.<a name="line.126"></a>
<FONT color="green">127</FONT>         *<a name="line.127"></a>
<FONT color="green">128</FONT>         * @param index  the item index (zero-based).<a name="line.128"></a>
<FONT color="green">129</FONT>         *<a name="line.129"></a>
<FONT color="green">130</FONT>         * @return The row key.<a name="line.130"></a>
<FONT color="green">131</FONT>         *<a name="line.131"></a>
<FONT color="green">132</FONT>         * @throws IndexOutOfBoundsException if &lt;code&gt;item&lt;/code&gt; is out of bounds.<a name="line.132"></a>
<FONT color="green">133</FONT>         */<a name="line.133"></a>
<FONT color="green">134</FONT>        public Comparable getKey(int index) {<a name="line.134"></a>
<FONT color="green">135</FONT>            return (Comparable) this.keys.get(index);<a name="line.135"></a>
<FONT color="green">136</FONT>        }<a name="line.136"></a>
<FONT color="green">137</FONT>    <a name="line.137"></a>
<FONT color="green">138</FONT>        /**<a name="line.138"></a>
<FONT color="green">139</FONT>         * Returns the index for a given key.<a name="line.139"></a>
<FONT color="green">140</FONT>         *<a name="line.140"></a>
<FONT color="green">141</FONT>         * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.141"></a>
<FONT color="green">142</FONT>         *<a name="line.142"></a>
<FONT color="green">143</FONT>         * @return The index, or &lt;code&gt;-1&lt;/code&gt; if the key is not recognised.<a name="line.143"></a>
<FONT color="green">144</FONT>         *<a name="line.144"></a>
<FONT color="green">145</FONT>         * @throws IllegalArgumentException if &lt;code&gt;key&lt;/code&gt; is<a name="line.145"></a>
<FONT color="green">146</FONT>         *     &lt;code&gt;null&lt;/code&gt;.<a name="line.146"></a>
<FONT color="green">147</FONT>         */<a name="line.147"></a>
<FONT color="green">148</FONT>        public int getIndex(Comparable key) {<a name="line.148"></a>
<FONT color="green">149</FONT>            if (key == null) {<a name="line.149"></a>
<FONT color="green">150</FONT>                throw new IllegalArgumentException("Null 'key' argument.");<a name="line.150"></a>
<FONT color="green">151</FONT>            }<a name="line.151"></a>
<FONT color="green">152</FONT>            final Integer i = (Integer) this.indexMap.get(key);<a name="line.152"></a>
<FONT color="green">153</FONT>            if (i == null) {<a name="line.153"></a>
<FONT color="green">154</FONT>                return -1;  // key not found<a name="line.154"></a>
<FONT color="green">155</FONT>            }<a name="line.155"></a>
<FONT color="green">156</FONT>            return i.intValue();<a name="line.156"></a>
<FONT color="green">157</FONT>        }<a name="line.157"></a>
<FONT color="green">158</FONT>    <a name="line.158"></a>
<FONT color="green">159</FONT>        /**<a name="line.159"></a>
<FONT color="green">160</FONT>         * Returns the keys for the values in the collection.<a name="line.160"></a>
<FONT color="green">161</FONT>         *<a name="line.161"></a>
<FONT color="green">162</FONT>         * @return The keys (never &lt;code&gt;null&lt;/code&gt;).<a name="line.162"></a>
<FONT color="green">163</FONT>         */<a name="line.163"></a>
<FONT color="green">164</FONT>        public List getKeys() {<a name="line.164"></a>
<FONT color="green">165</FONT>            return (List) this.keys.clone();<a name="line.165"></a>
<FONT color="green">166</FONT>        }<a name="line.166"></a>
<FONT color="green">167</FONT>    <a name="line.167"></a>
<FONT color="green">168</FONT>        /**<a name="line.168"></a>
<FONT color="green">169</FONT>         * Returns the value for a given key.<a name="line.169"></a>
<FONT color="green">170</FONT>         *<a name="line.170"></a>
<FONT color="green">171</FONT>         * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.171"></a>
<FONT color="green">172</FONT>         *<a name="line.172"></a>
<FONT color="green">173</FONT>         * @return The value (possibly &lt;code&gt;null&lt;/code&gt;).<a name="line.173"></a>
<FONT color="green">174</FONT>         *<a name="line.174"></a>
<FONT color="green">175</FONT>         * @throws UnknownKeyException if the key is not recognised.<a name="line.175"></a>
<FONT color="green">176</FONT>         *<a name="line.176"></a>
<FONT color="green">177</FONT>         * @see #getValue(int)<a name="line.177"></a>
<FONT color="green">178</FONT>         */<a name="line.178"></a>
<FONT color="green">179</FONT>        public Number getValue(Comparable key) {<a name="line.179"></a>
<FONT color="green">180</FONT>            int index = getIndex(key);<a name="line.180"></a>
<FONT color="green">181</FONT>            if (index &lt; 0) {<a name="line.181"></a>
<FONT color="green">182</FONT>                throw new UnknownKeyException("Key not found: " + key);<a name="line.182"></a>
<FONT color="green">183</FONT>            }<a name="line.183"></a>
<FONT color="green">184</FONT>            return getValue(index);<a name="line.184"></a>
<FONT color="green">185</FONT>        }<a name="line.185"></a>
<FONT color="green">186</FONT>    <a name="line.186"></a>
<FONT color="green">187</FONT>        /**<a name="line.187"></a>
<FONT color="green">188</FONT>         * Updates an existing value, or adds a new value to the collection.<a name="line.188"></a>
<FONT color="green">189</FONT>         *<a name="line.189"></a>
<FONT color="green">190</FONT>         * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.190"></a>
<FONT color="green">191</FONT>         * @param value  the value.<a name="line.191"></a>
<FONT color="green">192</FONT>         *<a name="line.192"></a>
<FONT color="green">193</FONT>         * @see #addValue(Comparable, Number)<a name="line.193"></a>
<FONT color="green">194</FONT>         */<a name="line.194"></a>
<FONT color="green">195</FONT>        public void addValue(Comparable key, double value) {<a name="line.195"></a>
<FONT color="green">196</FONT>            addValue(key, new Double(value));<a name="line.196"></a>
<FONT color="green">197</FONT>        }<a name="line.197"></a>
<FONT color="green">198</FONT>    <a name="line.198"></a>
<FONT color="green">199</FONT>        /**<a name="line.199"></a>
<FONT color="green">200</FONT>         * Adds a new value to the collection, or updates an existing value.<a name="line.200"></a>
<FONT color="green">201</FONT>         * This method passes control directly to the<a name="line.201"></a>
<FONT color="green">202</FONT>         * {@link #setValue(Comparable, Number)} method.<a name="line.202"></a>
<FONT color="green">203</FONT>         *<a name="line.203"></a>
<FONT color="green">204</FONT>         * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.204"></a>
<FONT color="green">205</FONT>         * @param value  the value (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.205"></a>
<FONT color="green">206</FONT>         */<a name="line.206"></a>
<FONT color="green">207</FONT>        public void addValue(Comparable key, Number value) {<a name="line.207"></a>
<FONT color="green">208</FONT>            setValue(key, value);<a name="line.208"></a>
<FONT color="green">209</FONT>        }<a name="line.209"></a>
<FONT color="green">210</FONT>    <a name="line.210"></a>
<FONT color="green">211</FONT>        /**<a name="line.211"></a>
<FONT color="green">212</FONT>         * Updates an existing value, or adds a new value to the collection.<a name="line.212"></a>
<FONT color="green">213</FONT>         *<a name="line.213"></a>
<FONT color="green">214</FONT>         * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.214"></a>
<FONT color="green">215</FONT>         * @param value  the value.<a name="line.215"></a>
<FONT color="green">216</FONT>         */<a name="line.216"></a>
<FONT color="green">217</FONT>        public void setValue(Comparable key, double value) {<a name="line.217"></a>
<FONT color="green">218</FONT>            setValue(key, new Double(value));<a name="line.218"></a>
<FONT color="green">219</FONT>        }<a name="line.219"></a>
<FONT color="green">220</FONT>    <a name="line.220"></a>
<FONT color="green">221</FONT>        /**<a name="line.221"></a>
<FONT color="green">222</FONT>         * Updates an existing value, or adds a new value to the collection.<a name="line.222"></a>
<FONT color="green">223</FONT>         *<a name="line.223"></a>
<FONT color="green">224</FONT>         * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.224"></a>
<FONT color="green">225</FONT>         * @param value  the value (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.225"></a>
<FONT color="green">226</FONT>         */<a name="line.226"></a>
<FONT color="green">227</FONT>        public void setValue(Comparable key, Number value) {<a name="line.227"></a>
<FONT color="green">228</FONT>            if (key == null) {<a name="line.228"></a>
<FONT color="green">229</FONT>                throw new IllegalArgumentException("Null 'key' argument.");<a name="line.229"></a>
<FONT color="green">230</FONT>            }<a name="line.230"></a>
<FONT color="green">231</FONT>            int keyIndex = getIndex(key);<a name="line.231"></a>
<FONT color="green">232</FONT>            if (keyIndex &gt;= 0) {<a name="line.232"></a>
<FONT color="green">233</FONT>                this.keys.set(keyIndex, key);<a name="line.233"></a>
<FONT color="green">234</FONT>                this.values.set(keyIndex, value);<a name="line.234"></a>
<FONT color="green">235</FONT>            }<a name="line.235"></a>
<FONT color="green">236</FONT>            else {<a name="line.236"></a>
<FONT color="green">237</FONT>                this.keys.add(key);<a name="line.237"></a>
<FONT color="green">238</FONT>                this.values.add(value);<a name="line.238"></a>
<FONT color="green">239</FONT>                this.indexMap.put(key, new Integer(this.keys.size() - 1));<a name="line.239"></a>
<FONT color="green">240</FONT>            }<a name="line.240"></a>
<FONT color="green">241</FONT>        }<a name="line.241"></a>
<FONT color="green">242</FONT>    <a name="line.242"></a>
<FONT color="green">243</FONT>        /**<a name="line.243"></a>
<FONT color="green">244</FONT>         * Inserts a new value at the specified position in the dataset or, if<a name="line.244"></a>
<FONT color="green">245</FONT>         * there is an existing item with the specified key, updates the value<a name="line.245"></a>
<FONT color="green">246</FONT>         * for that item and moves it to the specified position.<a name="line.246"></a>
<FONT color="green">247</FONT>         *<a name="line.247"></a>
<FONT color="green">248</FONT>         * @param position  the position (in the range 0 to getItemCount()).<a name="line.248"></a>
<FONT color="green">249</FONT>         * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.249"></a>
<FONT color="green">250</FONT>         * @param value  the value.<a name="line.250"></a>
<FONT color="green">251</FONT>         *<a name="line.251"></a>
<FONT color="green">252</FONT>         * @since 1.0.6<a name="line.252"></a>
<FONT color="green">253</FONT>         */<a name="line.253"></a>
<FONT color="green">254</FONT>        public void insertValue(int position, Comparable key, double value) {<a name="line.254"></a>
<FONT color="green">255</FONT>            insertValue(position, key, new Double(value));<a name="line.255"></a>
<FONT color="green">256</FONT>        }<a name="line.256"></a>
<FONT color="green">257</FONT>    <a name="line.257"></a>
<FONT color="green">258</FONT>        /**<a name="line.258"></a>
<FONT color="green">259</FONT>         * Inserts a new value at the specified position in the dataset or, if<a name="line.259"></a>
<FONT color="green">260</FONT>         * there is an existing item with the specified key, updates the value<a name="line.260"></a>
<FONT color="green">261</FONT>         * for that item and moves it to the specified position.<a name="line.261"></a>
<FONT color="green">262</FONT>         *<a name="line.262"></a>
<FONT color="green">263</FONT>         * @param position  the position (in the range 0 to getItemCount()).<a name="line.263"></a>
<FONT color="green">264</FONT>         * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.264"></a>
<FONT color="green">265</FONT>         * @param value  the value (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.265"></a>
<FONT color="green">266</FONT>         *<a name="line.266"></a>
<FONT color="green">267</FONT>         * @since 1.0.6<a name="line.267"></a>
<FONT color="green">268</FONT>         */<a name="line.268"></a>
<FONT color="green">269</FONT>        public void insertValue(int position, Comparable key, Number value) {<a name="line.269"></a>
<FONT color="green">270</FONT>            if (position &lt; 0 || position &gt; getItemCount()) {<a name="line.270"></a>
<FONT color="green">271</FONT>                throw new IllegalArgumentException("'position' out of bounds.");<a name="line.271"></a>
<FONT color="green">272</FONT>            }<a name="line.272"></a>
<FONT color="green">273</FONT>            if (key == null) {<a name="line.273"></a>
<FONT color="green">274</FONT>                throw new IllegalArgumentException("Null 'key' argument.");<a name="line.274"></a>
<FONT color="green">275</FONT>            }<a name="line.275"></a>
<FONT color="green">276</FONT>            int pos = getIndex(key);<a name="line.276"></a>
<FONT color="green">277</FONT>            if (pos == position) {<a name="line.277"></a>
<FONT color="green">278</FONT>                this.keys.set(pos, key);<a name="line.278"></a>
<FONT color="green">279</FONT>                this.values.set(pos, value);<a name="line.279"></a>
<FONT color="green">280</FONT>            }<a name="line.280"></a>
<FONT color="green">281</FONT>            else {<a name="line.281"></a>
<FONT color="green">282</FONT>                if (pos &gt;= 0) {<a name="line.282"></a>
<FONT color="green">283</FONT>                    this.keys.remove(pos);<a name="line.283"></a>
<FONT color="green">284</FONT>                    this.values.remove(pos);<a name="line.284"></a>
<FONT color="green">285</FONT>                }<a name="line.285"></a>
<FONT color="green">286</FONT>    <a name="line.286"></a>
<FONT color="green">287</FONT>                this.keys.add(position, key);<a name="line.287"></a>
<FONT color="green">288</FONT>                this.values.add(position, value);<a name="line.288"></a>
<FONT color="green">289</FONT>                rebuildIndex();<a name="line.289"></a>
<FONT color="green">290</FONT>            }<a name="line.290"></a>
<FONT color="green">291</FONT>        }<a name="line.291"></a>
<FONT color="green">292</FONT>    <a name="line.292"></a>
<FONT color="green">293</FONT>        /**<a name="line.293"></a>
<FONT color="green">294</FONT>         * Rebuilds the key to indexed-position mapping after an positioned insert<a name="line.294"></a>
<FONT color="green">295</FONT>         * or a remove operation.<a name="line.295"></a>
<FONT color="green">296</FONT>         */<a name="line.296"></a>
<FONT color="green">297</FONT>        private void rebuildIndex () {<a name="line.297"></a>
<FONT color="green">298</FONT>            this.indexMap.clear();<a name="line.298"></a>
<FONT color="green">299</FONT>            for (int i = 0; i &lt; this.keys.size(); i++) {<a name="line.299"></a>
<FONT color="green">300</FONT>                final Object key = this.keys.get(i);<a name="line.300"></a>
<FONT color="green">301</FONT>                this.indexMap.put(key, new Integer(i));<a name="line.301"></a>
<FONT color="green">302</FONT>            }<a name="line.302"></a>
<FONT color="green">303</FONT>        }<a name="line.303"></a>
<FONT color="green">304</FONT>    <a name="line.304"></a>
<FONT color="green">305</FONT>        /**<a name="line.305"></a>
<FONT color="green">306</FONT>         * Removes a value from the collection.<a name="line.306"></a>
<FONT color="green">307</FONT>         *<a name="line.307"></a>
<FONT color="green">308</FONT>         * @param index  the index of the item to remove (in the range<a name="line.308"></a>
<FONT color="green">309</FONT>         *     &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;getItemCount() - 1&lt;/code&gt;).<a name="line.309"></a>
<FONT color="green">310</FONT>         *<a name="line.310"></a>
<FONT color="green">311</FONT>         * @throws IndexOutOfBoundsException if &lt;code&gt;index&lt;/code&gt; is not within<a name="line.311"></a>
<FONT color="green">312</FONT>         *     the specified range.<a name="line.312"></a>
<FONT color="green">313</FONT>         */<a name="line.313"></a>
<FONT color="green">314</FONT>        public void removeValue(int index) {<a name="line.314"></a>
<FONT color="green">315</FONT>            this.keys.remove(index);<a name="line.315"></a>
<FONT color="green">316</FONT>            this.values.remove(index);<a name="line.316"></a>
<FONT color="green">317</FONT>            rebuildIndex();<a name="line.317"></a>
<FONT color="green">318</FONT>        }<a name="line.318"></a>
<FONT color="green">319</FONT>    <a name="line.319"></a>
<FONT color="green">320</FONT>        /**<a name="line.320"></a>
<FONT color="green">321</FONT>         * Removes a value from the collection.<a name="line.321"></a>
<FONT color="green">322</FONT>         *<a name="line.322"></a>
<FONT color="green">323</FONT>         * @param key  the item key (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.323"></a>
<FONT color="green">324</FONT>         *<a name="line.324"></a>
<FONT color="green">325</FONT>         * @throws IllegalArgumentException if &lt;code&gt;key&lt;/code&gt; is<a name="line.325"></a>
<FONT color="green">326</FONT>         *     &lt;code&gt;null&lt;/code&gt;.<a name="line.326"></a>
<FONT color="green">327</FONT>         * @throws UnknownKeyException if &lt;code&gt;key&lt;/code&gt; is not recognised.<a name="line.327"></a>
<FONT color="green">328</FONT>         */<a name="line.328"></a>
<FONT color="green">329</FONT>        public void removeValue(Comparable key) {<a name="line.329"></a>
<FONT color="green">330</FONT>            int index = getIndex(key);<a name="line.330"></a>
<FONT color="green">331</FONT>            if (index &lt; 0) {<a name="line.331"></a>
<FONT color="green">332</FONT>                throw new UnknownKeyException("The key (" + key<a name="line.332"></a>
<FONT color="green">333</FONT>                        + ") is not recognised.");<a name="line.333"></a>
<FONT color="green">334</FONT>            }<a name="line.334"></a>
<FONT color="green">335</FONT>            removeValue(index);<a name="line.335"></a>
<FONT color="green">336</FONT>        }<a name="line.336"></a>
<FONT color="green">337</FONT>    <a name="line.337"></a>
<FONT color="green">338</FONT>        /**<a name="line.338"></a>
<FONT color="green">339</FONT>         * Clears all values from the collection.<a name="line.339"></a>
<FONT color="green">340</FONT>         *<a name="line.340"></a>
<FONT color="green">341</FONT>         * @since 1.0.2<a name="line.341"></a>
<FONT color="green">342</FONT>         */<a name="line.342"></a>
<FONT color="green">343</FONT>        public void clear() {<a name="line.343"></a>
<FONT color="green">344</FONT>            this.keys.clear();<a name="line.344"></a>
<FONT color="green">345</FONT>            this.values.clear();<a name="line.345"></a>
<FONT color="green">346</FONT>            this.indexMap.clear();<a name="line.346"></a>
<FONT color="green">347</FONT>        }<a name="line.347"></a>
<FONT color="green">348</FONT>    <a name="line.348"></a>
<FONT color="green">349</FONT>        /**<a name="line.349"></a>
<FONT color="green">350</FONT>         * Sorts the items in the list by key.<a name="line.350"></a>
<FONT color="green">351</FONT>         *<a name="line.351"></a>
<FONT color="green">352</FONT>         * @param order  the sort order (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.352"></a>
<FONT color="green">353</FONT>         */<a name="line.353"></a>
<FONT color="green">354</FONT>        public void sortByKeys(SortOrder order) {<a name="line.354"></a>
<FONT color="green">355</FONT>            final int size = this.keys.size();<a name="line.355"></a>
<FONT color="green">356</FONT>            final DefaultKeyedValue[] data = new DefaultKeyedValue[size];<a name="line.356"></a>
<FONT color="green">357</FONT>    <a name="line.357"></a>
<FONT color="green">358</FONT>            for (int i = 0; i &lt; size; i++) {<a name="line.358"></a>
<FONT color="green">359</FONT>                data[i] = new DefaultKeyedValue((Comparable) this.keys.get(i),<a name="line.359"></a>
<FONT color="green">360</FONT>                        (Number) this.values.get(i));<a name="line.360"></a>
<FONT color="green">361</FONT>            }<a name="line.361"></a>
<FONT color="green">362</FONT>    <a name="line.362"></a>
<FONT color="green">363</FONT>            Comparator comparator = new KeyedValueComparator(<a name="line.363"></a>
<FONT color="green">364</FONT>                    KeyedValueComparatorType.BY_KEY, order);<a name="line.364"></a>
<FONT color="green">365</FONT>            Arrays.sort(data, comparator);<a name="line.365"></a>
<FONT color="green">366</FONT>            clear();<a name="line.366"></a>
<FONT color="green">367</FONT>    <a name="line.367"></a>
<FONT color="green">368</FONT>            for (int i = 0; i &lt; data.length; i++) {<a name="line.368"></a>
<FONT color="green">369</FONT>                final DefaultKeyedValue value = data[i];<a name="line.369"></a>
<FONT color="green">370</FONT>                addValue(value.getKey(), value.getValue());<a name="line.370"></a>
<FONT color="green">371</FONT>            }<a name="line.371"></a>
<FONT color="green">372</FONT>        }<a name="line.372"></a>
<FONT color="green">373</FONT>    <a name="line.373"></a>
<FONT color="green">374</FONT>        /**<a name="line.374"></a>
<FONT color="green">375</FONT>         * Sorts the items in the list by value.  If the list contains<a name="line.375"></a>
<FONT color="green">376</FONT>         * &lt;code&gt;null&lt;/code&gt; values, they will sort to the end of the list,<a name="line.376"></a>
<FONT color="green">377</FONT>         * irrespective of the sort order.<a name="line.377"></a>
<FONT color="green">378</FONT>         *<a name="line.378"></a>
<FONT color="green">379</FONT>         * @param order  the sort order (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.379"></a>
<FONT color="green">380</FONT>         */<a name="line.380"></a>
<FONT color="green">381</FONT>        public void sortByValues(SortOrder order) {<a name="line.381"></a>
<FONT color="green">382</FONT>            final int size = this.keys.size();<a name="line.382"></a>
<FONT color="green">383</FONT>            final DefaultKeyedValue[] data = new DefaultKeyedValue[size];<a name="line.383"></a>
<FONT color="green">384</FONT>            for (int i = 0; i &lt; size; i++) {<a name="line.384"></a>
<FONT color="green">385</FONT>                data[i] = new DefaultKeyedValue((Comparable) this.keys.get(i),<a name="line.385"></a>
<FONT color="green">386</FONT>                        (Number) this.values.get(i));<a name="line.386"></a>
<FONT color="green">387</FONT>            }<a name="line.387"></a>
<FONT color="green">388</FONT>    <a name="line.388"></a>
<FONT color="green">389</FONT>            Comparator comparator = new KeyedValueComparator(<a name="line.389"></a>
<FONT color="green">390</FONT>                    KeyedValueComparatorType.BY_VALUE, order);<a name="line.390"></a>
<FONT color="green">391</FONT>            Arrays.sort(data, comparator);<a name="line.391"></a>
<FONT color="green">392</FONT>    <a name="line.392"></a>
<FONT color="green">393</FONT>            clear();<a name="line.393"></a>
<FONT color="green">394</FONT>            for (int i = 0; i &lt; data.length; i++) {<a name="line.394"></a>
<FONT color="green">395</FONT>                final DefaultKeyedValue value = data[i];<a name="line.395"></a>
<FONT color="green">396</FONT>                addValue(value.getKey(), value.getValue());<a name="line.396"></a>
<FONT color="green">397</FONT>            }<a name="line.397"></a>
<FONT color="green">398</FONT>        }<a name="line.398"></a>
<FONT color="green">399</FONT>    <a name="line.399"></a>
<FONT color="green">400</FONT>        /**<a name="line.400"></a>
<FONT color="green">401</FONT>         * Tests if this object is equal to another.<a name="line.401"></a>
<FONT color="green">402</FONT>         *<a name="line.402"></a>
<FONT color="green">403</FONT>         * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.403"></a>
<FONT color="green">404</FONT>         *<a name="line.404"></a>
<FONT color="green">405</FONT>         * @return A boolean.<a name="line.405"></a>
<FONT color="green">406</FONT>         */<a name="line.406"></a>
<FONT color="green">407</FONT>        public boolean equals(Object obj) {<a name="line.407"></a>
<FONT color="green">408</FONT>            if (obj == this) {<a name="line.408"></a>
<FONT color="green">409</FONT>                return true;<a name="line.409"></a>
<FONT color="green">410</FONT>            }<a name="line.410"></a>
<FONT color="green">411</FONT>    <a name="line.411"></a>
<FONT color="green">412</FONT>            if (!(obj instanceof KeyedValues)) {<a name="line.412"></a>
<FONT color="green">413</FONT>                return false;<a name="line.413"></a>
<FONT color="green">414</FONT>            }<a name="line.414"></a>
<FONT color="green">415</FONT>    <a name="line.415"></a>
<FONT color="green">416</FONT>            KeyedValues that = (KeyedValues) obj;<a name="line.416"></a>
<FONT color="green">417</FONT>            int count = getItemCount();<a name="line.417"></a>
<FONT color="green">418</FONT>            if (count != that.getItemCount()) {<a name="line.418"></a>
<FONT color="green">419</FONT>                return false;<a name="line.419"></a>
<FONT color="green">420</FONT>            }<a name="line.420"></a>
<FONT color="green">421</FONT>    <a name="line.421"></a>
<FONT color="green">422</FONT>            for (int i = 0; i &lt; count; i++) {<a name="line.422"></a>
<FONT color="green">423</FONT>                Comparable k1 = getKey(i);<a name="line.423"></a>
<FONT color="green">424</FONT>                Comparable k2 = that.getKey(i);<a name="line.424"></a>
<FONT color="green">425</FONT>                if (!k1.equals(k2)) {<a name="line.425"></a>
<FONT color="green">426</FONT>                    return false;<a name="line.426"></a>
<FONT color="green">427</FONT>                }<a name="line.427"></a>
<FONT color="green">428</FONT>                Number v1 = getValue(i);<a name="line.428"></a>
<FONT color="green">429</FONT>                Number v2 = that.getValue(i);<a name="line.429"></a>
<FONT color="green">430</FONT>                if (v1 == null) {<a name="line.430"></a>
<FONT color="green">431</FONT>                    if (v2 != null) {<a name="line.431"></a>
<FONT color="green">432</FONT>                        return false;<a name="line.432"></a>
<FONT color="green">433</FONT>                    }<a name="line.433"></a>
<FONT color="green">434</FONT>                }<a name="line.434"></a>
<FONT color="green">435</FONT>                else {<a name="line.435"></a>
<FONT color="green">436</FONT>                    if (!v1.equals(v2)) {<a name="line.436"></a>
<FONT color="green">437</FONT>                        return false;<a name="line.437"></a>
<FONT color="green">438</FONT>                    }<a name="line.438"></a>
<FONT color="green">439</FONT>                }<a name="line.439"></a>
<FONT color="green">440</FONT>            }<a name="line.440"></a>
<FONT color="green">441</FONT>            return true;<a name="line.441"></a>
<FONT color="green">442</FONT>        }<a name="line.442"></a>
<FONT color="green">443</FONT>    <a name="line.443"></a>
<FONT color="green">444</FONT>        /**<a name="line.444"></a>
<FONT color="green">445</FONT>         * Returns a hash code.<a name="line.445"></a>
<FONT color="green">446</FONT>         *<a name="line.446"></a>
<FONT color="green">447</FONT>         * @return A hash code.<a name="line.447"></a>
<FONT color="green">448</FONT>         */<a name="line.448"></a>
<FONT color="green">449</FONT>        public int hashCode() {<a name="line.449"></a>
<FONT color="green">450</FONT>            return (this.keys != null ? this.keys.hashCode() : 0);<a name="line.450"></a>
<FONT color="green">451</FONT>        }<a name="line.451"></a>
<FONT color="green">452</FONT>    <a name="line.452"></a>
<FONT color="green">453</FONT>        /**<a name="line.453"></a>
<FONT color="green">454</FONT>         * Returns a clone.<a name="line.454"></a>
<FONT color="green">455</FONT>         *<a name="line.455"></a>
<FONT color="green">456</FONT>         * @return A clone.<a name="line.456"></a>
<FONT color="green">457</FONT>         *<a name="line.457"></a>
<FONT color="green">458</FONT>         * @throws CloneNotSupportedException  this class will not throw this<a name="line.458"></a>
<FONT color="green">459</FONT>         *         exception, but subclasses might.<a name="line.459"></a>
<FONT color="green">460</FONT>         */<a name="line.460"></a>
<FONT color="green">461</FONT>        public Object clone() throws CloneNotSupportedException {<a name="line.461"></a>
<FONT color="green">462</FONT>            DefaultKeyedValues clone = (DefaultKeyedValues) super.clone();<a name="line.462"></a>
<FONT color="green">463</FONT>            clone.keys = (ArrayList) this.keys.clone();<a name="line.463"></a>
<FONT color="green">464</FONT>            clone.values = (ArrayList) this.values.clone();<a name="line.464"></a>
<FONT color="green">465</FONT>            clone.indexMap = (HashMap) this.indexMap.clone();<a name="line.465"></a>
<FONT color="green">466</FONT>            return clone;<a name="line.466"></a>
<FONT color="green">467</FONT>        }<a name="line.467"></a>
<FONT color="green">468</FONT>    <a name="line.468"></a>
<FONT color="green">469</FONT>    }<a name="line.469"></a>




























































</PRE>
</BODY>
</HTML>
