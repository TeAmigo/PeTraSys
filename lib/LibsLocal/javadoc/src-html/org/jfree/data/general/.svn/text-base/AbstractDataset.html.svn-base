<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ===========================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JFreeChart : a free chart library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ===========================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     *<a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jfreechart/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it<a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by<a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or<a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but<a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY<a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public<a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,<a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.<a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc.<a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     *<a name="line.26"></a>
<FONT color="green">027</FONT>     * --------------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * AbstractDataset.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * --------------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C)opyright 2000-2008, by Object Refinery Limited.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  David Gilbert (for Object Refinery Limited);<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   Nicolas Brodu (for Astrium and EADS Corporate Research<a name="line.33"></a>
<FONT color="green">034</FONT>     *                   Center);<a name="line.34"></a>
<FONT color="green">035</FONT>     *<a name="line.35"></a>
<FONT color="green">036</FONT>     * Changes (from 21-Aug-2001)<a name="line.36"></a>
<FONT color="green">037</FONT>     * --------------------------<a name="line.37"></a>
<FONT color="green">038</FONT>     * 21-Aug-2001 : Added standard header. Fixed DOS encoding problem (DG);<a name="line.38"></a>
<FONT color="green">039</FONT>     * 18-Sep-2001 : Updated e-mail address in header (DG);<a name="line.39"></a>
<FONT color="green">040</FONT>     * 15-Oct-2001 : Moved to new package (com.jrefinery.data.*) (DG);<a name="line.40"></a>
<FONT color="green">041</FONT>     * 22-Oct-2001 : Renamed DataSource.java --&gt; Dataset.java etc. (DG);<a name="line.41"></a>
<FONT color="green">042</FONT>     * 17-Nov-2001 : Changed constructor from public to protected, created new<a name="line.42"></a>
<FONT color="green">043</FONT>     *               AbstractSeriesDataset class and transferred series-related<a name="line.43"></a>
<FONT color="green">044</FONT>     *               methods, updated Javadoc comments (DG);<a name="line.44"></a>
<FONT color="green">045</FONT>     * 04-Mar-2002 : Updated import statements (DG);<a name="line.45"></a>
<FONT color="green">046</FONT>     * 11-Jun-2002 : Updated for change in the event constructor (DG);<a name="line.46"></a>
<FONT color="green">047</FONT>     * 07-Aug-2002 : Changed listener list to use<a name="line.47"></a>
<FONT color="green">048</FONT>     *               javax.swing.event.EventListenerList (DG);<a name="line.48"></a>
<FONT color="green">049</FONT>     * 04-Oct-2002 : Fixed errors reported by Checkstyle (DG);<a name="line.49"></a>
<FONT color="green">050</FONT>     * 27-Mar-2003 : Implemented Serializable (DG);<a name="line.50"></a>
<FONT color="green">051</FONT>     * 18-Aug-2003 : Implemented Cloneable (DG);<a name="line.51"></a>
<FONT color="green">052</FONT>     * 08-Sep-2003 : Serialization fixes (NB);<a name="line.52"></a>
<FONT color="green">053</FONT>     * 11-Sep-2003 : Cloning Fixes (NB);<a name="line.53"></a>
<FONT color="green">054</FONT>     * 01-Jun-2005 : Added hasListener() method for unit testing (DG);<a name="line.54"></a>
<FONT color="green">055</FONT>     *<a name="line.55"></a>
<FONT color="green">056</FONT>     */<a name="line.56"></a>
<FONT color="green">057</FONT>    <a name="line.57"></a>
<FONT color="green">058</FONT>    package org.jfree.data.general;<a name="line.58"></a>
<FONT color="green">059</FONT>    <a name="line.59"></a>
<FONT color="green">060</FONT>    import java.io.IOException;<a name="line.60"></a>
<FONT color="green">061</FONT>    import java.io.InvalidObjectException;<a name="line.61"></a>
<FONT color="green">062</FONT>    import java.io.ObjectInputStream;<a name="line.62"></a>
<FONT color="green">063</FONT>    import java.io.ObjectInputValidation;<a name="line.63"></a>
<FONT color="green">064</FONT>    import java.io.ObjectOutputStream;<a name="line.64"></a>
<FONT color="green">065</FONT>    import java.io.Serializable;<a name="line.65"></a>
<FONT color="green">066</FONT>    import java.util.Arrays;<a name="line.66"></a>
<FONT color="green">067</FONT>    import java.util.EventListener;<a name="line.67"></a>
<FONT color="green">068</FONT>    import java.util.List;<a name="line.68"></a>
<FONT color="green">069</FONT>    <a name="line.69"></a>
<FONT color="green">070</FONT>    import javax.swing.event.EventListenerList;<a name="line.70"></a>
<FONT color="green">071</FONT>    <a name="line.71"></a>
<FONT color="green">072</FONT>    /**<a name="line.72"></a>
<FONT color="green">073</FONT>     * An abstract implementation of the {@link Dataset} interface, containing a<a name="line.73"></a>
<FONT color="green">074</FONT>     * mechanism for registering change listeners.<a name="line.74"></a>
<FONT color="green">075</FONT>     */<a name="line.75"></a>
<FONT color="green">076</FONT>    public abstract class AbstractDataset implements Dataset, Cloneable,<a name="line.76"></a>
<FONT color="green">077</FONT>            Serializable, ObjectInputValidation {<a name="line.77"></a>
<FONT color="green">078</FONT>    <a name="line.78"></a>
<FONT color="green">079</FONT>        /** For serialization. */<a name="line.79"></a>
<FONT color="green">080</FONT>        private static final long serialVersionUID = 1918768939869230744L;<a name="line.80"></a>
<FONT color="green">081</FONT>    <a name="line.81"></a>
<FONT color="green">082</FONT>        /** The group that the dataset belongs to. */<a name="line.82"></a>
<FONT color="green">083</FONT>        private DatasetGroup group;<a name="line.83"></a>
<FONT color="green">084</FONT>    <a name="line.84"></a>
<FONT color="green">085</FONT>        /** Storage for registered change listeners. */<a name="line.85"></a>
<FONT color="green">086</FONT>        private transient EventListenerList listenerList;<a name="line.86"></a>
<FONT color="green">087</FONT>    <a name="line.87"></a>
<FONT color="green">088</FONT>        /**<a name="line.88"></a>
<FONT color="green">089</FONT>         * Constructs a dataset. By default, the dataset is assigned to its own<a name="line.89"></a>
<FONT color="green">090</FONT>         * group.<a name="line.90"></a>
<FONT color="green">091</FONT>         */<a name="line.91"></a>
<FONT color="green">092</FONT>        protected AbstractDataset() {<a name="line.92"></a>
<FONT color="green">093</FONT>            this.group = new DatasetGroup();<a name="line.93"></a>
<FONT color="green">094</FONT>            this.listenerList = new EventListenerList();<a name="line.94"></a>
<FONT color="green">095</FONT>        }<a name="line.95"></a>
<FONT color="green">096</FONT>    <a name="line.96"></a>
<FONT color="green">097</FONT>        /**<a name="line.97"></a>
<FONT color="green">098</FONT>         * Returns the dataset group for the dataset.<a name="line.98"></a>
<FONT color="green">099</FONT>         *<a name="line.99"></a>
<FONT color="green">100</FONT>         * @return The group (never &lt;code&gt;null&lt;/code&gt;).<a name="line.100"></a>
<FONT color="green">101</FONT>         *<a name="line.101"></a>
<FONT color="green">102</FONT>         * @see #setGroup(DatasetGroup)<a name="line.102"></a>
<FONT color="green">103</FONT>         */<a name="line.103"></a>
<FONT color="green">104</FONT>        public DatasetGroup getGroup() {<a name="line.104"></a>
<FONT color="green">105</FONT>            return this.group;<a name="line.105"></a>
<FONT color="green">106</FONT>        }<a name="line.106"></a>
<FONT color="green">107</FONT>    <a name="line.107"></a>
<FONT color="green">108</FONT>        /**<a name="line.108"></a>
<FONT color="green">109</FONT>         * Sets the dataset group for the dataset.<a name="line.109"></a>
<FONT color="green">110</FONT>         *<a name="line.110"></a>
<FONT color="green">111</FONT>         * @param group  the group (&lt;code&gt;null&lt;/code&gt; not permitted).<a name="line.111"></a>
<FONT color="green">112</FONT>         *<a name="line.112"></a>
<FONT color="green">113</FONT>         * @see #getGroup()<a name="line.113"></a>
<FONT color="green">114</FONT>         */<a name="line.114"></a>
<FONT color="green">115</FONT>        public void setGroup(DatasetGroup group) {<a name="line.115"></a>
<FONT color="green">116</FONT>            if (group == null) {<a name="line.116"></a>
<FONT color="green">117</FONT>                throw new IllegalArgumentException("Null 'group' argument.");<a name="line.117"></a>
<FONT color="green">118</FONT>            }<a name="line.118"></a>
<FONT color="green">119</FONT>            this.group = group;<a name="line.119"></a>
<FONT color="green">120</FONT>        }<a name="line.120"></a>
<FONT color="green">121</FONT>    <a name="line.121"></a>
<FONT color="green">122</FONT>        /**<a name="line.122"></a>
<FONT color="green">123</FONT>         * Registers an object to receive notification of changes to the dataset.<a name="line.123"></a>
<FONT color="green">124</FONT>         *<a name="line.124"></a>
<FONT color="green">125</FONT>         * @param listener  the object to register.<a name="line.125"></a>
<FONT color="green">126</FONT>         *<a name="line.126"></a>
<FONT color="green">127</FONT>         * @see #removeChangeListener(DatasetChangeListener)<a name="line.127"></a>
<FONT color="green">128</FONT>         */<a name="line.128"></a>
<FONT color="green">129</FONT>        public void addChangeListener(DatasetChangeListener listener) {<a name="line.129"></a>
<FONT color="green">130</FONT>            this.listenerList.add(DatasetChangeListener.class, listener);<a name="line.130"></a>
<FONT color="green">131</FONT>        }<a name="line.131"></a>
<FONT color="green">132</FONT>    <a name="line.132"></a>
<FONT color="green">133</FONT>        /**<a name="line.133"></a>
<FONT color="green">134</FONT>         * Deregisters an object so that it no longer receives notification of<a name="line.134"></a>
<FONT color="green">135</FONT>         * changes to the dataset.<a name="line.135"></a>
<FONT color="green">136</FONT>         *<a name="line.136"></a>
<FONT color="green">137</FONT>         * @param listener  the object to deregister.<a name="line.137"></a>
<FONT color="green">138</FONT>         *<a name="line.138"></a>
<FONT color="green">139</FONT>         * @see #addChangeListener(DatasetChangeListener)<a name="line.139"></a>
<FONT color="green">140</FONT>         */<a name="line.140"></a>
<FONT color="green">141</FONT>        public void removeChangeListener(DatasetChangeListener listener) {<a name="line.141"></a>
<FONT color="green">142</FONT>            this.listenerList.remove(DatasetChangeListener.class, listener);<a name="line.142"></a>
<FONT color="green">143</FONT>        }<a name="line.143"></a>
<FONT color="green">144</FONT>    <a name="line.144"></a>
<FONT color="green">145</FONT>        /**<a name="line.145"></a>
<FONT color="green">146</FONT>         * Returns &lt;code&gt;true&lt;/code&gt; if the specified object is registered with<a name="line.146"></a>
<FONT color="green">147</FONT>         * the dataset as a listener.  Most applications won't need to call this<a name="line.147"></a>
<FONT color="green">148</FONT>         * method, it exists mainly for use by unit testing code.<a name="line.148"></a>
<FONT color="green">149</FONT>         *<a name="line.149"></a>
<FONT color="green">150</FONT>         * @param listener  the listener.<a name="line.150"></a>
<FONT color="green">151</FONT>         *<a name="line.151"></a>
<FONT color="green">152</FONT>         * @return A boolean.<a name="line.152"></a>
<FONT color="green">153</FONT>         *<a name="line.153"></a>
<FONT color="green">154</FONT>         * @see #addChangeListener(DatasetChangeListener)<a name="line.154"></a>
<FONT color="green">155</FONT>         * @see #removeChangeListener(DatasetChangeListener)<a name="line.155"></a>
<FONT color="green">156</FONT>         */<a name="line.156"></a>
<FONT color="green">157</FONT>        public boolean hasListener(EventListener listener) {<a name="line.157"></a>
<FONT color="green">158</FONT>            List list = Arrays.asList(this.listenerList.getListenerList());<a name="line.158"></a>
<FONT color="green">159</FONT>            return list.contains(listener);<a name="line.159"></a>
<FONT color="green">160</FONT>        }<a name="line.160"></a>
<FONT color="green">161</FONT>    <a name="line.161"></a>
<FONT color="green">162</FONT>        /**<a name="line.162"></a>
<FONT color="green">163</FONT>         * Notifies all registered listeners that the dataset has changed.<a name="line.163"></a>
<FONT color="green">164</FONT>         *<a name="line.164"></a>
<FONT color="green">165</FONT>         * @see #addChangeListener(DatasetChangeListener)<a name="line.165"></a>
<FONT color="green">166</FONT>         */<a name="line.166"></a>
<FONT color="green">167</FONT>        protected void fireDatasetChanged() {<a name="line.167"></a>
<FONT color="green">168</FONT>            notifyListeners(new DatasetChangeEvent(this, this));<a name="line.168"></a>
<FONT color="green">169</FONT>        }<a name="line.169"></a>
<FONT color="green">170</FONT>    <a name="line.170"></a>
<FONT color="green">171</FONT>        /**<a name="line.171"></a>
<FONT color="green">172</FONT>         * Notifies all registered listeners that the dataset has changed.<a name="line.172"></a>
<FONT color="green">173</FONT>         *<a name="line.173"></a>
<FONT color="green">174</FONT>         * @param event  contains information about the event that triggered the<a name="line.174"></a>
<FONT color="green">175</FONT>         *               notification.<a name="line.175"></a>
<FONT color="green">176</FONT>         *<a name="line.176"></a>
<FONT color="green">177</FONT>         * @see #addChangeListener(DatasetChangeListener)<a name="line.177"></a>
<FONT color="green">178</FONT>         * @see #removeChangeListener(DatasetChangeListener)<a name="line.178"></a>
<FONT color="green">179</FONT>         */<a name="line.179"></a>
<FONT color="green">180</FONT>        protected void notifyListeners(DatasetChangeEvent event) {<a name="line.180"></a>
<FONT color="green">181</FONT>    <a name="line.181"></a>
<FONT color="green">182</FONT>            Object[] listeners = this.listenerList.getListenerList();<a name="line.182"></a>
<FONT color="green">183</FONT>            for (int i = listeners.length - 2; i &gt;= 0; i -= 2) {<a name="line.183"></a>
<FONT color="green">184</FONT>                if (listeners[i] == DatasetChangeListener.class) {<a name="line.184"></a>
<FONT color="green">185</FONT>                    ((DatasetChangeListener) listeners[i + 1]).datasetChanged(<a name="line.185"></a>
<FONT color="green">186</FONT>                            event);<a name="line.186"></a>
<FONT color="green">187</FONT>                }<a name="line.187"></a>
<FONT color="green">188</FONT>            }<a name="line.188"></a>
<FONT color="green">189</FONT>    <a name="line.189"></a>
<FONT color="green">190</FONT>        }<a name="line.190"></a>
<FONT color="green">191</FONT>    <a name="line.191"></a>
<FONT color="green">192</FONT>        /**<a name="line.192"></a>
<FONT color="green">193</FONT>         * Returns a clone of the dataset. The cloned dataset will NOT include the<a name="line.193"></a>
<FONT color="green">194</FONT>         * {@link DatasetChangeListener} references that have been registered with<a name="line.194"></a>
<FONT color="green">195</FONT>         * this dataset.<a name="line.195"></a>
<FONT color="green">196</FONT>         *<a name="line.196"></a>
<FONT color="green">197</FONT>         * @return A clone.<a name="line.197"></a>
<FONT color="green">198</FONT>         *<a name="line.198"></a>
<FONT color="green">199</FONT>         * @throws CloneNotSupportedException  if the dataset does not support<a name="line.199"></a>
<FONT color="green">200</FONT>         *                                     cloning.<a name="line.200"></a>
<FONT color="green">201</FONT>         */<a name="line.201"></a>
<FONT color="green">202</FONT>        public Object clone() throws CloneNotSupportedException {<a name="line.202"></a>
<FONT color="green">203</FONT>            AbstractDataset clone = (AbstractDataset) super.clone();<a name="line.203"></a>
<FONT color="green">204</FONT>            clone.listenerList = new EventListenerList();<a name="line.204"></a>
<FONT color="green">205</FONT>            return clone;<a name="line.205"></a>
<FONT color="green">206</FONT>        }<a name="line.206"></a>
<FONT color="green">207</FONT>    <a name="line.207"></a>
<FONT color="green">208</FONT>        /**<a name="line.208"></a>
<FONT color="green">209</FONT>         * Handles serialization.<a name="line.209"></a>
<FONT color="green">210</FONT>         *<a name="line.210"></a>
<FONT color="green">211</FONT>         * @param stream  the output stream.<a name="line.211"></a>
<FONT color="green">212</FONT>         *<a name="line.212"></a>
<FONT color="green">213</FONT>         * @throws IOException if there is an I/O problem.<a name="line.213"></a>
<FONT color="green">214</FONT>         */<a name="line.214"></a>
<FONT color="green">215</FONT>        private void writeObject(ObjectOutputStream stream) throws IOException {<a name="line.215"></a>
<FONT color="green">216</FONT>            stream.defaultWriteObject();<a name="line.216"></a>
<FONT color="green">217</FONT>        }<a name="line.217"></a>
<FONT color="green">218</FONT>    <a name="line.218"></a>
<FONT color="green">219</FONT>        /**<a name="line.219"></a>
<FONT color="green">220</FONT>         * Restores a serialized object.<a name="line.220"></a>
<FONT color="green">221</FONT>         *<a name="line.221"></a>
<FONT color="green">222</FONT>         * @param stream  the input stream.<a name="line.222"></a>
<FONT color="green">223</FONT>         *<a name="line.223"></a>
<FONT color="green">224</FONT>         * @throws IOException if there is an I/O problem.<a name="line.224"></a>
<FONT color="green">225</FONT>         * @throws ClassNotFoundException if there is a problem loading a class.<a name="line.225"></a>
<FONT color="green">226</FONT>         */<a name="line.226"></a>
<FONT color="green">227</FONT>        private void readObject(ObjectInputStream stream)<a name="line.227"></a>
<FONT color="green">228</FONT>            throws IOException, ClassNotFoundException {<a name="line.228"></a>
<FONT color="green">229</FONT>            stream.defaultReadObject();<a name="line.229"></a>
<FONT color="green">230</FONT>            this.listenerList = new EventListenerList();<a name="line.230"></a>
<FONT color="green">231</FONT>            stream.registerValidation(this, 10);  // see comments about priority of<a name="line.231"></a>
<FONT color="green">232</FONT>                                                  // 10 in validateObject()<a name="line.232"></a>
<FONT color="green">233</FONT>        }<a name="line.233"></a>
<FONT color="green">234</FONT>    <a name="line.234"></a>
<FONT color="green">235</FONT>        /**<a name="line.235"></a>
<FONT color="green">236</FONT>         * Validates the object. We use this opportunity to call listeners who have<a name="line.236"></a>
<FONT color="green">237</FONT>         * registered during the deserialization process, as listeners are not<a name="line.237"></a>
<FONT color="green">238</FONT>         * serialized. This method is called by the serialization system after the<a name="line.238"></a>
<FONT color="green">239</FONT>         * entire graph is read.<a name="line.239"></a>
<FONT color="green">240</FONT>         *<a name="line.240"></a>
<FONT color="green">241</FONT>         * This object has registered itself to the system with a priority of 10.<a name="line.241"></a>
<FONT color="green">242</FONT>         * Other callbacks may register with a higher priority number to be called<a name="line.242"></a>
<FONT color="green">243</FONT>         * before this object, or with a lower priority number to be called after<a name="line.243"></a>
<FONT color="green">244</FONT>         * the listeners were notified.<a name="line.244"></a>
<FONT color="green">245</FONT>         *<a name="line.245"></a>
<FONT color="green">246</FONT>         * All listeners are supposed to have register by now, either in their<a name="line.246"></a>
<FONT color="green">247</FONT>         * readObject or validateObject methods. Notify them that this dataset has<a name="line.247"></a>
<FONT color="green">248</FONT>         * changed.<a name="line.248"></a>
<FONT color="green">249</FONT>         *<a name="line.249"></a>
<FONT color="green">250</FONT>         * @exception InvalidObjectException If the object cannot validate itself.<a name="line.250"></a>
<FONT color="green">251</FONT>         */<a name="line.251"></a>
<FONT color="green">252</FONT>        public void validateObject() throws InvalidObjectException {<a name="line.252"></a>
<FONT color="green">253</FONT>            fireDatasetChanged();<a name="line.253"></a>
<FONT color="green">254</FONT>        }<a name="line.254"></a>
<FONT color="green">255</FONT>    <a name="line.255"></a>
<FONT color="green">256</FONT>    }<a name="line.256"></a>




























































</PRE>
</BODY>
</HTML>
