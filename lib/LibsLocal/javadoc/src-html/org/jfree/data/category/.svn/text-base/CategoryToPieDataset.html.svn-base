<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ===========================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JFreeChart : a free chart library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ===========================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     *<a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jfreechart/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it<a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by<a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or<a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but<a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY<a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public<a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,<a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.<a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc.<a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     *<a name="line.26"></a>
<FONT color="green">027</FONT>     * -------------------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * CategoryToPieDataset.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * -------------------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C) Copyright 2003-2008, by Object Refinery Limited.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  David Gilbert (for Object Refinery Limited);<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   Christian W. Zuckschwerdt;<a name="line.33"></a>
<FONT color="green">034</FONT>     *<a name="line.34"></a>
<FONT color="green">035</FONT>     * Changes<a name="line.35"></a>
<FONT color="green">036</FONT>     * -------<a name="line.36"></a>
<FONT color="green">037</FONT>     * 23-Jan-2003 : Version 1 (DG);<a name="line.37"></a>
<FONT color="green">038</FONT>     * 30-Jul-2003 : Pass through DatasetChangeEvent (CZ);<a name="line.38"></a>
<FONT color="green">039</FONT>     * 29-Jan-2004 : Replaced 'extract' int with TableOrder (DG);<a name="line.39"></a>
<FONT color="green">040</FONT>     * 11-Jan-2005 : Removed deprecated code in preparation for the 1.0.0<a name="line.40"></a>
<FONT color="green">041</FONT>     *               release (DG);<a name="line.41"></a>
<FONT color="green">042</FONT>     * ------------- JFREECHART 1.0.0 RELEASED ------------------------------------<a name="line.42"></a>
<FONT color="green">043</FONT>     * 26-Jul-2006 : Added serialVersionUID, changed constructor to allow null<a name="line.43"></a>
<FONT color="green">044</FONT>     *               for source, and added getSource(), getExtractType() and<a name="line.44"></a>
<FONT color="green">045</FONT>     *               getExtractIndex() methods - see feature request 1477915 (DG);<a name="line.45"></a>
<FONT color="green">046</FONT>     *<a name="line.46"></a>
<FONT color="green">047</FONT>     */<a name="line.47"></a>
<FONT color="green">048</FONT>    <a name="line.48"></a>
<FONT color="green">049</FONT>    package org.jfree.data.category;<a name="line.49"></a>
<FONT color="green">050</FONT>    <a name="line.50"></a>
<FONT color="green">051</FONT>    import java.util.Collections;<a name="line.51"></a>
<FONT color="green">052</FONT>    import java.util.List;<a name="line.52"></a>
<FONT color="green">053</FONT>    <a name="line.53"></a>
<FONT color="green">054</FONT>    import org.jfree.data.general.AbstractDataset;<a name="line.54"></a>
<FONT color="green">055</FONT>    import org.jfree.data.general.DatasetChangeEvent;<a name="line.55"></a>
<FONT color="green">056</FONT>    import org.jfree.data.general.DatasetChangeListener;<a name="line.56"></a>
<FONT color="green">057</FONT>    import org.jfree.data.general.PieDataset;<a name="line.57"></a>
<FONT color="green">058</FONT>    import org.jfree.util.TableOrder;<a name="line.58"></a>
<FONT color="green">059</FONT>    <a name="line.59"></a>
<FONT color="green">060</FONT>    /**<a name="line.60"></a>
<FONT color="green">061</FONT>     * A {@link PieDataset} implementation that obtains its data from one row or<a name="line.61"></a>
<FONT color="green">062</FONT>     * column of a {@link CategoryDataset}.<a name="line.62"></a>
<FONT color="green">063</FONT>     */<a name="line.63"></a>
<FONT color="green">064</FONT>    public class CategoryToPieDataset extends AbstractDataset<a name="line.64"></a>
<FONT color="green">065</FONT>            implements PieDataset, DatasetChangeListener {<a name="line.65"></a>
<FONT color="green">066</FONT>    <a name="line.66"></a>
<FONT color="green">067</FONT>        /** For serialization. */<a name="line.67"></a>
<FONT color="green">068</FONT>        static final long serialVersionUID = 5516396319762189617L;<a name="line.68"></a>
<FONT color="green">069</FONT>    <a name="line.69"></a>
<FONT color="green">070</FONT>        /** The source. */<a name="line.70"></a>
<FONT color="green">071</FONT>        private CategoryDataset source;<a name="line.71"></a>
<FONT color="green">072</FONT>    <a name="line.72"></a>
<FONT color="green">073</FONT>        /** The extract type. */<a name="line.73"></a>
<FONT color="green">074</FONT>        private TableOrder extract;<a name="line.74"></a>
<FONT color="green">075</FONT>    <a name="line.75"></a>
<FONT color="green">076</FONT>        /** The row or column index. */<a name="line.76"></a>
<FONT color="green">077</FONT>        private int index;<a name="line.77"></a>
<FONT color="green">078</FONT>    <a name="line.78"></a>
<FONT color="green">079</FONT>        /**<a name="line.79"></a>
<FONT color="green">080</FONT>         * An adaptor class that converts any {@link CategoryDataset} into a<a name="line.80"></a>
<FONT color="green">081</FONT>         * {@link PieDataset}, by taking the values from a single row or column.<a name="line.81"></a>
<FONT color="green">082</FONT>         * &lt;p&gt;<a name="line.82"></a>
<FONT color="green">083</FONT>         * If &lt;code&gt;source&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the created dataset will<a name="line.83"></a>
<FONT color="green">084</FONT>         * be empty.<a name="line.84"></a>
<FONT color="green">085</FONT>         *<a name="line.85"></a>
<FONT color="green">086</FONT>         * @param source  the source dataset (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.86"></a>
<FONT color="green">087</FONT>         * @param extract  extract data from rows or columns? (&lt;code&gt;null&lt;/code&gt;<a name="line.87"></a>
<FONT color="green">088</FONT>         *                 not permitted).<a name="line.88"></a>
<FONT color="green">089</FONT>         * @param index  the row or column index.<a name="line.89"></a>
<FONT color="green">090</FONT>         */<a name="line.90"></a>
<FONT color="green">091</FONT>        public CategoryToPieDataset(CategoryDataset source,<a name="line.91"></a>
<FONT color="green">092</FONT>                                    TableOrder extract,<a name="line.92"></a>
<FONT color="green">093</FONT>                                    int index) {<a name="line.93"></a>
<FONT color="green">094</FONT>            if (extract == null) {<a name="line.94"></a>
<FONT color="green">095</FONT>                throw new IllegalArgumentException("Null 'extract' argument.");<a name="line.95"></a>
<FONT color="green">096</FONT>            }<a name="line.96"></a>
<FONT color="green">097</FONT>            this.source = source;<a name="line.97"></a>
<FONT color="green">098</FONT>            if (this.source != null) {<a name="line.98"></a>
<FONT color="green">099</FONT>                this.source.addChangeListener(this);<a name="line.99"></a>
<FONT color="green">100</FONT>            }<a name="line.100"></a>
<FONT color="green">101</FONT>            this.extract = extract;<a name="line.101"></a>
<FONT color="green">102</FONT>            this.index = index;<a name="line.102"></a>
<FONT color="green">103</FONT>        }<a name="line.103"></a>
<FONT color="green">104</FONT>    <a name="line.104"></a>
<FONT color="green">105</FONT>        /**<a name="line.105"></a>
<FONT color="green">106</FONT>         * Returns the underlying dataset.<a name="line.106"></a>
<FONT color="green">107</FONT>         *<a name="line.107"></a>
<FONT color="green">108</FONT>         * @return The underlying dataset (possibly &lt;code&gt;null&lt;/code&gt;).<a name="line.108"></a>
<FONT color="green">109</FONT>         *<a name="line.109"></a>
<FONT color="green">110</FONT>         * @since 1.0.2<a name="line.110"></a>
<FONT color="green">111</FONT>         */<a name="line.111"></a>
<FONT color="green">112</FONT>        public CategoryDataset getUnderlyingDataset() {<a name="line.112"></a>
<FONT color="green">113</FONT>            return this.source;<a name="line.113"></a>
<FONT color="green">114</FONT>        }<a name="line.114"></a>
<FONT color="green">115</FONT>    <a name="line.115"></a>
<FONT color="green">116</FONT>        /**<a name="line.116"></a>
<FONT color="green">117</FONT>         * Returns the extract type, which determines whether data is read from<a name="line.117"></a>
<FONT color="green">118</FONT>         * one row or one column of the underlying dataset.<a name="line.118"></a>
<FONT color="green">119</FONT>         *<a name="line.119"></a>
<FONT color="green">120</FONT>         * @return The extract type.<a name="line.120"></a>
<FONT color="green">121</FONT>         *<a name="line.121"></a>
<FONT color="green">122</FONT>         * @since 1.0.2<a name="line.122"></a>
<FONT color="green">123</FONT>         */<a name="line.123"></a>
<FONT color="green">124</FONT>        public TableOrder getExtractType() {<a name="line.124"></a>
<FONT color="green">125</FONT>            return this.extract;<a name="line.125"></a>
<FONT color="green">126</FONT>        }<a name="line.126"></a>
<FONT color="green">127</FONT>    <a name="line.127"></a>
<FONT color="green">128</FONT>        /**<a name="line.128"></a>
<FONT color="green">129</FONT>         * Returns the index of the row or column from which to extract the data.<a name="line.129"></a>
<FONT color="green">130</FONT>         *<a name="line.130"></a>
<FONT color="green">131</FONT>         * @return The extract index.<a name="line.131"></a>
<FONT color="green">132</FONT>         *<a name="line.132"></a>
<FONT color="green">133</FONT>         * @since 1.0.2<a name="line.133"></a>
<FONT color="green">134</FONT>         */<a name="line.134"></a>
<FONT color="green">135</FONT>        public int getExtractIndex() {<a name="line.135"></a>
<FONT color="green">136</FONT>            return this.index;<a name="line.136"></a>
<FONT color="green">137</FONT>        }<a name="line.137"></a>
<FONT color="green">138</FONT>    <a name="line.138"></a>
<FONT color="green">139</FONT>        /**<a name="line.139"></a>
<FONT color="green">140</FONT>         * Returns the number of items (values) in the collection.  If the<a name="line.140"></a>
<FONT color="green">141</FONT>         * underlying dataset is &lt;code&gt;null&lt;/code&gt;, this method returns zero.<a name="line.141"></a>
<FONT color="green">142</FONT>         *<a name="line.142"></a>
<FONT color="green">143</FONT>         * @return The item count.<a name="line.143"></a>
<FONT color="green">144</FONT>         */<a name="line.144"></a>
<FONT color="green">145</FONT>        public int getItemCount() {<a name="line.145"></a>
<FONT color="green">146</FONT>            int result = 0;<a name="line.146"></a>
<FONT color="green">147</FONT>            if (this.source != null) {<a name="line.147"></a>
<FONT color="green">148</FONT>                if (this.extract == TableOrder.BY_ROW) {<a name="line.148"></a>
<FONT color="green">149</FONT>                    result = this.source.getColumnCount();<a name="line.149"></a>
<FONT color="green">150</FONT>                }<a name="line.150"></a>
<FONT color="green">151</FONT>                else if (this.extract == TableOrder.BY_COLUMN) {<a name="line.151"></a>
<FONT color="green">152</FONT>                    result = this.source.getRowCount();<a name="line.152"></a>
<FONT color="green">153</FONT>                }<a name="line.153"></a>
<FONT color="green">154</FONT>            }<a name="line.154"></a>
<FONT color="green">155</FONT>            return result;<a name="line.155"></a>
<FONT color="green">156</FONT>        }<a name="line.156"></a>
<FONT color="green">157</FONT>    <a name="line.157"></a>
<FONT color="green">158</FONT>        /**<a name="line.158"></a>
<FONT color="green">159</FONT>         * Returns a value from the dataset.<a name="line.159"></a>
<FONT color="green">160</FONT>         *<a name="line.160"></a>
<FONT color="green">161</FONT>         * @param item  the item index (zero-based).<a name="line.161"></a>
<FONT color="green">162</FONT>         *<a name="line.162"></a>
<FONT color="green">163</FONT>         * @return The value (possibly &lt;code&gt;null&lt;/code&gt;).<a name="line.163"></a>
<FONT color="green">164</FONT>         *<a name="line.164"></a>
<FONT color="green">165</FONT>         * @throws IndexOutOfBoundsException if &lt;code&gt;item&lt;/code&gt; is not in the<a name="line.165"></a>
<FONT color="green">166</FONT>         *     range &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;getItemCount() - 1&lt;/code&gt;.<a name="line.166"></a>
<FONT color="green">167</FONT>         */<a name="line.167"></a>
<FONT color="green">168</FONT>        public Number getValue(int item) {<a name="line.168"></a>
<FONT color="green">169</FONT>            Number result = null;<a name="line.169"></a>
<FONT color="green">170</FONT>            if (item &lt; 0 || item &gt;= getItemCount()) {<a name="line.170"></a>
<FONT color="green">171</FONT>                // this will include the case where the underlying dataset is null<a name="line.171"></a>
<FONT color="green">172</FONT>                throw new IndexOutOfBoundsException(<a name="line.172"></a>
<FONT color="green">173</FONT>                        "The 'item' index is out of bounds.");<a name="line.173"></a>
<FONT color="green">174</FONT>            }<a name="line.174"></a>
<FONT color="green">175</FONT>            if (this.extract == TableOrder.BY_ROW) {<a name="line.175"></a>
<FONT color="green">176</FONT>                result = this.source.getValue(this.index, item);<a name="line.176"></a>
<FONT color="green">177</FONT>            }<a name="line.177"></a>
<FONT color="green">178</FONT>            else if (this.extract == TableOrder.BY_COLUMN) {<a name="line.178"></a>
<FONT color="green">179</FONT>                result = this.source.getValue(item, this.index);<a name="line.179"></a>
<FONT color="green">180</FONT>            }<a name="line.180"></a>
<FONT color="green">181</FONT>            return result;<a name="line.181"></a>
<FONT color="green">182</FONT>        }<a name="line.182"></a>
<FONT color="green">183</FONT>    <a name="line.183"></a>
<FONT color="green">184</FONT>        /**<a name="line.184"></a>
<FONT color="green">185</FONT>         * Returns the key at the specified index.<a name="line.185"></a>
<FONT color="green">186</FONT>         *<a name="line.186"></a>
<FONT color="green">187</FONT>         * @param index  the item index (in the range &lt;code&gt;0&lt;/code&gt; to<a name="line.187"></a>
<FONT color="green">188</FONT>         *     &lt;code&gt;getItemCount() - 1&lt;/code&gt;).<a name="line.188"></a>
<FONT color="green">189</FONT>         *<a name="line.189"></a>
<FONT color="green">190</FONT>         * @return The key.<a name="line.190"></a>
<FONT color="green">191</FONT>         *<a name="line.191"></a>
<FONT color="green">192</FONT>         * @throws IndexOutOfBoundsException if &lt;code&gt;index&lt;/code&gt; is not in the<a name="line.192"></a>
<FONT color="green">193</FONT>         *     specified range.<a name="line.193"></a>
<FONT color="green">194</FONT>         */<a name="line.194"></a>
<FONT color="green">195</FONT>        public Comparable getKey(int index) {<a name="line.195"></a>
<FONT color="green">196</FONT>            Comparable result = null;<a name="line.196"></a>
<FONT color="green">197</FONT>            if (index &lt; 0 || index &gt;= getItemCount()) {<a name="line.197"></a>
<FONT color="green">198</FONT>                // this includes the case where the underlying dataset is null<a name="line.198"></a>
<FONT color="green">199</FONT>                throw new IndexOutOfBoundsException("Invalid 'index': " + index);<a name="line.199"></a>
<FONT color="green">200</FONT>            }<a name="line.200"></a>
<FONT color="green">201</FONT>            if (this.extract == TableOrder.BY_ROW) {<a name="line.201"></a>
<FONT color="green">202</FONT>                result = this.source.getColumnKey(index);<a name="line.202"></a>
<FONT color="green">203</FONT>            }<a name="line.203"></a>
<FONT color="green">204</FONT>            else if (this.extract == TableOrder.BY_COLUMN) {<a name="line.204"></a>
<FONT color="green">205</FONT>                result = this.source.getRowKey(index);<a name="line.205"></a>
<FONT color="green">206</FONT>            }<a name="line.206"></a>
<FONT color="green">207</FONT>            return result;<a name="line.207"></a>
<FONT color="green">208</FONT>        }<a name="line.208"></a>
<FONT color="green">209</FONT>    <a name="line.209"></a>
<FONT color="green">210</FONT>        /**<a name="line.210"></a>
<FONT color="green">211</FONT>         * Returns the index for a given key, or &lt;code&gt;-1&lt;/code&gt; if there is no<a name="line.211"></a>
<FONT color="green">212</FONT>         * such key.<a name="line.212"></a>
<FONT color="green">213</FONT>         *<a name="line.213"></a>
<FONT color="green">214</FONT>         * @param key  the key.<a name="line.214"></a>
<FONT color="green">215</FONT>         *<a name="line.215"></a>
<FONT color="green">216</FONT>         * @return The index for the key, or &lt;code&gt;-1&lt;/code&gt;.<a name="line.216"></a>
<FONT color="green">217</FONT>         */<a name="line.217"></a>
<FONT color="green">218</FONT>        public int getIndex(Comparable key) {<a name="line.218"></a>
<FONT color="green">219</FONT>            int result = -1;<a name="line.219"></a>
<FONT color="green">220</FONT>            if (this.source != null) {<a name="line.220"></a>
<FONT color="green">221</FONT>                if (this.extract == TableOrder.BY_ROW) {<a name="line.221"></a>
<FONT color="green">222</FONT>                    result = this.source.getColumnIndex(key);<a name="line.222"></a>
<FONT color="green">223</FONT>                }<a name="line.223"></a>
<FONT color="green">224</FONT>                else if (this.extract == TableOrder.BY_COLUMN) {<a name="line.224"></a>
<FONT color="green">225</FONT>                    result = this.source.getRowIndex(key);<a name="line.225"></a>
<FONT color="green">226</FONT>                }<a name="line.226"></a>
<FONT color="green">227</FONT>            }<a name="line.227"></a>
<FONT color="green">228</FONT>            return result;<a name="line.228"></a>
<FONT color="green">229</FONT>        }<a name="line.229"></a>
<FONT color="green">230</FONT>    <a name="line.230"></a>
<FONT color="green">231</FONT>        /**<a name="line.231"></a>
<FONT color="green">232</FONT>         * Returns the keys for the dataset.<a name="line.232"></a>
<FONT color="green">233</FONT>         * &lt;p&gt;<a name="line.233"></a>
<FONT color="green">234</FONT>         * If the underlying dataset is &lt;code&gt;null&lt;/code&gt;, this method returns an<a name="line.234"></a>
<FONT color="green">235</FONT>         * empty list.<a name="line.235"></a>
<FONT color="green">236</FONT>         *<a name="line.236"></a>
<FONT color="green">237</FONT>         * @return The keys.<a name="line.237"></a>
<FONT color="green">238</FONT>         */<a name="line.238"></a>
<FONT color="green">239</FONT>        public List getKeys() {<a name="line.239"></a>
<FONT color="green">240</FONT>            List result = Collections.EMPTY_LIST;<a name="line.240"></a>
<FONT color="green">241</FONT>            if (this.source != null) {<a name="line.241"></a>
<FONT color="green">242</FONT>                if (this.extract == TableOrder.BY_ROW) {<a name="line.242"></a>
<FONT color="green">243</FONT>                    result = this.source.getColumnKeys();<a name="line.243"></a>
<FONT color="green">244</FONT>                }<a name="line.244"></a>
<FONT color="green">245</FONT>                else if (this.extract == TableOrder.BY_COLUMN) {<a name="line.245"></a>
<FONT color="green">246</FONT>                    result = this.source.getRowKeys();<a name="line.246"></a>
<FONT color="green">247</FONT>                }<a name="line.247"></a>
<FONT color="green">248</FONT>            }<a name="line.248"></a>
<FONT color="green">249</FONT>            return result;<a name="line.249"></a>
<FONT color="green">250</FONT>        }<a name="line.250"></a>
<FONT color="green">251</FONT>    <a name="line.251"></a>
<FONT color="green">252</FONT>        /**<a name="line.252"></a>
<FONT color="green">253</FONT>         * Returns the value for a given key.  If the key is not recognised, the<a name="line.253"></a>
<FONT color="green">254</FONT>         * method should return &lt;code&gt;null&lt;/code&gt; (but note that &lt;code&gt;null&lt;/code&gt;<a name="line.254"></a>
<FONT color="green">255</FONT>         * can be associated with a valid key also).<a name="line.255"></a>
<FONT color="green">256</FONT>         *<a name="line.256"></a>
<FONT color="green">257</FONT>         * @param key  the key.<a name="line.257"></a>
<FONT color="green">258</FONT>         *<a name="line.258"></a>
<FONT color="green">259</FONT>         * @return The value (possibly &lt;code&gt;null&lt;/code&gt;).<a name="line.259"></a>
<FONT color="green">260</FONT>         */<a name="line.260"></a>
<FONT color="green">261</FONT>        public Number getValue(Comparable key) {<a name="line.261"></a>
<FONT color="green">262</FONT>            Number result = null;<a name="line.262"></a>
<FONT color="green">263</FONT>            int keyIndex = getIndex(key);<a name="line.263"></a>
<FONT color="green">264</FONT>            if (keyIndex != -1) {<a name="line.264"></a>
<FONT color="green">265</FONT>                if (this.extract == TableOrder.BY_ROW) {<a name="line.265"></a>
<FONT color="green">266</FONT>                    result = this.source.getValue(this.index, keyIndex);<a name="line.266"></a>
<FONT color="green">267</FONT>                }<a name="line.267"></a>
<FONT color="green">268</FONT>                else if (this.extract == TableOrder.BY_COLUMN) {<a name="line.268"></a>
<FONT color="green">269</FONT>                    result = this.source.getValue(keyIndex, this.index);<a name="line.269"></a>
<FONT color="green">270</FONT>                }<a name="line.270"></a>
<FONT color="green">271</FONT>            }<a name="line.271"></a>
<FONT color="green">272</FONT>            return result;<a name="line.272"></a>
<FONT color="green">273</FONT>        }<a name="line.273"></a>
<FONT color="green">274</FONT>    <a name="line.274"></a>
<FONT color="green">275</FONT>        /**<a name="line.275"></a>
<FONT color="green">276</FONT>         * Sends a {@link DatasetChangeEvent} to all registered listeners, with<a name="line.276"></a>
<FONT color="green">277</FONT>         * this (not the underlying) dataset as the source.<a name="line.277"></a>
<FONT color="green">278</FONT>         *<a name="line.278"></a>
<FONT color="green">279</FONT>         * @param event  the event (ignored, a new event with this dataset as the<a name="line.279"></a>
<FONT color="green">280</FONT>         *     source is sent to the listeners).<a name="line.280"></a>
<FONT color="green">281</FONT>         */<a name="line.281"></a>
<FONT color="green">282</FONT>        public void datasetChanged(DatasetChangeEvent event) {<a name="line.282"></a>
<FONT color="green">283</FONT>            fireDatasetChanged();<a name="line.283"></a>
<FONT color="green">284</FONT>        }<a name="line.284"></a>
<FONT color="green">285</FONT>    <a name="line.285"></a>
<FONT color="green">286</FONT>        /**<a name="line.286"></a>
<FONT color="green">287</FONT>         * Tests this dataset for equality with an arbitrary object, returning<a name="line.287"></a>
<FONT color="green">288</FONT>         * &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;obj&lt;/code&gt; is a dataset containing the same<a name="line.288"></a>
<FONT color="green">289</FONT>         * keys and values in the same order as this dataset.<a name="line.289"></a>
<FONT color="green">290</FONT>         *<a name="line.290"></a>
<FONT color="green">291</FONT>         * @param obj  the object to test (&lt;code&gt;null&lt;/code&gt; permitted).<a name="line.291"></a>
<FONT color="green">292</FONT>         *<a name="line.292"></a>
<FONT color="green">293</FONT>         * @return A boolean.<a name="line.293"></a>
<FONT color="green">294</FONT>         */<a name="line.294"></a>
<FONT color="green">295</FONT>        public boolean equals(Object obj) {<a name="line.295"></a>
<FONT color="green">296</FONT>            if (obj == this) {<a name="line.296"></a>
<FONT color="green">297</FONT>                return true;<a name="line.297"></a>
<FONT color="green">298</FONT>            }<a name="line.298"></a>
<FONT color="green">299</FONT>            if (!(obj instanceof PieDataset)) {<a name="line.299"></a>
<FONT color="green">300</FONT>                return false;<a name="line.300"></a>
<FONT color="green">301</FONT>            }<a name="line.301"></a>
<FONT color="green">302</FONT>            PieDataset that = (PieDataset) obj;<a name="line.302"></a>
<FONT color="green">303</FONT>            int count = getItemCount();<a name="line.303"></a>
<FONT color="green">304</FONT>            if (that.getItemCount() != count) {<a name="line.304"></a>
<FONT color="green">305</FONT>                return false;<a name="line.305"></a>
<FONT color="green">306</FONT>            }<a name="line.306"></a>
<FONT color="green">307</FONT>            for (int i = 0; i &lt; count; i++) {<a name="line.307"></a>
<FONT color="green">308</FONT>                Comparable k1 = getKey(i);<a name="line.308"></a>
<FONT color="green">309</FONT>                Comparable k2 = that.getKey(i);<a name="line.309"></a>
<FONT color="green">310</FONT>                if (!k1.equals(k2)) {<a name="line.310"></a>
<FONT color="green">311</FONT>                    return false;<a name="line.311"></a>
<FONT color="green">312</FONT>                }<a name="line.312"></a>
<FONT color="green">313</FONT>    <a name="line.313"></a>
<FONT color="green">314</FONT>                Number v1 = getValue(i);<a name="line.314"></a>
<FONT color="green">315</FONT>                Number v2 = that.getValue(i);<a name="line.315"></a>
<FONT color="green">316</FONT>                if (v1 == null) {<a name="line.316"></a>
<FONT color="green">317</FONT>                    if (v2 != null) {<a name="line.317"></a>
<FONT color="green">318</FONT>                        return false;<a name="line.318"></a>
<FONT color="green">319</FONT>                    }<a name="line.319"></a>
<FONT color="green">320</FONT>                }<a name="line.320"></a>
<FONT color="green">321</FONT>                else {<a name="line.321"></a>
<FONT color="green">322</FONT>                    if (!v1.equals(v2)) {<a name="line.322"></a>
<FONT color="green">323</FONT>                        return false;<a name="line.323"></a>
<FONT color="green">324</FONT>                    }<a name="line.324"></a>
<FONT color="green">325</FONT>                }<a name="line.325"></a>
<FONT color="green">326</FONT>            }<a name="line.326"></a>
<FONT color="green">327</FONT>            return true;<a name="line.327"></a>
<FONT color="green">328</FONT>        }<a name="line.328"></a>
<FONT color="green">329</FONT>    <a name="line.329"></a>
<FONT color="green">330</FONT>    }<a name="line.330"></a>




























































</PRE>
</BODY>
</HTML>
