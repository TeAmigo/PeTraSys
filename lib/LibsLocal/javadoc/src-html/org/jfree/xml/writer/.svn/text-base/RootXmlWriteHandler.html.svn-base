<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ========================================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JCommon : a free general purpose class library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ========================================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     * <a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jcommon/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it <a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by <a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or <a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but <a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY <a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public <a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, <a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.  <a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc. <a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     * <a name="line.26"></a>
<FONT color="green">027</FONT>     * ------------------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * RootXmlWriteHandler.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * ------------------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C) Copyright 2002-2005, by Object Refinery Limited.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  Peter Becker;<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   -;<a name="line.33"></a>
<FONT color="green">034</FONT>     *<a name="line.34"></a>
<FONT color="green">035</FONT>     * $Id: RootXmlWriteHandler.java,v 1.5 2005/10/18 13:35:06 mungady Exp $<a name="line.35"></a>
<FONT color="green">036</FONT>     *<a name="line.36"></a>
<FONT color="green">037</FONT>     * Changes<a name="line.37"></a>
<FONT color="green">038</FONT>     * -------<a name="line.38"></a>
<FONT color="green">039</FONT>     * 23-Dec-2003 : Added missing Javadocs (DG);<a name="line.39"></a>
<FONT color="green">040</FONT>     *<a name="line.40"></a>
<FONT color="green">041</FONT>     */<a name="line.41"></a>
<FONT color="green">042</FONT>    package org.jfree.xml.writer;<a name="line.42"></a>
<FONT color="green">043</FONT>    <a name="line.43"></a>
<FONT color="green">044</FONT>    import java.awt.BasicStroke;<a name="line.44"></a>
<FONT color="green">045</FONT>    import java.awt.Color;<a name="line.45"></a>
<FONT color="green">046</FONT>    import java.awt.Font;<a name="line.46"></a>
<FONT color="green">047</FONT>    import java.awt.GradientPaint;<a name="line.47"></a>
<FONT color="green">048</FONT>    import java.awt.Insets;<a name="line.48"></a>
<FONT color="green">049</FONT>    import java.awt.Paint;<a name="line.49"></a>
<FONT color="green">050</FONT>    import java.awt.RenderingHints;<a name="line.50"></a>
<FONT color="green">051</FONT>    import java.awt.Stroke;<a name="line.51"></a>
<FONT color="green">052</FONT>    import java.awt.geom.Point2D;<a name="line.52"></a>
<FONT color="green">053</FONT>    import java.awt.geom.Rectangle2D;<a name="line.53"></a>
<FONT color="green">054</FONT>    import java.io.IOException;<a name="line.54"></a>
<FONT color="green">055</FONT>    import java.util.ArrayList;<a name="line.55"></a>
<FONT color="green">056</FONT>    import java.util.LinkedList;<a name="line.56"></a>
<FONT color="green">057</FONT>    import java.util.List;<a name="line.57"></a>
<FONT color="green">058</FONT>    import java.util.Stack;<a name="line.58"></a>
<FONT color="green">059</FONT>    import java.util.Vector;<a name="line.59"></a>
<FONT color="green">060</FONT>    <a name="line.60"></a>
<FONT color="green">061</FONT>    import org.jfree.util.ObjectUtilities;<a name="line.61"></a>
<FONT color="green">062</FONT>    import org.jfree.xml.util.ManualMappingDefinition;<a name="line.62"></a>
<FONT color="green">063</FONT>    import org.jfree.xml.util.MultiplexMappingDefinition;<a name="line.63"></a>
<FONT color="green">064</FONT>    import org.jfree.xml.util.MultiplexMappingEntry;<a name="line.64"></a>
<FONT color="green">065</FONT>    import org.jfree.xml.util.ObjectFactory;<a name="line.65"></a>
<FONT color="green">066</FONT>    import org.jfree.xml.util.SimpleObjectFactory;<a name="line.66"></a>
<FONT color="green">067</FONT>    import org.jfree.xml.writer.coretypes.BasicStrokeWriteHandler;<a name="line.67"></a>
<FONT color="green">068</FONT>    import org.jfree.xml.writer.coretypes.ColorWriteHandler;<a name="line.68"></a>
<FONT color="green">069</FONT>    import org.jfree.xml.writer.coretypes.FontWriteHandler;<a name="line.69"></a>
<FONT color="green">070</FONT>    import org.jfree.xml.writer.coretypes.GenericWriteHandler;<a name="line.70"></a>
<FONT color="green">071</FONT>    import org.jfree.xml.writer.coretypes.GradientPaintWriteHandler;<a name="line.71"></a>
<FONT color="green">072</FONT>    import org.jfree.xml.writer.coretypes.InsetsWriteHandler;<a name="line.72"></a>
<FONT color="green">073</FONT>    import org.jfree.xml.writer.coretypes.ListWriteHandler;<a name="line.73"></a>
<FONT color="green">074</FONT>    import org.jfree.xml.writer.coretypes.Point2DWriteHandler;<a name="line.74"></a>
<FONT color="green">075</FONT>    import org.jfree.xml.writer.coretypes.Rectangle2DWriteHandler;<a name="line.75"></a>
<FONT color="green">076</FONT>    import org.jfree.xml.writer.coretypes.RenderingHintsWriteHandler;<a name="line.76"></a>
<FONT color="green">077</FONT>    <a name="line.77"></a>
<FONT color="green">078</FONT>    /**<a name="line.78"></a>
<FONT color="green">079</FONT>     * A root handler for writing objects to XML format.<a name="line.79"></a>
<FONT color="green">080</FONT>     */<a name="line.80"></a>
<FONT color="green">081</FONT>    public abstract class RootXmlWriteHandler {<a name="line.81"></a>
<FONT color="green">082</FONT>    <a name="line.82"></a>
<FONT color="green">083</FONT>        /** A map containg the manual mappings. */<a name="line.83"></a>
<FONT color="green">084</FONT>        private SimpleObjectFactory classToHandlerMapping;<a name="line.84"></a>
<FONT color="green">085</FONT>    <a name="line.85"></a>
<FONT color="green">086</FONT>        /**<a name="line.86"></a>
<FONT color="green">087</FONT>         * Creates a new RootXmlWrite handler with the default mappings enabled.<a name="line.87"></a>
<FONT color="green">088</FONT>         */<a name="line.88"></a>
<FONT color="green">089</FONT>        public RootXmlWriteHandler() {<a name="line.89"></a>
<FONT color="green">090</FONT>            this.classToHandlerMapping = new SimpleObjectFactory();<a name="line.90"></a>
<FONT color="green">091</FONT>    <a name="line.91"></a>
<FONT color="green">092</FONT>            // set up handling for Paint objects<a name="line.92"></a>
<FONT color="green">093</FONT>            final MultiplexMappingEntry[] paintEntries = new MultiplexMappingEntry[2];<a name="line.93"></a>
<FONT color="green">094</FONT>            paintEntries[0] = new MultiplexMappingEntry("color", Color.class.getName());<a name="line.94"></a>
<FONT color="green">095</FONT>            paintEntries[1] = new MultiplexMappingEntry("gradientPaint", GradientPaint.class.getName());<a name="line.95"></a>
<FONT color="green">096</FONT>            addMultiplexMapping(Paint.class, "type", paintEntries);<a name="line.96"></a>
<FONT color="green">097</FONT>            addManualMapping(GradientPaint.class, GradientPaintWriteHandler.class);<a name="line.97"></a>
<FONT color="green">098</FONT>            addManualMapping(Color.class, ColorWriteHandler.class);<a name="line.98"></a>
<FONT color="green">099</FONT>    <a name="line.99"></a>
<FONT color="green">100</FONT>            // set up handling for Point2D objects<a name="line.100"></a>
<FONT color="green">101</FONT>            final MultiplexMappingEntry[] point2DEntries = new MultiplexMappingEntry[2];<a name="line.101"></a>
<FONT color="green">102</FONT>            point2DEntries[0] = new MultiplexMappingEntry("float", Point2D.Float.class.getName());<a name="line.102"></a>
<FONT color="green">103</FONT>            point2DEntries[1] = new MultiplexMappingEntry("double", Point2D.Double.class.getName());<a name="line.103"></a>
<FONT color="green">104</FONT>            addMultiplexMapping(Point2D.class, "type", point2DEntries);<a name="line.104"></a>
<FONT color="green">105</FONT>            addManualMapping(Point2D.Float.class, Point2DWriteHandler.class);<a name="line.105"></a>
<FONT color="green">106</FONT>            addManualMapping(Point2D.Double.class, Point2DWriteHandler.class);<a name="line.106"></a>
<FONT color="green">107</FONT>    <a name="line.107"></a>
<FONT color="green">108</FONT>            // set up handling for Stroke objects<a name="line.108"></a>
<FONT color="green">109</FONT>            final MultiplexMappingEntry[] strokeEntries = new MultiplexMappingEntry[1];<a name="line.109"></a>
<FONT color="green">110</FONT>            strokeEntries[0] = new MultiplexMappingEntry("basic", BasicStroke.class.getName());<a name="line.110"></a>
<FONT color="green">111</FONT>            addMultiplexMapping(Stroke.class, "type", strokeEntries);<a name="line.111"></a>
<FONT color="green">112</FONT>            addManualMapping(BasicStroke.class, BasicStrokeWriteHandler.class);<a name="line.112"></a>
<FONT color="green">113</FONT>    <a name="line.113"></a>
<FONT color="green">114</FONT>            // set up handling for Rectangle2D objects<a name="line.114"></a>
<FONT color="green">115</FONT>            final MultiplexMappingEntry[] rectangle2DEntries = new MultiplexMappingEntry[2];<a name="line.115"></a>
<FONT color="green">116</FONT>            rectangle2DEntries[0] = new MultiplexMappingEntry(<a name="line.116"></a>
<FONT color="green">117</FONT>                "float", Rectangle2D.Float.class.getName()<a name="line.117"></a>
<FONT color="green">118</FONT>            );<a name="line.118"></a>
<FONT color="green">119</FONT>            rectangle2DEntries[1] = new MultiplexMappingEntry(<a name="line.119"></a>
<FONT color="green">120</FONT>                "double", Rectangle2D.Double.class.getName()<a name="line.120"></a>
<FONT color="green">121</FONT>            );<a name="line.121"></a>
<FONT color="green">122</FONT>            addMultiplexMapping(Rectangle2D.class, "type", rectangle2DEntries);<a name="line.122"></a>
<FONT color="green">123</FONT>            addManualMapping(Rectangle2D.Float.class, Rectangle2DWriteHandler.class);<a name="line.123"></a>
<FONT color="green">124</FONT>            addManualMapping(Rectangle2D.Double.class, Rectangle2DWriteHandler.class);<a name="line.124"></a>
<FONT color="green">125</FONT>    <a name="line.125"></a>
<FONT color="green">126</FONT>            // set up handling for List objects<a name="line.126"></a>
<FONT color="green">127</FONT>            final MultiplexMappingEntry[] listEntries = new MultiplexMappingEntry[4];<a name="line.127"></a>
<FONT color="green">128</FONT>            listEntries[0] = new MultiplexMappingEntry("array-list", ArrayList.class.getName());<a name="line.128"></a>
<FONT color="green">129</FONT>            listEntries[1] = new MultiplexMappingEntry("linked-list", LinkedList.class.getName());<a name="line.129"></a>
<FONT color="green">130</FONT>            listEntries[2] = new MultiplexMappingEntry("vector", Vector.class.getName());<a name="line.130"></a>
<FONT color="green">131</FONT>            listEntries[3] = new MultiplexMappingEntry("stack", Stack.class.getName());<a name="line.131"></a>
<FONT color="green">132</FONT>            addMultiplexMapping(List.class, "type", listEntries);<a name="line.132"></a>
<FONT color="green">133</FONT>            addManualMapping(LinkedList.class, ListWriteHandler.class);<a name="line.133"></a>
<FONT color="green">134</FONT>            addManualMapping(Vector.class, ListWriteHandler.class);<a name="line.134"></a>
<FONT color="green">135</FONT>            addManualMapping(ArrayList.class, ListWriteHandler.class);<a name="line.135"></a>
<FONT color="green">136</FONT>            addManualMapping(Stack.class, ListWriteHandler.class);<a name="line.136"></a>
<FONT color="green">137</FONT>    <a name="line.137"></a>
<FONT color="green">138</FONT>            // handle all other direct mapping types<a name="line.138"></a>
<FONT color="green">139</FONT>            addManualMapping(RenderingHints.class, RenderingHintsWriteHandler.class);<a name="line.139"></a>
<FONT color="green">140</FONT>            addManualMapping(Insets.class, InsetsWriteHandler.class);<a name="line.140"></a>
<FONT color="green">141</FONT>            addManualMapping(Font.class, FontWriteHandler.class);<a name="line.141"></a>
<FONT color="green">142</FONT>        }<a name="line.142"></a>
<FONT color="green">143</FONT>    <a name="line.143"></a>
<FONT color="green">144</FONT>        /**<a name="line.144"></a>
<FONT color="green">145</FONT>         * Returns the object factory.<a name="line.145"></a>
<FONT color="green">146</FONT>         * <a name="line.146"></a>
<FONT color="green">147</FONT>         * @return the object factory.<a name="line.147"></a>
<FONT color="green">148</FONT>         */<a name="line.148"></a>
<FONT color="green">149</FONT>        protected abstract ObjectFactory getFactoryLoader();<a name="line.149"></a>
<FONT color="green">150</FONT>    <a name="line.150"></a>
<FONT color="green">151</FONT>        /**<a name="line.151"></a>
<FONT color="green">152</FONT>         * Adds a new manual mapping to this handler.<a name="line.152"></a>
<FONT color="green">153</FONT>         *<a name="line.153"></a>
<FONT color="green">154</FONT>         * This method provides support for the manual mapping. The manual mapping<a name="line.154"></a>
<FONT color="green">155</FONT>         * will become active before the multiplexers were queried. This facility<a name="line.155"></a>
<FONT color="green">156</FONT>         * could be used to override the model definition.<a name="line.156"></a>
<FONT color="green">157</FONT>         *<a name="line.157"></a>
<FONT color="green">158</FONT>         * @param classToWrite the class, which should be handled<a name="line.158"></a>
<FONT color="green">159</FONT>         * @param handler the write handler implementation for that class.<a name="line.159"></a>
<FONT color="green">160</FONT>         */<a name="line.160"></a>
<FONT color="green">161</FONT>        protected void addManualMapping(final Class classToWrite, final Class handler) {<a name="line.161"></a>
<FONT color="green">162</FONT>            if (handler == null) {<a name="line.162"></a>
<FONT color="green">163</FONT>                throw new NullPointerException("handler must not be null.");<a name="line.163"></a>
<FONT color="green">164</FONT>            }<a name="line.164"></a>
<FONT color="green">165</FONT>            if (classToWrite == null) {<a name="line.165"></a>
<FONT color="green">166</FONT>                throw new NullPointerException("classToWrite must not be null.");<a name="line.166"></a>
<FONT color="green">167</FONT>            }<a name="line.167"></a>
<FONT color="green">168</FONT>            if (!XmlWriteHandler.class.isAssignableFrom(handler)) {<a name="line.168"></a>
<FONT color="green">169</FONT>                throw new IllegalArgumentException("The given handler is no XmlWriteHandler.");<a name="line.169"></a>
<FONT color="green">170</FONT>            }<a name="line.170"></a>
<FONT color="green">171</FONT>    <a name="line.171"></a>
<FONT color="green">172</FONT>            this.classToHandlerMapping.addManualMapping<a name="line.172"></a>
<FONT color="green">173</FONT>                (new ManualMappingDefinition(classToWrite, null, handler.getName()));<a name="line.173"></a>
<FONT color="green">174</FONT>        }<a name="line.174"></a>
<FONT color="green">175</FONT>    <a name="line.175"></a>
<FONT color="green">176</FONT>        /**<a name="line.176"></a>
<FONT color="green">177</FONT>         * Adds a multiplex mapping.<a name="line.177"></a>
<FONT color="green">178</FONT>         * <a name="line.178"></a>
<FONT color="green">179</FONT>         * @param baseClass  the base class.<a name="line.179"></a>
<FONT color="green">180</FONT>         * @param typeAttr  the type attribute.<a name="line.180"></a>
<FONT color="green">181</FONT>         * @param mdef  the mapping entries.<a name="line.181"></a>
<FONT color="green">182</FONT>         */<a name="line.182"></a>
<FONT color="green">183</FONT>        protected void addMultiplexMapping(final Class baseClass,<a name="line.183"></a>
<FONT color="green">184</FONT>                                           final String typeAttr,<a name="line.184"></a>
<FONT color="green">185</FONT>                                           final MultiplexMappingEntry[] mdef) {<a name="line.185"></a>
<FONT color="green">186</FONT>            <a name="line.186"></a>
<FONT color="green">187</FONT>            this.classToHandlerMapping.addMultiplexMapping(<a name="line.187"></a>
<FONT color="green">188</FONT>                new MultiplexMappingDefinition(baseClass, typeAttr, mdef)<a name="line.188"></a>
<FONT color="green">189</FONT>            );<a name="line.189"></a>
<FONT color="green">190</FONT>            <a name="line.190"></a>
<FONT color="green">191</FONT>        }<a name="line.191"></a>
<FONT color="green">192</FONT>    <a name="line.192"></a>
<FONT color="green">193</FONT>        /**<a name="line.193"></a>
<FONT color="green">194</FONT>         * Tries to find the mapping for the given class. This will first check<a name="line.194"></a>
<FONT color="green">195</FONT>         * the manual mapping and then try to use the object factory to resolve<a name="line.195"></a>
<FONT color="green">196</FONT>         * the class parameter into a write handler.<a name="line.196"></a>
<FONT color="green">197</FONT>         *<a name="line.197"></a>
<FONT color="green">198</FONT>         * @param classToWrite the class for which to find a handler.<a name="line.198"></a>
<FONT color="green">199</FONT>         * @return the write handler, never null.<a name="line.199"></a>
<FONT color="green">200</FONT>         * @throws XMLWriterException if no handler could be found for the given class.<a name="line.200"></a>
<FONT color="green">201</FONT>         */<a name="line.201"></a>
<FONT color="green">202</FONT>        protected XmlWriteHandler getMapping(final Class classToWrite) throws XMLWriterException {<a name="line.202"></a>
<FONT color="green">203</FONT>    <a name="line.203"></a>
<FONT color="green">204</FONT>            if (classToWrite == null) {<a name="line.204"></a>
<FONT color="green">205</FONT>                throw new NullPointerException("ClassToWrite is null.");<a name="line.205"></a>
<FONT color="green">206</FONT>            }<a name="line.206"></a>
<FONT color="green">207</FONT>    <a name="line.207"></a>
<FONT color="green">208</FONT>            // search direct matches, first the direct definitions ...<a name="line.208"></a>
<FONT color="green">209</FONT>            ManualMappingDefinition manualMapping =<a name="line.209"></a>
<FONT color="green">210</FONT>                this.classToHandlerMapping.getManualMappingDefinition(classToWrite);<a name="line.210"></a>
<FONT color="green">211</FONT>            if (manualMapping == null) {<a name="line.211"></a>
<FONT color="green">212</FONT>                // search the manual mappings from the xml file.<a name="line.212"></a>
<FONT color="green">213</FONT>                manualMapping = getFactoryLoader().getManualMappingDefinition(classToWrite);<a name="line.213"></a>
<FONT color="green">214</FONT>            }<a name="line.214"></a>
<FONT color="green">215</FONT>            if (manualMapping != null) {<a name="line.215"></a>
<FONT color="green">216</FONT>                return loadHandlerClass(manualMapping.getWriteHandler());<a name="line.216"></a>
<FONT color="green">217</FONT>            }<a name="line.217"></a>
<FONT color="green">218</FONT>    <a name="line.218"></a>
<FONT color="green">219</FONT>    <a name="line.219"></a>
<FONT color="green">220</FONT>            // multiplexer definitions can be safely ignored here, as they are used to<a name="line.220"></a>
<FONT color="green">221</FONT>            // map parent classes to more specific child classes. In this case, we already<a name="line.221"></a>
<FONT color="green">222</FONT>            // know the child class and can look up the handler directly.<a name="line.222"></a>
<FONT color="green">223</FONT>    <a name="line.223"></a>
<FONT color="green">224</FONT>            // of course we have to check for multiplexers later, so that we can apply<a name="line.224"></a>
<FONT color="green">225</FONT>            // the mutiplex-attributes.<a name="line.225"></a>
<FONT color="green">226</FONT>    <a name="line.226"></a>
<FONT color="green">227</FONT>            // and finally try the generic handler matches ...<a name="line.227"></a>
<FONT color="green">228</FONT>            if (this.classToHandlerMapping.isGenericHandler(classToWrite)) {<a name="line.228"></a>
<FONT color="green">229</FONT>                return new GenericWriteHandler(<a name="line.229"></a>
<FONT color="green">230</FONT>                    this.classToHandlerMapping.getFactoryForClass(classToWrite)<a name="line.230"></a>
<FONT color="green">231</FONT>                );<a name="line.231"></a>
<FONT color="green">232</FONT>            }<a name="line.232"></a>
<FONT color="green">233</FONT>            if (getFactoryLoader().isGenericHandler(classToWrite)) {<a name="line.233"></a>
<FONT color="green">234</FONT>                return new GenericWriteHandler(getFactoryLoader().getFactoryForClass(classToWrite));<a name="line.234"></a>
<FONT color="green">235</FONT>            }<a name="line.235"></a>
<FONT color="green">236</FONT>    <a name="line.236"></a>
<FONT color="green">237</FONT>            throw new XMLWriterException("Unable to handle " + classToWrite);<a name="line.237"></a>
<FONT color="green">238</FONT>        }<a name="line.238"></a>
<FONT color="green">239</FONT>    <a name="line.239"></a>
<FONT color="green">240</FONT>        /**<a name="line.240"></a>
<FONT color="green">241</FONT>         * Writes the given object with the specified tagname. This method will<a name="line.241"></a>
<FONT color="green">242</FONT>         * do nothing, if the given object is null.<a name="line.242"></a>
<FONT color="green">243</FONT>         *<a name="line.243"></a>
<FONT color="green">244</FONT>         * @param tagName  the tagname for the xml-element containing the object<a name="line.244"></a>
<FONT color="green">245</FONT>         * definition. The tagname must not be null.<a name="line.245"></a>
<FONT color="green">246</FONT>         * @param object  the object which should be written.<a name="line.246"></a>
<FONT color="green">247</FONT>         * @param baseClass  the base class.<a name="line.247"></a>
<FONT color="green">248</FONT>         * @param writer  the xml writer used to write the content, never null.<a name="line.248"></a>
<FONT color="green">249</FONT>         * <a name="line.249"></a>
<FONT color="green">250</FONT>         * @throws IOException if an IOException occures.<a name="line.250"></a>
<FONT color="green">251</FONT>         * @throws XMLWriterException if an object model related error occures during<a name="line.251"></a>
<FONT color="green">252</FONT>         * the writing.<a name="line.252"></a>
<FONT color="green">253</FONT>         */<a name="line.253"></a>
<FONT color="green">254</FONT>        public void write(final String tagName, final Object object, final Class baseClass, final XMLWriter writer)<a name="line.254"></a>
<FONT color="green">255</FONT>            throws IOException, XMLWriterException {<a name="line.255"></a>
<FONT color="green">256</FONT>            if (object == null) {<a name="line.256"></a>
<FONT color="green">257</FONT>                return;<a name="line.257"></a>
<FONT color="green">258</FONT>            }<a name="line.258"></a>
<FONT color="green">259</FONT>            if (tagName == null) {<a name="line.259"></a>
<FONT color="green">260</FONT>                throw new NullPointerException("RootXmlWriteHandler.write(..) : tagName is null");<a name="line.260"></a>
<FONT color="green">261</FONT>            }<a name="line.261"></a>
<FONT color="green">262</FONT>            if (writer == null) {<a name="line.262"></a>
<FONT color="green">263</FONT>                throw new NullPointerException("RootXmlWriteHandler.write(..) : writer is null");<a name="line.263"></a>
<FONT color="green">264</FONT>            }<a name="line.264"></a>
<FONT color="green">265</FONT>            if (!baseClass.isInstance(object)) {<a name="line.265"></a>
<FONT color="green">266</FONT>                throw new ClassCastException("Object is no instance of " + baseClass);<a name="line.266"></a>
<FONT color="green">267</FONT>            }<a name="line.267"></a>
<FONT color="green">268</FONT>            final Class classToWrite = object.getClass();<a name="line.268"></a>
<FONT color="green">269</FONT>            final XmlWriteHandler handler = getMapping(classToWrite);<a name="line.269"></a>
<FONT color="green">270</FONT>            handler.setRootHandler(this);<a name="line.270"></a>
<FONT color="green">271</FONT>    <a name="line.271"></a>
<FONT color="green">272</FONT>            String attributeName = null;<a name="line.272"></a>
<FONT color="green">273</FONT>            String attributeValue = null;<a name="line.273"></a>
<FONT color="green">274</FONT>    <a name="line.274"></a>
<FONT color="green">275</FONT>            // find multiplexer for this class...<a name="line.275"></a>
<FONT color="green">276</FONT>            MultiplexMappingDefinition mplex =<a name="line.276"></a>
<FONT color="green">277</FONT>                getFactoryLoader().getMultiplexDefinition(baseClass);<a name="line.277"></a>
<FONT color="green">278</FONT>            if (mplex == null) {<a name="line.278"></a>
<FONT color="green">279</FONT>                mplex = this.classToHandlerMapping.getMultiplexDefinition(baseClass);<a name="line.279"></a>
<FONT color="green">280</FONT>            }<a name="line.280"></a>
<FONT color="green">281</FONT>            if (mplex != null) {<a name="line.281"></a>
<FONT color="green">282</FONT>                final MultiplexMappingEntry entry =<a name="line.282"></a>
<FONT color="green">283</FONT>                    mplex.getEntryForClass(classToWrite.getName());<a name="line.283"></a>
<FONT color="green">284</FONT>                if (entry != null) {<a name="line.284"></a>
<FONT color="green">285</FONT>                    attributeName = mplex.getAttributeName();<a name="line.285"></a>
<FONT color="green">286</FONT>                    attributeValue = entry.getAttributeValue();<a name="line.286"></a>
<FONT color="green">287</FONT>                }<a name="line.287"></a>
<FONT color="green">288</FONT>                else {<a name="line.288"></a>
<FONT color="green">289</FONT>                    throw new XMLWriterException(<a name="line.289"></a>
<FONT color="green">290</FONT>                        "Unable to find child mapping for multiplexer " <a name="line.290"></a>
<FONT color="green">291</FONT>                        + baseClass + " to child " + classToWrite<a name="line.291"></a>
<FONT color="green">292</FONT>                    );<a name="line.292"></a>
<FONT color="green">293</FONT>                }<a name="line.293"></a>
<FONT color="green">294</FONT>            }<a name="line.294"></a>
<FONT color="green">295</FONT>    <a name="line.295"></a>
<FONT color="green">296</FONT>            handler.write(tagName, object, writer, attributeName, attributeValue);<a name="line.296"></a>
<FONT color="green">297</FONT>            writer.allowLineBreak();<a name="line.297"></a>
<FONT color="green">298</FONT>        }<a name="line.298"></a>
<FONT color="green">299</FONT>    <a name="line.299"></a>
<FONT color="green">300</FONT>        /**<a name="line.300"></a>
<FONT color="green">301</FONT>         * Loads the given class, and ignores all exceptions which may occur<a name="line.301"></a>
<FONT color="green">302</FONT>         * during the loading. If the class was invalid, null is returned instead.<a name="line.302"></a>
<FONT color="green">303</FONT>         *<a name="line.303"></a>
<FONT color="green">304</FONT>         * @param className the name of the class to be loaded.<a name="line.304"></a>
<FONT color="green">305</FONT>         * @return the class or null.<a name="line.305"></a>
<FONT color="green">306</FONT>         * <a name="line.306"></a>
<FONT color="green">307</FONT>         * @throws XMLWriterException if there is a writer exception.<a name="line.307"></a>
<FONT color="green">308</FONT>         */<a name="line.308"></a>
<FONT color="green">309</FONT>        protected XmlWriteHandler loadHandlerClass(final String className)<a name="line.309"></a>
<FONT color="green">310</FONT>            throws XMLWriterException {<a name="line.310"></a>
<FONT color="green">311</FONT>            if (className == null) {<a name="line.311"></a>
<FONT color="green">312</FONT>                throw new XMLWriterException("LoadHanderClass: Class name not defined");<a name="line.312"></a>
<FONT color="green">313</FONT>            }<a name="line.313"></a>
<FONT color="green">314</FONT>            try {<a name="line.314"></a>
<FONT color="green">315</FONT>                final Class c = ObjectUtilities.getClassLoader(getClass()).loadClass(className);<a name="line.315"></a>
<FONT color="green">316</FONT>                return (XmlWriteHandler) c.newInstance();<a name="line.316"></a>
<FONT color="green">317</FONT>            }<a name="line.317"></a>
<FONT color="green">318</FONT>            catch (Exception e) {<a name="line.318"></a>
<FONT color="green">319</FONT>                // ignore buggy classes for now ..<a name="line.319"></a>
<FONT color="green">320</FONT>                throw new XMLWriterException("LoadHanderClass: Unable to instantiate " + className, e);<a name="line.320"></a>
<FONT color="green">321</FONT>            }<a name="line.321"></a>
<FONT color="green">322</FONT>        }<a name="line.322"></a>
<FONT color="green">323</FONT>        <a name="line.323"></a>
<FONT color="green">324</FONT>    }<a name="line.324"></a>




























































</PRE>
</BODY>
</HTML>
