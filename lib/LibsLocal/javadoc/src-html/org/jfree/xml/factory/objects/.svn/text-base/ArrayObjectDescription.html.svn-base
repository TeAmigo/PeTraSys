<HTML>
<BODY BGCOLOR="white">
<PRE>
<FONT color="green">001</FONT>    /* ========================================================================<a name="line.1"></a>
<FONT color="green">002</FONT>     * JCommon : a free general purpose class library for the Java(tm) platform<a name="line.2"></a>
<FONT color="green">003</FONT>     * ========================================================================<a name="line.3"></a>
<FONT color="green">004</FONT>     *<a name="line.4"></a>
<FONT color="green">005</FONT>     * (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.<a name="line.5"></a>
<FONT color="green">006</FONT>     * <a name="line.6"></a>
<FONT color="green">007</FONT>     * Project Info:  http://www.jfree.org/jcommon/index.html<a name="line.7"></a>
<FONT color="green">008</FONT>     *<a name="line.8"></a>
<FONT color="green">009</FONT>     * This library is free software; you can redistribute it and/or modify it <a name="line.9"></a>
<FONT color="green">010</FONT>     * under the terms of the GNU Lesser General Public License as published by <a name="line.10"></a>
<FONT color="green">011</FONT>     * the Free Software Foundation; either version 2.1 of the License, or <a name="line.11"></a>
<FONT color="green">012</FONT>     * (at your option) any later version.<a name="line.12"></a>
<FONT color="green">013</FONT>     *<a name="line.13"></a>
<FONT color="green">014</FONT>     * This library is distributed in the hope that it will be useful, but <a name="line.14"></a>
<FONT color="green">015</FONT>     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY <a name="line.15"></a>
<FONT color="green">016</FONT>     * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public <a name="line.16"></a>
<FONT color="green">017</FONT>     * License for more details.<a name="line.17"></a>
<FONT color="green">018</FONT>     *<a name="line.18"></a>
<FONT color="green">019</FONT>     * You should have received a copy of the GNU Lesser General Public<a name="line.19"></a>
<FONT color="green">020</FONT>     * License along with this library; if not, write to the Free Software<a name="line.20"></a>
<FONT color="green">021</FONT>     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, <a name="line.21"></a>
<FONT color="green">022</FONT>     * USA.  <a name="line.22"></a>
<FONT color="green">023</FONT>     *<a name="line.23"></a>
<FONT color="green">024</FONT>     * [Java is a trademark or registered trademark of Sun Microsystems, Inc. <a name="line.24"></a>
<FONT color="green">025</FONT>     * in the United States and other countries.]<a name="line.25"></a>
<FONT color="green">026</FONT>     * <a name="line.26"></a>
<FONT color="green">027</FONT>     * ---------------------------<a name="line.27"></a>
<FONT color="green">028</FONT>     * ArrayObjectDescription.java<a name="line.28"></a>
<FONT color="green">029</FONT>     * ---------------------------<a name="line.29"></a>
<FONT color="green">030</FONT>     * (C)opyright 2003, 2004, by Thomas Morgner and Contributors.<a name="line.30"></a>
<FONT color="green">031</FONT>     *<a name="line.31"></a>
<FONT color="green">032</FONT>     * Original Author:  Thomas Morgner (taquera@sherito.org);<a name="line.32"></a>
<FONT color="green">033</FONT>     * Contributor(s):   David Gilbert (for Object Refinery Limited);<a name="line.33"></a>
<FONT color="green">034</FONT>     *<a name="line.34"></a>
<FONT color="green">035</FONT>     * $Id: ArrayObjectDescription.java,v 1.4 2006/01/27 18:53:15 taqua Exp $<a name="line.35"></a>
<FONT color="green">036</FONT>     *<a name="line.36"></a>
<FONT color="green">037</FONT>     * Changes<a name="line.37"></a>
<FONT color="green">038</FONT>     * -------<a name="line.38"></a>
<FONT color="green">039</FONT>     * 14-Apr-2003 : Initial version<a name="line.39"></a>
<FONT color="green">040</FONT>     * 29-Apr-2003 : Distilled from the JFreeReport project and moved into JCommon<a name="line.40"></a>
<FONT color="green">041</FONT>     */<a name="line.41"></a>
<FONT color="green">042</FONT>    package org.jfree.xml.factory.objects;<a name="line.42"></a>
<FONT color="green">043</FONT>    <a name="line.43"></a>
<FONT color="green">044</FONT>    import java.lang.reflect.Array;<a name="line.44"></a>
<FONT color="green">045</FONT>    import java.util.ArrayList;<a name="line.45"></a>
<FONT color="green">046</FONT>    import java.util.Iterator;<a name="line.46"></a>
<FONT color="green">047</FONT>    <a name="line.47"></a>
<FONT color="green">048</FONT>    import org.jfree.util.Log;<a name="line.48"></a>
<FONT color="green">049</FONT>    <a name="line.49"></a>
<FONT color="green">050</FONT>    /**<a name="line.50"></a>
<FONT color="green">051</FONT>     * Describes an Object- or primitive value array. This object description is<a name="line.51"></a>
<FONT color="green">052</FONT>     * not intended to be created outside the ArrayClassFactory.<a name="line.52"></a>
<FONT color="green">053</FONT>     *<a name="line.53"></a>
<FONT color="green">054</FONT>     * @author Thomas Morgner<a name="line.54"></a>
<FONT color="green">055</FONT>     */<a name="line.55"></a>
<FONT color="green">056</FONT>    public class ArrayObjectDescription extends AbstractObjectDescription {<a name="line.56"></a>
<FONT color="green">057</FONT>    <a name="line.57"></a>
<FONT color="green">058</FONT>        /**<a name="line.58"></a>
<FONT color="green">059</FONT>         * Constructs a new array objet description for the given array class.<a name="line.59"></a>
<FONT color="green">060</FONT>         * &lt;P&gt;<a name="line.60"></a>
<FONT color="green">061</FONT>         * Note:  throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the given class is no array.<a name="line.61"></a>
<FONT color="green">062</FONT>         * <a name="line.62"></a>
<FONT color="green">063</FONT>         * @param c the array class object.<a name="line.63"></a>
<FONT color="green">064</FONT>         */<a name="line.64"></a>
<FONT color="green">065</FONT>        public ArrayObjectDescription(final Class c) {<a name="line.65"></a>
<FONT color="green">066</FONT>            super(c);<a name="line.66"></a>
<FONT color="green">067</FONT>            if (!c.isArray()) {<a name="line.67"></a>
<FONT color="green">068</FONT>                throw new IllegalArgumentException("Need an array class");<a name="line.68"></a>
<FONT color="green">069</FONT>            }<a name="line.69"></a>
<FONT color="green">070</FONT>        }<a name="line.70"></a>
<FONT color="green">071</FONT>    <a name="line.71"></a>
<FONT color="green">072</FONT>        /**<a name="line.72"></a>
<FONT color="green">073</FONT>         * Creates an object based on the description.<a name="line.73"></a>
<FONT color="green">074</FONT>         *<a name="line.74"></a>
<FONT color="green">075</FONT>         * @return The object.<a name="line.75"></a>
<FONT color="green">076</FONT>         */<a name="line.76"></a>
<FONT color="green">077</FONT>        public Object createObject() {<a name="line.77"></a>
<FONT color="green">078</FONT>            try {<a name="line.78"></a>
<FONT color="green">079</FONT>                final Integer size = (Integer) getParameter("size");<a name="line.79"></a>
<FONT color="green">080</FONT>                if (size == null) {<a name="line.80"></a>
<FONT color="green">081</FONT>                    final ArrayList l = new ArrayList();<a name="line.81"></a>
<FONT color="green">082</FONT>                    int counter = 0;<a name="line.82"></a>
<FONT color="green">083</FONT>                    while (getParameterDefinition(String.valueOf(counter)) != null) {<a name="line.83"></a>
<FONT color="green">084</FONT>                        final Object value = getParameter(String.valueOf(counter));<a name="line.84"></a>
<FONT color="green">085</FONT>                        if (value == null) {<a name="line.85"></a>
<FONT color="green">086</FONT>                            break;<a name="line.86"></a>
<FONT color="green">087</FONT>                        }<a name="line.87"></a>
<FONT color="green">088</FONT>    <a name="line.88"></a>
<FONT color="green">089</FONT>                        l.add(value);<a name="line.89"></a>
<FONT color="green">090</FONT>                        counter += 1;<a name="line.90"></a>
<FONT color="green">091</FONT>                    }<a name="line.91"></a>
<FONT color="green">092</FONT>    <a name="line.92"></a>
<FONT color="green">093</FONT>                    final Object o = Array.newInstance<a name="line.93"></a>
<FONT color="green">094</FONT>                        (getObjectClass().getComponentType(), l.size());<a name="line.94"></a>
<FONT color="green">095</FONT>                    for (int i = 0; i &lt; l.size(); i++) {<a name="line.95"></a>
<FONT color="green">096</FONT>                        Array.set(o, i, l.get(i));<a name="line.96"></a>
<FONT color="green">097</FONT>                    }<a name="line.97"></a>
<FONT color="green">098</FONT>                    return o;<a name="line.98"></a>
<FONT color="green">099</FONT>                }<a name="line.99"></a>
<FONT color="green">100</FONT>                else {<a name="line.100"></a>
<FONT color="green">101</FONT>                    // a size is given, so we can assume that all values are defined.<a name="line.101"></a>
<FONT color="green">102</FONT>                    final Object o = Array.newInstance<a name="line.102"></a>
<FONT color="green">103</FONT>                        (getObjectClass().getComponentType(), size.intValue());<a name="line.103"></a>
<FONT color="green">104</FONT>                    for (int i = 0; i &lt; size.intValue(); i++) {<a name="line.104"></a>
<FONT color="green">105</FONT>                        Array.set(o, i, getParameter(String.valueOf(i)));<a name="line.105"></a>
<FONT color="green">106</FONT>                    }<a name="line.106"></a>
<FONT color="green">107</FONT>                    return o;<a name="line.107"></a>
<FONT color="green">108</FONT>                }<a name="line.108"></a>
<FONT color="green">109</FONT>            }<a name="line.109"></a>
<FONT color="green">110</FONT>            catch (Exception ie) {<a name="line.110"></a>
<FONT color="green">111</FONT>                Log.warn("Unable to instantiate Object", ie);<a name="line.111"></a>
<FONT color="green">112</FONT>                return null;<a name="line.112"></a>
<FONT color="green">113</FONT>            }<a name="line.113"></a>
<FONT color="green">114</FONT>        }<a name="line.114"></a>
<FONT color="green">115</FONT>    <a name="line.115"></a>
<FONT color="green">116</FONT>        /**<a name="line.116"></a>
<FONT color="green">117</FONT>         * Sets the parameters of this description object to match the supplied object.<a name="line.117"></a>
<FONT color="green">118</FONT>         *<a name="line.118"></a>
<FONT color="green">119</FONT>         * @param o  the object.<a name="line.119"></a>
<FONT color="green">120</FONT>         *<a name="line.120"></a>
<FONT color="green">121</FONT>         * @throws ObjectFactoryException if there is a<a name="line.121"></a>
<FONT color="green">122</FONT>         * problem while reading the properties of the given object.<a name="line.122"></a>
<FONT color="green">123</FONT>         */<a name="line.123"></a>
<FONT color="green">124</FONT>        public void setParameterFromObject(final Object o) throws ObjectFactoryException {<a name="line.124"></a>
<FONT color="green">125</FONT>            if (o == null) {<a name="line.125"></a>
<FONT color="green">126</FONT>                throw new ObjectFactoryException("Given object is null.");<a name="line.126"></a>
<FONT color="green">127</FONT>            }<a name="line.127"></a>
<FONT color="green">128</FONT>    <a name="line.128"></a>
<FONT color="green">129</FONT>            if (!o.getClass().isArray()) {<a name="line.129"></a>
<FONT color="green">130</FONT>                throw new ObjectFactoryException("Given object is no array");<a name="line.130"></a>
<FONT color="green">131</FONT>            }<a name="line.131"></a>
<FONT color="green">132</FONT>    <a name="line.132"></a>
<FONT color="green">133</FONT>            if (!getObjectClass().isAssignableFrom(o.getClass())) {<a name="line.133"></a>
<FONT color="green">134</FONT>                throw new ObjectFactoryException("Given object is incompatible with base class");<a name="line.134"></a>
<FONT color="green">135</FONT>            }<a name="line.135"></a>
<FONT color="green">136</FONT>    <a name="line.136"></a>
<FONT color="green">137</FONT>            final int size = Array.getLength(o);<a name="line.137"></a>
<FONT color="green">138</FONT>            setParameter("size", new Integer(size));<a name="line.138"></a>
<FONT color="green">139</FONT>            for (int i = 0; i &lt; size; i++) {<a name="line.139"></a>
<FONT color="green">140</FONT>                setParameter(String.valueOf(i), Array.get(o, i));<a name="line.140"></a>
<FONT color="green">141</FONT>            }<a name="line.141"></a>
<FONT color="green">142</FONT>        }<a name="line.142"></a>
<FONT color="green">143</FONT>    <a name="line.143"></a>
<FONT color="green">144</FONT>        /**<a name="line.144"></a>
<FONT color="green">145</FONT>         * Tries to parse the given parameter string into a positive integer.<a name="line.145"></a>
<FONT color="green">146</FONT>         * Returns -1 if the parsing failed for some reason.<a name="line.146"></a>
<FONT color="green">147</FONT>         *<a name="line.147"></a>
<FONT color="green">148</FONT>         * @param name the name of the parameter.<a name="line.148"></a>
<FONT color="green">149</FONT>         * @return the parsed int value or -1 on errors.<a name="line.149"></a>
<FONT color="green">150</FONT>         */<a name="line.150"></a>
<FONT color="green">151</FONT>        private int parseParameterName(final String name) {<a name="line.151"></a>
<FONT color="green">152</FONT>            try {<a name="line.152"></a>
<FONT color="green">153</FONT>                return Integer.parseInt(name);<a name="line.153"></a>
<FONT color="green">154</FONT>            }<a name="line.154"></a>
<FONT color="green">155</FONT>            catch (Exception e) {<a name="line.155"></a>
<FONT color="green">156</FONT>                return -1;<a name="line.156"></a>
<FONT color="green">157</FONT>            }<a name="line.157"></a>
<FONT color="green">158</FONT>        }<a name="line.158"></a>
<FONT color="green">159</FONT>    <a name="line.159"></a>
<FONT color="green">160</FONT>        /**<a name="line.160"></a>
<FONT color="green">161</FONT>         * Returns a parameter definition. If the parameter is invalid, this<a name="line.161"></a>
<FONT color="green">162</FONT>         * function returns null.<a name="line.162"></a>
<FONT color="green">163</FONT>         *<a name="line.163"></a>
<FONT color="green">164</FONT>         * @param name  the definition name.<a name="line.164"></a>
<FONT color="green">165</FONT>         *<a name="line.165"></a>
<FONT color="green">166</FONT>         * @return The parameter class or null, if the parameter is not defined.<a name="line.166"></a>
<FONT color="green">167</FONT>         */<a name="line.167"></a>
<FONT color="green">168</FONT>        public Class getParameterDefinition(final String name) {<a name="line.168"></a>
<FONT color="green">169</FONT>            if (name.equals("size")) {<a name="line.169"></a>
<FONT color="green">170</FONT>                return Integer.TYPE;<a name="line.170"></a>
<FONT color="green">171</FONT>            }<a name="line.171"></a>
<FONT color="green">172</FONT>            final int par = parseParameterName(name);<a name="line.172"></a>
<FONT color="green">173</FONT>            if (par &lt; 0) {<a name="line.173"></a>
<FONT color="green">174</FONT>                return null;<a name="line.174"></a>
<FONT color="green">175</FONT>            }<a name="line.175"></a>
<FONT color="green">176</FONT>            return getObjectClass().getComponentType();<a name="line.176"></a>
<FONT color="green">177</FONT>        }<a name="line.177"></a>
<FONT color="green">178</FONT>    <a name="line.178"></a>
<FONT color="green">179</FONT>        /**<a name="line.179"></a>
<FONT color="green">180</FONT>         * Returns an iterator for the parameter names.<a name="line.180"></a>
<FONT color="green">181</FONT>         *<a name="line.181"></a>
<FONT color="green">182</FONT>         * @return The iterator.<a name="line.182"></a>
<FONT color="green">183</FONT>         */<a name="line.183"></a>
<FONT color="green">184</FONT>        public Iterator getParameterNames() {<a name="line.184"></a>
<FONT color="green">185</FONT>            final Integer size = (Integer) getParameter("size");<a name="line.185"></a>
<FONT color="green">186</FONT>            if (size == null) {<a name="line.186"></a>
<FONT color="green">187</FONT>                return getDefinedParameterNames();<a name="line.187"></a>
<FONT color="green">188</FONT>            }<a name="line.188"></a>
<FONT color="green">189</FONT>            else {<a name="line.189"></a>
<FONT color="green">190</FONT>                final ArrayList l = new ArrayList();<a name="line.190"></a>
<FONT color="green">191</FONT>                l.add("size");<a name="line.191"></a>
<FONT color="green">192</FONT>                for (int i = 0; i &lt; size.intValue(); i++) {<a name="line.192"></a>
<FONT color="green">193</FONT>                    l.add(String.valueOf(i));<a name="line.193"></a>
<FONT color="green">194</FONT>                }<a name="line.194"></a>
<FONT color="green">195</FONT>                return l.iterator();<a name="line.195"></a>
<FONT color="green">196</FONT>            }<a name="line.196"></a>
<FONT color="green">197</FONT>        }<a name="line.197"></a>
<FONT color="green">198</FONT>    <a name="line.198"></a>
<FONT color="green">199</FONT>        /**<a name="line.199"></a>
<FONT color="green">200</FONT>         * Returns a new instance of the object description.<a name="line.200"></a>
<FONT color="green">201</FONT>         *<a name="line.201"></a>
<FONT color="green">202</FONT>         * @return The object description.<a name="line.202"></a>
<FONT color="green">203</FONT>         */<a name="line.203"></a>
<FONT color="green">204</FONT>        public ObjectDescription getInstance() {<a name="line.204"></a>
<FONT color="green">205</FONT>            return new ArrayObjectDescription(getObjectClass());<a name="line.205"></a>
<FONT color="green">206</FONT>        }<a name="line.206"></a>
<FONT color="green">207</FONT>    }<a name="line.207"></a>




























































</PRE>
</BODY>
</HTML>
